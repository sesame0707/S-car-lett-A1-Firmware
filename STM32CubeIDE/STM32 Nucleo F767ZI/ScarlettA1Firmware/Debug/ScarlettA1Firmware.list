
ScarlettA1Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccc0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  0800cec0  0800cec0  0001cec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8d4  0800e8d4  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8d4  0800e8d4  0001e8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8dc  0800e8dc  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8dc  0800e8dc  0001e8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8e0  0800e8e0  0001e8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800e8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000525c  200000c0  0800e9a4  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000531c  0800e9a4  0002531c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028190  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b0c  00000000  00000000  000482c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  0004ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e1  00000000  00000000  0004fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002def4  00000000  00000000  000514c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002993e  00000000  00000000  0007f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9bb  00000000  00000000  000a8cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008758  00000000  00000000  001b76b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001bfe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c0 	.word	0x200000c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cea8 	.word	0x0800cea8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c4 	.word	0x200000c4
 800023c:	0800cea8 	.word	0x0800cea8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <setLEDStripesEffect>:
 */

#include "commonFunctions.h"

/* LED stripes */
void setLEDStripesEffect(enum StripesEffect stripesEffect, struct DesiredStripesColor *desiredStripesColor) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	switch (stripesEffect) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d832      	bhi.n	8000654 <setLEDStripesEffect+0x78>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <setLEDStripesEffect+0x18>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	08000619 	.word	0x08000619
 80005fc:	0800062d 	.word	0x0800062d
 8000600:	08000641 	.word	0x08000641
	case 0:
		desiredStripesColor->red = 0x00;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
		break;
 8000616:	e01d      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 1:
		desiredStripesColor->red = 0x40;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x20;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2220      	movs	r2, #32
 8000622:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x00;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	709a      	strb	r2, [r3, #2]
		break;
 800062a:	e013      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 2:
		desiredStripesColor->red = 0x40;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x40;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2240      	movs	r2, #64	; 0x40
 800063c:	709a      	strb	r2, [r3, #2]
		break;
 800063e:	e009      	b.n	8000654 <setLEDStripesEffect+0x78>
	case 3:
		desiredStripesColor->red = 0x00;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
		desiredStripesColor->green = 0x00;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	705a      	strb	r2, [r3, #1]
		desiredStripesColor->blue = 0x40;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	709a      	strb	r2, [r3, #2]
		break;
 8000652:	bf00      	nop
	}
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <setBLDCMotorSpeed>:

/* BLDC motor */
void setBLDCMotorSpeed(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	switch(sliderAccelerateDecelerateCurrentValue) {
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <setBLDCMotorSpeed+0xf0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3302      	adds	r3, #2
 800066a:	2b06      	cmp	r3, #6
 800066c:	d84d      	bhi.n	800070a <setBLDCMotorSpeed+0xaa>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <setBLDCMotorSpeed+0x14>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a5 	.word	0x080006a5
 800067c:	080006b7 	.word	0x080006b7
 8000680:	080006c1 	.word	0x080006c1
 8000684:	080006d3 	.word	0x080006d3
 8000688:	080006e7 	.word	0x080006e7
 800068c:	080006f9 	.word	0x080006f9
	case -2:
	  BLDCMotorSpeedVoltage = 0.5;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 8000692:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000696:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 800069e:	f003 fc8d 	bl	8003fbc <HAL_GPIO_WritePin>
	  break;
 80006a2:	e032      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case -1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006a8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006b0:	f003 fc84 	bl	8003fbc <HAL_GPIO_WritePin>
	  break;
 80006b4:	e029      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 0:
	  BLDCMotorSpeedVoltage = 0.0;
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	  break;
 80006be:	e024      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 1:
	  BLDCMotorSpeedVoltage = 0.4;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006c2:	4a26      	ldr	r2, [pc, #152]	; (800075c <setBLDCMotorSpeed+0xfc>)
 80006c4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	4823      	ldr	r0, [pc, #140]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006cc:	f003 fc76 	bl	8003fbc <HAL_GPIO_WritePin>
	  break;
 80006d0:	e01b      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 2:
	  BLDCMotorSpeedVoltage = 0.5;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006d4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80006d8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	481e      	ldr	r0, [pc, #120]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006e0:	f003 fc6c 	bl	8003fbc <HAL_GPIO_WritePin>
	  break;
 80006e4:	e011      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 3:
	  BLDCMotorSpeedVoltage = 0.6;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <setBLDCMotorSpeed+0x100>)
 80006ea:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	4819      	ldr	r0, [pc, #100]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 80006f2:	f003 fc63 	bl	8003fbc <HAL_GPIO_WritePin>
	  break;
 80006f6:	e008      	b.n	800070a <setBLDCMotorSpeed+0xaa>
	case 4:
	  BLDCMotorSpeedVoltage = 0.7;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <setBLDCMotorSpeed+0x104>)
 80006fc:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(BLDCMotorDir_GPIO_Port, BLDCMotorDir_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <setBLDCMotorSpeed+0xf8>)
 8000704:	f003 fc5a 	bl	8003fbc <HAL_GPIO_WritePin>
	  break;
 8000708:	bf00      	nop
	}

	BLDCMotorSpeedValue = BLDCMotorSpeedVoltage * (0xfff + 1) / 3.3;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <setBLDCMotorSpeed+0xf4>)
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000768 <setBLDCMotorSpeed+0x108>
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000718:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800071c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000748 <setBLDCMotorSpeed+0xe8>
 8000720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000724:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000728:	ee17 2a90 	vmov	r2, s15
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <setBLDCMotorSpeed+0x10c>)
 800072e:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, BLDCMotorSpeedValue);
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <setBLDCMotorSpeed+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <setBLDCMotorSpeed+0x110>)
 800073a:	f002 fe01 	bl	8003340 <HAL_DAC_SetValue>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	f3af 8000 	nop.w
 8000748:	66666666 	.word	0x66666666
 800074c:	400a6666 	.word	0x400a6666
 8000750:	200000e8 	.word	0x200000e8
 8000754:	200000f0 	.word	0x200000f0
 8000758:	40020400 	.word	0x40020400
 800075c:	3ecccccd 	.word	0x3ecccccd
 8000760:	3f19999a 	.word	0x3f19999a
 8000764:	3f333333 	.word	0x3f333333
 8000768:	45800000 	.word	0x45800000
 800076c:	200000f4 	.word	0x200000f4
 8000770:	2000010c 	.word	0x2000010c

08000774 <moveStepperMotor>:

/* Stepper motor */
void moveStepperMotor(enum Direction direction) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	if(direction == LEFT) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d106      	bne.n	8000792 <moveStepperMotor+0x1e>
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <moveStepperMotor+0x48>)
 800078c:	f003 fc16 	bl	8003fbc <HAL_GPIO_WritePin>
 8000790:	e005      	b.n	800079e <moveStepperMotor+0x2a>
	} else {
		HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <moveStepperMotor+0x48>)
 800079a:	f003 fc0f 	bl	8003fbc <HAL_GPIO_WritePin>
	}

	TIM4->CCR3 = 500;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <moveStepperMotor+0x4c>)
 80007a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(35);
 80007a6:	2023      	movs	r0, #35	; 0x23
 80007a8:	f008 fb70 	bl	8008e8c <osDelay>
	TIM4->CCR3 = 0;
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <moveStepperMotor+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40000800 	.word	0x40000800

080007c4 <moveStepperMotorUntil>:

void moveStepperMotorUntil(int targetLeftRightPosition) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if(sliderLeftRightCurrentValue == targetLeftRightPosition) {
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d02f      	beq.n	8000836 <moveStepperMotorUntil+0x72>
		// Do nothing
	} else if(sliderLeftRightCurrentValue > targetLeftRightPosition) {
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	da15      	bge.n	800080c <moveStepperMotorUntil+0x48>
		// Turn left until target left/right position is reached
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	e00c      	b.n	8000800 <moveStepperMotorUntil+0x3c>
			moveStepperMotor(LEFT);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ffc4 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 80007ec:	2032      	movs	r0, #50	; 0x32
 80007ee:	f008 fb4d 	bl	8008e8c <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue --) {
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1e5a      	subs	r2, r3, #1
 80007f8:	4911      	ldr	r1, [pc, #68]	; (8000840 <moveStepperMotorUntil+0x7c>)
 80007fa:	600a      	str	r2, [r1, #0]
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <moveStepperMotorUntil+0x80>)
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <moveStepperMotorUntil+0x7c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d1ed      	bne.n	80007e6 <moveStepperMotorUntil+0x22>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
			moveStepperMotor(RIGHT);
			osDelay(LEFT_RIGHT_DURATION);
		}
	}
}
 800080a:	e014      	b.n	8000836 <moveStepperMotorUntil+0x72>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <moveStepperMotorUntil+0x7c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	e00c      	b.n	800082c <moveStepperMotorUntil+0x68>
			moveStepperMotor(RIGHT);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ffae 	bl	8000774 <moveStepperMotor>
			osDelay(LEFT_RIGHT_DURATION);
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f008 fb37 	bl	8008e8c <osDelay>
		for(sliderLeftRightCurrentValue; sliderLeftRightCurrentValue != targetLeftRightPosition; sliderLeftRightPreviousValue = sliderLeftRightCurrentValue ++) {
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <moveStepperMotorUntil+0x7c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <moveStepperMotorUntil+0x7c>)
 8000826:	600a      	str	r2, [r1, #0]
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <moveStepperMotorUntil+0x80>)
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <moveStepperMotorUntil+0x7c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	429a      	cmp	r2, r3
 8000834:	d1ed      	bne.n	8000812 <moveStepperMotorUntil+0x4e>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000fc 	.word	0x200000fc
 8000844:	200000f8 	.word	0x200000f8

08000848 <park>:

/* LiDAR sphere */
void park(enum Direction direction) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	// Private variables
	int targetLeftRightPosition = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]

	// Stop BLDC motor
	sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000856:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <park+0x10c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a3f      	ldr	r2, [pc, #252]	; (8000958 <park+0x110>)
 800085c:	6013      	str	r3, [r2, #0]
	sliderAccelerateDecelerateCurrentValue = 0;
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <park+0x10c>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
	setBLDCMotorSpeed();
 8000864:	f7ff fefc 	bl	8000660 <setBLDCMotorSpeed>

	// Set LED stripes
	stripesEffect = PARKING;
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <park+0x114>)
 800086a:	2203      	movs	r2, #3
 800086c:	701a      	strb	r2, [r3, #0]
	ommitToggle = true;
 800086e:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <park+0x118>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <park+0x11c>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <park+0x120>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f009 fd14 	bl	800a2ac <vTaskResume>

	// Toggle left/right blinkers
	if(direction == LEFT) {
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d108      	bne.n	800089c <park+0x54>
		internalFunctionCall = true;
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <park+0x11c>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
		vTaskResume(LeftBlinkersTasHandle);
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <park+0x124>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f009 fd09 	bl	800a2ac <vTaskResume>
 800089a:	e007      	b.n	80008ac <park+0x64>
	} else {
		internalFunctionCall = true;
 800089c:	4b31      	ldr	r3, [pc, #196]	; (8000964 <park+0x11c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
		vTaskResume(RightBlinkersTaHandle);
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <park+0x128>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f009 fd00 	bl	800a2ac <vTaskResume>
	}

	// Turn left/right to the destination
	if(direction == LEFT) {
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d103      	bne.n	80008ba <park+0x72>
		targetLeftRightPosition = -3;
 80008b2:	f06f 0302 	mvn.w	r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e001      	b.n	80008be <park+0x76>
	} else {
		targetLeftRightPosition = 3;
 80008ba:	2303      	movs	r3, #3
 80008bc:	60fb      	str	r3, [r7, #12]
	}
	moveStepperMotorUntil(targetLeftRightPosition);
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f7ff ff80 	bl	80007c4 <moveStepperMotorUntil>

	// Withdraw a little bit
	internalFunctionCall = true;
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <park+0x11c>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <park+0x12c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f009 fcec 	bl	800a2ac <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION);
 80008d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d8:	f008 fad8 	bl	8008e8c <osDelay>
	internalFunctionCall = true;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <park+0x11c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <park+0x130>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f009 fce0 	bl	800a2ac <vTaskResume>

	// Turn left/right from the destination
	targetLeftRightPosition = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	moveStepperMotorUntil(targetLeftRightPosition);
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f7ff ff67 	bl	80007c4 <moveStepperMotorUntil>

	// Drive forward a little bit
	internalFunctionCall = true;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <park+0x11c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
	vTaskResume(AccelerateTaskHandle);
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <park+0x130>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f009 fcd3 	bl	800a2ac <vTaskResume>
	osDelay(ACCELERATE_DECELERATE_DURATION / 2);
 8000906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090a:	f008 fabf 	bl	8008e8c <osDelay>
	internalFunctionCall = true;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <park+0x11c>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
	vTaskResume(DecelerateTaskHandle);
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <park+0x12c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f009 fcc7 	bl	800a2ac <vTaskResume>

	// Set LED stripes
	if(isOn) {
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <park+0x134>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <park+0xe8>
		stripesEffect = DEFAULT;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <park+0x114>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	e002      	b.n	8000936 <park+0xee>
	} else {
		stripesEffect = NONE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <park+0x114>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
	}
	ommitToggle = true;
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <park+0x118>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
	internalFunctionCall = true;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <park+0x11c>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
	vTaskResume(LEDStripesTaskHandle);
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <park+0x120>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f009 fcb0 	bl	800a2ac <vTaskResume>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000e8 	.word	0x200000e8
 8000958:	200000e4 	.word	0x200000e4
 800095c:	200000de 	.word	0x200000de
 8000960:	200000e0 	.word	0x200000e0
 8000964:	200000dc 	.word	0x200000dc
 8000968:	20000130 	.word	0x20000130
 800096c:	20000134 	.word	0x20000134
 8000970:	20000138 	.word	0x20000138
 8000974:	20000148 	.word	0x20000148
 8000978:	20000144 	.word	0x20000144
 800097c:	200000df 	.word	0x200000df

08000980 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_DAC_Init+0x4c>)
 8000990:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MX_DAC_Init+0x50>)
 8000992:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_DAC_Init+0x4c>)
 8000996:	f002 fc05 	bl	80031a4 <HAL_DAC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009a0:	f001 f9d2 	bl	8001d48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_DAC_Init+0x4c>)
 80009b4:	f002 fcf3 	bl	800339e <HAL_DAC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009be:	f001 f9c3 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000010c 	.word	0x2000010c
 80009d0:	40007400 	.word	0x40007400

080009d4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12b      	bne.n	8000a4e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 80009fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BLDCMotorStep_Pin;
 8000a26:	2310      	movs	r3, #16
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLDCMotorStep_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <HAL_DAC_MspInit+0x8c>)
 8000a3a:	f003 f913 	bl	8003c64 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2105      	movs	r1, #5
 8000a42:	2036      	movs	r0, #54	; 0x36
 8000a44:	f002 fb84 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a48:	2036      	movs	r0, #54	; 0x36
 8000a4a:	f002 fb9d 	bl	8003188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40007400 	.word	0x40007400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_DMA_Init+0x38>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <MX_DMA_Init+0x38>)
 8000a70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_DMA_Init+0x38>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2105      	movs	r1, #5
 8000a86:	203b      	movs	r0, #59	; 0x3b
 8000a88:	f002 fb62 	bl	8003150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a8c:	203b      	movs	r0, #59	; 0x3b
 8000a8e:	f002 fb7b 	bl	8003188 <HAL_NVIC_EnableIRQ>

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of ConnectionTaskTimer */
  ConnectionTaskTimerHandle = osTimerNew(CallbackConnectionTaskTimer, osTimerOnce, NULL, &ConnectionTaskTimer_attributes);
 8000aa4:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <MX_FREERTOS_Init+0x12c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4849      	ldr	r0, [pc, #292]	; (8000bd0 <MX_FREERTOS_Init+0x130>)
 8000aac:	f008 fa32 	bl	8008f14 <osTimerNew>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a48      	ldr	r2, [pc, #288]	; (8000bd4 <MX_FREERTOS_Init+0x134>)
 8000ab4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000ab6:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <MX_FREERTOS_Init+0x138>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4848      	ldr	r0, [pc, #288]	; (8000bdc <MX_FREERTOS_Init+0x13c>)
 8000abc:	f008 f940 	bl	8008d40 <osThreadNew>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <MX_FREERTOS_Init+0x140>)
 8000ac4:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartDispatcherTask, NULL, &DispatcherTask_attributes);
 8000ac6:	4a47      	ldr	r2, [pc, #284]	; (8000be4 <MX_FREERTOS_Init+0x144>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4847      	ldr	r0, [pc, #284]	; (8000be8 <MX_FREERTOS_Init+0x148>)
 8000acc:	f008 f938 	bl	8008d40 <osThreadNew>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <MX_FREERTOS_Init+0x14c>)
 8000ad4:	6013      	str	r3, [r2, #0]

  /* creation of StopTask */
  StopTaskHandle = osThreadNew(StartStopTask, NULL, &StopTask_attributes);
 8000ad6:	4a46      	ldr	r2, [pc, #280]	; (8000bf0 <MX_FREERTOS_Init+0x150>)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4846      	ldr	r0, [pc, #280]	; (8000bf4 <MX_FREERTOS_Init+0x154>)
 8000adc:	f008 f930 	bl	8008d40 <osThreadNew>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4a45      	ldr	r2, [pc, #276]	; (8000bf8 <MX_FREERTOS_Init+0x158>)
 8000ae4:	6013      	str	r3, [r2, #0]

  /* creation of DrivingLightsTa */
  DrivingLightsTaHandle = osThreadNew(StartDrivingLightsTask, NULL, &DrivingLightsTa_attributes);
 8000ae6:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <MX_FREERTOS_Init+0x15c>)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4845      	ldr	r0, [pc, #276]	; (8000c00 <MX_FREERTOS_Init+0x160>)
 8000aec:	f008 f928 	bl	8008d40 <osThreadNew>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4a44      	ldr	r2, [pc, #272]	; (8000c04 <MX_FREERTOS_Init+0x164>)
 8000af4:	6013      	str	r3, [r2, #0]

  /* creation of LEDStripesTask */
  LEDStripesTaskHandle = osThreadNew(StartLEDStripesTask, NULL, &LEDStripesTask_attributes);
 8000af6:	4a44      	ldr	r2, [pc, #272]	; (8000c08 <MX_FREERTOS_Init+0x168>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	4844      	ldr	r0, [pc, #272]	; (8000c0c <MX_FREERTOS_Init+0x16c>)
 8000afc:	f008 f920 	bl	8008d40 <osThreadNew>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a43      	ldr	r2, [pc, #268]	; (8000c10 <MX_FREERTOS_Init+0x170>)
 8000b04:	6013      	str	r3, [r2, #0]

  /* creation of LeftBlinkersTas */
  LeftBlinkersTasHandle = osThreadNew(StartLeftBlinkersTask, NULL, &LeftBlinkersTas_attributes);
 8000b06:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <MX_FREERTOS_Init+0x174>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4843      	ldr	r0, [pc, #268]	; (8000c18 <MX_FREERTOS_Init+0x178>)
 8000b0c:	f008 f918 	bl	8008d40 <osThreadNew>
 8000b10:	4603      	mov	r3, r0
 8000b12:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <MX_FREERTOS_Init+0x17c>)
 8000b14:	6013      	str	r3, [r2, #0]

  /* creation of RightBlinkersTa */
  RightBlinkersTaHandle = osThreadNew(StartRightBlinkersTask, NULL, &RightBlinkersTa_attributes);
 8000b16:	4a42      	ldr	r2, [pc, #264]	; (8000c20 <MX_FREERTOS_Init+0x180>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4842      	ldr	r0, [pc, #264]	; (8000c24 <MX_FREERTOS_Init+0x184>)
 8000b1c:	f008 f910 	bl	8008d40 <osThreadNew>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a41      	ldr	r2, [pc, #260]	; (8000c28 <MX_FREERTOS_Init+0x188>)
 8000b24:	6013      	str	r3, [r2, #0]

  /* creation of ParkLeftTask */
  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000b26:	4a41      	ldr	r2, [pc, #260]	; (8000c2c <MX_FREERTOS_Init+0x18c>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4841      	ldr	r0, [pc, #260]	; (8000c30 <MX_FREERTOS_Init+0x190>)
 8000b2c:	f008 f908 	bl	8008d40 <osThreadNew>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <MX_FREERTOS_Init+0x194>)
 8000b34:	6013      	str	r3, [r2, #0]

  /* creation of ParkRightTask */
  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000b36:	4a40      	ldr	r2, [pc, #256]	; (8000c38 <MX_FREERTOS_Init+0x198>)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4840      	ldr	r0, [pc, #256]	; (8000c3c <MX_FREERTOS_Init+0x19c>)
 8000b3c:	f008 f900 	bl	8008d40 <osThreadNew>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a3f      	ldr	r2, [pc, #252]	; (8000c40 <MX_FREERTOS_Init+0x1a0>)
 8000b44:	6013      	str	r3, [r2, #0]

  /* creation of AccelerateTask */
  AccelerateTaskHandle = osThreadNew(StartAccelerateTask, NULL, &AccelerateTask_attributes);
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <MX_FREERTOS_Init+0x1a4>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	483f      	ldr	r0, [pc, #252]	; (8000c48 <MX_FREERTOS_Init+0x1a8>)
 8000b4c:	f008 f8f8 	bl	8008d40 <osThreadNew>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a3e      	ldr	r2, [pc, #248]	; (8000c4c <MX_FREERTOS_Init+0x1ac>)
 8000b54:	6013      	str	r3, [r2, #0]

  /* creation of DecelerateTask */
  DecelerateTaskHandle = osThreadNew(StartDecelerateTask, NULL, &DecelerateTask_attributes);
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <MX_FREERTOS_Init+0x1b0>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	483e      	ldr	r0, [pc, #248]	; (8000c54 <MX_FREERTOS_Init+0x1b4>)
 8000b5c:	f008 f8f0 	bl	8008d40 <osThreadNew>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a3d      	ldr	r2, [pc, #244]	; (8000c58 <MX_FREERTOS_Init+0x1b8>)
 8000b64:	6013      	str	r3, [r2, #0]

  /* creation of TurnLeftTask */
  TurnLeftTaskHandle = osThreadNew(StartTurnLeftTask, NULL, &TurnLeftTask_attributes);
 8000b66:	4a3d      	ldr	r2, [pc, #244]	; (8000c5c <MX_FREERTOS_Init+0x1bc>)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	483d      	ldr	r0, [pc, #244]	; (8000c60 <MX_FREERTOS_Init+0x1c0>)
 8000b6c:	f008 f8e8 	bl	8008d40 <osThreadNew>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a3c      	ldr	r2, [pc, #240]	; (8000c64 <MX_FREERTOS_Init+0x1c4>)
 8000b74:	6013      	str	r3, [r2, #0]

  /* creation of TurnRightTask */
  TurnRightTaskHandle = osThreadNew(StartTurnRightTask, NULL, &TurnRightTask_attributes);
 8000b76:	4a3c      	ldr	r2, [pc, #240]	; (8000c68 <MX_FREERTOS_Init+0x1c8>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	483c      	ldr	r0, [pc, #240]	; (8000c6c <MX_FREERTOS_Init+0x1cc>)
 8000b7c:	f008 f8e0 	bl	8008d40 <osThreadNew>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a3b      	ldr	r2, [pc, #236]	; (8000c70 <MX_FREERTOS_Init+0x1d0>)
 8000b84:	6013      	str	r3, [r2, #0]

  /* creation of ConnectionTask */
  ConnectionTaskHandle = osThreadNew(StartConnectionTask, NULL, &ConnectionTask_attributes);
 8000b86:	4a3b      	ldr	r2, [pc, #236]	; (8000c74 <MX_FREERTOS_Init+0x1d4>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	483b      	ldr	r0, [pc, #236]	; (8000c78 <MX_FREERTOS_Init+0x1d8>)
 8000b8c:	f008 f8d8 	bl	8008d40 <osThreadNew>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a3a      	ldr	r2, [pc, #232]	; (8000c7c <MX_FREERTOS_Init+0x1dc>)
 8000b94:	6013      	str	r3, [r2, #0]

  /* creation of BrakeLightsTask */
  BrakeLightsTaskHandle = osThreadNew(StartBrakeLightsTask, NULL, &BrakeLightsTask_attributes);
 8000b96:	4a3a      	ldr	r2, [pc, #232]	; (8000c80 <MX_FREERTOS_Init+0x1e0>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	483a      	ldr	r0, [pc, #232]	; (8000c84 <MX_FREERTOS_Init+0x1e4>)
 8000b9c:	f008 f8d0 	bl	8008d40 <osThreadNew>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <MX_FREERTOS_Init+0x1e8>)
 8000ba4:	6013      	str	r3, [r2, #0]

  /* creation of WithdrawLightsT */
  WithdrawLightsTHandle = osThreadNew(StartWithdrawLightsTask, NULL, &WithdrawLightsT_attributes);
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <MX_FREERTOS_Init+0x1ec>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4839      	ldr	r0, [pc, #228]	; (8000c90 <MX_FREERTOS_Init+0x1f0>)
 8000bac:	f008 f8c8 	bl	8008d40 <osThreadNew>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <MX_FREERTOS_Init+0x1f4>)
 8000bb4:	6013      	str	r3, [r2, #0]

  /* creation of ResumeFromStopT */
  ResumeFromStopTHandle = osThreadNew(StartResumeFromStopTask, NULL, &ResumeFromStopT_attributes);
 8000bb6:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <MX_FREERTOS_Init+0x1f8>)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4838      	ldr	r0, [pc, #224]	; (8000c9c <MX_FREERTOS_Init+0x1fc>)
 8000bbc:	f008 f8c0 	bl	8008d40 <osThreadNew>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <MX_FREERTOS_Init+0x200>)
 8000bc4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	0800d3a8 	.word	0x0800d3a8
 8000bd0:	080017a5 	.word	0x080017a5
 8000bd4:	20000164 	.word	0x20000164
 8000bd8:	0800d144 	.word	0x0800d144
 8000bdc:	08000ca5 	.word	0x08000ca5
 8000be0:	20000120 	.word	0x20000120
 8000be4:	0800d168 	.word	0x0800d168
 8000be8:	08000dc1 	.word	0x08000dc1
 8000bec:	20000124 	.word	0x20000124
 8000bf0:	0800d18c 	.word	0x0800d18c
 8000bf4:	08000edd 	.word	0x08000edd
 8000bf8:	20000128 	.word	0x20000128
 8000bfc:	0800d1b0 	.word	0x0800d1b0
 8000c00:	08000fd5 	.word	0x08000fd5
 8000c04:	2000012c 	.word	0x2000012c
 8000c08:	0800d1d4 	.word	0x0800d1d4
 8000c0c:	08001039 	.word	0x08001039
 8000c10:	20000130 	.word	0x20000130
 8000c14:	0800d1f8 	.word	0x0800d1f8
 8000c18:	0800129d 	.word	0x0800129d
 8000c1c:	20000134 	.word	0x20000134
 8000c20:	0800d21c 	.word	0x0800d21c
 8000c24:	08001319 	.word	0x08001319
 8000c28:	20000138 	.word	0x20000138
 8000c2c:	0800d240 	.word	0x0800d240
 8000c30:	08001395 	.word	0x08001395
 8000c34:	2000013c 	.word	0x2000013c
 8000c38:	0800d264 	.word	0x0800d264
 8000c3c:	080013e9 	.word	0x080013e9
 8000c40:	20000140 	.word	0x20000140
 8000c44:	0800d288 	.word	0x0800d288
 8000c48:	0800143d 	.word	0x0800143d
 8000c4c:	20000144 	.word	0x20000144
 8000c50:	0800d2ac 	.word	0x0800d2ac
 8000c54:	080014e9 	.word	0x080014e9
 8000c58:	20000148 	.word	0x20000148
 8000c5c:	0800d2d0 	.word	0x0800d2d0
 8000c60:	080015a5 	.word	0x080015a5
 8000c64:	2000014c 	.word	0x2000014c
 8000c68:	0800d2f4 	.word	0x0800d2f4
 8000c6c:	08001625 	.word	0x08001625
 8000c70:	20000150 	.word	0x20000150
 8000c74:	0800d318 	.word	0x0800d318
 8000c78:	080016a1 	.word	0x080016a1
 8000c7c:	20000154 	.word	0x20000154
 8000c80:	0800d33c 	.word	0x0800d33c
 8000c84:	080016dd 	.word	0x080016dd
 8000c88:	20000158 	.word	0x20000158
 8000c8c:	0800d360 	.word	0x0800d360
 8000c90:	0800170d 	.word	0x0800170d
 8000c94:	2000015c 	.word	0x2000015c
 8000c98:	0800d384 	.word	0x0800d384
 8000c9c:	08001749 	.word	0x08001749
 8000ca0:	20000160 	.word	0x20000160

08000ca4 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Prepare bodyVersion string
	strcat(bodyVersion, versionName);
 8000cac:	493b      	ldr	r1, [pc, #236]	; (8000d9c <StartOLEDTask+0xf8>)
 8000cae:	483c      	ldr	r0, [pc, #240]	; (8000da0 <StartOLEDTask+0xfc>)
 8000cb0:	f00b fa71 	bl	800c196 <strcat>

	// Initiate display
	ssd1306_Init();
 8000cb4:	f001 f95a 	bl	8001f6c <ssd1306_Init>
	uint8_t y = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
	ssd1306_Fill(Black);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f001 f9bf 	bl	8002040 <ssd1306_Fill>

	// Set header
	ssd1306_SetCursor(2, y);
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f001 fafc 	bl	80022c4 <ssd1306_SetCursor>
	ssd1306_WriteString(headerBootingUp, Font_7x10, White);
 8000ccc:	4a35      	ldr	r2, [pc, #212]	; (8000da4 <StartOLEDTask+0x100>)
 8000cce:	2301      	movs	r3, #1
 8000cd0:	ca06      	ldmia	r2, {r1, r2}
 8000cd2:	4835      	ldr	r0, [pc, #212]	; (8000da8 <StartOLEDTask+0x104>)
 8000cd4:	f001 fad0 	bl	8002278 <ssd1306_WriteString>
	y += 30;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	331e      	adds	r3, #30
 8000cdc:	73fb      	strb	r3, [r7, #15]

	// Set body
	ssd1306_SetCursor(2, y);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f001 faee 	bl	80022c4 <ssd1306_SetCursor>
	ssd1306_WriteString(bodyVersion, Font_11x18, White);
 8000ce8:	4a30      	ldr	r2, [pc, #192]	; (8000dac <StartOLEDTask+0x108>)
 8000cea:	2301      	movs	r3, #1
 8000cec:	ca06      	ldmia	r2, {r1, r2}
 8000cee:	482c      	ldr	r0, [pc, #176]	; (8000da0 <StartOLEDTask+0xfc>)
 8000cf0:	f001 fac2 	bl	8002278 <ssd1306_WriteString>
	y += 36;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	3324      	adds	r3, #36	; 0x24
 8000cf8:	73fb      	strb	r3, [r7, #15]

	// Show content
	ssd1306_UpdateScreen();
 8000cfa:	f001 f9b9 	bl	8002070 <ssd1306_UpdateScreen>
	y = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]

	// Delay
	osDelay(STARTUP_DURATION);
 8000d02:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d06:	f008 f8c1 	bl	8008e8c <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // Clear screen
	  ssd1306_Fill(Black);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f001 f998 	bl	8002040 <ssd1306_Fill>

	  if(isConnected) {
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <StartOLEDTask+0x10c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d01c      	beq.n	8000d54 <StartOLEDTask+0xb0>
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f001 fad0 	bl	80022c4 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerConnected, Font_7x10, White);
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <StartOLEDTask+0x100>)
 8000d26:	2301      	movs	r3, #1
 8000d28:	ca06      	ldmia	r2, {r1, r2}
 8000d2a:	4822      	ldr	r0, [pc, #136]	; (8000db4 <StartOLEDTask+0x110>)
 8000d2c:	f001 faa4 	bl	8002278 <ssd1306_WriteString>
		  y += 30;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	331e      	adds	r3, #30
 8000d34:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f001 fac2 	bl	80022c4 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <StartOLEDTask+0x108>)
 8000d42:	2301      	movs	r3, #1
 8000d44:	ca06      	ldmia	r2, {r1, r2}
 8000d46:	481c      	ldr	r0, [pc, #112]	; (8000db8 <StartOLEDTask+0x114>)
 8000d48:	f001 fa96 	bl	8002278 <ssd1306_WriteString>
		  y += 36;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	3324      	adds	r3, #36	; 0x24
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e01b      	b.n	8000d8c <StartOLEDTask+0xe8>
	  } else {
		  // Set header
		  ssd1306_SetCursor(2, y);
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	4619      	mov	r1, r3
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f001 fab3 	bl	80022c4 <ssd1306_SetCursor>
		  ssd1306_WriteString(headerDisconnected, Font_7x10, White);
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <StartOLEDTask+0x100>)
 8000d60:	2301      	movs	r3, #1
 8000d62:	ca06      	ldmia	r2, {r1, r2}
 8000d64:	4815      	ldr	r0, [pc, #84]	; (8000dbc <StartOLEDTask+0x118>)
 8000d66:	f001 fa87 	bl	8002278 <ssd1306_WriteString>
		  y += 30;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	331e      	adds	r3, #30
 8000d6e:	73fb      	strb	r3, [r7, #15]

		  // Set body
		  ssd1306_SetCursor(2, y);
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	4619      	mov	r1, r3
 8000d74:	2002      	movs	r0, #2
 8000d76:	f001 faa5 	bl	80022c4 <ssd1306_SetCursor>
		  ssd1306_WriteString(bodyLogotype, Font_11x18, White);
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <StartOLEDTask+0x108>)
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	ca06      	ldmia	r2, {r1, r2}
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <StartOLEDTask+0x114>)
 8000d82:	f001 fa79 	bl	8002278 <ssd1306_WriteString>
		  y += 36;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3324      	adds	r3, #36	; 0x24
 8000d8a:	73fb      	strb	r3, [r7, #15]
	  }

	  // Show content
	  ssd1306_UpdateScreen();
 8000d8c:	f001 f970 	bl	8002070 <ssd1306_UpdateScreen>
	  y = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]

	  vTaskSuspend(NULL);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f009 f9dd 	bl	800a154 <vTaskSuspend>
	  ssd1306_Fill(Black);
 8000d9a:	e7b6      	b.n	8000d0a <StartOLEDTask+0x66>
 8000d9c:	0800d140 	.word	0x0800d140
 8000da0:	2000002c 	.word	0x2000002c
 8000da4:	20000044 	.word	0x20000044
 8000da8:	20000000 	.word	0x20000000
 8000dac:	2000004c 	.word	0x2000004c
 8000db0:	200000dd 	.word	0x200000dd
 8000db4:	20000020 	.word	0x20000020
 8000db8:	20000038 	.word	0x20000038
 8000dbc:	20000010 	.word	0x20000010

08000dc0 <StartDispatcherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispatcherTask */
void StartDispatcherTask(void *argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispatcherTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f009 f9c3 	bl	800a154 <vTaskSuspend>

	  switch(RxBuffer[0]) {
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <StartDispatcherTask+0xe8>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	2b0d      	cmp	r3, #13
 8000dd8:	d860      	bhi.n	8000e9c <StartDispatcherTask+0xdc>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <StartDispatcherTask+0x20>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e19 	.word	0x08000e19
 8000de4:	08000e25 	.word	0x08000e25
 8000de8:	08000e31 	.word	0x08000e31
 8000dec:	08000e3d 	.word	0x08000e3d
 8000df0:	08000e49 	.word	0x08000e49
 8000df4:	08000e55 	.word	0x08000e55
 8000df8:	08000e61 	.word	0x08000e61
 8000dfc:	08000e9d 	.word	0x08000e9d
 8000e00:	08000e9d 	.word	0x08000e9d
 8000e04:	08000e9d 	.word	0x08000e9d
 8000e08:	08000e6d 	.word	0x08000e6d
 8000e0c:	08000e79 	.word	0x08000e79
 8000e10:	08000e85 	.word	0x08000e85
 8000e14:	08000e91 	.word	0x08000e91
		case 0x01:		// Stop vehicle.
			vTaskResume(StopTaskHandle);
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <StartDispatcherTask+0xec>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f009 fa45 	bl	800a2ac <vTaskResume>
			break;
 8000e22:	e040      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x02:		// Toggle driving lights.
			vTaskResume(DrivingLightsTaHandle);
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <StartDispatcherTask+0xf0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f009 fa3f 	bl	800a2ac <vTaskResume>
			break;
 8000e2e:	e03a      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x03:		// Toggle RGB stripe.
			vTaskResume(LEDStripesTaskHandle);
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <StartDispatcherTask+0xf4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f009 fa39 	bl	800a2ac <vTaskResume>
			break;
 8000e3a:	e034      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x04:		// Turn left blinkers on.
			vTaskResume(LeftBlinkersTasHandle);
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <StartDispatcherTask+0xf8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f009 fa33 	bl	800a2ac <vTaskResume>
			break;
 8000e46:	e02e      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x05:		// Turn right blinkers on.
			vTaskResume(RightBlinkersTaHandle);
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <StartDispatcherTask+0xfc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f009 fa2d 	bl	800a2ac <vTaskResume>
			break;
 8000e52:	e028      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x06:		// Toggle parking to the left.
			vTaskResume(ParkLeftTaskHandle);
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <StartDispatcherTask+0x100>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f009 fa27 	bl	800a2ac <vTaskResume>
			break;
 8000e5e:	e022      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x07:		// Toggle parking to the right.
			vTaskResume(ParkRightTaskHandle);
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <StartDispatcherTask+0x104>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f009 fa21 	bl	800a2ac <vTaskResume>
			break;
 8000e6a:	e01c      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x0B:		// Accelerate.
			vTaskResume(AccelerateTaskHandle);
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <StartDispatcherTask+0x108>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f009 fa1b 	bl	800a2ac <vTaskResume>
			break;
 8000e76:	e016      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x0C:		// Decelerate.
			vTaskResume(DecelerateTaskHandle);
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <StartDispatcherTask+0x10c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f009 fa15 	bl	800a2ac <vTaskResume>
			break;
 8000e82:	e010      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x0D:		// Turn left.
			vTaskResume(TurnLeftTaskHandle);
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <StartDispatcherTask+0x110>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f009 fa0f 	bl	800a2ac <vTaskResume>
			break;
 8000e8e:	e00a      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		case 0x0E:		// Turn right.
			vTaskResume(TurnRightTaskHandle);
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <StartDispatcherTask+0x114>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f009 fa09 	bl	800a2ac <vTaskResume>
			break;
 8000e9a:	e004      	b.n	8000ea6 <StartDispatcherTask+0xe6>
		default:		// Acknowledge connection.
			vTaskResume(ConnectionTaskHandle);
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <StartDispatcherTask+0x118>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f009 fa03 	bl	800a2ac <vTaskResume>
	  vTaskSuspend(NULL);
 8000ea6:	e78f      	b.n	8000dc8 <StartDispatcherTask+0x8>
 8000ea8:	20000104 	.word	0x20000104
 8000eac:	20000128 	.word	0x20000128
 8000eb0:	2000012c 	.word	0x2000012c
 8000eb4:	20000130 	.word	0x20000130
 8000eb8:	20000134 	.word	0x20000134
 8000ebc:	20000138 	.word	0x20000138
 8000ec0:	2000013c 	.word	0x2000013c
 8000ec4:	20000140 	.word	0x20000140
 8000ec8:	20000144 	.word	0x20000144
 8000ecc:	20000148 	.word	0x20000148
 8000ed0:	2000014c 	.word	0x2000014c
 8000ed4:	20000150 	.word	0x20000150
 8000ed8:	20000154 	.word	0x20000154

08000edc <StartStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStopTask */
void StartStopTask(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f009 f935 	bl	800a154 <vTaskSuspend>

	  // Stop parking if applicable
	  vTaskSuspend(ParkLeftTaskHandle);
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <StartStopTask+0xbc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f009 f930 	bl	800a154 <vTaskSuspend>
	  vTaskSuspend(ParkRightTaskHandle);
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <StartStopTask+0xc0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f009 f92b 	bl	800a154 <vTaskSuspend>

	  // Stop BLDC motor
	  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <StartStopTask+0xc4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <StartStopTask+0xc8>)
 8000f04:	6013      	str	r3, [r2, #0]
	  sliderAccelerateDecelerateCurrentValue = 0;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <StartStopTask+0xc4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	  setBLDCMotorSpeed();
 8000f0c:	f7ff fba8 	bl	8000660 <setBLDCMotorSpeed>

	  // Set LED stripes
	  isStopped = true;
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <StartStopTask+0xcc>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
	  stripesEffect = STOP;
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <StartStopTask+0xd0>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	701a      	strb	r2, [r3, #0]
	  ommitToggle = true;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <StartStopTask+0xd4>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
	  internalFunctionCall = true;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <StartStopTask+0xd8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
	  vTaskResume(LEDStripesTaskHandle);
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <StartStopTask+0xdc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 f9bd 	bl	800a2ac <vTaskResume>

	  // Home stepper motor
	  moveStepperMotorUntil(0);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fc46 	bl	80007c4 <moveStepperMotorUntil>

	  // Reset parking state
	  isParking = false;
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <StartStopTask+0xe0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
	  vTaskDelete(ParkLeftTaskHandle);
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <StartStopTask+0xbc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f009 f85c 	bl	800a000 <vTaskDelete>
	  vTaskDelete(ParkRightTaskHandle);
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <StartStopTask+0xc0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f009 f857 	bl	800a000 <vTaskDelete>
	  ParkLeftTaskHandle = osThreadNew(StartParkLeftTask, NULL, &ParkLeftTask_attributes);
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <StartStopTask+0xe4>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <StartStopTask+0xe8>)
 8000f58:	f007 fef2 	bl	8008d40 <osThreadNew>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <StartStopTask+0xbc>)
 8000f60:	6013      	str	r3, [r2, #0]
	  ParkRightTaskHandle = osThreadNew(StartParkRightTask, NULL, &ParkRightTask_attributes);
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <StartStopTask+0xec>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <StartStopTask+0xf0>)
 8000f68:	f007 feea 	bl	8008d40 <osThreadNew>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <StartStopTask+0xc0>)
 8000f70:	6013      	str	r3, [r2, #0]

	  // Turn off all the lights
	  HAL_GPIO_WritePin(DrivingLights_GPIO_Port, DrivingLights_Pin, RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f78:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <StartStopTask+0xf4>)
 8000f7a:	f003 f81f 	bl	8003fbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BrakeLights_GPIO_Port, BrakeLights_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <StartStopTask+0xf4>)
 8000f86:	f003 f819 	bl	8003fbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f90:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <StartStopTask+0xf4>)
 8000f92:	f003 f813 	bl	8003fbc <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 8000f96:	e7a5      	b.n	8000ee4 <StartStopTask+0x8>
 8000f98:	2000013c 	.word	0x2000013c
 8000f9c:	20000140 	.word	0x20000140
 8000fa0:	200000e8 	.word	0x200000e8
 8000fa4:	200000e4 	.word	0x200000e4
 8000fa8:	200000e1 	.word	0x200000e1
 8000fac:	200000de 	.word	0x200000de
 8000fb0:	200000e0 	.word	0x200000e0
 8000fb4:	200000dc 	.word	0x200000dc
 8000fb8:	20000130 	.word	0x20000130
 8000fbc:	20000100 	.word	0x20000100
 8000fc0:	0800d240 	.word	0x0800d240
 8000fc4:	08001395 	.word	0x08001395
 8000fc8:	0800d264 	.word	0x0800d264
 8000fcc:	080013e9 	.word	0x080013e9
 8000fd0:	40020800 	.word	0x40020800

08000fd4 <StartDrivingLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrivingLightsTask */
void StartDrivingLightsTask(void *argument)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrivingLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f009 f8b9 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <StartDrivingLightsTask+0x50>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d104      	bne.n	8000ffc <StartDrivingLightsTask+0x28>
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <StartDrivingLightsTask+0x54>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0ef      	beq.n	8000fdc <StartDrivingLightsTask+0x8>
		  internalFunctionCall = false;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <StartDrivingLightsTask+0x54>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <StartDrivingLightsTask+0x58>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <StartDrivingLightsTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <StartDrivingLightsTask+0x5c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f009 f94b 	bl	800a2ac <vTaskResume>
		  }

		  // Driving lights effect
		  HAL_GPIO_TogglePin(DrivingLights_GPIO_Port, DrivingLights_Pin);
 8001016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <StartDrivingLightsTask+0x60>)
 800101c:	f002 ffe7 	bl	8003fee <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8001020:	e7dc      	b.n	8000fdc <StartDrivingLightsTask+0x8>
 8001022:	bf00      	nop
 8001024:	20000100 	.word	0x20000100
 8001028:	200000dc 	.word	0x200000dc
 800102c:	200000e1 	.word	0x200000e1
 8001030:	20000160 	.word	0x20000160
 8001034:	40020800 	.word	0x40020800

08001038 <StartLEDStripesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStripesTask */
void StartLEDStripesTask(void *argument)
{
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b096      	sub	sp, #88	; 0x58
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStripesTask */
	// Set StripesEffect enum
	stripesEffect = NONE;
 8001042:	4b8e      	ldr	r3, [pc, #568]	; (800127c <StartLEDStripesTask+0x244>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]

	// Transmit 4 empty bytes to ensure SDO is low
	uint8_t d[4] = {0};
 8001048:	2300      	movs	r3, #0
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_SPI_Transmit(&hspi1, d, 4, 100);
 800104c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	2204      	movs	r2, #4
 8001054:	488a      	ldr	r0, [pc, #552]	; (8001280 <StartLEDStripesTask+0x248>)
 8001056:	f004 fe90 	bl	8005d7a <HAL_SPI_Transmit>

	// Create handle and configure
	ws2812b_handle_t hws2812b;

	hws2812b.config.packing = PACKING; // See macro above
 800105a:	2301      	movs	r3, #1
 800105c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hws2812b.config.pulse_len_1 = WS2812B_PULSE_LEN_6b;
 8001060:	233f      	movs	r3, #63	; 0x3f
 8001062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hws2812b.config.pulse_len_0 = WS2812B_PULSE_LEN_2b;
 8001066:	2303      	movs	r3, #3
 8001068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hws2812b.config.first_bit_0 = WS2812B_FIRST_BIT_0_ENABLED;
 800106c:	2301      	movs	r3, #1
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hws2812b.config.prefix_len = PREFIX_LEN; // See macro above
 8001072:	2301      	movs	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
	hws2812b.config.suffix_len = SUFFIX_LEN; // See macro above
 8001076:	2304      	movs	r3, #4
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
	hws2812b.config.spi_bit_order = WS2812B_MSB_FIRST;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Create array of LEDs & set LED color
	ws2812b_led_t leds[LED_COUNT];
	struct DesiredStripesColor desiredStripesColor;
	setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 8001080:	4b7e      	ldr	r3, [pc, #504]	; (800127c <StartLEDStripesTask+0x244>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f107 0208 	add.w	r2, r7, #8
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff faa5 	bl	80005dc <setLEDStripesEffect>
	for(int i = 0; i < LED_COUNT; i ++) {
 8001092:	2300      	movs	r3, #0
 8001094:	657b      	str	r3, [r7, #84]	; 0x54
 8001096:	e020      	b.n	80010da <StartLEDStripesTask+0xa2>
	  leds[i].red = desiredStripesColor.red;
 8001098:	7a39      	ldrb	r1, [r7, #8]
 800109a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	3358      	adds	r3, #88	; 0x58
 80010a4:	443b      	add	r3, r7
 80010a6:	3b4c      	subs	r3, #76	; 0x4c
 80010a8:	460a      	mov	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
	  leds[i].green = desiredStripesColor.green;
 80010ac:	7a79      	ldrb	r1, [r7, #9]
 80010ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	3358      	adds	r3, #88	; 0x58
 80010b8:	443b      	add	r3, r7
 80010ba:	3b4b      	subs	r3, #75	; 0x4b
 80010bc:	460a      	mov	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
	  leds[i].blue = desiredStripesColor.blue;
 80010c0:	7ab9      	ldrb	r1, [r7, #10]
 80010c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	3358      	adds	r3, #88	; 0x58
 80010cc:	443b      	add	r3, r7
 80010ce:	3b4a      	subs	r3, #74	; 0x4a
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < LED_COUNT; i ++) {
 80010d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d6:	3301      	adds	r3, #1
 80010d8:	657b      	str	r3, [r7, #84]	; 0x54
 80010da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010dc:	2b06      	cmp	r3, #6
 80010de:	dddb      	ble.n	8001098 <StartLEDStripesTask+0x60>
	}

	// Add LEDs and count to handle
	hws2812b.led_count = LED_COUNT;
 80010e0:	2307      	movs	r3, #7
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
	hws2812b.leds = leds;
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialize the driver
	if(ws2812b_init(&hws2812b)) {
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fc12 	bl	8002918 <ws2812b_init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <StartLEDStripesTask+0xd0>
	  printf("Invalid ws2812b config! (%s)\r\n",ws2812b_error_msg);
 80010fa:	4b62      	ldr	r3, [pc, #392]	; (8001284 <StartLEDStripesTask+0x24c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	4861      	ldr	r0, [pc, #388]	; (8001288 <StartLEDStripesTask+0x250>)
 8001102:	f00a ffeb 	bl	800c0dc <iprintf>
	  while(1) {;}
 8001106:	e7fe      	b.n	8001106 <StartLEDStripesTask+0xce>
	}

	// Create buffer
	uint8_t dma_buf[ws2812b_required_buffer_len(&hws2812b)];
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fd9f 	bl	8002c50 <ws2812b_required_buffer_len>
 8001112:	4601      	mov	r1, r0
 8001114:	460b      	mov	r3, r1
 8001116:	3b01      	subs	r3, #1
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800111a:	2300      	movs	r3, #0
 800111c:	4688      	mov	r8, r1
 800111e:	4699      	mov	r9, r3
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800112c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001134:	2300      	movs	r3, #0
 8001136:	460c      	mov	r4, r1
 8001138:	461d      	mov	r5, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	00eb      	lsls	r3, r5, #3
 8001144:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001148:	00e2      	lsls	r2, r4, #3
 800114a:	1dcb      	adds	r3, r1, #7
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	ebad 0d03 	sub.w	sp, sp, r3
 8001154:	466b      	mov	r3, sp
 8001156:	3300      	adds	r3, #0
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill buffer
	ws2812b_fill_buffer(&hws2812b, dma_buf);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fd90 	bl	8002c86 <ws2812b_fill_buffer>

	// Transmit
	HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fd70 	bl	8002c50 <ws2812b_required_buffer_len>
 8001170:	4603      	mov	r3, r0
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001178:	4841      	ldr	r0, [pc, #260]	; (8001280 <StartLEDStripesTask+0x248>)
 800117a:	f004 ff6d 	bl	8006058 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10); // 10ms delay
 800117e:	200a      	movs	r0, #10
 8001180:	f001 ff0a 	bl	8002f98 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001184:	2000      	movs	r0, #0
 8001186:	f008 ffe5 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <StartLEDStripesTask+0x254>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d104      	bne.n	80011a4 <StartLEDStripesTask+0x16c>
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <StartLEDStripesTask+0x258>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0ef      	beq.n	8001184 <StartLEDStripesTask+0x14c>
		  internalFunctionCall = false;
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <StartLEDStripesTask+0x258>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

		  // LED stripes effect
		  if(ommitToggle == false) {
 80011aa:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <StartLEDStripesTask+0x25c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d014      	beq.n	80011e4 <StartLEDStripesTask+0x1ac>
			  if(isOn == false) {
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <StartLEDStripesTask+0x260>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f083 0301 	eor.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <StartLEDStripesTask+0x1a0>
				  isOn = true;
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <StartLEDStripesTask+0x260>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
				  stripesEffect = DEFAULT;
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <StartLEDStripesTask+0x244>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e005      	b.n	80011e4 <StartLEDStripesTask+0x1ac>
			  } else {
				  isOn = false;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <StartLEDStripesTask+0x260>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
				  stripesEffect = NONE;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <StartLEDStripesTask+0x244>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  ommitToggle = false;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <StartLEDStripesTask+0x25c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

		  // Update LED color
		  setLEDStripesEffect(stripesEffect, &desiredStripesColor);
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <StartLEDStripesTask+0x244>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f107 0208 	add.w	r2, r7, #8
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9f0 	bl	80005dc <setLEDStripesEffect>
		  for(int i = 0; i < LED_COUNT; i ++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	653b      	str	r3, [r7, #80]	; 0x50
 8001200:	e020      	b.n	8001244 <StartLEDStripesTask+0x20c>
			  leds[i].red = desiredStripesColor.red;
 8001202:	7a39      	ldrb	r1, [r7, #8]
 8001204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	3358      	adds	r3, #88	; 0x58
 800120e:	443b      	add	r3, r7
 8001210:	3b4c      	subs	r3, #76	; 0x4c
 8001212:	460a      	mov	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
			  leds[i].green = desiredStripesColor.green;
 8001216:	7a79      	ldrb	r1, [r7, #9]
 8001218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3358      	adds	r3, #88	; 0x58
 8001222:	443b      	add	r3, r7
 8001224:	3b4b      	subs	r3, #75	; 0x4b
 8001226:	460a      	mov	r2, r1
 8001228:	701a      	strb	r2, [r3, #0]
			  leds[i].blue = desiredStripesColor.blue;
 800122a:	7ab9      	ldrb	r1, [r7, #10]
 800122c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	3358      	adds	r3, #88	; 0x58
 8001236:	443b      	add	r3, r7
 8001238:	3b4a      	subs	r3, #74	; 0x4a
 800123a:	460a      	mov	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < LED_COUNT; i ++) {
 800123e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001240:	3301      	adds	r3, #1
 8001242:	653b      	str	r3, [r7, #80]	; 0x50
 8001244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001246:	2b06      	cmp	r3, #6
 8001248:	dddb      	ble.n	8001202 <StartLEDStripesTask+0x1ca>
		  }

		  // Add LEDs to handle
		  hws2812b.leds = leds;
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38

		  // Fill buffer
		  ws2812b_fill_buffer(&hws2812b, dma_buf);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fd15 	bl	8002c86 <ws2812b_fill_buffer>

		  // Transmit
		  HAL_SPI_Transmit_DMA(&hspi1, dma_buf, ws2812b_required_buffer_len(&hws2812b));
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fcf5 	bl	8002c50 <ws2812b_required_buffer_len>
 8001266:	4603      	mov	r3, r0
 8001268:	b29b      	uxth	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <StartLEDStripesTask+0x248>)
 8001270:	f004 fef2 	bl	8006058 <HAL_SPI_Transmit_DMA>
		  HAL_Delay(10); // 10ms delay
 8001274:	200a      	movs	r0, #10
 8001276:	f001 fe8f 	bl	8002f98 <HAL_Delay>
	  vTaskSuspend(NULL);
 800127a:	e783      	b.n	8001184 <StartLEDStripesTask+0x14c>
 800127c:	200000de 	.word	0x200000de
 8001280:	200001bc 	.word	0x200001bc
 8001284:	200007ac 	.word	0x200007ac
 8001288:	0800cfdc 	.word	0x0800cfdc
 800128c:	20000100 	.word	0x20000100
 8001290:	200000dc 	.word	0x200000dc
 8001294:	200000e0 	.word	0x200000e0
 8001298:	200000df 	.word	0x200000df

0800129c <StartLeftBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftBlinkersTask */
void StartLeftBlinkersTask(void *argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f008 ff55 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <StartLeftBlinkersTask+0x68>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f083 0301 	eor.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d104      	bne.n	80012c4 <StartLeftBlinkersTask+0x28>
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <StartLeftBlinkersTask+0x6c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ef      	beq.n	80012a4 <StartLeftBlinkersTask+0x8>
		  internalFunctionCall = false;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <StartLeftBlinkersTask+0x6c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <StartLeftBlinkersTask+0x70>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <StartLeftBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <StartLeftBlinkersTask+0x74>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 ffe7 	bl	800a2ac <vTaskResume>
		  }

		  // Left blinkers effect
		  for(int i = 0; i < 6; i ++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	e00b      	b.n	80012fc <StartLeftBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(LeftBlinkers_GPIO_Port, LeftBlinkers_Pin);
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <StartLeftBlinkersTask+0x78>)
 80012ea:	f002 fe80 	bl	8003fee <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 80012ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012f2:	f007 fdcb 	bl	8008e8c <osDelay>
		  for(int i = 0; i < 6; i ++) {
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3301      	adds	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	ddf0      	ble.n	80012e4 <StartLeftBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 8001302:	e7cf      	b.n	80012a4 <StartLeftBlinkersTask+0x8>
 8001304:	20000100 	.word	0x20000100
 8001308:	200000dc 	.word	0x200000dc
 800130c:	200000e1 	.word	0x200000e1
 8001310:	20000160 	.word	0x20000160
 8001314:	40020800 	.word	0x40020800

08001318 <StartRightBlinkersTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightBlinkersTask */
void StartRightBlinkersTask(void *argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightBlinkersTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001320:	2000      	movs	r0, #0
 8001322:	f008 ff17 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <StartRightBlinkersTask+0x68>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f083 0301 	eor.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <StartRightBlinkersTask+0x28>
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <StartRightBlinkersTask+0x6c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0ef      	beq.n	8001320 <StartRightBlinkersTask+0x8>
		  internalFunctionCall = false;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <StartRightBlinkersTask+0x6c>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <StartRightBlinkersTask+0x70>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <StartRightBlinkersTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <StartRightBlinkersTask+0x74>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f008 ffa9 	bl	800a2ac <vTaskResume>
		  }

		  // Right blinkers effect
		  for(int i = 0; i < 6; i ++) {
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e00b      	b.n	8001378 <StartRightBlinkersTask+0x60>
			  HAL_GPIO_TogglePin(RightBlinkers_GPIO_Port, RightBlinkers_Pin);
 8001360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <StartRightBlinkersTask+0x78>)
 8001366:	f002 fe42 	bl	8003fee <HAL_GPIO_TogglePin>
			  osDelay(BLINKERS_DURATION);
 800136a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800136e:	f007 fd8d 	bl	8008e8c <osDelay>
		  for(int i = 0; i < 6; i ++) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b05      	cmp	r3, #5
 800137c:	ddf0      	ble.n	8001360 <StartRightBlinkersTask+0x48>
	  vTaskSuspend(NULL);
 800137e:	e7cf      	b.n	8001320 <StartRightBlinkersTask+0x8>
 8001380:	20000100 	.word	0x20000100
 8001384:	200000dc 	.word	0x200000dc
 8001388:	200000e1 	.word	0x200000e1
 800138c:	20000160 	.word	0x20000160
 8001390:	40020800 	.word	0x40020800

08001394 <StartParkLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkLeftTask */
void StartParkLeftTask(void *argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800139c:	2000      	movs	r0, #0
 800139e:	f008 fed9 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <StartParkLeftTask+0x48>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f4      	beq.n	800139c <StartParkLeftTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <StartParkLeftTask+0x4c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <StartParkLeftTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <StartParkLeftTask+0x50>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f008 ff73 	bl	800a2ac <vTaskResume>
		  }

		  // Park to the left
		  isParking = true;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <StartParkLeftTask+0x48>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
		  park(LEFT);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fa3b 	bl	8000848 <park>
		  isParking = false;
 80013d2:	4b02      	ldr	r3, [pc, #8]	; (80013dc <StartParkLeftTask+0x48>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 80013d8:	e7e0      	b.n	800139c <StartParkLeftTask+0x8>
 80013da:	bf00      	nop
 80013dc:	20000100 	.word	0x20000100
 80013e0:	200000e1 	.word	0x200000e1
 80013e4:	20000160 	.word	0x20000160

080013e8 <StartParkRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkRightTask */
void StartParkRightTask(void *argument)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParkRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f008 feaf 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false) {
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <StartParkRightTask+0x48>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f4      	beq.n	80013f0 <StartParkRightTask+0x8>
		  // Exit stopped state if applicable
		  if(isStopped) {
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <StartParkRightTask+0x4c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <StartParkRightTask+0x32>
			  vTaskResume(ResumeFromStopTHandle);
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <StartParkRightTask+0x50>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f008 ff49 	bl	800a2ac <vTaskResume>
		  }

		  // Park to the right
		  isParking = true;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <StartParkRightTask+0x48>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
		  park(RIGHT);
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff fa11 	bl	8000848 <park>
		  isParking = false;
 8001426:	4b02      	ldr	r3, [pc, #8]	; (8001430 <StartParkRightTask+0x48>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(NULL);
 800142c:	e7e0      	b.n	80013f0 <StartParkRightTask+0x8>
 800142e:	bf00      	nop
 8001430:	20000100 	.word	0x20000100
 8001434:	200000e1 	.word	0x200000e1
 8001438:	20000160 	.word	0x20000160

0800143c <StartAccelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelerateTask */
void StartAccelerateTask(void *argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8001444:	2300      	movs	r3, #0
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	481e      	ldr	r0, [pc, #120]	; (80014c4 <StartAccelerateTask+0x88>)
 800144c:	f001 ff78 	bl	8003340 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001450:	2000      	movs	r0, #0
 8001452:	f008 fe7f 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <StartAccelerateTask+0x8c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f083 0301 	eor.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d104      	bne.n	8001470 <StartAccelerateTask+0x34>
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <StartAccelerateTask+0x90>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ef      	beq.n	8001450 <StartAccelerateTask+0x14>
		  internalFunctionCall = false;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <StartAccelerateTask+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <StartAccelerateTask+0x94>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <StartAccelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <StartAccelerateTask+0x98>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f008 ff11 	bl	800a2ac <vTaskResume>
		  }

		  // Accelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue < 4) {
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <StartAccelerateTask+0x9c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b03      	cmp	r3, #3
 8001490:	dc08      	bgt.n	80014a4 <StartAccelerateTask+0x68>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <StartAccelerateTask+0x9c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <StartAccelerateTask+0xa0>)
 8001498:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue ++;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <StartAccelerateTask+0x9c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <StartAccelerateTask+0x9c>)
 80014a2:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 80014a4:	f7ff f8dc 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <StartAccelerateTask+0x9c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dbcf      	blt.n	8001450 <StartAccelerateTask+0x14>
			  isWithdrawing = false;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <StartAccelerateTask+0xa4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <StartAccelerateTask+0xa8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f008 fef6 	bl	800a2ac <vTaskResume>
	  vTaskSuspend(NULL);
 80014c0:	e7c6      	b.n	8001450 <StartAccelerateTask+0x14>
 80014c2:	bf00      	nop
 80014c4:	2000010c 	.word	0x2000010c
 80014c8:	20000100 	.word	0x20000100
 80014cc:	200000dc 	.word	0x200000dc
 80014d0:	200000e1 	.word	0x200000e1
 80014d4:	20000160 	.word	0x20000160
 80014d8:	200000e8 	.word	0x200000e8
 80014dc:	200000e4 	.word	0x200000e4
 80014e0:	200000ec 	.word	0x200000ec
 80014e4:	2000015c 	.word	0x2000015c

080014e8 <StartDecelerateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDecelerateTask */
void StartDecelerateTask(void *argument)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDecelerateTask */
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 80014f0:	2300      	movs	r3, #0
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	4821      	ldr	r0, [pc, #132]	; (800157c <StartDecelerateTask+0x94>)
 80014f8:	f001 ff22 	bl	8003340 <HAL_DAC_SetValue>
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f008 fe29 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <StartDecelerateTask+0x98>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d104      	bne.n	800151c <StartDecelerateTask+0x34>
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <StartDecelerateTask+0x9c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ef      	beq.n	80014fc <StartDecelerateTask+0x14>
		  internalFunctionCall = false;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <StartDecelerateTask+0x9c>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <StartDecelerateTask+0xa0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <StartDecelerateTask+0x4e>
			  vTaskResume(ResumeFromStopTHandle);
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <StartDecelerateTask+0xa4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f008 febb 	bl	800a2ac <vTaskResume>
		  }

		  // Decelerate if possible
		  if(sliderAccelerateDecelerateCurrentValue > -2) {
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <StartDecelerateTask+0xa8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153e:	db08      	blt.n	8001552 <StartDecelerateTask+0x6a>
			  sliderAccelerateDeceleratePreviousValue = sliderAccelerateDecelerateCurrentValue;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <StartDecelerateTask+0xa8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a13      	ldr	r2, [pc, #76]	; (8001594 <StartDecelerateTask+0xac>)
 8001546:	6013      	str	r3, [r2, #0]
			  sliderAccelerateDecelerateCurrentValue --;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <StartDecelerateTask+0xa8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <StartDecelerateTask+0xa8>)
 8001550:	6013      	str	r3, [r2, #0]
		  }
		  setBLDCMotorSpeed();
 8001552:	f7ff f885 	bl	8000660 <setBLDCMotorSpeed>

		  // Set withdraw lights appropriately
		  if(sliderAccelerateDecelerateCurrentValue >= 0) {
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <StartDecelerateTask+0xa8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db05      	blt.n	800156a <StartDecelerateTask+0x82>
			  vTaskResume(BrakeLightsTaskHandle);
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <StartDecelerateTask+0xb0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f008 fea2 	bl	800a2ac <vTaskResume>
 8001568:	e7c8      	b.n	80014fc <StartDecelerateTask+0x14>
		  } else {
			  isWithdrawing = true;
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <StartDecelerateTask+0xb4>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
			  vTaskResume(WithdrawLightsTHandle);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <StartDecelerateTask+0xb8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f008 fe99 	bl	800a2ac <vTaskResume>
	  vTaskSuspend(NULL);
 800157a:	e7bf      	b.n	80014fc <StartDecelerateTask+0x14>
 800157c:	2000010c 	.word	0x2000010c
 8001580:	20000100 	.word	0x20000100
 8001584:	200000dc 	.word	0x200000dc
 8001588:	200000e1 	.word	0x200000e1
 800158c:	20000160 	.word	0x20000160
 8001590:	200000e8 	.word	0x200000e8
 8001594:	200000e4 	.word	0x200000e4
 8001598:	20000158 	.word	0x20000158
 800159c:	200000ec 	.word	0x200000ec
 80015a0:	2000015c 	.word	0x2000015c

080015a4 <StartTurnLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnLeftTask */
void StartTurnLeftTask(void *argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnLeftTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f008 fdd1 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <StartTurnLeftTask+0x68>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f083 0301 	eor.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d104      	bne.n	80015cc <StartTurnLeftTask+0x28>
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <StartTurnLeftTask+0x6c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ef      	beq.n	80015ac <StartTurnLeftTask+0x8>
		  internalFunctionCall = false;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <StartTurnLeftTask+0x6c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <StartTurnLeftTask+0x70>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <StartTurnLeftTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <StartTurnLeftTask+0x74>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f008 fe63 	bl	800a2ac <vTaskResume>
		  }

		  // Turn left if possible
		  if(sliderLeftRightCurrentValue > -3) {
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <StartTurnLeftTask+0x78>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f113 0f02 	cmn.w	r3, #2
 80015ee:	dbdd      	blt.n	80015ac <StartTurnLeftTask+0x8>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <StartTurnLeftTask+0x78>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <StartTurnLeftTask+0x7c>)
 80015f6:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue --;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <StartTurnLeftTask+0x78>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <StartTurnLeftTask+0x78>)
 8001600:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(LEFT);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff f8b6 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 8001608:	e7d0      	b.n	80015ac <StartTurnLeftTask+0x8>
 800160a:	bf00      	nop
 800160c:	20000100 	.word	0x20000100
 8001610:	200000dc 	.word	0x200000dc
 8001614:	200000e1 	.word	0x200000e1
 8001618:	20000160 	.word	0x20000160
 800161c:	200000fc 	.word	0x200000fc
 8001620:	200000f8 	.word	0x200000f8

08001624 <StartTurnRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnRightTask */
void StartTurnRightTask(void *argument)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnRightTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800162c:	2000      	movs	r0, #0
 800162e:	f008 fd91 	bl	800a154 <vTaskSuspend>

	  // Parking interrupt guard
	  if(isParking == false || internalFunctionCall == true) {
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <StartTurnRightTask+0x64>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d104      	bne.n	800164c <StartTurnRightTask+0x28>
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <StartTurnRightTask+0x68>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ef      	beq.n	800162c <StartTurnRightTask+0x8>
		  internalFunctionCall = false;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <StartTurnRightTask+0x68>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]

		  // Exit stopped state if applicable
		  if(isStopped) {
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <StartTurnRightTask+0x6c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <StartTurnRightTask+0x42>
			  vTaskResume(ResumeFromStopTHandle);
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <StartTurnRightTask+0x70>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f008 fe23 	bl	800a2ac <vTaskResume>
		  }

		  // Turn right if possible
		  if(sliderLeftRightCurrentValue < 3) {
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <StartTurnRightTask+0x74>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b02      	cmp	r3, #2
 800166c:	dcde      	bgt.n	800162c <StartTurnRightTask+0x8>
			  sliderLeftRightPreviousValue = sliderLeftRightCurrentValue;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <StartTurnRightTask+0x74>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <StartTurnRightTask+0x78>)
 8001674:	6013      	str	r3, [r2, #0]
			  sliderLeftRightCurrentValue ++;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <StartTurnRightTask+0x74>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <StartTurnRightTask+0x74>)
 800167e:	6013      	str	r3, [r2, #0]

			  moveStepperMotor(RIGHT);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff f877 	bl	8000774 <moveStepperMotor>
	  vTaskSuspend(NULL);
 8001686:	e7d1      	b.n	800162c <StartTurnRightTask+0x8>
 8001688:	20000100 	.word	0x20000100
 800168c:	200000dc 	.word	0x200000dc
 8001690:	200000e1 	.word	0x200000e1
 8001694:	20000160 	.word	0x20000160
 8001698:	200000fc 	.word	0x200000fc
 800169c:	200000f8 	.word	0x200000f8

080016a0 <StartConnectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConnectionTask */
void StartConnectionTask(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConnectionTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f008 fd53 	bl	800a154 <vTaskSuspend>

	  // Refresh connection state
	  osTimerStart(ConnectionTaskTimerHandle, (ACKNOWLEDGE_PACKETS_FREQUENCY + TIME_MARGIN));
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <StartConnectionTask+0x30>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f241 517c 	movw	r1, #5500	; 0x157c
 80016b6:	4618      	mov	r0, r3
 80016b8:	f007 fcb0 	bl	800901c <osTimerStart>
	  isConnected = true;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <StartConnectionTask+0x34>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
	  vTaskResume(OLEDTaskHandle);
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <StartConnectionTask+0x38>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f008 fdf0 	bl	800a2ac <vTaskResume>
	  vTaskSuspend(NULL);
 80016cc:	e7ec      	b.n	80016a8 <StartConnectionTask+0x8>
 80016ce:	bf00      	nop
 80016d0:	20000164 	.word	0x20000164
 80016d4:	200000dd 	.word	0x200000dd
 80016d8:	20000120 	.word	0x20000120

080016dc <StartBrakeLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBrakeLightsTask */
void StartBrakeLightsTask(void *argument)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBrakeLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f008 fd35 	bl	800a154 <vTaskSuspend>

	  // Brake lights effect
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 80016ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <StartBrakeLightsTask+0x2c>)
 80016f0:	f002 fc7d 	bl	8003fee <HAL_GPIO_TogglePin>
	  osDelay(BRAKE_LIGHTS_DURATION);
 80016f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f8:	f007 fbc8 	bl	8008e8c <osDelay>
	  HAL_GPIO_TogglePin(BrakeLights_GPIO_Port, BrakeLights_Pin);
 80016fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001700:	4801      	ldr	r0, [pc, #4]	; (8001708 <StartBrakeLightsTask+0x2c>)
 8001702:	f002 fc74 	bl	8003fee <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8001706:	e7ed      	b.n	80016e4 <StartBrakeLightsTask+0x8>
 8001708:	40020800 	.word	0x40020800

0800170c <StartWithdrawLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWithdrawLightsTask */
void StartWithdrawLightsTask(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWithdrawLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001714:	2000      	movs	r0, #0
 8001716:	f008 fd1d 	bl	800a154 <vTaskSuspend>

	  // Withdraw lights effect
	  if(isWithdrawing) {
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <StartWithdrawLightsTask+0x34>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <StartWithdrawLightsTask+0x26>
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, SET);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <StartWithdrawLightsTask+0x38>)
 800172c:	f002 fc46 	bl	8003fbc <HAL_GPIO_WritePin>
 8001730:	e7f0      	b.n	8001714 <StartWithdrawLightsTask+0x8>
	  } else {
		  HAL_GPIO_WritePin(WithdrawLights_GPIO_Port, WithdrawLights_Pin, RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <StartWithdrawLightsTask+0x38>)
 800173a:	f002 fc3f 	bl	8003fbc <HAL_GPIO_WritePin>
	  vTaskSuspend(NULL);
 800173e:	e7e9      	b.n	8001714 <StartWithdrawLightsTask+0x8>
 8001740:	200000ec 	.word	0x200000ec
 8001744:	40020800 	.word	0x40020800

08001748 <StartResumeFromStopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResumeFromStopTask */
void StartResumeFromStopTask(void *argument)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResumeFromStopTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001750:	2000      	movs	r0, #0
 8001752:	f008 fcff 	bl	800a154 <vTaskSuspend>

	  // Turn off LED stripes' stop effect if present
	  if(isStopped) {
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <StartResumeFromStopTask+0x48>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f7      	beq.n	8001750 <StartResumeFromStopTask+0x8>
		  isStopped = false;
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <StartResumeFromStopTask+0x48>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		  if(isOn) {
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <StartResumeFromStopTask+0x4c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <StartResumeFromStopTask+0x30>
			  stripesEffect = DEFAULT;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <StartResumeFromStopTask+0x50>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e002      	b.n	800177e <StartResumeFromStopTask+0x36>
		  } else {
			  stripesEffect = NONE;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <StartResumeFromStopTask+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
		  }
		  ommitToggle = true;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <StartResumeFromStopTask+0x54>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
		  vTaskResume(LEDStripesTaskHandle);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <StartResumeFromStopTask+0x58>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f008 fd8f 	bl	800a2ac <vTaskResume>
	  vTaskSuspend(NULL);
 800178e:	e7df      	b.n	8001750 <StartResumeFromStopTask+0x8>
 8001790:	200000e1 	.word	0x200000e1
 8001794:	200000df 	.word	0x200000df
 8001798:	200000de 	.word	0x200000de
 800179c:	200000e0 	.word	0x200000e0
 80017a0:	20000130 	.word	0x20000130

080017a4 <CallbackConnectionTaskTimer>:
  /* USER CODE END StartResumeFromStopTask */
}

/* CallbackConnectionTaskTimer function */
void CallbackConnectionTaskTimer(void *argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackConnectionTaskTimer */
	vTaskResume(StopTaskHandle);
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <CallbackConnectionTaskTimer+0x2c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f008 fd7b 	bl	800a2ac <vTaskResume>
	isConnected = false;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <CallbackConnectionTaskTimer+0x30>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	vTaskResume(OLEDTaskHandle);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <CallbackConnectionTaskTimer+0x34>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f008 fd73 	bl	800a2ac <vTaskResume>
  /* USER CODE END CallbackConnectionTaskTimer */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000128 	.word	0x20000128
 80017d4:	200000dd 	.word	0x200000dd
 80017d8:	20000120 	.word	0x20000120

080017dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <MX_GPIO_Init+0x268>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a87      	ldr	r2, [pc, #540]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <MX_GPIO_Init+0x268>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a81      	ldr	r2, [pc, #516]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <MX_GPIO_Init+0x268>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f244 0191 	movw	r1, #16529	; 0x4091
 8001888:	486f      	ldr	r0, [pc, #444]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800188a:	f002 fb97 	bl	8003fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperMotorDir_GPIO_Port, StepperMotorDir_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001894:	486d      	ldr	r0, [pc, #436]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001896:	f002 fb91 	bl	8003fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2140      	movs	r1, #64	; 0x40
 800189e:	486c      	ldr	r0, [pc, #432]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018a0:	f002 fb8c 	bl	8003fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80018aa:	486a      	ldr	r0, [pc, #424]	; (8001a54 <MX_GPIO_Init+0x278>)
 80018ac:	f002 fb86 	bl	8003fbc <HAL_GPIO_WritePin>
                          |WithdrawLights_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	4863      	ldr	r0, [pc, #396]	; (8001a54 <MX_GPIO_Init+0x278>)
 80018c8:	f002 f9cc 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018cc:	2332      	movs	r3, #50	; 0x32
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018dc:	230b      	movs	r3, #11
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	485b      	ldr	r0, [pc, #364]	; (8001a54 <MX_GPIO_Init+0x278>)
 80018e8:	f002 f9bc 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018ec:	2386      	movs	r3, #134	; 0x86
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018fc:	230b      	movs	r3, #11
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4854      	ldr	r0, [pc, #336]	; (8001a58 <MX_GPIO_Init+0x27c>)
 8001908:	f002 f9ac 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|BLDCMotorDir_Pin|LD2_Pin;
 800190c:	f244 0391 	movw	r3, #16529	; 0x4091
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4848      	ldr	r0, [pc, #288]	; (8001a48 <MX_GPIO_Init+0x26c>)
 8001926:	f002 f99d 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800193c:	230b      	movs	r3, #11
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4840      	ldr	r0, [pc, #256]	; (8001a48 <MX_GPIO_Init+0x26c>)
 8001948:	f002 f98c 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800194c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800195e:	2307      	movs	r3, #7
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4838      	ldr	r0, [pc, #224]	; (8001a4c <MX_GPIO_Init+0x270>)
 800196a:	f002 f97b 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepperMotorDir_Pin;
 800196e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(StepperMotorDir_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4831      	ldr	r0, [pc, #196]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001988:	f002 f96c 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	482b      	ldr	r0, [pc, #172]	; (8001a50 <MX_GPIO_Init+0x274>)
 80019a4:	f002 f95e 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	4825      	ldr	r0, [pc, #148]	; (8001a50 <MX_GPIO_Init+0x274>)
 80019bc:	f002 f952 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DrivingLights_Pin|LeftBlinkers_Pin|RightBlinkers_Pin|BrakeLights_Pin
 80019c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019c4:	61fb      	str	r3, [r7, #28]
                          |WithdrawLights_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	481e      	ldr	r0, [pc, #120]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019da:	f002 f943 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019de:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019f0:	230a      	movs	r3, #10
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4817      	ldr	r0, [pc, #92]	; (8001a58 <MX_GPIO_Init+0x27c>)
 80019fc:	f002 f932 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4810      	ldr	r0, [pc, #64]	; (8001a58 <MX_GPIO_Init+0x27c>)
 8001a16:	f002 f925 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2c:	230b      	movs	r3, #11
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <MX_GPIO_Init+0x274>)
 8001a38:	f002 f914 	bl	8003c64 <HAL_GPIO_Init>

}
 8001a3c:	bf00      	nop
 8001a3e:	3730      	adds	r7, #48	; 0x30
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020000 	.word	0x40020000

08001a5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_I2C1_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_I2C1_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a98:	f002 fac4 	bl	8004024 <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 f951 	bl	8001d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001aaa:	f002 fea5 	bl	80047f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 f948 	bl	8001d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001abc:	f002 fee7 	bl	800488e <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 f93f 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000168 	.word	0x20000168
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	20404768 	.word	0x20404768

08001adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0ae      	sub	sp, #184	; 0xb8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2290      	movs	r2, #144	; 0x90
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00a fb42 	bl	800c186 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_I2C_MspInit+0xb4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d13c      	bne.n	8001b86 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fc5a 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b26:	f000 f90f 	bl	8001d48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_I2C_MspInit+0xb8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_I2C_MspInit+0xb8>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_I2C_MspInit+0xb8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4a:	2312      	movs	r3, #18
 8001b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b66:	4619      	mov	r1, r3
 8001b68:	480b      	ldr	r0, [pc, #44]	; (8001b98 <HAL_I2C_MspInit+0xbc>)
 8001b6a:	f002 f87b 	bl	8003c64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_I2C_MspInit+0xb8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_I2C_MspInit+0xb8>)
 8001b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_I2C_MspInit+0xb8>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	37b8      	adds	r7, #184	; 0xb8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020400 	.word	0x40020400

08001b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba0:	f001 f9cd 	bl	8002f3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba4:	f000 f82a 	bl	8001bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba8:	f7ff fe18 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001bac:	f7fe ff5a 	bl	8000a64 <MX_DMA_Init>
  MX_SPI1_Init();
 8001bb0:	f000 f8d0 	bl	8001d54 <MX_SPI1_Init>
  MX_DAC_Init();
 8001bb4:	f7fe fee4 	bl	8000980 <MX_DAC_Init>
  MX_I2C1_Init();
 8001bb8:	f7ff ff50 	bl	8001a5c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001bbc:	f000 fd62 	bl	8002684 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001bc0:	f000 fe12 	bl	80027e8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RxBuffer, 1);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4909      	ldr	r1, [pc, #36]	; (8001bec <main+0x50>)
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <main+0x54>)
 8001bca:	f005 fe07 	bl	80077dc <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4808      	ldr	r0, [pc, #32]	; (8001bf4 <main+0x58>)
 8001bd2:	f001 fb09 	bl	80031e8 <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <main+0x5c>)
 8001bda:	f004 fe8b 	bl	80068f4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001bde:	f007 f845 	bl	8008c6c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001be2:	f7fe ff5d 	bl	8000aa0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001be6:	f007 f875 	bl	8008cd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <main+0x4e>
 8001bec:	20000104 	.word	0x20000104
 8001bf0:	20000724 	.word	0x20000724
 8001bf4:	2000010c 	.word	0x2000010c
 8001bf8:	200006d8 	.word	0x200006d8

08001bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	2234      	movs	r2, #52	; 0x34
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00a fabb 	bl	800c186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <SystemClock_Config+0xd4>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a2a      	ldr	r2, [pc, #168]	; (8001cd0 <SystemClock_Config+0xd4>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <SystemClock_Config+0xd4>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <SystemClock_Config+0xd8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <SystemClock_Config+0xd8>)
 8001c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <SystemClock_Config+0xd8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c68:	23d8      	movs	r3, #216	; 0xd8
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 fea3 	bl	80049c8 <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c88:	f000 f85e 	bl	8001d48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c8c:	f002 fe4c 	bl	8004928 <HAL_PWREx_EnableOverDrive>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c96:	f000 f857 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9a:	230f      	movs	r3, #15
 8001c9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ca6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	2107      	movs	r1, #7
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 f933 	bl	8004f24 <HAL_RCC_ClockConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001cc4:	f000 f840 	bl	8001d48 <Error_Handler>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3750      	adds	r7, #80	; 0x50
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6x) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(xTaskResumeFromISR(DispatcherTaskHandle));
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_UART_RxCpltCallback+0x3c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f008 fb41 	bl	800a36c <xTaskResumeFromISR>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_UART_RxCpltCallback+0x28>
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_UART_RxCpltCallback+0x40>)
 8001cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f3bf 8f4f 	dsb	sy
 8001cfc:	f3bf 8f6f 	isb	sy
	HAL_UART_Receive_IT(&huart6, RxBuffer, 1);					// Used for "opening" ST MCU for future interrupts on RX
 8001d00:	2201      	movs	r2, #1
 8001d02:	4906      	ldr	r1, [pc, #24]	; (8001d1c <HAL_UART_RxCpltCallback+0x44>)
 8001d04:	4806      	ldr	r0, [pc, #24]	; (8001d20 <HAL_UART_RxCpltCallback+0x48>)
 8001d06:	f005 fd69 	bl	80077dc <HAL_UART_Receive_IT>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000124 	.word	0x20000124
 8001d18:	e000ed04 	.word	0xe000ed04
 8001d1c:	20000104 	.word	0x20000104
 8001d20:	20000724 	.word	0x20000724

08001d24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d36:	f001 f90f 	bl	8002f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40001000 	.word	0x40001000

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>
	...

08001d54 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <MX_SPI1_Init+0x78>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d6c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d70:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d8c:	2218      	movs	r2, #24
 8001d8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001db0:	2208      	movs	r2, #8
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_SPI1_Init+0x74>)
 8001db6:	f003 ff35 	bl	8005c24 <HAL_SPI_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001dc0:	f7ff ffc2 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200001bc 	.word	0x200001bc
 8001dcc:	40013000 	.word	0x40013000

08001dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a3c      	ldr	r2, [pc, #240]	; (8001ee0 <HAL_SPI_MspInit+0x110>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d171      	bne.n	8001ed6 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a3b      	ldr	r2, [pc, #236]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a35      	ldr	r2, [pc, #212]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_SPI_MspInit+0x114>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4824      	ldr	r0, [pc, #144]	; (8001ee8 <HAL_SPI_MspInit+0x118>)
 8001e56:	f001 ff05 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDStripes_Pin;
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEDStripes_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	481d      	ldr	r0, [pc, #116]	; (8001eec <HAL_SPI_MspInit+0x11c>)
 8001e76:	f001 fef5 	bl	8003c64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <HAL_SPI_MspInit+0x124>)
 8001e7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001e82:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001ebc:	f001 fac8 	bl	8003450 <HAL_DMA_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001ec6:	f7ff ff3f 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_SPI_MspInit+0x120>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40013000 	.word	0x40013000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	20000220 	.word	0x20000220
 8001ef4:	40026458 	.word	0x40026458

08001ef8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af04      	add	r7, sp, #16
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	1dfb      	adds	r3, r7, #7
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	2200      	movs	r2, #0
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	4803      	ldr	r0, [pc, #12]	; (8001f34 <ssd1306_WriteCommand+0x2c>)
 8001f28:	f002 f90c 	bl	8004144 <HAL_I2C_Mem_Write>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000168 	.word	0x20000168

08001f38 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2301      	movs	r3, #1
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	2178      	movs	r1, #120	; 0x78
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <ssd1306_WriteData+0x30>)
 8001f5a:	f002 f8f3 	bl	8004144 <HAL_I2C_Mem_Write>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000168 	.word	0x20000168

08001f6c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001f70:	f7ff ffc2 	bl	8001ef8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f001 f80f 	bl	8002f98 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f000 f9ce 	bl	800231c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001f80:	2020      	movs	r0, #32
 8001f82:	f7ff ffc1 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff ffbe 	bl	8001f08 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f8c:	20b0      	movs	r0, #176	; 0xb0
 8001f8e:	f7ff ffbb 	bl	8001f08 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f92:	20c8      	movs	r0, #200	; 0xc8
 8001f94:	f7ff ffb8 	bl	8001f08 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff ffb5 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f7ff ffb2 	bl	8001f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001fa4:	2040      	movs	r0, #64	; 0x40
 8001fa6:	f7ff ffaf 	bl	8001f08 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001faa:	20ff      	movs	r0, #255	; 0xff
 8001fac:	f000 f9a2 	bl	80022f4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fb0:	20a1      	movs	r0, #161	; 0xa1
 8001fb2:	f7ff ffa9 	bl	8001f08 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fb6:	20a6      	movs	r0, #166	; 0xa6
 8001fb8:	f7ff ffa6 	bl	8001f08 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001fbc:	20a8      	movs	r0, #168	; 0xa8
 8001fbe:	f7ff ffa3 	bl	8001f08 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001fc2:	203f      	movs	r0, #63	; 0x3f
 8001fc4:	f7ff ffa0 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fc8:	20a4      	movs	r0, #164	; 0xa4
 8001fca:	f7ff ff9d 	bl	8001f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fce:	20d3      	movs	r0, #211	; 0xd3
 8001fd0:	f7ff ff9a 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff ff97 	bl	8001f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fda:	20d5      	movs	r0, #213	; 0xd5
 8001fdc:	f7ff ff94 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001fe0:	20f0      	movs	r0, #240	; 0xf0
 8001fe2:	f7ff ff91 	bl	8001f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001fe6:	20d9      	movs	r0, #217	; 0xd9
 8001fe8:	f7ff ff8e 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001fec:	2022      	movs	r0, #34	; 0x22
 8001fee:	f7ff ff8b 	bl	8001f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ff2:	20da      	movs	r0, #218	; 0xda
 8001ff4:	f7ff ff88 	bl	8001f08 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ff8:	2012      	movs	r0, #18
 8001ffa:	f7ff ff85 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ffe:	20db      	movs	r0, #219	; 0xdb
 8002000:	f7ff ff82 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002004:	2020      	movs	r0, #32
 8002006:	f7ff ff7f 	bl	8001f08 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800200a:	208d      	movs	r0, #141	; 0x8d
 800200c:	f7ff ff7c 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002010:	2014      	movs	r0, #20
 8002012:	f7ff ff79 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002016:	2001      	movs	r0, #1
 8002018:	f000 f980 	bl	800231c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f80f 	bl	8002040 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002022:	f000 f825 	bl	8002070 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <ssd1306_Init+0xd0>)
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <ssd1306_Init+0xd0>)
 800202e:	2200      	movs	r2, #0
 8002030:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002032:	4b02      	ldr	r3, [pc, #8]	; (800203c <ssd1306_Init+0xd0>)
 8002034:	2201      	movs	r2, #1
 8002036:	711a      	strb	r2, [r3, #4]
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000680 	.word	0x20000680

08002040 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <ssd1306_Fill+0x14>
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <ssd1306_Fill+0x16>
 8002054:	23ff      	movs	r3, #255	; 0xff
 8002056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205a:	4619      	mov	r1, r3
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <ssd1306_Fill+0x2c>)
 800205e:	f00a f892 	bl	800c186 <memset>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000280 	.word	0x20000280

08002070 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002076:	2300      	movs	r3, #0
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	e016      	b.n	80020aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	3b50      	subs	r3, #80	; 0x50
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff40 	bl	8001f08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ff3d 	bl	8001f08 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800208e:	2010      	movs	r0, #16
 8002090:	f7ff ff3a 	bl	8001f08 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	01db      	lsls	r3, r3, #7
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <ssd1306_UpdateScreen+0x4c>)
 800209a:	4413      	add	r3, r2
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff4a 	bl	8001f38 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	3301      	adds	r3, #1
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b07      	cmp	r3, #7
 80020ae:	d9e5      	bls.n	800207c <ssd1306_UpdateScreen+0xc>
    }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000280 	.word	0x20000280

080020c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
 80020ca:	460b      	mov	r3, r1
 80020cc:	71bb      	strb	r3, [r7, #6]
 80020ce:	4613      	mov	r3, r2
 80020d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db3d      	blt.n	8002156 <ssd1306_DrawPixel+0x96>
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	2b3f      	cmp	r3, #63	; 0x3f
 80020de:	d83a      	bhi.n	8002156 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80020e0:	797b      	ldrb	r3, [r7, #5]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d11a      	bne.n	800211c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020e6:	79fa      	ldrb	r2, [r7, #7]
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	08db      	lsrs	r3, r3, #3
 80020ec:	b2d8      	uxtb	r0, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	01db      	lsls	r3, r3, #7
 80020f2:	4413      	add	r3, r2
 80020f4:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <ssd1306_DrawPixel+0xa4>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	b25a      	sxtb	r2, r3
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	b25b      	sxtb	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b259      	sxtb	r1, r3
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	4603      	mov	r3, r0
 8002110:	01db      	lsls	r3, r3, #7
 8002112:	4413      	add	r3, r2
 8002114:	b2c9      	uxtb	r1, r1
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <ssd1306_DrawPixel+0xa4>)
 8002118:	54d1      	strb	r1, [r2, r3]
 800211a:	e01d      	b.n	8002158 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	79bb      	ldrb	r3, [r7, #6]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	b2d8      	uxtb	r0, r3
 8002124:	4603      	mov	r3, r0
 8002126:	01db      	lsls	r3, r3, #7
 8002128:	4413      	add	r3, r2
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <ssd1306_DrawPixel+0xa4>)
 800212c:	5cd3      	ldrb	r3, [r2, r3]
 800212e:	b25a      	sxtb	r2, r3
 8002130:	79bb      	ldrb	r3, [r7, #6]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	b25b      	sxtb	r3, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	b25b      	sxtb	r3, r3
 8002142:	4013      	ands	r3, r2
 8002144:	b259      	sxtb	r1, r3
 8002146:	79fa      	ldrb	r2, [r7, #7]
 8002148:	4603      	mov	r3, r0
 800214a:	01db      	lsls	r3, r3, #7
 800214c:	4413      	add	r3, r2
 800214e:	b2c9      	uxtb	r1, r1
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <ssd1306_DrawPixel+0xa4>)
 8002152:	54d1      	strb	r1, [r2, r3]
 8002154:	e000      	b.n	8002158 <ssd1306_DrawPixel+0x98>
        return;
 8002156:	bf00      	nop
    }
}
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000280 	.word	0x20000280

08002168 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	4604      	mov	r4, r0
 8002170:	1d38      	adds	r0, r7, #4
 8002172:	e880 0006 	stmia.w	r0, {r1, r2}
 8002176:	461a      	mov	r2, r3
 8002178:	4623      	mov	r3, r4
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	4613      	mov	r3, r2
 800217e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b1f      	cmp	r3, #31
 8002184:	d902      	bls.n	800218c <ssd1306_WriteChar+0x24>
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b7e      	cmp	r3, #126	; 0x7e
 800218a:	d901      	bls.n	8002190 <ssd1306_WriteChar+0x28>
        return 0;
 800218c:	2300      	movs	r3, #0
 800218e:	e06d      	b.n	800226c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002190:	4b38      	ldr	r3, [pc, #224]	; (8002274 <ssd1306_WriteChar+0x10c>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	793b      	ldrb	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	dc06      	bgt.n	80021ac <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <ssd1306_WriteChar+0x10c>)
 80021a0:	885b      	ldrh	r3, [r3, #2]
 80021a2:	461a      	mov	r2, r3
 80021a4:	797b      	ldrb	r3, [r7, #5]
 80021a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	dd01      	ble.n	80021b0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e05d      	b.n	800226c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	e04c      	b.n	8002250 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3b20      	subs	r3, #32
 80021bc:	7979      	ldrb	r1, [r7, #5]
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	440b      	add	r3, r1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	e034      	b.n	8002240 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <ssd1306_WriteChar+0x10c>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	b2d8      	uxtb	r0, r3
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <ssd1306_WriteChar+0x10c>)
 80021f6:	885b      	ldrh	r3, [r3, #2]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4413      	add	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	7bba      	ldrb	r2, [r7, #14]
 8002204:	4619      	mov	r1, r3
 8002206:	f7ff ff5b 	bl	80020c0 <ssd1306_DrawPixel>
 800220a:	e016      	b.n	800223a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <ssd1306_WriteChar+0x10c>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b2d8      	uxtb	r0, r3
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <ssd1306_WriteChar+0x10c>)
 800221c:	885b      	ldrh	r3, [r3, #2]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	b2d9      	uxtb	r1, r3
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	f7ff ff43 	bl	80020c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	3301      	adds	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	793b      	ldrb	r3, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4293      	cmp	r3, r2
 8002248:	d3c5      	bcc.n	80021d6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3301      	adds	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	797b      	ldrb	r3, [r7, #5]
 8002252:	461a      	mov	r2, r3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4293      	cmp	r3, r2
 8002258:	d3ad      	bcc.n	80021b6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <ssd1306_WriteChar+0x10c>)
 800225c:	881a      	ldrh	r2, [r3, #0]
 800225e:	793b      	ldrb	r3, [r7, #4]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	b29a      	uxth	r2, r3
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <ssd1306_WriteChar+0x10c>)
 8002268:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3724      	adds	r7, #36	; 0x24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd90      	pop	{r4, r7, pc}
 8002274:	20000680 	.word	0x20000680

08002278 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	1d38      	adds	r0, r7, #4
 8002282:	e880 0006 	stmia.w	r0, {r1, r2}
 8002286:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002288:	e012      	b.n	80022b0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	7818      	ldrb	r0, [r3, #0]
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	1d3a      	adds	r2, r7, #4
 8002292:	ca06      	ldmia	r2, {r1, r2}
 8002294:	f7ff ff68 	bl	8002168 <ssd1306_WriteChar>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d002      	beq.n	80022aa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	e008      	b.n	80022bc <ssd1306_WriteString+0x44>
        }
        str++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e8      	bne.n	800228a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	781b      	ldrb	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <ssd1306_SetCursor+0x2c>)
 80022da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <ssd1306_SetCursor+0x2c>)
 80022e2:	805a      	strh	r2, [r3, #2]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	20000680 	.word	0x20000680

080022f4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80022fe:	2381      	movs	r3, #129	; 0x81
 8002300:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdff 	bl	8001f08 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fdfb 	bl	8001f08 <ssd1306_WriteCommand>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800232c:	23af      	movs	r3, #175	; 0xaf
 800232e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <ssd1306_SetDisplayOn+0x38>)
 8002332:	2201      	movs	r2, #1
 8002334:	715a      	strb	r2, [r3, #5]
 8002336:	e004      	b.n	8002342 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002338:	23ae      	movs	r3, #174	; 0xae
 800233a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <ssd1306_SetDisplayOn+0x38>)
 800233e:	2200      	movs	r2, #0
 8002340:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fddf 	bl	8001f08 <ssd1306_WriteCommand>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000680 	.word	0x20000680

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_MspInit+0x4c>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_MspInit+0x4c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_MspInit+0x4c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_MspInit+0x4c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	210f      	movs	r1, #15
 8002392:	f06f 0001 	mvn.w	r0, #1
 8002396:	f000 fedb 	bl	8003150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08e      	sub	sp, #56	; 0x38
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023b8:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_InitTick+0xe0>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a32      	ldr	r2, [pc, #200]	; (8002488 <HAL_InitTick+0xe0>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
 80023c4:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_InitTick+0xe0>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023d0:	f107 0210 	add.w	r2, r7, #16
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 ffc8 	bl	8005370 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023ea:	f002 ff99 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
 80023ee:	6378      	str	r0, [r7, #52]	; 0x34
 80023f0:	e004      	b.n	80023fc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023f2:	f002 ff95 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
 80023f6:	4603      	mov	r3, r0
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_InitTick+0xe4>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	3b01      	subs	r3, #1
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_InitTick+0xe8>)
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_InitTick+0xec>)
 800240e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_InitTick+0xe8>)
 8002412:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002416:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_InitTick+0xe8>)
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_InitTick+0xe8>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_InitTick+0xe8>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_InitTick+0xe8>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002430:	4817      	ldr	r0, [pc, #92]	; (8002490 <HAL_InitTick+0xe8>)
 8002432:	f004 f92d 	bl	8006690 <HAL_TIM_Base_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800243c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11b      	bne.n	800247c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002444:	4812      	ldr	r0, [pc, #72]	; (8002490 <HAL_InitTick+0xe8>)
 8002446:	f004 f985 	bl	8006754 <HAL_TIM_Base_Start_IT>
 800244a:	4603      	mov	r3, r0
 800244c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002454:	2b00      	cmp	r3, #0
 8002456:	d111      	bne.n	800247c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002458:	2036      	movs	r0, #54	; 0x36
 800245a:	f000 fe95 	bl	8003188 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d808      	bhi.n	8002476 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	2036      	movs	r0, #54	; 0x36
 800246a:	f000 fe71 	bl	8003150 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_InitTick+0xf0>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e002      	b.n	800247c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800247c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002480:	4618      	mov	r0, r3
 8002482:	3738      	adds	r7, #56	; 0x38
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	431bde83 	.word	0x431bde83
 8002490:	20000688 	.word	0x20000688
 8002494:	40001000 	.word	0x40001000
 8002498:	20000058 	.word	0x20000058

0800249c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <NMI_Handler+0x4>

080024a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <HardFault_Handler+0x4>

080024a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <MemManage_Handler+0x4>

080024ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <BusFault_Handler+0x4>

080024b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <UsageFault_Handler+0x4>

080024ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <TIM6_DAC_IRQHandler+0x20>)
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80024d6:	4804      	ldr	r0, [pc, #16]	; (80024e8 <TIM6_DAC_IRQHandler+0x20>)
 80024d8:	f000 fed8 	bl	800328c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <TIM6_DAC_IRQHandler+0x24>)
 80024de:	f004 fb03 	bl	8006ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000010c 	.word	0x2000010c
 80024ec:	20000688 	.word	0x20000688

080024f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <DMA2_Stream3_IRQHandler+0x10>)
 80024f6:	f001 f94b 	bl	8003790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000220 	.word	0x20000220

08002504 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <USART6_IRQHandler+0x10>)
 800250a:	f005 f9ab 	bl	8007864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000724 	.word	0x20000724

08002518 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e00a      	b.n	8002540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800252a:	f3af 8000 	nop.w
 800252e:	4601      	mov	r1, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	60ba      	str	r2, [r7, #8]
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbf0      	blt.n	800252a <_read+0x12>
  }

  return len;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e009      	b.n	8002578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf1      	blt.n	8002564 <_write+0x12>
  }
  return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_close>:

int _close(int file)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b2:	605a      	str	r2, [r3, #4]
  return 0;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_isatty>:

int _isatty(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ca:	2301      	movs	r3, #1
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <_sbrk+0x5c>)
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <_sbrk+0x60>)
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <_sbrk+0x64>)
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <_sbrk+0x68>)
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	429a      	cmp	r2, r3
 8002622:	d207      	bcs.n	8002634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002624:	f009 fe62 	bl	800c2ec <__errno>
 8002628:	4603      	mov	r3, r0
 800262a:	220c      	movs	r2, #12
 800262c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	e009      	b.n	8002648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <_sbrk+0x64>)
 8002644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20080000 	.word	0x20080000
 8002654:	00000400 	.word	0x00000400
 8002658:	200006d4 	.word	0x200006d4
 800265c:	20005320 	.word	0x20005320

08002660 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <SystemInit+0x20>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <SystemInit+0x20>)
 800266c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002696:	463b      	mov	r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	615a      	str	r2, [r3, #20]
 80026a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <MX_TIM4_Init+0xac>)
 80026aa:	4a22      	ldr	r2, [pc, #136]	; (8002734 <MX_TIM4_Init+0xb0>)
 80026ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <MX_TIM4_Init+0xac>)
 80026b0:	221f      	movs	r2, #31
 80026b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_TIM4_Init+0xac>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <MX_TIM4_Init+0xac>)
 80026bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_TIM4_Init+0xac>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_TIM4_Init+0xac>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026ce:	4818      	ldr	r0, [pc, #96]	; (8002730 <MX_TIM4_Init+0xac>)
 80026d0:	f004 f8b8 	bl	8006844 <HAL_TIM_PWM_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80026da:	f7ff fb35 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026e6:	f107 031c 	add.w	r3, r7, #28
 80026ea:	4619      	mov	r1, r3
 80026ec:	4810      	ldr	r0, [pc, #64]	; (8002730 <MX_TIM4_Init+0xac>)
 80026ee:	f004 ff7b 	bl	80075e8 <HAL_TIMEx_MasterConfigSynchronization>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80026f8:	f7ff fb26 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026fc:	2360      	movs	r3, #96	; 0x60
 80026fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	2208      	movs	r2, #8
 8002710:	4619      	mov	r1, r3
 8002712:	4807      	ldr	r0, [pc, #28]	; (8002730 <MX_TIM4_Init+0xac>)
 8002714:	f004 fb08 	bl	8006d28 <HAL_TIM_PWM_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800271e:	f7ff fb13 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002722:	4803      	ldr	r0, [pc, #12]	; (8002730 <MX_TIM4_Init+0xac>)
 8002724:	f000 f828 	bl	8002778 <HAL_TIM_MspPostInit>

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200006d8 	.word	0x200006d8
 8002734:	40000800 	.word	0x40000800

08002738 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_TIM_PWM_MspInit+0x38>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10b      	bne.n	8002762 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_TIM_PWM_MspInit+0x3c>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <HAL_TIM_PWM_MspInit+0x3c>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_TIM_PWM_MspInit+0x3c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40000800 	.word	0x40000800
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_TIM_MspPostInit+0x64>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d11c      	bne.n	80027d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_TIM_MspPostInit+0x68>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <HAL_TIM_MspPostInit+0x68>)
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_TIM_MspPostInit+0x68>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = StepperMotorStep_Pin;
 80027b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(StepperMotorStep_GPIO_Port, &GPIO_InitStruct);
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <HAL_TIM_MspPostInit+0x6c>)
 80027d0:	f001 fa48 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020c00 	.word	0x40020c00

080027e8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <MX_USART6_UART_Init+0x58>)
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <MX_USART6_UART_Init+0x5c>)
 80027f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <MX_USART6_UART_Init+0x58>)
 80027f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MX_USART6_UART_Init+0x58>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <MX_USART6_UART_Init+0x58>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_USART6_UART_Init+0x58>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_USART6_UART_Init+0x58>)
 800280e:	220c      	movs	r2, #12
 8002810:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <MX_USART6_UART_Init+0x58>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_USART6_UART_Init+0x58>)
 800281a:	2200      	movs	r2, #0
 800281c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <MX_USART6_UART_Init+0x58>)
 8002820:	2200      	movs	r2, #0
 8002822:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_USART6_UART_Init+0x58>)
 8002826:	2200      	movs	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_USART6_UART_Init+0x58>)
 800282c:	f004 ff88 	bl	8007740 <HAL_UART_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002836:	f7ff fa87 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000724 	.word	0x20000724
 8002844:	40011400 	.word	0x40011400

08002848 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b0ae      	sub	sp, #184	; 0xb8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2290      	movs	r2, #144	; 0x90
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f009 fc8c 	bl	800c186 <memset>
  if(uartHandle->Instance==USART6)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a26      	ldr	r2, [pc, #152]	; (800290c <HAL_UART_MspInit+0xc4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d144      	bne.n	8002902 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800287c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800287e:	2300      	movs	r3, #0
 8002880:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fda4 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002892:	f7ff fa59 	bl	8001d48 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_UART_MspInit+0xc8>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_UART_MspInit+0xc8>)
 800289c:	f043 0320 	orr.w	r3, r3, #32
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_UART_MspInit+0xc8>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_UART_MspInit+0xc8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_UART_MspInit+0xc8>)
 80028b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_UART_MspInit+0xc8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = RPiPicoW_TX_Pin|RPiPicoW_RX_Pin;
 80028c6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80028ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028e0:	2308      	movs	r3, #8
 80028e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4809      	ldr	r0, [pc, #36]	; (8002914 <HAL_UART_MspInit+0xcc>)
 80028ee:	f001 f9b9 	bl	8003c64 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2105      	movs	r1, #5
 80028f6:	2047      	movs	r0, #71	; 0x47
 80028f8:	f000 fc2a 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028fc:	2047      	movs	r0, #71	; 0x47
 80028fe:	f000 fc43 	bl	8003188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002902:	bf00      	nop
 8002904:	37b8      	adds	r7, #184	; 0xb8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40011400 	.word	0x40011400
 8002910:	40023800 	.word	0x40023800
 8002914:	40021800 	.word	0x40021800

08002918 <ws2812b_init>:
static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);
static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value);

// ======== Public Functions =======================================================================

int ws2812b_init(ws2812b_handle_t *ws) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  // Point ws2812b_error_msg to error buffer unless error message buffer is disabled.
#ifndef WS2812B_DISABLE_ERROR_MSG
  ws2812b_error_msg = error_msg_buf;
 8002920:	4b7a      	ldr	r3, [pc, #488]	; (8002b0c <ws2812b_init+0x1f4>)
 8002922:	4a7b      	ldr	r2, [pc, #492]	; (8002b10 <ws2812b_init+0x1f8>)
 8002924:	601a      	str	r2, [r3, #0]
  error_msg_buf[0] = '\0';
 8002926:	4b7a      	ldr	r3, [pc, #488]	; (8002b10 <ws2812b_init+0x1f8>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
#else  /* WS2812B_DISABLE_ERROR_MSG */
  ws2812b_error_msg = 0;
#endif /* WS2812B_DISABLE_ERROR_MSG */

  // Assert packing is valid
  WS2812B_INIT_ASSERT((ws->config.packing == WS2812B_PACKING_DOUBLE) ||
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d009      	beq.n	8002948 <ws2812b_init+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d005      	beq.n	8002948 <ws2812b_init+0x30>
 800293c:	4875      	ldr	r0, [pc, #468]	; (8002b14 <ws2812b_init+0x1fc>)
 800293e:	f000 f9f5 	bl	8002d2c <set_init_error_msg>
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	e17f      	b.n	8002c48 <ws2812b_init+0x330>
                          (ws->config.packing == WS2812B_PACKING_SINGLE),
                      "ws2812b: config.packing is invalid!");

  // Assert pulse_len_1 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_1),
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	789b      	ldrb	r3, [r3, #2]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d01d      	beq.n	800298c <ws2812b_init+0x74>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	789b      	ldrb	r3, [r3, #2]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d019      	beq.n	800298c <ws2812b_init+0x74>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	789b      	ldrb	r3, [r3, #2]
 800295c:	2b07      	cmp	r3, #7
 800295e:	d015      	beq.n	800298c <ws2812b_init+0x74>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	789b      	ldrb	r3, [r3, #2]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d011      	beq.n	800298c <ws2812b_init+0x74>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	789b      	ldrb	r3, [r3, #2]
 800296c:	2b3f      	cmp	r3, #63	; 0x3f
 800296e:	d00d      	beq.n	800298c <ws2812b_init+0x74>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	2b1f      	cmp	r3, #31
 8002976:	d009      	beq.n	800298c <ws2812b_init+0x74>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	789b      	ldrb	r3, [r3, #2]
 800297c:	2b7f      	cmp	r3, #127	; 0x7f
 800297e:	d005      	beq.n	800298c <ws2812b_init+0x74>
 8002980:	4865      	ldr	r0, [pc, #404]	; (8002b18 <ws2812b_init+0x200>)
 8002982:	f000 f9d3 	bl	8002d2c <set_init_error_msg>
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e15d      	b.n	8002c48 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_1 is invalid!");

  // Asert pulse_len_0 is valid
  WS2812B_INIT_ASSERT(WS2812B_IS_PULSE_LEN(ws->config.pulse_len_0),
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d01d      	beq.n	80029d0 <ws2812b_init+0xb8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d019      	beq.n	80029d0 <ws2812b_init+0xb8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	d015      	beq.n	80029d0 <ws2812b_init+0xb8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d011      	beq.n	80029d0 <ws2812b_init+0xb8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	2b3f      	cmp	r3, #63	; 0x3f
 80029b2:	d00d      	beq.n	80029d0 <ws2812b_init+0xb8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	2b1f      	cmp	r3, #31
 80029ba:	d009      	beq.n	80029d0 <ws2812b_init+0xb8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b7f      	cmp	r3, #127	; 0x7f
 80029c2:	d005      	beq.n	80029d0 <ws2812b_init+0xb8>
 80029c4:	4855      	ldr	r0, [pc, #340]	; (8002b1c <ws2812b_init+0x204>)
 80029c6:	f000 f9b1 	bl	8002d2c <set_init_error_msg>
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e13b      	b.n	8002c48 <ws2812b_init+0x330>
                      "ws2812b: config.pulse_len_0 is invalid!");

  // Assert first_bit_0 is valid
  WS2812B_INIT_ASSERT((ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_DISABLED) ||
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	78db      	ldrb	r3, [r3, #3]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <ws2812b_init+0xd4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	78db      	ldrb	r3, [r3, #3]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d005      	beq.n	80029ec <ws2812b_init+0xd4>
 80029e0:	484f      	ldr	r0, [pc, #316]	; (8002b20 <ws2812b_init+0x208>)
 80029e2:	f000 f9a3 	bl	8002d2c <set_init_error_msg>
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e12d      	b.n	8002c48 <ws2812b_init+0x330>
                          (ws->config.first_bit_0 == WS2812B_FIRST_BIT_0_ENABLED),
                      "ws2812b: config.first_bit_0 is invalid!");

  // Assert spi_bit_order is valid
  WS2812B_INIT_ASSERT((ws->config.spi_bit_order == WS2812B_LSB_FIRST) ||
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d009      	beq.n	8002a08 <ws2812b_init+0xf0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	791b      	ldrb	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <ws2812b_init+0xf0>
 80029fc:	4849      	ldr	r0, [pc, #292]	; (8002b24 <ws2812b_init+0x20c>)
 80029fe:	f000 f995 	bl	8002d2c <set_init_error_msg>
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	e11f      	b.n	8002c48 <ws2812b_init+0x330>
                          (ws->config.spi_bit_order == WS2812B_MSB_FIRST),
                      "ws2812b: config.spi_bit_order is invalid!");

  // Assert that the '1' pulse is longer than the '0' pulse:
  WS2812B_INIT_ASSERT(ws->config.pulse_len_1 > ws->config.pulse_len_0,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	789a      	ldrb	r2, [r3, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d805      	bhi.n	8002a20 <ws2812b_init+0x108>
 8002a14:	4844      	ldr	r0, [pc, #272]	; (8002b28 <ws2812b_init+0x210>)
 8002a16:	f000 f989 	bl	8002d2c <set_init_error_msg>
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e113      	b.n	8002c48 <ws2812b_init+0x330>
                      "ws2812b: One-pulse must be longer than zero-pulse!");

  // Assert that pulse is not too long if in double packing:
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d109      	bne.n	8002a3c <ws2812b_init+0x124>
    WS2812B_INIT_ASSERT(ws->config.pulse_len_1 < WS2812B_PULSE_LEN_4b,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	789b      	ldrb	r3, [r3, #2]
 8002a2c:	2b0e      	cmp	r3, #14
 8002a2e:	d905      	bls.n	8002a3c <ws2812b_init+0x124>
 8002a30:	483e      	ldr	r0, [pc, #248]	; (8002b2c <ws2812b_init+0x214>)
 8002a32:	f000 f97b 	bl	8002d2c <set_init_error_msg>
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e105      	b.n	8002c48 <ws2812b_init+0x330>
                        "ws2812b: Pulse is too long for double packing!");
  }

  // Apply 0 prefix to pulse if selected
  ws->state.pulse_0 = ws->config.pulse_len_0 << ws->config.first_bit_0;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	78db      	ldrb	r3, [r3, #3]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	765a      	strb	r2, [r3, #25]
  ws->state.pulse_1 = ws->config.pulse_len_1 << ws->config.first_bit_0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	789b      	ldrb	r3, [r3, #2]
 8002a54:	461a      	mov	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	78db      	ldrb	r3, [r3, #3]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	761a      	strb	r2, [r3, #24]

  // Pulse needs to be reverse for MSB-first transmission:
  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	791b      	ldrb	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 80e9 	bne.w	8002c40 <ws2812b_init+0x328>
    if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d15c      	bne.n	8002b30 <ws2812b_init+0x218>
      ws->state.pulse_0 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_0);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7e5b      	ldrb	r3, [r3, #25]
 8002a7a:	10db      	asrs	r3, r3, #3
 8002a7c:	b25b      	sxtb	r3, r3
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	b25a      	sxtb	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7e5b      	ldrb	r3, [r3, #25]
 8002a88:	105b      	asrs	r3, r3, #1
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	4313      	orrs	r3, r2
 8002a94:	b25a      	sxtb	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7e5b      	ldrb	r3, [r3, #25]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b25a      	sxtb	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7e5b      	ldrb	r3, [r3, #25]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_NIBBLE_REVERSE(ws->state.pulse_1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7e1b      	ldrb	r3, [r3, #24]
 8002ac4:	10db      	asrs	r3, r3, #3
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	b25a      	sxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7e1b      	ldrb	r3, [r3, #24]
 8002ad2:	105b      	asrs	r3, r3, #1
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	b25b      	sxtb	r3, r3
 8002adc:	4313      	orrs	r3, r2
 8002ade:	b25a      	sxtb	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7e1b      	ldrb	r3, [r3, #24]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7e1b      	ldrb	r3, [r3, #24]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	761a      	strb	r2, [r3, #24]
 8002b0a:	e099      	b.n	8002c40 <ws2812b_init+0x328>
 8002b0c:	200007ac 	.word	0x200007ac
 8002b10:	200007b0 	.word	0x200007b0
 8002b14:	0800cffc 	.word	0x0800cffc
 8002b18:	0800d020 	.word	0x0800d020
 8002b1c:	0800d048 	.word	0x0800d048
 8002b20:	0800d070 	.word	0x0800d070
 8002b24:	0800d098 	.word	0x0800d098
 8002b28:	0800d0c4 	.word	0x0800d0c4
 8002b2c:	0800d0f8 	.word	0x0800d0f8
    } else {
      ws->state.pulse_0 = WS2812B_BYTE_REVERSE(ws->state.pulse_0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e5b      	ldrb	r3, [r3, #25]
 8002b34:	09db      	lsrs	r3, r3, #7
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	b25a      	sxtb	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7e5b      	ldrb	r3, [r3, #25]
 8002b3e:	115b      	asrs	r3, r3, #5
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b25a      	sxtb	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7e5b      	ldrb	r3, [r3, #25]
 8002b50:	10db      	asrs	r3, r3, #3
 8002b52:	b25b      	sxtb	r3, r3
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b25a      	sxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7e5b      	ldrb	r3, [r3, #25]
 8002b62:	105b      	asrs	r3, r3, #1
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7e5b      	ldrb	r3, [r3, #25]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b25a      	sxtb	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7e5b      	ldrb	r3, [r3, #25]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7e5b      	ldrb	r3, [r3, #25]
 8002b98:	015b      	lsls	r3, r3, #5
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	b25b      	sxtb	r3, r3
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b25a      	sxtb	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7e5b      	ldrb	r3, [r3, #25]
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	765a      	strb	r2, [r3, #25]
      ws->state.pulse_1 = WS2812B_BYTE_REVERSE(ws->state.pulse_1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e1b      	ldrb	r3, [r3, #24]
 8002bbc:	09db      	lsrs	r3, r3, #7
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	b25a      	sxtb	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7e1b      	ldrb	r3, [r3, #24]
 8002bc6:	115b      	asrs	r3, r3, #5
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b25a      	sxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e1b      	ldrb	r3, [r3, #24]
 8002bd8:	10db      	asrs	r3, r3, #3
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b25a      	sxtb	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7e1b      	ldrb	r3, [r3, #24]
 8002bea:	105b      	asrs	r3, r3, #1
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b25a      	sxtb	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	4313      	orrs	r3, r2
 8002c08:	b25a      	sxtb	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7e1b      	ldrb	r3, [r3, #24]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b25a      	sxtb	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7e1b      	ldrb	r3, [r3, #24]
 8002c20:	015b      	lsls	r3, r3, #5
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b25a      	sxtb	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7e1b      	ldrb	r3, [r3, #24]
 8002c32:	01db      	lsls	r3, r3, #7
 8002c34:	b25b      	sxtb	r3, r3
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	761a      	strb	r2, [r3, #24]
    }
  }

  ws->state.iteration_index = 0;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]

  return 0;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <ws2812b_required_buffer_len>:

uint32_t ws2812b_required_buffer_len(ws2812b_handle_t *ws) {
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return WS2812B_REQUIRED_BUFFER_LEN(ws->led_count, ws->config.packing, ws->config.prefix_len,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <ws2812b_required_buffer_len+0x18>
 8002c64:	2318      	movs	r3, #24
 8002c66:	e000      	b.n	8002c6a <ws2812b_required_buffer_len+0x1a>
 8002c68:	230c      	movs	r3, #12
 8002c6a:	fb03 f202 	mul.w	r2, r3, r2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4413      	add	r3, r2
                                     ws->config.suffix_len);
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <ws2812b_fill_buffer>:

void ws2812b_fill_buffer(ws2812b_handle_t *ws, uint8_t *buffer) {
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  ws2812b_led_t *led = ws->leds;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	617b      	str	r3, [r7, #20]

  // Add 0x00 prefix
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	e008      	b.n	8002cae <ws2812b_fill_buffer+0x28>
    *buffer = 0x00;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.prefix_len; i++) {
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	3301      	adds	r3, #1
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d3f1      	bcc.n	8002c9c <ws2812b_fill_buffer+0x16>
  }

  // Fill buffer
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e01a      	b.n	8002cf4 <ws2812b_fill_buffer+0x6e>
    add_byte(ws, led->green, &buffer);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	463a      	mov	r2, r7
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f85a 	bl	8002d80 <add_byte>
    add_byte(ws, led->red, &buffer);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	463a      	mov	r2, r7
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f853 	bl	8002d80 <add_byte>
    add_byte(ws, led->blue, &buffer);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	789b      	ldrb	r3, [r3, #2]
 8002cde:	463a      	mov	r2, r7
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f84c 	bl	8002d80 <add_byte>
    led++;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3303      	adds	r3, #3
 8002cec:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < ws->led_count; i++) {
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d3df      	bcc.n	8002cbe <ws2812b_fill_buffer+0x38>
  }

  // Add 0x00 suffix
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	e008      	b.n	8002d16 <ws2812b_fill_buffer+0x90>
    *buffer = 0x00;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    buffer++;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	603b      	str	r3, [r7, #0]
  for (uint_fast8_t i = 0; i < ws->config.suffix_len; i++) {
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d3f1      	bcc.n	8002d04 <ws2812b_fill_buffer+0x7e>
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <set_init_error_msg>:
  return 0x00;
}

// ======== Private Functions ======================================================================

static void set_init_error_msg(const char *error_msg) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
#ifndef WS2812B_DISABLE_ERROR_MSG
  // If error mesages are enabled, copy over the error message
  int i = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]

  // Copy content
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002d38:	e00b      	b.n	8002d52 <set_init_error_msg+0x26>
    error_msg_buf[i] = error_msg[i];
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	7819      	ldrb	r1, [r3, #0]
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <set_init_error_msg+0x50>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	460a      	mov	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
    i++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
  while (i < WS2812B_ERROR_MSG_MAX_LEN - 1 && error_msg[i] != '\0') {
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b3a      	cmp	r3, #58	; 0x3a
 8002d56:	dc05      	bgt.n	8002d64 <set_init_error_msg+0x38>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ea      	bne.n	8002d3a <set_init_error_msg+0xe>
  }

  // Terminate string
  error_msg_buf[i] = '\0';
 8002d64:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <set_init_error_msg+0x50>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4413      	add	r3, r2
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
#else
  // Otherwise avoid the unused-args warning
  (void)(error_msg);
#endif /* WS2812B_DISABLE_ERROR_MSG */
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200007b0 	.word	0x200007b0

08002d80 <add_byte>:

static void add_byte(ws2812b_handle_t *ws, uint8_t value, uint8_t **buffer) {
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	72fb      	strb	r3, [r7, #11]
  if (ws->config.packing == WS2812B_PACKING_DOUBLE) {
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d118      	bne.n	8002dc8 <add_byte+0x48>

    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e011      	b.n	8002dc0 <add_byte+0x40>
      **buffer = construct_double_pulse(ws, b, value);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681c      	ldr	r4, [r3, #0]
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	461a      	mov	r2, r3
 8002da4:	6979      	ldr	r1, [r7, #20]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f844 	bl	8002e34 <construct_double_pulse>
 8002dac:	4603      	mov	r3, r0
 8002dae:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b = b + 2) {
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b07      	cmp	r3, #7
 8002dc4:	d9ea      	bls.n	8002d9c <add_byte+0x1c>
    for (uint_fast8_t b = 0; b < 8; b++) {
      **buffer = construct_single_pulse(ws, b, value);
      ++*buffer;
    }
  }
}
 8002dc6:	e017      	b.n	8002df8 <add_byte+0x78>
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	e011      	b.n	8002df2 <add_byte+0x72>
      **buffer = construct_single_pulse(ws, b, value);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681c      	ldr	r4, [r3, #0]
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f811 	bl	8002e00 <construct_single_pulse>
 8002dde:	4603      	mov	r3, r0
 8002de0:	7023      	strb	r3, [r4, #0]
      ++*buffer;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t b = 0; b < 8; b++) {
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	3301      	adds	r3, #1
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b07      	cmp	r3, #7
 8002df6:	d9ea      	bls.n	8002dce <add_byte+0x4e>
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}

08002e00 <construct_single_pulse>:

static uint8_t construct_single_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
  return (value & ((0x80U) >> b) ? ws->state.pulse_1 : ws->state.pulse_0);
 8002e0e:	79fa      	ldrb	r2, [r7, #7]
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	fa21 f303 	lsr.w	r3, r1, r3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <construct_single_pulse+0x24>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	7e1b      	ldrb	r3, [r3, #24]
 8002e22:	e001      	b.n	8002e28 <construct_single_pulse+0x28>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	7e5b      	ldrb	r3, [r3, #25]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <construct_double_pulse>:

static uint8_t construct_double_pulse(ws2812b_handle_t *ws, uint_fast8_t b, uint8_t value) {
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	71fb      	strb	r3, [r7, #7]
  uint8_t result;
  uint8_t pulse_1 = ws->state.pulse_1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	7e1b      	ldrb	r3, [r3, #24]
 8002e46:	75bb      	strb	r3, [r7, #22]
  uint8_t pulse_0 = ws->state.pulse_0;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	7e5b      	ldrb	r3, [r3, #25]
 8002e4c:	757b      	strb	r3, [r7, #21]

  if (ws->config.spi_bit_order == WS2812B_MSB_FIRST) {
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	791b      	ldrb	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d121      	bne.n	8002e9a <construct_double_pulse+0x66>
    // MSB is first
    result = value & ((0x80U) >> (b + 1)) ? pulse_1 : pulse_0;
 8002e56:	79fa      	ldrb	r2, [r7, #7]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <construct_double_pulse+0x38>
 8002e68:	7dbb      	ldrb	r3, [r7, #22]
 8002e6a:	e000      	b.n	8002e6e <construct_double_pulse+0x3a>
 8002e6c:	7d7b      	ldrb	r3, [r7, #21]
 8002e6e:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002e70:	79fa      	ldrb	r2, [r7, #7]
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	fa21 f303 	lsr.w	r3, r1, r3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <construct_double_pulse+0x54>
 8002e80:	7dbb      	ldrb	r3, [r7, #22]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	e002      	b.n	8002e8e <construct_double_pulse+0x5a>
 8002e88:	7d7b      	ldrb	r3, [r7, #21]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	75fb      	strb	r3, [r7, #23]
 8002e98:	e020      	b.n	8002edc <construct_double_pulse+0xa8>
  } else {
    // LSB is first
    result = value & ((0x80U) >> (b)) ? pulse_1 : pulse_0;
 8002e9a:	79fa      	ldrb	r2, [r7, #7]
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	fa21 f303 	lsr.w	r3, r1, r3
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <construct_double_pulse+0x7a>
 8002eaa:	7dbb      	ldrb	r3, [r7, #22]
 8002eac:	e000      	b.n	8002eb0 <construct_double_pulse+0x7c>
 8002eae:	7d7b      	ldrb	r3, [r7, #21]
 8002eb0:	75fb      	strb	r3, [r7, #23]
    result |= value & ((0x80U) >> (b + 1)) ? (pulse_1 << 4) : (pulse_0 << 4);
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	fa21 f303 	lsr.w	r3, r1, r3
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <construct_double_pulse+0x98>
 8002ec4:	7dbb      	ldrb	r3, [r7, #22]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	e002      	b.n	8002ed2 <construct_double_pulse+0x9e>
 8002ecc:	7d7b      	ldrb	r3, [r7, #21]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef8:	e002      	b.n	8002f00 <LoopCopyDataInit>

08002efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efe:	3304      	adds	r3, #4

08002f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f04:	d3f9      	bcc.n	8002efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f08:	4c0b      	ldr	r4, [pc, #44]	; (8002f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f0c:	e001      	b.n	8002f12 <LoopFillZerobss>

08002f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f10:	3204      	adds	r2, #4

08002f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f14:	d3fb      	bcc.n	8002f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f16:	f7ff fba3 	bl	8002660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f1a:	f009 f9ed 	bl	800c2f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f1e:	f7fe fe3d 	bl	8001b9c <main>
  bx  lr    
 8002f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f2c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002f30:	0800e8e4 	.word	0x0800e8e4
  ldr r2, =_sbss
 8002f34:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002f38:	2000531c 	.word	0x2000531c

08002f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f3c:	e7fe      	b.n	8002f3c <ADC_IRQHandler>

08002f3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f42:	2003      	movs	r0, #3
 8002f44:	f000 f8f9 	bl	800313a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f48:	2005      	movs	r0, #5
 8002f4a:	f7ff fa2d 	bl	80023a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f4e:	f7ff fa03 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_IncTick+0x20>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_IncTick+0x24>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <HAL_IncTick+0x24>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	2000005c 	.word	0x2000005c
 8002f7c:	200007ec 	.word	0x200007ec

08002f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return uwTick;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_GetTick+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200007ec 	.word	0x200007ec

08002f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff ffee 	bl	8002f80 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d005      	beq.n	8002fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_Delay+0x44>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fbe:	bf00      	nop
 8002fc0:	f7ff ffde 	bl	8002f80 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d8f7      	bhi.n	8002fc0 <HAL_Delay+0x28>
  {
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2000005c 	.word	0x2000005c

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <__NVIC_SetPriorityGrouping+0x40>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 800300a:	4313      	orrs	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300e:	4a04      	ldr	r2, [pc, #16]	; (8003020 <__NVIC_SetPriorityGrouping+0x40>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	60d3      	str	r3, [r2, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00
 8003024:	05fa0000 	.word	0x05fa0000

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	; (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ff4c 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003162:	f7ff ff61 	bl	8003028 <__NVIC_GetPriorityGrouping>
 8003166:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	6978      	ldr	r0, [r7, #20]
 800316e:	f7ff ffb1 	bl	80030d4 <NVIC_EncodePriority>
 8003172:	4602      	mov	r2, r0
 8003174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ff80 	bl	8003080 <__NVIC_SetPriority>
}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff54 	bl	8003044 <__NVIC_EnableIRQ>
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e014      	b.n	80031e0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	791b      	ldrb	r3, [r3, #4]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fc04 	bl	80009d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	795b      	ldrb	r3, [r3, #5]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_DAC_Start+0x16>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e040      	b.n	8003280 <HAL_DAC_Start+0x98>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2201      	movs	r2, #1
 8003218:	409a      	lsls	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10f      	bne.n	8003248 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003232:	2b3c      	cmp	r3, #60	; 0x3c
 8003234:	d11d      	bne.n	8003272 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	e014      	b.n	8003272 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	213c      	movs	r1, #60	; 0x3c
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	429a      	cmp	r2, r3
 8003260:	d107      	bne.n	8003272 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0202 	orr.w	r2, r2, #2
 8003270:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a2:	d120      	bne.n	80032e6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b2:	d118      	bne.n	80032e6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2204      	movs	r2, #4
 80032b8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032de:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f852 	bl	800338a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f4:	d120      	bne.n	8003338 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003304:	d118      	bne.n	8003338 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2204      	movs	r2, #4
 800330a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f043 0202 	orr.w	r2, r3, #2
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003320:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003330:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f882 	bl	800343c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	3308      	adds	r3, #8
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e004      	b.n	8003374 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	3314      	adds	r3, #20
 8003372:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	461a      	mov	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800339e:	b480      	push	{r7}
 80033a0:	b087      	sub	sp, #28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	795b      	ldrb	r3, [r3, #5]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_DAC_ConfigChannel+0x18>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e03c      	b.n	8003430 <HAL_DAC_ConfigChannel+0x92>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2202      	movs	r2, #2
 80033c0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4013      	ands	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	22c0      	movs	r2, #192	; 0xc0
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43da      	mvns	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	400a      	ands	r2, r1
 8003420:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff fd90 	bl	8002f80 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e099      	b.n	80035a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348c:	e00f      	b.n	80034ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348e:	f7ff fd77 	bl	8002f80 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b05      	cmp	r3, #5
 800349a:	d908      	bls.n	80034ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e078      	b.n	80035a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e8      	bne.n	800348e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_DMA_Init+0x158>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b04      	cmp	r3, #4
 8003540:	d117      	bne.n	8003572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fb09 	bl	8003b6c <DMA_CheckFifoParam>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800356e:	2301      	movs	r3, #1
 8003570:	e016      	b.n	80035a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fac0 	bl	8003b00 <DMA_CalcBaseAndBitshift>
 8003580:	4603      	mov	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	e010803f 	.word	0xe010803f

080035ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_DMA_Start_IT+0x26>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e048      	b.n	8003664 <HAL_DMA_Start_IT+0xb8>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d137      	bne.n	8003656 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa52 	bl	8003aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	223f      	movs	r2, #63	; 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0216 	orr.w	r2, r2, #22
 800361a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800362a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0208 	orr.w	r2, r2, #8
 8003642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e005      	b.n	8003662 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800365e:	2302      	movs	r3, #2
 8003660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800367a:	f7ff fc81 	bl	8002f80 <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d008      	beq.n	800369e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e052      	b.n	8003744 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0216 	bic.w	r2, r2, #22
 80036ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <HAL_DMA_Abort+0x62>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0208 	bic.w	r2, r2, #8
 80036dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ee:	e013      	b.n	8003718 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f0:	f7ff fc46 	bl	8002f80 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d90c      	bls.n	8003718 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2203      	movs	r2, #3
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e015      	b.n	8003744 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e4      	bne.n	80036f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	223f      	movs	r2, #63	; 0x3f
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d004      	beq.n	800376a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e00c      	b.n	8003784 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2205      	movs	r2, #5
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800379c:	4b8e      	ldr	r3, [pc, #568]	; (80039d8 <HAL_DMA_IRQHandler+0x248>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a8e      	ldr	r2, [pc, #568]	; (80039dc <HAL_DMA_IRQHandler+0x24c>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2208      	movs	r2, #8
 80037bc:	409a      	lsls	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01a      	beq.n	80037fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2208      	movs	r2, #8
 80037ea:	409a      	lsls	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	2201      	movs	r2, #1
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	2201      	movs	r2, #1
 8003820:	409a      	lsls	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	2204      	movs	r2, #4
 8003838:	409a      	lsls	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	2204      	movs	r2, #4
 8003856:	409a      	lsls	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f043 0204 	orr.w	r2, r3, #4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2210      	movs	r2, #16
 800386e:	409a      	lsls	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d043      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03c      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	2210      	movs	r2, #16
 800388c:	409a      	lsls	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d018      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d024      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e01f      	b.n	8003900 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
 80038d0:	e016      	b.n	8003900 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0208 	bic.w	r2, r2, #8
 80038ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	2220      	movs	r2, #32
 8003906:	409a      	lsls	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 808f 	beq.w	8003a30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8087 	beq.w	8003a30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	2220      	movs	r2, #32
 8003928:	409a      	lsls	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b05      	cmp	r3, #5
 8003938:	d136      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0216 	bic.w	r2, r2, #22
 8003948:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003958:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_DMA_IRQHandler+0x1da>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0208 	bic.w	r2, r2, #8
 8003978:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	223f      	movs	r2, #63	; 0x3f
 8003980:	409a      	lsls	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399a:	2b00      	cmp	r3, #0
 800399c:	d07e      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
        }
        return;
 80039a6:	e079      	b.n	8003a9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01d      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d031      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
 80039d4:	e02c      	b.n	8003a30 <HAL_DMA_IRQHandler+0x2a0>
 80039d6:	bf00      	nop
 80039d8:	20000054 	.word	0x20000054
 80039dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d023      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
 80039f0:	e01e      	b.n	8003a30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10f      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0210 	bic.w	r2, r2, #16
 8003a0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d032      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2205      	movs	r2, #5
 8003a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d307      	bcc.n	8003a78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f2      	bne.n	8003a5c <HAL_DMA_IRQHandler+0x2cc>
 8003a76:	e000      	b.n	8003a7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a9c:	bf00      	nop
    }
  }
}
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d108      	bne.n	8003ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ae2:	e007      	b.n	8003af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	60da      	str	r2, [r3, #12]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3b10      	subs	r3, #16
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <DMA_CalcBaseAndBitshift+0x60>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <DMA_CalcBaseAndBitshift+0x64>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d908      	bls.n	8003b40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <DMA_CalcBaseAndBitshift+0x68>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	1d1a      	adds	r2, r3, #4
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b3e:	e006      	b.n	8003b4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <DMA_CalcBaseAndBitshift+0x68>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	aaaaaaab 	.word	0xaaaaaaab
 8003b64:	0800e898 	.word	0x0800e898
 8003b68:	fffffc00 	.word	0xfffffc00

08003b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11f      	bne.n	8003bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d856      	bhi.n	8003c3a <DMA_CheckFifoParam+0xce>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <DMA_CheckFifoParam+0x28>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb7 	.word	0x08003bb7
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003c3b 	.word	0x08003c3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d046      	beq.n	8003c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e043      	b.n	8003c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bbe:	d140      	bne.n	8003c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e03d      	b.n	8003c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	d121      	bne.n	8003c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d837      	bhi.n	8003c46 <DMA_CheckFifoParam+0xda>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <DMA_CheckFifoParam+0x70>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bf3 	.word	0x08003bf3
 8003be4:	08003bed 	.word	0x08003bed
 8003be8:	08003c05 	.word	0x08003c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e030      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d025      	beq.n	8003c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c02:	e022      	b.n	8003c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c0c:	d11f      	bne.n	8003c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c12:	e01c      	b.n	8003c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d903      	bls.n	8003c22 <DMA_CheckFifoParam+0xb6>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d003      	beq.n	8003c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c20:	e018      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      break;
 8003c26:	e015      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00e      	beq.n	8003c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      break;
 8003c38:	e00b      	b.n	8003c52 <DMA_CheckFifoParam+0xe6>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e00a      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e008      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
 8003c44:	e006      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
 8003c48:	e004      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
    }
  } 
  
  return status; 
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop

08003c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e175      	b.n	8003f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c84:	2201      	movs	r2, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	f040 8164 	bne.w	8003f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d005      	beq.n	8003cba <HAL_GPIO_Init+0x56>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d130      	bne.n	8003d1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 0201 	and.w	r2, r3, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d017      	beq.n	8003d58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d123      	bne.n	8003dac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	08da      	lsrs	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3208      	adds	r2, #8
 8003d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	08da      	lsrs	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3208      	adds	r2, #8
 8003da6:	69b9      	ldr	r1, [r7, #24]
 8003da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	2203      	movs	r2, #3
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0203 	and.w	r2, r3, #3
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80be 	beq.w	8003f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dee:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e06:	4a61      	ldr	r2, [pc, #388]	; (8003f8c <HAL_GPIO_Init+0x328>)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_GPIO_Init+0x32c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d037      	beq.n	8003ea2 <HAL_GPIO_Init+0x23e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a57      	ldr	r2, [pc, #348]	; (8003f94 <HAL_GPIO_Init+0x330>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d031      	beq.n	8003e9e <HAL_GPIO_Init+0x23a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a56      	ldr	r2, [pc, #344]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02b      	beq.n	8003e9a <HAL_GPIO_Init+0x236>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a55      	ldr	r2, [pc, #340]	; (8003f9c <HAL_GPIO_Init+0x338>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d025      	beq.n	8003e96 <HAL_GPIO_Init+0x232>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a54      	ldr	r2, [pc, #336]	; (8003fa0 <HAL_GPIO_Init+0x33c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <HAL_GPIO_Init+0x22e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a53      	ldr	r2, [pc, #332]	; (8003fa4 <HAL_GPIO_Init+0x340>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d019      	beq.n	8003e8e <HAL_GPIO_Init+0x22a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <HAL_GPIO_Init+0x344>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_GPIO_Init+0x226>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a51      	ldr	r2, [pc, #324]	; (8003fac <HAL_GPIO_Init+0x348>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00d      	beq.n	8003e86 <HAL_GPIO_Init+0x222>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <HAL_GPIO_Init+0x34c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <HAL_GPIO_Init+0x21e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4f      	ldr	r2, [pc, #316]	; (8003fb4 <HAL_GPIO_Init+0x350>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_GPIO_Init+0x21a>
 8003e7a:	2309      	movs	r3, #9
 8003e7c:	e012      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e7e:	230a      	movs	r3, #10
 8003e80:	e010      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e82:	2308      	movs	r3, #8
 8003e84:	e00e      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e86:	2307      	movs	r3, #7
 8003e88:	e00c      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e8a:	2306      	movs	r3, #6
 8003e8c:	e00a      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e8e:	2305      	movs	r3, #5
 8003e90:	e008      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e92:	2304      	movs	r3, #4
 8003e94:	e006      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e96:	2303      	movs	r3, #3
 8003e98:	e004      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e002      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	f002 0203 	and.w	r2, r2, #3
 8003eaa:	0092      	lsls	r2, r2, #2
 8003eac:	4093      	lsls	r3, r2
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003eb4:	4935      	ldr	r1, [pc, #212]	; (8003f8c <HAL_GPIO_Init+0x328>)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	3302      	adds	r3, #2
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ee6:	4a34      	ldr	r2, [pc, #208]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eec:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f16:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	f67f ae86 	bls.w	8003c84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40013800 	.word	0x40013800
 8003f90:	40020000 	.word	0x40020000
 8003f94:	40020400 	.word	0x40020400
 8003f98:	40020800 	.word	0x40020800
 8003f9c:	40020c00 	.word	0x40020c00
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40021400 	.word	0x40021400
 8003fa8:	40021800 	.word	0x40021800
 8003fac:	40021c00 	.word	0x40021c00
 8003fb0:	40022000 	.word	0x40022000
 8003fb4:	40022400 	.word	0x40022400
 8003fb8:	40013c00 	.word	0x40013c00

08003fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fcc:	787b      	ldrb	r3, [r7, #1]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fd2:	887a      	ldrh	r2, [r7, #2]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fd8:	e003      	b.n	8003fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	041a      	lsls	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	619a      	str	r2, [r3, #24]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004000:	887a      	ldrh	r2, [r7, #2]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4013      	ands	r3, r2
 8004006:	041a      	lsls	r2, r3, #16
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	43d9      	mvns	r1, r3
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	400b      	ands	r3, r1
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	619a      	str	r2, [r3, #24]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fd46 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	e006      	b.n	80040ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d104      	bne.n	80040be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <HAL_I2C_Init+0x11c>)
 80040ca:	430b      	orrs	r3, r1
 80040cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69d9      	ldr	r1, [r3, #28]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	02008000 	.word	0x02008000

08004144 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	f040 80f9 	bne.w	800435e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_I2C_Mem_Write+0x34>
 8004172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0ed      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_I2C_Mem_Write+0x4e>
 800418e:	2302      	movs	r3, #2
 8004190:	e0e6      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800419a:	f7fe fef1 	bl	8002f80 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2319      	movs	r3, #25
 80041a6:	2201      	movs	r2, #1
 80041a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f955 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0d1      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2221      	movs	r2, #33	; 0x21
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2240      	movs	r2, #64	; 0x40
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e4:	88f8      	ldrh	r0, [r7, #6]
 80041e6:	893a      	ldrh	r2, [r7, #8]
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	4603      	mov	r3, r0
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f8b9 	bl	800436c <I2C_RequestMemoryWrite>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0a9      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2bff      	cmp	r3, #255	; 0xff
 8004214:	d90e      	bls.n	8004234 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	b2da      	uxtb	r2, r3
 8004222:	8979      	ldrh	r1, [r7, #10]
 8004224:	2300      	movs	r3, #0
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fab1 	bl	8004794 <I2C_TransferConfig>
 8004232:	e00f      	b.n	8004254 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	b2da      	uxtb	r2, r3
 8004244:	8979      	ldrh	r1, [r7, #10]
 8004246:	2300      	movs	r3, #0
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 faa0 	bl	8004794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f93f 	bl	80044dc <I2C_WaitOnTXISFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e07b      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d034      	beq.n	800430c <HAL_I2C_Mem_Write+0x1c8>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d130      	bne.n	800430c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	2200      	movs	r2, #0
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f8d1 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e04d      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2bff      	cmp	r3, #255	; 0xff
 80042cc:	d90e      	bls.n	80042ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	22ff      	movs	r2, #255	; 0xff
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	8979      	ldrh	r1, [r7, #10]
 80042dc:	2300      	movs	r3, #0
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fa55 	bl	8004794 <I2C_TransferConfig>
 80042ea:	e00f      	b.n	800430c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	8979      	ldrh	r1, [r7, #10]
 80042fe:	2300      	movs	r3, #0
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fa44 	bl	8004794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d19e      	bne.n	8004254 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f91e 	bl	800455c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e01a      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2220      	movs	r2, #32
 8004330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_I2C_Mem_Write+0x224>)
 800433e:	400b      	ands	r3, r1
 8004340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	fe00e800 	.word	0xfe00e800

0800436c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	4608      	mov	r0, r1
 8004376:	4611      	mov	r1, r2
 8004378:	461a      	mov	r2, r3
 800437a:	4603      	mov	r3, r0
 800437c:	817b      	strh	r3, [r7, #10]
 800437e:	460b      	mov	r3, r1
 8004380:	813b      	strh	r3, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	8979      	ldrh	r1, [r7, #10]
 800438c:	4b20      	ldr	r3, [pc, #128]	; (8004410 <I2C_RequestMemoryWrite+0xa4>)
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f9fd 	bl	8004794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	69b9      	ldr	r1, [r7, #24]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f89c 	bl	80044dc <I2C_WaitOnTXISFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e02c      	b.n	8004408 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043b4:	893b      	ldrh	r3, [r7, #8]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
 80043be:	e015      	b.n	80043ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043c0:	893b      	ldrh	r3, [r7, #8]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f882 	bl	80044dc <I2C_WaitOnTXISFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e012      	b.n	8004408 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043e2:	893b      	ldrh	r3, [r7, #8]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2200      	movs	r2, #0
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f830 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	80002000 	.word	0x80002000

08004414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d103      	bne.n	8004432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d007      	beq.n	8004450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	619a      	str	r2, [r3, #24]
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446c:	e022      	b.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d01e      	beq.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fe fd83 	bl	8002f80 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d113      	bne.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e00f      	b.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d0cd      	beq.n	800446e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044e8:	e02c      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f870 	bl	80045d4 <I2C_IsErrorOccurred>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e02a      	b.n	8004554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d01e      	beq.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004506:	f7fe fd3b 	bl	8002f80 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	d302      	bcc.n	800451c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d113      	bne.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e007      	b.n	8004554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d1cb      	bne.n	80044ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004568:	e028      	b.n	80045bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f830 	bl	80045d4 <I2C_IsErrorOccurred>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e026      	b.n	80045cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fcff 	bl	8002f80 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d113      	bne.n	80045bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e007      	b.n	80045cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d1cf      	bne.n	800456a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d068      	beq.n	80046d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2210      	movs	r2, #16
 8004606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004608:	e049      	b.n	800469e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d045      	beq.n	800469e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fe fcb5 	bl	8002f80 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <I2C_IsErrorOccurred+0x54>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d13a      	bne.n	800469e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d121      	bne.n	8004690 <I2C_IsErrorOccurred+0xbc>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004652:	d01d      	beq.n	8004690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b20      	cmp	r3, #32
 8004658:	d01a      	beq.n	8004690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800466a:	f7fe fc89 	bl	8002f80 <HAL_GetTick>
 800466e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004670:	e00e      	b.n	8004690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004672:	f7fe fc85 	bl	8002f80 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b19      	cmp	r3, #25
 800467e:	d907      	bls.n	8004690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f043 0320 	orr.w	r3, r3, #32
 8004686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800468e:	e006      	b.n	800469e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d1e9      	bne.n	8004672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d003      	beq.n	80046b4 <I2C_IsErrorOccurred+0xe0>
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0aa      	beq.n	800460a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2220      	movs	r2, #32
 80046c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	f043 0308 	orr.w	r3, r3, #8
 800470c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff fe63 	bl	8004414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <I2C_IsErrorOccurred+0x1bc>)
 800475a:	400b      	ands	r3, r1
 800475c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004786:	4618      	mov	r0, r3
 8004788:	3728      	adds	r7, #40	; 0x28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	fe00e800 	.word	0xfe00e800

08004794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	817b      	strh	r3, [r7, #10]
 80047a2:	4613      	mov	r3, r2
 80047a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ac:	7a7b      	ldrb	r3, [r7, #9]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	4313      	orrs	r3, r2
 80047be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	0d5b      	lsrs	r3, r3, #21
 80047ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <I2C_TransferConfig+0x60>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	43db      	mvns	r3, r3
 80047d8:	ea02 0103 	and.w	r1, r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	03ff63ff 	.word	0x03ff63ff

080047f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d138      	bne.n	8004880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004818:	2302      	movs	r3, #2
 800481a:	e032      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800484a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d139      	bne.n	8004918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e033      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2224      	movs	r2, #36	; 0x24
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	6413      	str	r3, [r2, #64]	; 0x40
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004956:	f7fe fb13 	bl	8002f80 <HAL_GetTick>
 800495a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800495c:	e009      	b.n	8004972 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800495e:	f7fe fb0f 	bl	8002f80 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496c:	d901      	bls.n	8004972 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e022      	b.n	80049b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497e:	d1ee      	bne.n	800495e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800498c:	f7fe faf8 	bl	8002f80 <HAL_GetTick>
 8004990:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004992:	e009      	b.n	80049a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004994:	f7fe faf4 	bl	8002f80 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a2:	d901      	bls.n	80049a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e007      	b.n	80049b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049b4:	d1ee      	bne.n	8004994 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40007000 	.word	0x40007000

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80049d0:	2300      	movs	r3, #0
 80049d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e29b      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8087 	beq.w	8004afa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ec:	4b96      	ldr	r3, [pc, #600]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d00c      	beq.n	8004a12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f8:	4b93      	ldr	r3, [pc, #588]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d112      	bne.n	8004a2a <HAL_RCC_OscConfig+0x62>
 8004a04:	4b90      	ldr	r3, [pc, #576]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a10:	d10b      	bne.n	8004a2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a12:	4b8d      	ldr	r3, [pc, #564]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d06c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x130>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d168      	bne.n	8004af8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e275      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x7a>
 8004a34:	4b84      	ldr	r3, [pc, #528]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a83      	ldr	r2, [pc, #524]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	e02e      	b.n	8004aa0 <HAL_RCC_OscConfig+0xd8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x9c>
 8004a4a:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a7e      	ldr	r2, [pc, #504]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b7c      	ldr	r3, [pc, #496]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a7b      	ldr	r2, [pc, #492]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e01d      	b.n	8004aa0 <HAL_RCC_OscConfig+0xd8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0xc0>
 8004a6e:	4b76      	ldr	r3, [pc, #472]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a75      	ldr	r2, [pc, #468]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	4b73      	ldr	r3, [pc, #460]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a72      	ldr	r2, [pc, #456]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCC_OscConfig+0xd8>
 8004a88:	4b6f      	ldr	r3, [pc, #444]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a6e      	ldr	r2, [pc, #440]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a6b      	ldr	r2, [pc, #428]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fa6a 	bl	8002f80 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fe fa66 	bl	8002f80 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e229      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xe8>
 8004ace:	e014      	b.n	8004afa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fa56 	bl	8002f80 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad8:	f7fe fa52 	bl	8002f80 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	; 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e215      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aea:	4b57      	ldr	r3, [pc, #348]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x110>
 8004af6:	e000      	b.n	8004afa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d069      	beq.n	8004bda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b06:	4b50      	ldr	r3, [pc, #320]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00b      	beq.n	8004b2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b12:	4b4d      	ldr	r3, [pc, #308]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d11c      	bne.n	8004b58 <HAL_RCC_OscConfig+0x190>
 8004b1e:	4b4a      	ldr	r3, [pc, #296]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d116      	bne.n	8004b58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2a:	4b47      	ldr	r3, [pc, #284]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_RCC_OscConfig+0x17a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e1e9      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b42:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	493d      	ldr	r1, [pc, #244]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b56:	e040      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d023      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b60:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a38      	ldr	r2, [pc, #224]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fa08 	bl	8002f80 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fe fa04 	bl	8002f80 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e1c7      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b86:	4b30      	ldr	r3, [pc, #192]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4929      	ldr	r1, [pc, #164]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
 8004ba6:	e018      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fe f9e4 	bl	8002f80 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbc:	f7fe f9e0 	bl	8002f80 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e1a3      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d038      	beq.n	8004c58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d019      	beq.n	8004c22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bee:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf2:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fe f9c1 	bl	8002f80 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c02:	f7fe f9bd 	bl	8002f80 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e180      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x23a>
 8004c20:	e01a      	b.n	8004c58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <HAL_RCC_OscConfig+0x280>)
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fe f9a7 	bl	8002f80 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c36:	f7fe f9a3 	bl	8002f80 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d903      	bls.n	8004c4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e166      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
 8004c48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	4b92      	ldr	r3, [pc, #584]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ee      	bne.n	8004c36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80a4 	beq.w	8004dae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c66:	4b8c      	ldr	r3, [pc, #560]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10d      	bne.n	8004c8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c72:	4b89      	ldr	r3, [pc, #548]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a88      	ldr	r2, [pc, #544]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	4b86      	ldr	r3, [pc, #536]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8e:	4b83      	ldr	r3, [pc, #524]	; (8004e9c <HAL_RCC_OscConfig+0x4d4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d118      	bne.n	8004ccc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c9a:	4b80      	ldr	r3, [pc, #512]	; (8004e9c <HAL_RCC_OscConfig+0x4d4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7f      	ldr	r2, [pc, #508]	; (8004e9c <HAL_RCC_OscConfig+0x4d4>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca6:	f7fe f96b 	bl	8002f80 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cae:	f7fe f967 	bl	8002f80 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b64      	cmp	r3, #100	; 0x64
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e12a      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc0:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x4d4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x31a>
 8004cd4:	4b70      	ldr	r3, [pc, #448]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4a6f      	ldr	r2, [pc, #444]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce0:	e02d      	b.n	8004d3e <HAL_RCC_OscConfig+0x376>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x33c>
 8004cea:	4b6b      	ldr	r3, [pc, #428]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a6a      	ldr	r2, [pc, #424]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf6:	4b68      	ldr	r3, [pc, #416]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a67      	ldr	r2, [pc, #412]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70
 8004d02:	e01c      	b.n	8004d3e <HAL_RCC_OscConfig+0x376>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d10c      	bne.n	8004d26 <HAL_RCC_OscConfig+0x35e>
 8004d0c:	4b62      	ldr	r3, [pc, #392]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	4a61      	ldr	r2, [pc, #388]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d12:	f043 0304 	orr.w	r3, r3, #4
 8004d16:	6713      	str	r3, [r2, #112]	; 0x70
 8004d18:	4b5f      	ldr	r3, [pc, #380]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	4a5e      	ldr	r2, [pc, #376]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6713      	str	r3, [r2, #112]	; 0x70
 8004d24:	e00b      	b.n	8004d3e <HAL_RCC_OscConfig+0x376>
 8004d26:	4b5c      	ldr	r3, [pc, #368]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	4a5b      	ldr	r2, [pc, #364]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	6713      	str	r3, [r2, #112]	; 0x70
 8004d32:	4b59      	ldr	r3, [pc, #356]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a58      	ldr	r2, [pc, #352]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d015      	beq.n	8004d72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fe f91b 	bl	8002f80 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fe f917 	bl	8002f80 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0d8      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ee      	beq.n	8004d4e <HAL_RCC_OscConfig+0x386>
 8004d70:	e014      	b.n	8004d9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fe f905 	bl	8002f80 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fe f901 	bl	8002f80 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0c2      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d90:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ee      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da2:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4a3c      	ldr	r2, [pc, #240]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80ae 	beq.w	8004f14 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db8:	4b37      	ldr	r3, [pc, #220]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d06d      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d14b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dcc:	4b32      	ldr	r3, [pc, #200]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a31      	ldr	r2, [pc, #196]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe f8d2 	bl	8002f80 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fe f8ce 	bl	8002f80 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e091      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	3b01      	subs	r3, #1
 8004e18:	041b      	lsls	r3, r3, #16
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	071b      	lsls	r3, r3, #28
 8004e2a:	491b      	ldr	r1, [pc, #108]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fe f8a0 	bl	8002f80 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e44:	f7fe f89c 	bl	8002f80 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e05f      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x47c>
 8004e62:	e057      	b.n	8004f14 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a0b      	ldr	r2, [pc, #44]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fe f886 	bl	8002f80 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fe f882 	bl	8002f80 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e045      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <HAL_RCC_OscConfig+0x4d0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4b0>
 8004e96:	e03d      	b.n	8004f14 <HAL_RCC_OscConfig+0x54c>
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ea0:	4b1f      	ldr	r3, [pc, #124]	; (8004f20 <HAL_RCC_OscConfig+0x558>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d030      	beq.n	8004f10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d129      	bne.n	8004f10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d122      	bne.n	8004f10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ed6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d119      	bne.n	8004f10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d10f      	bne.n	8004f10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800

08004f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0d0      	b.n	80050de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b6a      	ldr	r3, [pc, #424]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d910      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b67      	ldr	r3, [pc, #412]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 020f 	bic.w	r2, r3, #15
 8004f52:	4965      	ldr	r1, [pc, #404]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b8      	b.n	80050de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f84:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	494d      	ldr	r1, [pc, #308]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d040      	beq.n	8005048 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d115      	bne.n	8005006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d107      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe6:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e073      	b.n	80050de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff6:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e06b      	b.n	80050de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 0203 	bic.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4936      	ldr	r1, [pc, #216]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005018:	f7fd ffb2 	bl	8002f80 <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501e:	e00a      	b.n	8005036 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005020:	f7fd ffae 	bl	8002f80 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	; 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e053      	b.n	80050de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	4b2d      	ldr	r3, [pc, #180]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 020c 	and.w	r2, r3, #12
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	429a      	cmp	r2, r3
 8005046:	d1eb      	bne.n	8005020 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005048:	4b27      	ldr	r3, [pc, #156]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d210      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 020f 	bic.w	r2, r3, #15
 800505e:	4922      	ldr	r1, [pc, #136]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005084:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4916      	ldr	r1, [pc, #88]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	490a      	ldr	r1, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x1cc>)
 80050c8:	5ccb      	ldrb	r3, [r1, r3]
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x1d0>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1d4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd f966 	bl	80023a8 <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800e880 	.word	0x0800e880
 80050f4:	20000054 	.word	0x20000054
 80050f8:	20000058 	.word	0x20000058

080050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005100:	b094      	sub	sp, #80	; 0x50
 8005102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	647b      	str	r3, [r7, #68]	; 0x44
 8005108:	2300      	movs	r3, #0
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800510c:	2300      	movs	r3, #0
 800510e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005114:	4b79      	ldr	r3, [pc, #484]	; (80052fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b08      	cmp	r3, #8
 800511e:	d00d      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x40>
 8005120:	2b08      	cmp	r3, #8
 8005122:	f200 80e1 	bhi.w	80052e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x34>
 800512a:	2b04      	cmp	r3, #4
 800512c:	d003      	beq.n	8005136 <HAL_RCC_GetSysClockFreq+0x3a>
 800512e:	e0db      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005130:	4b73      	ldr	r3, [pc, #460]	; (8005300 <HAL_RCC_GetSysClockFreq+0x204>)
 8005132:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005134:	e0db      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005136:	4b73      	ldr	r3, [pc, #460]	; (8005304 <HAL_RCC_GetSysClockFreq+0x208>)
 8005138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800513a:	e0d8      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800513c:	4b6f      	ldr	r3, [pc, #444]	; (80052fc <HAL_RCC_GetSysClockFreq+0x200>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005144:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005146:	4b6d      	ldr	r3, [pc, #436]	; (80052fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d063      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005152:	4b6a      	ldr	r3, [pc, #424]	; (80052fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	2200      	movs	r2, #0
 800515a:	63bb      	str	r3, [r7, #56]	; 0x38
 800515c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	633b      	str	r3, [r7, #48]	; 0x30
 8005166:	2300      	movs	r3, #0
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
 800516a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800516e:	4622      	mov	r2, r4
 8005170:	462b      	mov	r3, r5
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	0159      	lsls	r1, r3, #5
 800517c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005180:	0150      	lsls	r0, r2, #5
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4621      	mov	r1, r4
 8005188:	1a51      	subs	r1, r2, r1
 800518a:	6139      	str	r1, [r7, #16]
 800518c:	4629      	mov	r1, r5
 800518e:	eb63 0301 	sbc.w	r3, r3, r1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051a0:	4659      	mov	r1, fp
 80051a2:	018b      	lsls	r3, r1, #6
 80051a4:	4651      	mov	r1, sl
 80051a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051aa:	4651      	mov	r1, sl
 80051ac:	018a      	lsls	r2, r1, #6
 80051ae:	4651      	mov	r1, sl
 80051b0:	ebb2 0801 	subs.w	r8, r2, r1
 80051b4:	4659      	mov	r1, fp
 80051b6:	eb63 0901 	sbc.w	r9, r3, r1
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ce:	4690      	mov	r8, r2
 80051d0:	4699      	mov	r9, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	eb18 0303 	adds.w	r3, r8, r3
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	462b      	mov	r3, r5
 80051dc:	eb49 0303 	adc.w	r3, r9, r3
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051ee:	4629      	mov	r1, r5
 80051f0:	024b      	lsls	r3, r1, #9
 80051f2:	4621      	mov	r1, r4
 80051f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051f8:	4621      	mov	r1, r4
 80051fa:	024a      	lsls	r2, r1, #9
 80051fc:	4610      	mov	r0, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005202:	2200      	movs	r2, #0
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
 8005206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800520c:	f7fb f868 	bl	80002e0 <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4613      	mov	r3, r2
 8005216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005218:	e058      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_RCC_GetSysClockFreq+0x200>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	099b      	lsrs	r3, r3, #6
 8005220:	2200      	movs	r2, #0
 8005222:	4618      	mov	r0, r3
 8005224:	4611      	mov	r1, r2
 8005226:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	2300      	movs	r3, #0
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
 8005230:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	0159      	lsls	r1, r3, #5
 8005242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005246:	0150      	lsls	r0, r2, #5
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4641      	mov	r1, r8
 800524e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005252:	4649      	mov	r1, r9
 8005254:	eb63 0b01 	sbc.w	fp, r3, r1
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005264:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005268:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800526c:	ebb2 040a 	subs.w	r4, r2, sl
 8005270:	eb63 050b 	sbc.w	r5, r3, fp
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	00eb      	lsls	r3, r5, #3
 800527e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005282:	00e2      	lsls	r2, r4, #3
 8005284:	4614      	mov	r4, r2
 8005286:	461d      	mov	r5, r3
 8005288:	4643      	mov	r3, r8
 800528a:	18e3      	adds	r3, r4, r3
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	464b      	mov	r3, r9
 8005290:	eb45 0303 	adc.w	r3, r5, r3
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052a2:	4629      	mov	r1, r5
 80052a4:	028b      	lsls	r3, r1, #10
 80052a6:	4621      	mov	r1, r4
 80052a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052ac:	4621      	mov	r1, r4
 80052ae:	028a      	lsls	r2, r1, #10
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b6:	2200      	movs	r2, #0
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	61fa      	str	r2, [r7, #28]
 80052bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c0:	f7fb f80e 	bl	80002e0 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4613      	mov	r3, r2
 80052ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCC_GetSysClockFreq+0x200>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	3301      	adds	r3, #1
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80052dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052e6:	e002      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3750      	adds	r7, #80	; 0x50
 80052f4:	46bd      	mov	sp, r7
 80052f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800
 8005300:	00f42400 	.word	0x00f42400
 8005304:	007a1200 	.word	0x007a1200

08005308 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <HAL_RCC_GetHCLKFreq+0x14>)
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000054 	.word	0x20000054

08005320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005324:	f7ff fff0 	bl	8005308 <HAL_RCC_GetHCLKFreq>
 8005328:	4602      	mov	r2, r0
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	0a9b      	lsrs	r3, r3, #10
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	4903      	ldr	r1, [pc, #12]	; (8005344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005336:	5ccb      	ldrb	r3, [r1, r3]
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40023800 	.word	0x40023800
 8005344:	0800e890 	.word	0x0800e890

08005348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800534c:	f7ff ffdc 	bl	8005308 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0b5b      	lsrs	r3, r3, #13
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4903      	ldr	r1, [pc, #12]	; (800536c <HAL_RCC_GetPCLK2Freq+0x24>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40023800 	.word	0x40023800
 800536c:	0800e890 	.word	0x0800e890

08005370 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	220f      	movs	r2, #15
 800537e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005380:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_GetClockConfig+0x5c>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0203 	and.w	r2, r3, #3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800538c:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <HAL_RCC_GetClockConfig+0x5c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_RCC_GetClockConfig+0x5c>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_RCC_GetClockConfig+0x5c>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	08db      	lsrs	r3, r3, #3
 80053aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <HAL_RCC_GetClockConfig+0x60>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 020f 	and.w	r2, r3, #15
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40023c00 	.word	0x40023c00

080053d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d012      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053fc:	4b69      	ldr	r3, [pc, #420]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a68      	ldr	r2, [pc, #416]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005402:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005406:	6093      	str	r3, [r2, #8]
 8005408:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	4964      	ldr	r1, [pc, #400]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800541e:	2301      	movs	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d017      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800542e:	4b5d      	ldr	r3, [pc, #372]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	4959      	ldr	r1, [pc, #356]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544c:	d101      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800546a:	4b4e      	ldr	r3, [pc, #312]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	494a      	ldr	r1, [pc, #296]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005488:	d101      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800548a:	2301      	movs	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005496:	2301      	movs	r3, #1
 8005498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 808b 	beq.w	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b8:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	4a39      	ldr	r2, [pc, #228]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c2:	6413      	str	r3, [r2, #64]	; 0x40
 80054c4:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054d0:	4b35      	ldr	r3, [pc, #212]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a34      	ldr	r2, [pc, #208]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054dc:	f7fd fd50 	bl	8002f80 <HAL_GetTick>
 80054e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e4:	f7fd fd4c 	bl	8002f80 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e38f      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054f6:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005502:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d035      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	429a      	cmp	r2, r3
 800551e:	d02e      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005520:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005528:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552a:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005534:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005536:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005542:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005548:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d114      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fd fd14 	bl	8002f80 <HAL_GetTick>
 8005558:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555a:	e00a      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f7fd fd10 	bl	8002f80 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e351      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0ee      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d111      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800559a:	400b      	ands	r3, r1
 800559c:	4901      	ldr	r1, [pc, #4]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	608b      	str	r3, [r1, #8]
 80055a2:	e00b      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	40007000 	.word	0x40007000
 80055ac:	0ffffcff 	.word	0x0ffffcff
 80055b0:	4bac      	ldr	r3, [pc, #688]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4aab      	ldr	r2, [pc, #684]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055ba:	6093      	str	r3, [r2, #8]
 80055bc:	4ba9      	ldr	r3, [pc, #676]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c8:	49a6      	ldr	r1, [pc, #664]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d010      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055da:	4ba2      	ldr	r3, [pc, #648]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e0:	4aa0      	ldr	r2, [pc, #640]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055ea:	4b9e      	ldr	r3, [pc, #632]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	499b      	ldr	r1, [pc, #620]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005608:	4b96      	ldr	r3, [pc, #600]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005616:	4993      	ldr	r1, [pc, #588]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800562a:	4b8e      	ldr	r3, [pc, #568]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005638:	498a      	ldr	r1, [pc, #552]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800564c:	4b85      	ldr	r3, [pc, #532]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565a:	4982      	ldr	r1, [pc, #520]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800566e:	4b7d      	ldr	r3, [pc, #500]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	4979      	ldr	r1, [pc, #484]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005690:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f023 0203 	bic.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	4971      	ldr	r1, [pc, #452]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056b2:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b8:	f023 020c 	bic.w	r2, r3, #12
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c0:	4968      	ldr	r1, [pc, #416]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056d4:	4b63      	ldr	r3, [pc, #396]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e2:	4960      	ldr	r1, [pc, #384]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056f6:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	4957      	ldr	r1, [pc, #348]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005718:	4b52      	ldr	r3, [pc, #328]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	494f      	ldr	r1, [pc, #316]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800573a:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005748:	4946      	ldr	r1, [pc, #280]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800575c:	4b41      	ldr	r3, [pc, #260]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576a:	493e      	ldr	r1, [pc, #248]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800577e:	4b39      	ldr	r3, [pc, #228]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	4935      	ldr	r1, [pc, #212]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057a0:	4b30      	ldr	r3, [pc, #192]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ae:	492d      	ldr	r1, [pc, #180]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d011      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057c2:	4b28      	ldr	r3, [pc, #160]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d0:	4924      	ldr	r1, [pc, #144]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e0:	d101      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057e2:	2301      	movs	r3, #1
 80057e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057f2:	2301      	movs	r3, #1
 80057f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005802:	4b18      	ldr	r3, [pc, #96]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	4914      	ldr	r1, [pc, #80]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005834:	490b      	ldr	r1, [pc, #44]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00f      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005858:	4902      	ldr	r1, [pc, #8]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005874:	4b8a      	ldr	r3, [pc, #552]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	4986      	ldr	r1, [pc, #536]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005898:	4b81      	ldr	r3, [pc, #516]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800589a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800589e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a8:	497d      	ldr	r1, [pc, #500]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d006      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80d6 	beq.w	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058c4:	4b76      	ldr	r3, [pc, #472]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a75      	ldr	r2, [pc, #468]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d0:	f7fd fb56 	bl	8002f80 <HAL_GetTick>
 80058d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058d8:	f7fd fb52 	bl	8002f80 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b64      	cmp	r3, #100	; 0x64
 80058e4:	d901      	bls.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e195      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ea:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d021      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	2b00      	cmp	r3, #0
 8005908:	d11d      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800590a:	4b65      	ldr	r3, [pc, #404]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800590c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005918:	4b61      	ldr	r3, [pc, #388]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800591e:	0e1b      	lsrs	r3, r3, #24
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	019a      	lsls	r2, r3, #6
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	431a      	orrs	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	071b      	lsls	r3, r3, #28
 800593e:	4958      	ldr	r1, [pc, #352]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005964:	2b00      	cmp	r3, #0
 8005966:	d02e      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005970:	d129      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005972:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005980:	4b47      	ldr	r3, [pc, #284]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005986:	0f1b      	lsrs	r3, r3, #28
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	019a      	lsls	r2, r3, #6
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	061b      	lsls	r3, r3, #24
 80059a0:	431a      	orrs	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	071b      	lsls	r3, r3, #28
 80059a6:	493e      	ldr	r1, [pc, #248]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059ae:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b4:	f023 021f 	bic.w	r2, r3, #31
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	3b01      	subs	r3, #1
 80059be:	4938      	ldr	r1, [pc, #224]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01d      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059d2:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d8:	0e1b      	lsrs	r3, r3, #24
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059e0:	4b2f      	ldr	r3, [pc, #188]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e6:	0f1b      	lsrs	r3, r3, #28
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	019a      	lsls	r2, r3, #6
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	431a      	orrs	r2, r3
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	431a      	orrs	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	071b      	lsls	r3, r3, #28
 8005a06:	4926      	ldr	r1, [pc, #152]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	019a      	lsls	r2, r3, #6
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	061b      	lsls	r3, r3, #24
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	071b      	lsls	r3, r3, #28
 8005a36:	491a      	ldr	r1, [pc, #104]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4a:	f7fd fa99 	bl	8002f80 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a52:	f7fd fa95 	bl	8002f80 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b64      	cmp	r3, #100	; 0x64
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e0d8      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	f040 80ce 	bne.w	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a84:	f7fd fa7c 	bl	8002f80 <HAL_GetTick>
 8005a88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a8a:	e00b      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a8c:	f7fd fa78 	bl	8002f80 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	; 0x64
 8005a98:	d904      	bls.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0bb      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005aa4:	4b5e      	ldr	r3, [pc, #376]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab0:	d0ec      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d02e      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d12a      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ada:	4b51      	ldr	r3, [pc, #324]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	0c1b      	lsrs	r3, r3, #16
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ae8:	4b4d      	ldr	r3, [pc, #308]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	0f1b      	lsrs	r3, r3, #28
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	019a      	lsls	r2, r3, #6
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	061b      	lsls	r3, r3, #24
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	071b      	lsls	r3, r3, #28
 8005b0e:	4944      	ldr	r1, [pc, #272]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b16:	4b42      	ldr	r3, [pc, #264]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	493d      	ldr	r1, [pc, #244]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d022      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b44:	d11d      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b46:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	0e1b      	lsrs	r3, r3, #24
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b54:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	0f1b      	lsrs	r3, r3, #28
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	019a      	lsls	r2, r3, #6
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	061b      	lsls	r3, r3, #24
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	071b      	lsls	r3, r3, #28
 8005b7a:	4929      	ldr	r1, [pc, #164]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d028      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b8e:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	0e1b      	lsrs	r3, r3, #24
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b9c:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	0c1b      	lsrs	r3, r3, #16
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	061b      	lsls	r3, r3, #24
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	4917      	ldr	r1, [pc, #92]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4911      	ldr	r1, [pc, #68]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005be0:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bec:	f7fd f9c8 	bl	8002f80 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bf4:	f7fd f9c4 	bl	8002f80 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e007      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c06:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c12:	d1ef      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40023800 	.word	0x40023800

08005c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e09d      	b.n	8005d72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d108      	bne.n	8005c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c46:	d009      	beq.n	8005c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	61da      	str	r2, [r3, #28]
 8005c4e:	e005      	b.n	8005c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fc f8aa 	bl	8001dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c9c:	d902      	bls.n	8005ca4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e002      	b.n	8005caa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cb2:	d007      	beq.n	8005cc4 <HAL_SPI_Init+0xa0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	ea42 0103 	orr.w	r1, r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	0c1b      	lsrs	r3, r3, #16
 8005d20:	f003 0204 	and.w	r2, r3, #4
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d40:	ea42 0103 	orr.w	r1, r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b088      	sub	sp, #32
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_SPI_Transmit+0x22>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e158      	b.n	800604e <HAL_SPI_Transmit+0x2d4>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005da4:	f7fd f8ec 	bl	8002f80 <HAL_GetTick>
 8005da8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d002      	beq.n	8005dc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dbe:	e13d      	b.n	800603c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_SPI_Transmit+0x52>
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dd0:	e134      	b.n	800603c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1c:	d10f      	bne.n	8005e3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d007      	beq.n	8005e5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e64:	d94b      	bls.n	8005efe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_SPI_Transmit+0xfa>
 8005e6e:	8afb      	ldrh	r3, [r7, #22]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d13e      	bne.n	8005ef2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e98:	e02b      	b.n	8005ef2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d112      	bne.n	8005ece <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	881a      	ldrh	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	1c9a      	adds	r2, r3, #2
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ecc:	e011      	b.n	8005ef2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ece:	f7fd f857 	bl	8002f80 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d803      	bhi.n	8005ee6 <HAL_SPI_Transmit+0x16c>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d102      	bne.n	8005eec <HAL_SPI_Transmit+0x172>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ef0:	e0a4      	b.n	800603c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1ce      	bne.n	8005e9a <HAL_SPI_Transmit+0x120>
 8005efc:	e07c      	b.n	8005ff8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_Transmit+0x192>
 8005f06:	8afb      	ldrh	r3, [r7, #22]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d170      	bne.n	8005fee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d912      	bls.n	8005f3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	881a      	ldrh	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	1c9a      	adds	r2, r3, #2
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b02      	subs	r3, #2
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f3a:	e058      	b.n	8005fee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f62:	e044      	b.n	8005fee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d12b      	bne.n	8005fca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d912      	bls.n	8005fa2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b02      	subs	r3, #2
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fa0:	e025      	b.n	8005fee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fc8:	e011      	b.n	8005fee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fca:	f7fc ffd9 	bl	8002f80 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d803      	bhi.n	8005fe2 <HAL_SPI_Transmit+0x268>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d102      	bne.n	8005fe8 <HAL_SPI_Transmit+0x26e>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fec:	e026      	b.n	800603c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1b5      	bne.n	8005f64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fadd 	bl	80065bc <SPI_EndRxTxTransaction>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e000      	b.n	800603c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800603a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800604c:	7ffb      	ldrb	r3, [r7, #31]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_SPI_Transmit_DMA+0x20>
 8006074:	2302      	movs	r3, #2
 8006076:	e0d8      	b.n	800622a <HAL_SPI_Transmit_DMA+0x1d2>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d002      	beq.n	8006092 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800608c:	2302      	movs	r3, #2
 800608e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006090:	e0c6      	b.n	8006220 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_SPI_Transmit_DMA+0x46>
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060a2:	e0bd      	b.n	8006220 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2203      	movs	r2, #3
 80060a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ee:	d10f      	bne.n	8006110 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800610e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	4a47      	ldr	r2, [pc, #284]	; (8006234 <HAL_SPI_Transmit_DMA+0x1dc>)
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	4a46      	ldr	r2, [pc, #280]	; (8006238 <HAL_SPI_Transmit_DMA+0x1e0>)
 800611e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	4a45      	ldr	r2, [pc, #276]	; (800623c <HAL_SPI_Transmit_DMA+0x1e4>)
 8006126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	2200      	movs	r2, #0
 800612e:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800613e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006148:	d82d      	bhi.n	80061a6 <HAL_SPI_Transmit_DMA+0x14e>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006154:	d127      	bne.n	80061a6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615a:	b29b      	uxth	r3, r3
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006172:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006178:	b29b      	uxth	r3, r3
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006182:	e010      	b.n	80061a6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006192:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006198:	b29b      	uxth	r3, r3
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	b29b      	uxth	r3, r3
 800619e:	3301      	adds	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	4619      	mov	r1, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061be:	f7fd f9f5 	bl	80035ac <HAL_DMA_Start_IT>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00c      	beq.n	80061e2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061cc:	f043 0210 	orr.w	r2, r3, #16
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80061e0:	e01e      	b.n	8006220 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d007      	beq.n	8006200 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0220 	orr.w	r2, r2, #32
 800620e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0202 	orr.w	r2, r2, #2
 800621e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	08006325 	.word	0x08006325
 8006238:	0800627d 	.word	0x0800627d
 800623c:	08006341 	.word	0x08006341

08006240 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628a:	f7fc fe79 	bl	8002f80 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629e:	d03b      	beq.n	8006318 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0220 	bic.w	r2, r2, #32
 80062ae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0202 	bic.w	r2, r2, #2
 80062be:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	2164      	movs	r1, #100	; 0x64
 80062c4:	6978      	ldr	r0, [r7, #20]
 80062c6:	f000 f979 	bl	80065bc <SPI_EndRxTxTransaction>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d4:	f043 0220 	orr.w	r2, r3, #32
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2200      	movs	r2, #0
 80062fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006310:	6978      	ldr	r0, [r7, #20]
 8006312:	f7ff ffa9 	bl	8006268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006316:	e002      	b.n	800631e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006318:	6978      	ldr	r0, [r7, #20]
 800631a:	f7ff ff91 	bl	8006240 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ff8e 	bl	8006254 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0203 	bic.w	r2, r2, #3
 800635c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	f043 0210 	orr.w	r2, r3, #16
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ff78 	bl	8006268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006390:	f7fc fdf6 	bl	8002f80 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	4413      	add	r3, r2
 800639e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063a0:	f7fc fdee 	bl	8002f80 <HAL_GetTick>
 80063a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063a6:	4b39      	ldr	r3, [pc, #228]	; (800648c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	015b      	lsls	r3, r3, #5
 80063ac:	0d1b      	lsrs	r3, r3, #20
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063b6:	e054      	b.n	8006462 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063be:	d050      	beq.n	8006462 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063c0:	f7fc fdde 	bl	8002f80 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d902      	bls.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d13d      	bne.n	8006452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ee:	d111      	bne.n	8006414 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f8:	d004      	beq.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006402:	d107      	bne.n	8006414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641c:	d10f      	bne.n	800643e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800643c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e017      	b.n	8006482 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3b01      	subs	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4013      	ands	r3, r2
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	429a      	cmp	r2, r3
 800647e:	d19b      	bne.n	80063b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000054 	.word	0x20000054

08006490 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064a2:	f7fc fd6d 	bl	8002f80 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	4413      	add	r3, r2
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064b2:	f7fc fd65 	bl	8002f80 <HAL_GetTick>
 80064b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064c0:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	00da      	lsls	r2, r3, #3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	0d1b      	lsrs	r3, r3, #20
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	fb02 f303 	mul.w	r3, r2, r3
 80064d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064d8:	e060      	b.n	800659c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064e0:	d107      	bne.n	80064f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d050      	beq.n	800659c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064fa:	f7fc fd41 	bl	8002f80 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006506:	429a      	cmp	r2, r3
 8006508:	d902      	bls.n	8006510 <SPI_WaitFifoStateUntilTimeout+0x80>
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d13d      	bne.n	800658c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800651e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006528:	d111      	bne.n	800654e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006532:	d004      	beq.n	800653e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d107      	bne.n	800654e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006556:	d10f      	bne.n	8006578 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006576:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e010      	b.n	80065ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	3b01      	subs	r3, #1
 800659a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	4013      	ands	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d196      	bne.n	80064da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000054 	.word	0x20000054

080065bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff ff5b 	bl	8006490 <SPI_WaitFifoStateUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e046      	b.n	800667e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <SPI_EndRxTxTransaction+0xcc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <SPI_EndRxTxTransaction+0xd0>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	0d5b      	lsrs	r3, r3, #21
 80065fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006600:	fb02 f303 	mul.w	r3, r2, r3
 8006604:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800660e:	d112      	bne.n	8006636 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	2180      	movs	r1, #128	; 0x80
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff feb0 	bl	8006380 <SPI_WaitFlagStateUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	f043 0220 	orr.w	r2, r3, #32
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e023      	b.n	800667e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	3b01      	subs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d0f2      	beq.n	8006636 <SPI_EndRxTxTransaction+0x7a>
 8006650:	e000      	b.n	8006654 <SPI_EndRxTxTransaction+0x98>
        break;
 8006652:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff ff15 	bl	8006490 <SPI_WaitFifoStateUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	f043 0220 	orr.w	r2, r3, #32
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e000      	b.n	800667e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000054 	.word	0x20000054
 800668c:	165e9f81 	.word	0x165e9f81

08006690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e049      	b.n	8006736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f841 	bl	800673e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f000 fc66 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	d001      	beq.n	800676c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e054      	b.n	8006816 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a26      	ldr	r2, [pc, #152]	; (8006824 <HAL_TIM_Base_Start_IT+0xd0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d022      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x80>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d01d      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x80>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a22      	ldr	r2, [pc, #136]	; (8006828 <HAL_TIM_Base_Start_IT+0xd4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d018      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x80>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a21      	ldr	r2, [pc, #132]	; (800682c <HAL_TIM_Base_Start_IT+0xd8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <HAL_TIM_Base_Start_IT+0xdc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x80>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_TIM_Base_Start_IT+0xe0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x80>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <HAL_TIM_Base_Start_IT+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x80>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1b      	ldr	r2, [pc, #108]	; (800683c <HAL_TIM_Base_Start_IT+0xe8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d115      	bne.n	8006800 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	4b19      	ldr	r3, [pc, #100]	; (8006840 <HAL_TIM_Base_Start_IT+0xec>)
 80067dc:	4013      	ands	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b06      	cmp	r3, #6
 80067e4:	d015      	beq.n	8006812 <HAL_TIM_Base_Start_IT+0xbe>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ec:	d011      	beq.n	8006812 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fe:	e008      	b.n	8006812 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	e000      	b.n	8006814 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40010000 	.word	0x40010000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40010400 	.word	0x40010400
 8006838:	40014000 	.word	0x40014000
 800683c:	40001800 	.word	0x40001800
 8006840:	00010007 	.word	0x00010007

08006844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e049      	b.n	80068ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fb ff64 	bl	8002738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f000 fb8c 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <HAL_TIM_PWM_Start+0x24>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e03c      	b.n	8006992 <HAL_TIM_PWM_Start+0x9e>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b04      	cmp	r3, #4
 800691c:	d109      	bne.n	8006932 <HAL_TIM_PWM_Start+0x3e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b01      	cmp	r3, #1
 8006928:	bf14      	ite	ne
 800692a:	2301      	movne	r3, #1
 800692c:	2300      	moveq	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	e02f      	b.n	8006992 <HAL_TIM_PWM_Start+0x9e>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d109      	bne.n	800694c <HAL_TIM_PWM_Start+0x58>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	e022      	b.n	8006992 <HAL_TIM_PWM_Start+0x9e>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b0c      	cmp	r3, #12
 8006950:	d109      	bne.n	8006966 <HAL_TIM_PWM_Start+0x72>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	e015      	b.n	8006992 <HAL_TIM_PWM_Start+0x9e>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b10      	cmp	r3, #16
 800696a:	d109      	bne.n	8006980 <HAL_TIM_PWM_Start+0x8c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	bf14      	ite	ne
 8006978:	2301      	movne	r3, #1
 800697a:	2300      	moveq	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	e008      	b.n	8006992 <HAL_TIM_PWM_Start+0x9e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	bf14      	ite	ne
 800698c:	2301      	movne	r3, #1
 800698e:	2300      	moveq	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e092      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <HAL_TIM_PWM_Start+0xb6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a8:	e023      	b.n	80069f2 <HAL_TIM_PWM_Start+0xfe>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_PWM_Start+0xc6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b8:	e01b      	b.n	80069f2 <HAL_TIM_PWM_Start+0xfe>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0xd6>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069c8:	e013      	b.n	80069f2 <HAL_TIM_PWM_Start+0xfe>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	d104      	bne.n	80069da <HAL_TIM_PWM_Start+0xe6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069d8:	e00b      	b.n	80069f2 <HAL_TIM_PWM_Start+0xfe>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b10      	cmp	r3, #16
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Start+0xf6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069e8:	e003      	b.n	80069f2 <HAL_TIM_PWM_Start+0xfe>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2201      	movs	r2, #1
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fdce 	bl	800759c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a30      	ldr	r2, [pc, #192]	; (8006ac8 <HAL_TIM_PWM_Start+0x1d4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x120>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2f      	ldr	r2, [pc, #188]	; (8006acc <HAL_TIM_PWM_Start+0x1d8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x124>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_TIM_PWM_Start+0x126>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a25      	ldr	r2, [pc, #148]	; (8006ac8 <HAL_TIM_PWM_Start+0x1d4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x18a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d01d      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x18a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a22      	ldr	r2, [pc, #136]	; (8006ad0 <HAL_TIM_PWM_Start+0x1dc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x18a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a20      	ldr	r2, [pc, #128]	; (8006ad4 <HAL_TIM_PWM_Start+0x1e0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x18a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1f      	ldr	r2, [pc, #124]	; (8006ad8 <HAL_TIM_PWM_Start+0x1e4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x18a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a19      	ldr	r2, [pc, #100]	; (8006acc <HAL_TIM_PWM_Start+0x1d8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x18a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	; (8006adc <HAL_TIM_PWM_Start+0x1e8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x18a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <HAL_TIM_PWM_Start+0x1ec>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d115      	bne.n	8006aaa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <HAL_TIM_PWM_Start+0x1f0>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b06      	cmp	r3, #6
 8006a8e:	d015      	beq.n	8006abc <HAL_TIM_PWM_Start+0x1c8>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a96:	d011      	beq.n	8006abc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa8:	e008      	b.n	8006abc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e000      	b.n	8006abe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40010400 	.word	0x40010400
 8006ad0:	40000400 	.word	0x40000400
 8006ad4:	40000800 	.word	0x40000800
 8006ad8:	40000c00 	.word	0x40000c00
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40001800 	.word	0x40001800
 8006ae4:	00010007 	.word	0x00010007

08006ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d122      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d11b      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0202 	mvn.w	r2, #2
 8006b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa1a 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa0c 	bl	8006f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa1d 	bl	8006f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d122      	bne.n	8006b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d11b      	bne.n	8006b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0204 	mvn.w	r2, #4
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9f0 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9e2 	bl	8006f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f9f3 	bl	8006f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d122      	bne.n	8006bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d11b      	bne.n	8006bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0208 	mvn.w	r2, #8
 8006bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9c6 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e005      	b.n	8006be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f9b8 	bl	8006f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f9c9 	bl	8006f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	2b10      	cmp	r3, #16
 8006bf8:	d122      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d11b      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0210 	mvn.w	r2, #16
 8006c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2208      	movs	r2, #8
 8006c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f99c 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006c2c:	e005      	b.n	8006c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f98e 	bl	8006f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f99f 	bl	8006f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d10e      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d107      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f06f 0201 	mvn.w	r2, #1
 8006c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fb f85c 	bl	8001d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	2b80      	cmp	r3, #128	; 0x80
 8006c78:	d10e      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c84:	2b80      	cmp	r3, #128	; 0x80
 8006c86:	d107      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fd40 	bl	8007718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca6:	d10e      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b80      	cmp	r3, #128	; 0x80
 8006cb4:	d107      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fd33 	bl	800772c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d10e      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d107      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f94d 	bl	8006f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d10e      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d107      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f06f 0220 	mvn.w	r2, #32
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcf3 	bl	8007704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e0ff      	b.n	8006f46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b14      	cmp	r3, #20
 8006d52:	f200 80f0 	bhi.w	8006f36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d56:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006db1 	.word	0x08006db1
 8006d60:	08006f37 	.word	0x08006f37
 8006d64:	08006f37 	.word	0x08006f37
 8006d68:	08006f37 	.word	0x08006f37
 8006d6c:	08006df1 	.word	0x08006df1
 8006d70:	08006f37 	.word	0x08006f37
 8006d74:	08006f37 	.word	0x08006f37
 8006d78:	08006f37 	.word	0x08006f37
 8006d7c:	08006e33 	.word	0x08006e33
 8006d80:	08006f37 	.word	0x08006f37
 8006d84:	08006f37 	.word	0x08006f37
 8006d88:	08006f37 	.word	0x08006f37
 8006d8c:	08006e73 	.word	0x08006e73
 8006d90:	08006f37 	.word	0x08006f37
 8006d94:	08006f37 	.word	0x08006f37
 8006d98:	08006f37 	.word	0x08006f37
 8006d9c:	08006eb5 	.word	0x08006eb5
 8006da0:	08006f37 	.word	0x08006f37
 8006da4:	08006f37 	.word	0x08006f37
 8006da8:	08006f37 	.word	0x08006f37
 8006dac:	08006ef5 	.word	0x08006ef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f992 	bl	80070e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0208 	orr.w	r2, r2, #8
 8006dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0204 	bic.w	r2, r2, #4
 8006dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6999      	ldr	r1, [r3, #24]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	619a      	str	r2, [r3, #24]
      break;
 8006dee:	e0a5      	b.n	8006f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f9e4 	bl	80071c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6999      	ldr	r1, [r3, #24]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	021a      	lsls	r2, r3, #8
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	619a      	str	r2, [r3, #24]
      break;
 8006e30:	e084      	b.n	8006f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fa3b 	bl	80072b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69da      	ldr	r2, [r3, #28]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0208 	orr.w	r2, r2, #8
 8006e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0204 	bic.w	r2, r2, #4
 8006e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69d9      	ldr	r1, [r3, #28]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	61da      	str	r2, [r3, #28]
      break;
 8006e70:	e064      	b.n	8006f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fa91 	bl	80073a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69d9      	ldr	r1, [r3, #28]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	021a      	lsls	r2, r3, #8
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	61da      	str	r2, [r3, #28]
      break;
 8006eb2:	e043      	b.n	8006f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fac8 	bl	8007450 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0208 	orr.w	r2, r2, #8
 8006ece:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0204 	bic.w	r2, r2, #4
 8006ede:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	691a      	ldr	r2, [r3, #16]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ef2:	e023      	b.n	8006f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fafa 	bl	80074f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	021a      	lsls	r2, r3, #8
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f34:	e002      	b.n	8006f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop

08006f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a40      	ldr	r2, [pc, #256]	; (80070b4 <TIM_Base_SetConfig+0x114>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbe:	d00f      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a3d      	ldr	r2, [pc, #244]	; (80070b8 <TIM_Base_SetConfig+0x118>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3c      	ldr	r2, [pc, #240]	; (80070bc <TIM_Base_SetConfig+0x11c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3b      	ldr	r2, [pc, #236]	; (80070c0 <TIM_Base_SetConfig+0x120>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3a      	ldr	r2, [pc, #232]	; (80070c4 <TIM_Base_SetConfig+0x124>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d108      	bne.n	8006ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2f      	ldr	r2, [pc, #188]	; (80070b4 <TIM_Base_SetConfig+0x114>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d027      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2c      	ldr	r2, [pc, #176]	; (80070b8 <TIM_Base_SetConfig+0x118>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d023      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2b      	ldr	r2, [pc, #172]	; (80070bc <TIM_Base_SetConfig+0x11c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01f      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <TIM_Base_SetConfig+0x120>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d01b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a29      	ldr	r2, [pc, #164]	; (80070c4 <TIM_Base_SetConfig+0x124>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d017      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a28      	ldr	r2, [pc, #160]	; (80070c8 <TIM_Base_SetConfig+0x128>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a27      	ldr	r2, [pc, #156]	; (80070cc <TIM_Base_SetConfig+0x12c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00f      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a26      	ldr	r2, [pc, #152]	; (80070d0 <TIM_Base_SetConfig+0x130>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a25      	ldr	r2, [pc, #148]	; (80070d4 <TIM_Base_SetConfig+0x134>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <TIM_Base_SetConfig+0x138>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a23      	ldr	r2, [pc, #140]	; (80070dc <TIM_Base_SetConfig+0x13c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d108      	bne.n	8007064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <TIM_Base_SetConfig+0x114>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_Base_SetConfig+0xf8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a0c      	ldr	r2, [pc, #48]	; (80070c4 <TIM_Base_SetConfig+0x124>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d103      	bne.n	80070a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	615a      	str	r2, [r3, #20]
}
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40010000 	.word	0x40010000
 80070b8:	40000400 	.word	0x40000400
 80070bc:	40000800 	.word	0x40000800
 80070c0:	40000c00 	.word	0x40000c00
 80070c4:	40010400 	.word	0x40010400
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40014400 	.word	0x40014400
 80070d0:	40014800 	.word	0x40014800
 80070d4:	40001800 	.word	0x40001800
 80070d8:	40001c00 	.word	0x40001c00
 80070dc:	40002000 	.word	0x40002000

080070e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f023 0201 	bic.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4b2b      	ldr	r3, [pc, #172]	; (80071b8 <TIM_OC1_SetConfig+0xd8>)
 800710c:	4013      	ands	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0303 	bic.w	r3, r3, #3
 8007116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f023 0302 	bic.w	r3, r3, #2
 8007128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a21      	ldr	r2, [pc, #132]	; (80071bc <TIM_OC1_SetConfig+0xdc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_OC1_SetConfig+0x64>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a20      	ldr	r2, [pc, #128]	; (80071c0 <TIM_OC1_SetConfig+0xe0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d10c      	bne.n	800715e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0308 	bic.w	r3, r3, #8
 800714a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f023 0304 	bic.w	r3, r3, #4
 800715c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a16      	ldr	r2, [pc, #88]	; (80071bc <TIM_OC1_SetConfig+0xdc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d003      	beq.n	800716e <TIM_OC1_SetConfig+0x8e>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <TIM_OC1_SetConfig+0xe0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d111      	bne.n	8007192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800717c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	621a      	str	r2, [r3, #32]
}
 80071ac:	bf00      	nop
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	fffeff8f 	.word	0xfffeff8f
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40010400 	.word	0x40010400

080071c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0210 	bic.w	r2, r3, #16
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4b2e      	ldr	r3, [pc, #184]	; (80072a8 <TIM_OC2_SetConfig+0xe4>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0320 	bic.w	r3, r3, #32
 800720e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a23      	ldr	r2, [pc, #140]	; (80072ac <TIM_OC2_SetConfig+0xe8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC2_SetConfig+0x68>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <TIM_OC2_SetConfig+0xec>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10d      	bne.n	8007248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a18      	ldr	r2, [pc, #96]	; (80072ac <TIM_OC2_SetConfig+0xe8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC2_SetConfig+0x94>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a17      	ldr	r2, [pc, #92]	; (80072b0 <TIM_OC2_SetConfig+0xec>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d113      	bne.n	8007280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800725e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	feff8fff 	.word	0xfeff8fff
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400

080072b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <TIM_OC3_SetConfig+0xe0>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a22      	ldr	r2, [pc, #136]	; (8007398 <TIM_OC3_SetConfig+0xe4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d003      	beq.n	800731a <TIM_OC3_SetConfig+0x66>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a21      	ldr	r2, [pc, #132]	; (800739c <TIM_OC3_SetConfig+0xe8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d10d      	bne.n	8007336 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a17      	ldr	r2, [pc, #92]	; (8007398 <TIM_OC3_SetConfig+0xe4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d003      	beq.n	8007346 <TIM_OC3_SetConfig+0x92>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a16      	ldr	r2, [pc, #88]	; (800739c <TIM_OC3_SetConfig+0xe8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d113      	bne.n	800736e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800734c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	621a      	str	r2, [r3, #32]
}
 8007388:	bf00      	nop
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	fffeff8f 	.word	0xfffeff8f
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4b1e      	ldr	r3, [pc, #120]	; (8007444 <TIM_OC4_SetConfig+0xa4>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	031b      	lsls	r3, r3, #12
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a13      	ldr	r2, [pc, #76]	; (8007448 <TIM_OC4_SetConfig+0xa8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_OC4_SetConfig+0x68>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a12      	ldr	r2, [pc, #72]	; (800744c <TIM_OC4_SetConfig+0xac>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d109      	bne.n	800741c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800740e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	019b      	lsls	r3, r3, #6
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4313      	orrs	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	621a      	str	r2, [r3, #32]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	feff8fff 	.word	0xfeff8fff
 8007448:	40010000 	.word	0x40010000
 800744c:	40010400 	.word	0x40010400

08007450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <TIM_OC5_SetConfig+0x98>)
 800747c:	4013      	ands	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	041b      	lsls	r3, r3, #16
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a12      	ldr	r2, [pc, #72]	; (80074ec <TIM_OC5_SetConfig+0x9c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d003      	beq.n	80074ae <TIM_OC5_SetConfig+0x5e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <TIM_OC5_SetConfig+0xa0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d109      	bne.n	80074c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	621a      	str	r2, [r3, #32]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	fffeff8f 	.word	0xfffeff8f
 80074ec:	40010000 	.word	0x40010000
 80074f0:	40010400 	.word	0x40010400

080074f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <TIM_OC6_SetConfig+0x9c>)
 8007520:	4013      	ands	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	021b      	lsls	r3, r3, #8
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	051b      	lsls	r3, r3, #20
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a13      	ldr	r2, [pc, #76]	; (8007594 <TIM_OC6_SetConfig+0xa0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_OC6_SetConfig+0x60>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a12      	ldr	r2, [pc, #72]	; (8007598 <TIM_OC6_SetConfig+0xa4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d109      	bne.n	8007568 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	029b      	lsls	r3, r3, #10
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	feff8fff 	.word	0xfeff8fff
 8007594:	40010000 	.word	0x40010000
 8007598:	40010400 	.word	0x40010400

0800759c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2201      	movs	r2, #1
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a1a      	ldr	r2, [r3, #32]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	43db      	mvns	r3, r3
 80075be:	401a      	ands	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	fa01 f303 	lsl.w	r3, r1, r3
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
	...

080075e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e06d      	b.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a30      	ldr	r2, [pc, #192]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a2f      	ldr	r2, [pc, #188]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d108      	bne.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800763a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a20      	ldr	r2, [pc, #128]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d022      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007672:	d01d      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d018      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1c      	ldr	r2, [pc, #112]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d013      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00e      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a15      	ldr	r2, [pc, #84]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d009      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a16      	ldr	r2, [pc, #88]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d004      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a15      	ldr	r2, [pc, #84]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10c      	bne.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	40010000 	.word	0x40010000
 80076ec:	40010400 	.word	0x40010400
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40014000 	.word	0x40014000
 8007700:	40001800 	.word	0x40001800

08007704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e040      	b.n	80077d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d106      	bne.n	8007768 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fb f870 	bl	8002848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2224      	movs	r2, #36	; 0x24
 800776c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fb82 	bl	8007e88 <UART_SetConfig>
 8007784:	4603      	mov	r3, r0
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e022      	b.n	80077d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fdda 	bl	8008350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fe61 	bl	8008494 <UART_CheckIdleState>
 80077d2:	4603      	mov	r3, r0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d132      	bne.n	800785a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_UART_Receive_IT+0x24>
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e02b      	b.n	800785c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d018      	beq.n	800784a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	613b      	str	r3, [r7, #16]
   return(result);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	623b      	str	r3, [r7, #32]
 8007838:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	69f9      	ldr	r1, [r7, #28]
 800783c:	6a3a      	ldr	r2, [r7, #32]
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	61bb      	str	r3, [r7, #24]
   return(result);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	461a      	mov	r2, r3
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 ff33 	bl	80086bc <UART_Start_Receive_IT>
 8007856:	4603      	mov	r3, r0
 8007858:	e000      	b.n	800785c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800785a:	2302      	movs	r3, #2
  }
}
 800785c:	4618      	mov	r0, r3
 800785e:	3728      	adds	r7, #40	; 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b0ba      	sub	sp, #232	; 0xe8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800788a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800788e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007892:	4013      	ands	r3, r2
 8007894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800789c:	2b00      	cmp	r3, #0
 800789e:	d115      	bne.n	80078cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00f      	beq.n	80078cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d009      	beq.n	80078cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 82ac 	beq.w	8007e1a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
      }
      return;
 80078ca:	e2a6      	b.n	8007e1a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8117 	beq.w	8007b04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80078d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80078e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80078e6:	4b85      	ldr	r3, [pc, #532]	; (8007afc <HAL_UART_IRQHandler+0x298>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 810a 	beq.w	8007b04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d011      	beq.n	8007920 <HAL_UART_IRQHandler+0xbc>
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d011      	beq.n	8007950 <HAL_UART_IRQHandler+0xec>
 800792c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2202      	movs	r2, #2
 800793e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007946:	f043 0204 	orr.w	r2, r3, #4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_UART_IRQHandler+0x11c>
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2204      	movs	r2, #4
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007976:	f043 0202 	orr.w	r2, r3, #2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2208      	movs	r2, #8
 80079aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b2:	f043 0208 	orr.w	r2, r3, #8
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <HAL_UART_IRQHandler+0x18a>
 80079c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e4:	f043 0220 	orr.w	r2, r3, #32
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8212 	beq.w	8007e1e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80079fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d04f      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fefe 	bl	8008848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d141      	bne.n	8007ade <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3308      	adds	r3, #8
 8007a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1d9      	bne.n	8007a5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d013      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab2:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <HAL_UART_IRQHandler+0x29c>)
 8007ab4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fb fe46 	bl	800374c <HAL_DMA_Abort_IT>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d017      	beq.n	8007af6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad4:	e00f      	b.n	8007af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9b6 	bl	8007e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007adc:	e00b      	b.n	8007af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f9b2 	bl	8007e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae4:	e007      	b.n	8007af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9ae 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007af4:	e193      	b.n	8007e1e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af6:	bf00      	nop
    return;
 8007af8:	e191      	b.n	8007e1e <HAL_UART_IRQHandler+0x5ba>
 8007afa:	bf00      	nop
 8007afc:	04000120 	.word	0x04000120
 8007b00:	08008911 	.word	0x08008911

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	f040 814c 	bne.w	8007da6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8145 	beq.w	8007da6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 813e 	beq.w	8007da6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2210      	movs	r2, #16
 8007b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3c:	2b40      	cmp	r3, #64	; 0x40
 8007b3e:	f040 80b6 	bne.w	8007cae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 8165 	beq.w	8007e22 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b62:	429a      	cmp	r2, r3
 8007b64:	f080 815d 	bcs.w	8007e22 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7c:	f000 8086 	beq.w	8007c8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1da      	bne.n	8007b80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bdc:	f023 0301 	bic.w	r3, r3, #1
 8007be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3308      	adds	r3, #8
 8007bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007bee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e1      	bne.n	8007bca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3308      	adds	r3, #8
 8007c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e3      	bne.n	8007c06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c5c:	f023 0310 	bic.w	r3, r3, #16
 8007c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e4      	bne.n	8007c4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fb fcf0 	bl	800366c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8d8 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cac:	e0b9      	b.n	8007e22 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80ab 	beq.w	8007e26 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80a6 	beq.w	8007e26 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cfe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e4      	bne.n	8007cda <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d34:	633a      	str	r2, [r7, #48]	; 0x30
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e3      	bne.n	8007d10 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f023 0310 	bic.w	r3, r3, #16
 8007d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d7e:	61fb      	str	r3, [r7, #28]
 8007d80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	69b9      	ldr	r1, [r7, #24]
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1e4      	bne.n	8007d5c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f85c 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007da4:	e03f      	b.n	8007e26 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00e      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x56c>
 8007db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007dc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f853 	bl	8007e74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dce:	e02d      	b.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00e      	beq.n	8007dfa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01c      	beq.n	8007e2a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
    }
    return;
 8007df8:	e017      	b.n	8007e2a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d012      	beq.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
 8007e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00c      	beq.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fd92 	bl	800893c <UART_EndTransmit_IT>
    return;
 8007e18:	e008      	b.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e1a:	bf00      	nop
 8007e1c:	e006      	b.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007e1e:	bf00      	nop
 8007e20:	e004      	b.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e22:	bf00      	nop
 8007e24:	e002      	b.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007e2a:	bf00      	nop
  }

}
 8007e2c:	37e8      	adds	r7, #232	; 0xe8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop

08007e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4ba6      	ldr	r3, [pc, #664]	; (800814c <UART_SetConfig+0x2c4>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	6979      	ldr	r1, [r7, #20]
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a94      	ldr	r2, [pc, #592]	; (8008150 <UART_SetConfig+0x2c8>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d120      	bne.n	8007f46 <UART_SetConfig+0xbe>
 8007f04:	4b93      	ldr	r3, [pc, #588]	; (8008154 <UART_SetConfig+0x2cc>)
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d816      	bhi.n	8007f40 <UART_SetConfig+0xb8>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <UART_SetConfig+0x90>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f29 	.word	0x08007f29
 8007f1c:	08007f35 	.word	0x08007f35
 8007f20:	08007f2f 	.word	0x08007f2f
 8007f24:	08007f3b 	.word	0x08007f3b
 8007f28:	2301      	movs	r3, #1
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e150      	b.n	80081d0 <UART_SetConfig+0x348>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	77fb      	strb	r3, [r7, #31]
 8007f32:	e14d      	b.n	80081d0 <UART_SetConfig+0x348>
 8007f34:	2304      	movs	r3, #4
 8007f36:	77fb      	strb	r3, [r7, #31]
 8007f38:	e14a      	b.n	80081d0 <UART_SetConfig+0x348>
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	77fb      	strb	r3, [r7, #31]
 8007f3e:	e147      	b.n	80081d0 <UART_SetConfig+0x348>
 8007f40:	2310      	movs	r3, #16
 8007f42:	77fb      	strb	r3, [r7, #31]
 8007f44:	e144      	b.n	80081d0 <UART_SetConfig+0x348>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a83      	ldr	r2, [pc, #524]	; (8008158 <UART_SetConfig+0x2d0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d132      	bne.n	8007fb6 <UART_SetConfig+0x12e>
 8007f50:	4b80      	ldr	r3, [pc, #512]	; (8008154 <UART_SetConfig+0x2cc>)
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f56:	f003 030c 	and.w	r3, r3, #12
 8007f5a:	2b0c      	cmp	r3, #12
 8007f5c:	d828      	bhi.n	8007fb0 <UART_SetConfig+0x128>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <UART_SetConfig+0xdc>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f99 	.word	0x08007f99
 8007f68:	08007fb1 	.word	0x08007fb1
 8007f6c:	08007fb1 	.word	0x08007fb1
 8007f70:	08007fb1 	.word	0x08007fb1
 8007f74:	08007fa5 	.word	0x08007fa5
 8007f78:	08007fb1 	.word	0x08007fb1
 8007f7c:	08007fb1 	.word	0x08007fb1
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	08007f9f 	.word	0x08007f9f
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fb1 	.word	0x08007fb1
 8007f94:	08007fab 	.word	0x08007fab
 8007f98:	2300      	movs	r3, #0
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e118      	b.n	80081d0 <UART_SetConfig+0x348>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e115      	b.n	80081d0 <UART_SetConfig+0x348>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e112      	b.n	80081d0 <UART_SetConfig+0x348>
 8007faa:	2308      	movs	r3, #8
 8007fac:	77fb      	strb	r3, [r7, #31]
 8007fae:	e10f      	b.n	80081d0 <UART_SetConfig+0x348>
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e10c      	b.n	80081d0 <UART_SetConfig+0x348>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a68      	ldr	r2, [pc, #416]	; (800815c <UART_SetConfig+0x2d4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d120      	bne.n	8008002 <UART_SetConfig+0x17a>
 8007fc0:	4b64      	ldr	r3, [pc, #400]	; (8008154 <UART_SetConfig+0x2cc>)
 8007fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fca:	2b30      	cmp	r3, #48	; 0x30
 8007fcc:	d013      	beq.n	8007ff6 <UART_SetConfig+0x16e>
 8007fce:	2b30      	cmp	r3, #48	; 0x30
 8007fd0:	d814      	bhi.n	8007ffc <UART_SetConfig+0x174>
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d009      	beq.n	8007fea <UART_SetConfig+0x162>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d810      	bhi.n	8007ffc <UART_SetConfig+0x174>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <UART_SetConfig+0x15c>
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d006      	beq.n	8007ff0 <UART_SetConfig+0x168>
 8007fe2:	e00b      	b.n	8007ffc <UART_SetConfig+0x174>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	77fb      	strb	r3, [r7, #31]
 8007fe8:	e0f2      	b.n	80081d0 <UART_SetConfig+0x348>
 8007fea:	2302      	movs	r3, #2
 8007fec:	77fb      	strb	r3, [r7, #31]
 8007fee:	e0ef      	b.n	80081d0 <UART_SetConfig+0x348>
 8007ff0:	2304      	movs	r3, #4
 8007ff2:	77fb      	strb	r3, [r7, #31]
 8007ff4:	e0ec      	b.n	80081d0 <UART_SetConfig+0x348>
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	77fb      	strb	r3, [r7, #31]
 8007ffa:	e0e9      	b.n	80081d0 <UART_SetConfig+0x348>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	77fb      	strb	r3, [r7, #31]
 8008000:	e0e6      	b.n	80081d0 <UART_SetConfig+0x348>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a56      	ldr	r2, [pc, #344]	; (8008160 <UART_SetConfig+0x2d8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d120      	bne.n	800804e <UART_SetConfig+0x1c6>
 800800c:	4b51      	ldr	r3, [pc, #324]	; (8008154 <UART_SetConfig+0x2cc>)
 800800e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008012:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008016:	2bc0      	cmp	r3, #192	; 0xc0
 8008018:	d013      	beq.n	8008042 <UART_SetConfig+0x1ba>
 800801a:	2bc0      	cmp	r3, #192	; 0xc0
 800801c:	d814      	bhi.n	8008048 <UART_SetConfig+0x1c0>
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d009      	beq.n	8008036 <UART_SetConfig+0x1ae>
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d810      	bhi.n	8008048 <UART_SetConfig+0x1c0>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <UART_SetConfig+0x1a8>
 800802a:	2b40      	cmp	r3, #64	; 0x40
 800802c:	d006      	beq.n	800803c <UART_SetConfig+0x1b4>
 800802e:	e00b      	b.n	8008048 <UART_SetConfig+0x1c0>
 8008030:	2300      	movs	r3, #0
 8008032:	77fb      	strb	r3, [r7, #31]
 8008034:	e0cc      	b.n	80081d0 <UART_SetConfig+0x348>
 8008036:	2302      	movs	r3, #2
 8008038:	77fb      	strb	r3, [r7, #31]
 800803a:	e0c9      	b.n	80081d0 <UART_SetConfig+0x348>
 800803c:	2304      	movs	r3, #4
 800803e:	77fb      	strb	r3, [r7, #31]
 8008040:	e0c6      	b.n	80081d0 <UART_SetConfig+0x348>
 8008042:	2308      	movs	r3, #8
 8008044:	77fb      	strb	r3, [r7, #31]
 8008046:	e0c3      	b.n	80081d0 <UART_SetConfig+0x348>
 8008048:	2310      	movs	r3, #16
 800804a:	77fb      	strb	r3, [r7, #31]
 800804c:	e0c0      	b.n	80081d0 <UART_SetConfig+0x348>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a44      	ldr	r2, [pc, #272]	; (8008164 <UART_SetConfig+0x2dc>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d125      	bne.n	80080a4 <UART_SetConfig+0x21c>
 8008058:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <UART_SetConfig+0x2cc>)
 800805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800805e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008066:	d017      	beq.n	8008098 <UART_SetConfig+0x210>
 8008068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800806c:	d817      	bhi.n	800809e <UART_SetConfig+0x216>
 800806e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008072:	d00b      	beq.n	800808c <UART_SetConfig+0x204>
 8008074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008078:	d811      	bhi.n	800809e <UART_SetConfig+0x216>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <UART_SetConfig+0x1fe>
 800807e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008082:	d006      	beq.n	8008092 <UART_SetConfig+0x20a>
 8008084:	e00b      	b.n	800809e <UART_SetConfig+0x216>
 8008086:	2300      	movs	r3, #0
 8008088:	77fb      	strb	r3, [r7, #31]
 800808a:	e0a1      	b.n	80081d0 <UART_SetConfig+0x348>
 800808c:	2302      	movs	r3, #2
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e09e      	b.n	80081d0 <UART_SetConfig+0x348>
 8008092:	2304      	movs	r3, #4
 8008094:	77fb      	strb	r3, [r7, #31]
 8008096:	e09b      	b.n	80081d0 <UART_SetConfig+0x348>
 8008098:	2308      	movs	r3, #8
 800809a:	77fb      	strb	r3, [r7, #31]
 800809c:	e098      	b.n	80081d0 <UART_SetConfig+0x348>
 800809e:	2310      	movs	r3, #16
 80080a0:	77fb      	strb	r3, [r7, #31]
 80080a2:	e095      	b.n	80081d0 <UART_SetConfig+0x348>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a2f      	ldr	r2, [pc, #188]	; (8008168 <UART_SetConfig+0x2e0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d125      	bne.n	80080fa <UART_SetConfig+0x272>
 80080ae:	4b29      	ldr	r3, [pc, #164]	; (8008154 <UART_SetConfig+0x2cc>)
 80080b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080bc:	d017      	beq.n	80080ee <UART_SetConfig+0x266>
 80080be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080c2:	d817      	bhi.n	80080f4 <UART_SetConfig+0x26c>
 80080c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c8:	d00b      	beq.n	80080e2 <UART_SetConfig+0x25a>
 80080ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ce:	d811      	bhi.n	80080f4 <UART_SetConfig+0x26c>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <UART_SetConfig+0x254>
 80080d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d8:	d006      	beq.n	80080e8 <UART_SetConfig+0x260>
 80080da:	e00b      	b.n	80080f4 <UART_SetConfig+0x26c>
 80080dc:	2301      	movs	r3, #1
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e076      	b.n	80081d0 <UART_SetConfig+0x348>
 80080e2:	2302      	movs	r3, #2
 80080e4:	77fb      	strb	r3, [r7, #31]
 80080e6:	e073      	b.n	80081d0 <UART_SetConfig+0x348>
 80080e8:	2304      	movs	r3, #4
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e070      	b.n	80081d0 <UART_SetConfig+0x348>
 80080ee:	2308      	movs	r3, #8
 80080f0:	77fb      	strb	r3, [r7, #31]
 80080f2:	e06d      	b.n	80081d0 <UART_SetConfig+0x348>
 80080f4:	2310      	movs	r3, #16
 80080f6:	77fb      	strb	r3, [r7, #31]
 80080f8:	e06a      	b.n	80081d0 <UART_SetConfig+0x348>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1b      	ldr	r2, [pc, #108]	; (800816c <UART_SetConfig+0x2e4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d138      	bne.n	8008176 <UART_SetConfig+0x2ee>
 8008104:	4b13      	ldr	r3, [pc, #76]	; (8008154 <UART_SetConfig+0x2cc>)
 8008106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800810e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008112:	d017      	beq.n	8008144 <UART_SetConfig+0x2bc>
 8008114:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008118:	d82a      	bhi.n	8008170 <UART_SetConfig+0x2e8>
 800811a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811e:	d00b      	beq.n	8008138 <UART_SetConfig+0x2b0>
 8008120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008124:	d824      	bhi.n	8008170 <UART_SetConfig+0x2e8>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <UART_SetConfig+0x2aa>
 800812a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812e:	d006      	beq.n	800813e <UART_SetConfig+0x2b6>
 8008130:	e01e      	b.n	8008170 <UART_SetConfig+0x2e8>
 8008132:	2300      	movs	r3, #0
 8008134:	77fb      	strb	r3, [r7, #31]
 8008136:	e04b      	b.n	80081d0 <UART_SetConfig+0x348>
 8008138:	2302      	movs	r3, #2
 800813a:	77fb      	strb	r3, [r7, #31]
 800813c:	e048      	b.n	80081d0 <UART_SetConfig+0x348>
 800813e:	2304      	movs	r3, #4
 8008140:	77fb      	strb	r3, [r7, #31]
 8008142:	e045      	b.n	80081d0 <UART_SetConfig+0x348>
 8008144:	2308      	movs	r3, #8
 8008146:	77fb      	strb	r3, [r7, #31]
 8008148:	e042      	b.n	80081d0 <UART_SetConfig+0x348>
 800814a:	bf00      	nop
 800814c:	efff69f3 	.word	0xefff69f3
 8008150:	40011000 	.word	0x40011000
 8008154:	40023800 	.word	0x40023800
 8008158:	40004400 	.word	0x40004400
 800815c:	40004800 	.word	0x40004800
 8008160:	40004c00 	.word	0x40004c00
 8008164:	40005000 	.word	0x40005000
 8008168:	40011400 	.word	0x40011400
 800816c:	40007800 	.word	0x40007800
 8008170:	2310      	movs	r3, #16
 8008172:	77fb      	strb	r3, [r7, #31]
 8008174:	e02c      	b.n	80081d0 <UART_SetConfig+0x348>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a72      	ldr	r2, [pc, #456]	; (8008344 <UART_SetConfig+0x4bc>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d125      	bne.n	80081cc <UART_SetConfig+0x344>
 8008180:	4b71      	ldr	r3, [pc, #452]	; (8008348 <UART_SetConfig+0x4c0>)
 8008182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008186:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800818a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800818e:	d017      	beq.n	80081c0 <UART_SetConfig+0x338>
 8008190:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008194:	d817      	bhi.n	80081c6 <UART_SetConfig+0x33e>
 8008196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800819a:	d00b      	beq.n	80081b4 <UART_SetConfig+0x32c>
 800819c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a0:	d811      	bhi.n	80081c6 <UART_SetConfig+0x33e>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <UART_SetConfig+0x326>
 80081a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081aa:	d006      	beq.n	80081ba <UART_SetConfig+0x332>
 80081ac:	e00b      	b.n	80081c6 <UART_SetConfig+0x33e>
 80081ae:	2300      	movs	r3, #0
 80081b0:	77fb      	strb	r3, [r7, #31]
 80081b2:	e00d      	b.n	80081d0 <UART_SetConfig+0x348>
 80081b4:	2302      	movs	r3, #2
 80081b6:	77fb      	strb	r3, [r7, #31]
 80081b8:	e00a      	b.n	80081d0 <UART_SetConfig+0x348>
 80081ba:	2304      	movs	r3, #4
 80081bc:	77fb      	strb	r3, [r7, #31]
 80081be:	e007      	b.n	80081d0 <UART_SetConfig+0x348>
 80081c0:	2308      	movs	r3, #8
 80081c2:	77fb      	strb	r3, [r7, #31]
 80081c4:	e004      	b.n	80081d0 <UART_SetConfig+0x348>
 80081c6:	2310      	movs	r3, #16
 80081c8:	77fb      	strb	r3, [r7, #31]
 80081ca:	e001      	b.n	80081d0 <UART_SetConfig+0x348>
 80081cc:	2310      	movs	r3, #16
 80081ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d8:	d15b      	bne.n	8008292 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80081da:	7ffb      	ldrb	r3, [r7, #31]
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d828      	bhi.n	8008232 <UART_SetConfig+0x3aa>
 80081e0:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <UART_SetConfig+0x360>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008215 	.word	0x08008215
 80081f0:	0800821d 	.word	0x0800821d
 80081f4:	08008233 	.word	0x08008233
 80081f8:	08008223 	.word	0x08008223
 80081fc:	08008233 	.word	0x08008233
 8008200:	08008233 	.word	0x08008233
 8008204:	08008233 	.word	0x08008233
 8008208:	0800822b 	.word	0x0800822b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800820c:	f7fd f888 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
 8008210:	61b8      	str	r0, [r7, #24]
        break;
 8008212:	e013      	b.n	800823c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008214:	f7fd f898 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 8008218:	61b8      	str	r0, [r7, #24]
        break;
 800821a:	e00f      	b.n	800823c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800821c:	4b4b      	ldr	r3, [pc, #300]	; (800834c <UART_SetConfig+0x4c4>)
 800821e:	61bb      	str	r3, [r7, #24]
        break;
 8008220:	e00c      	b.n	800823c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008222:	f7fc ff6b 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 8008226:	61b8      	str	r0, [r7, #24]
        break;
 8008228:	e008      	b.n	800823c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800822a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800822e:	61bb      	str	r3, [r7, #24]
        break;
 8008230:	e004      	b.n	800823c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	77bb      	strb	r3, [r7, #30]
        break;
 800823a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d074      	beq.n	800832c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	005a      	lsls	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	085b      	lsrs	r3, r3, #1
 800824c:	441a      	add	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	fbb2 f3f3 	udiv	r3, r2, r3
 8008256:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2b0f      	cmp	r3, #15
 800825c:	d916      	bls.n	800828c <UART_SetConfig+0x404>
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008264:	d212      	bcs.n	800828c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	b29b      	uxth	r3, r3
 800826a:	f023 030f 	bic.w	r3, r3, #15
 800826e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	085b      	lsrs	r3, r3, #1
 8008274:	b29b      	uxth	r3, r3
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	b29a      	uxth	r2, r3
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	4313      	orrs	r3, r2
 8008280:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	89fa      	ldrh	r2, [r7, #14]
 8008288:	60da      	str	r2, [r3, #12]
 800828a:	e04f      	b.n	800832c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	77bb      	strb	r3, [r7, #30]
 8008290:	e04c      	b.n	800832c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008292:	7ffb      	ldrb	r3, [r7, #31]
 8008294:	2b08      	cmp	r3, #8
 8008296:	d828      	bhi.n	80082ea <UART_SetConfig+0x462>
 8008298:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <UART_SetConfig+0x418>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082cd 	.word	0x080082cd
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082eb 	.word	0x080082eb
 80082b0:	080082db 	.word	0x080082db
 80082b4:	080082eb 	.word	0x080082eb
 80082b8:	080082eb 	.word	0x080082eb
 80082bc:	080082eb 	.word	0x080082eb
 80082c0:	080082e3 	.word	0x080082e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082c4:	f7fd f82c 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
 80082c8:	61b8      	str	r0, [r7, #24]
        break;
 80082ca:	e013      	b.n	80082f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082cc:	f7fd f83c 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80082d0:	61b8      	str	r0, [r7, #24]
        break;
 80082d2:	e00f      	b.n	80082f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d4:	4b1d      	ldr	r3, [pc, #116]	; (800834c <UART_SetConfig+0x4c4>)
 80082d6:	61bb      	str	r3, [r7, #24]
        break;
 80082d8:	e00c      	b.n	80082f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082da:	f7fc ff0f 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80082de:	61b8      	str	r0, [r7, #24]
        break;
 80082e0:	e008      	b.n	80082f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e6:	61bb      	str	r3, [r7, #24]
        break;
 80082e8:	e004      	b.n	80082f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	77bb      	strb	r3, [r7, #30]
        break;
 80082f2:	bf00      	nop
    }

    if (pclk != 0U)
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d018      	beq.n	800832c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	085a      	lsrs	r2, r3, #1
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	441a      	add	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	fbb2 f3f3 	udiv	r3, r2, r3
 800830c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b0f      	cmp	r3, #15
 8008312:	d909      	bls.n	8008328 <UART_SetConfig+0x4a0>
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800831a:	d205      	bcs.n	8008328 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	b29a      	uxth	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	e001      	b.n	800832c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008338:	7fbb      	ldrb	r3, [r7, #30]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40007c00 	.word	0x40007c00
 8008348:	40023800 	.word	0x40023800
 800834c:	00f42400 	.word	0x00f42400

08008350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01a      	beq.n	8008466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844e:	d10a      	bne.n	8008466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084a4:	f7fa fd6c 	bl	8002f80 <HAL_GetTick>
 80084a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d10e      	bne.n	80084d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f831 	bl	800852e <UART_WaitOnFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e027      	b.n	8008526 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d10e      	bne.n	8008502 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f81b 	bl	800852e <UART_WaitOnFlagUntilTimeout>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e011      	b.n	8008526 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b09c      	sub	sp, #112	; 0x70
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	603b      	str	r3, [r7, #0]
 800853a:	4613      	mov	r3, r2
 800853c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800853e:	e0a7      	b.n	8008690 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008546:	f000 80a3 	beq.w	8008690 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800854a:	f7fa fd19 	bl	8002f80 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008556:	429a      	cmp	r2, r3
 8008558:	d302      	bcc.n	8008560 <UART_WaitOnFlagUntilTimeout+0x32>
 800855a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800855c:	2b00      	cmp	r3, #0
 800855e:	d13f      	bne.n	80085e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800856e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008574:	667b      	str	r3, [r7, #100]	; 0x64
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800857e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008580:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800858c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	663b      	str	r3, [r7, #96]	; 0x60
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80085b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2220      	movs	r2, #32
 80085ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e068      	b.n	80086b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d050      	beq.n	8008690 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085fc:	d148      	bne.n	8008690 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008606:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800861c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
 8008628:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800862c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e6      	bne.n	8008608 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3308      	adds	r3, #8
 8008640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	613b      	str	r3, [r7, #16]
   return(result);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	66bb      	str	r3, [r7, #104]	; 0x68
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800865a:	623a      	str	r2, [r7, #32]
 800865c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	69f9      	ldr	r1, [r7, #28]
 8008660:	6a3a      	ldr	r2, [r7, #32]
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	61bb      	str	r3, [r7, #24]
   return(result);
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e5      	bne.n	800863a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2220      	movs	r2, #32
 8008672:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e010      	b.n	80086b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69da      	ldr	r2, [r3, #28]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	4013      	ands	r3, r2
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	429a      	cmp	r2, r3
 800869e:	bf0c      	ite	eq
 80086a0:	2301      	moveq	r3, #1
 80086a2:	2300      	movne	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	461a      	mov	r2, r3
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	f43f af48 	beq.w	8008540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3770      	adds	r7, #112	; 0x70
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086bc:	b480      	push	{r7}
 80086be:	b097      	sub	sp, #92	; 0x5c
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	88fa      	ldrh	r2, [r7, #6]
 80086d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	88fa      	ldrh	r2, [r7, #6]
 80086dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ee:	d10e      	bne.n	800870e <UART_Start_Receive_IT+0x52>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <UART_Start_Receive_IT+0x48>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008702:	e02d      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	22ff      	movs	r2, #255	; 0xff
 8008708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800870c:	e028      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10d      	bne.n	8008732 <UART_Start_Receive_IT+0x76>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <UART_Start_Receive_IT+0x6c>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	22ff      	movs	r2, #255	; 0xff
 8008722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008726:	e01b      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	227f      	movs	r2, #127	; 0x7f
 800872c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008730:	e016      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800873a:	d10d      	bne.n	8008758 <UART_Start_Receive_IT+0x9c>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d104      	bne.n	800874e <UART_Start_Receive_IT+0x92>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	227f      	movs	r2, #127	; 0x7f
 8008748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800874c:	e008      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	223f      	movs	r2, #63	; 0x3f
 8008752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008756:	e003      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2222      	movs	r2, #34	; 0x22
 800876c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	657b      	str	r3, [r7, #84]	; 0x54
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3308      	adds	r3, #8
 800878e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008790:	64ba      	str	r2, [r7, #72]	; 0x48
 8008792:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800879e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e5      	bne.n	8008770 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ac:	d107      	bne.n	80087be <UART_Start_Receive_IT+0x102>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d103      	bne.n	80087be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4a21      	ldr	r2, [pc, #132]	; (8008840 <UART_Start_Receive_IT+0x184>)
 80087ba:	669a      	str	r2, [r3, #104]	; 0x68
 80087bc:	e002      	b.n	80087c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4a20      	ldr	r2, [pc, #128]	; (8008844 <UART_Start_Receive_IT+0x188>)
 80087c2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d019      	beq.n	8008800 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80087e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ea:	637b      	str	r3, [r7, #52]	; 0x34
 80087ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e6      	bne.n	80087cc <UART_Start_Receive_IT+0x110>
 80087fe:	e018      	b.n	8008832 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	613b      	str	r3, [r7, #16]
   return(result);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f043 0320 	orr.w	r3, r3, #32
 8008814:	653b      	str	r3, [r7, #80]	; 0x50
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881e:	623b      	str	r3, [r7, #32]
 8008820:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	69f9      	ldr	r1, [r7, #28]
 8008824:	6a3a      	ldr	r2, [r7, #32]
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	61bb      	str	r3, [r7, #24]
   return(result);
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	375c      	adds	r7, #92	; 0x5c
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	08008af7 	.word	0x08008af7
 8008844:	08008991 	.word	0x08008991

08008848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b095      	sub	sp, #84	; 0x54
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886e:	643b      	str	r3, [r7, #64]	; 0x40
 8008870:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e6      	bne.n	8008850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3308      	adds	r3, #8
 8008888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	61fb      	str	r3, [r7, #28]
   return(result);
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	f023 0301 	bic.w	r3, r3, #1
 8008898:	64bb      	str	r3, [r7, #72]	; 0x48
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3308      	adds	r3, #8
 80088a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e5      	bne.n	8008882 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d118      	bne.n	80088f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f023 0310 	bic.w	r3, r3, #16
 80088d2:	647b      	str	r3, [r7, #68]	; 0x44
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088dc:	61bb      	str	r3, [r7, #24]
 80088de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	613b      	str	r3, [r7, #16]
   return(result);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e6      	bne.n	80088be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008904:	bf00      	nop
 8008906:	3754      	adds	r7, #84	; 0x54
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7ff fa8a 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008934:	bf00      	nop
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	60bb      	str	r3, [r7, #8]
   return(result);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6979      	ldr	r1, [r7, #20]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	613b      	str	r3, [r7, #16]
   return(result);
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e6      	bne.n	8008944 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2220      	movs	r2, #32
 800897a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fa56 	bl	8007e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008988:	bf00      	nop
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b096      	sub	sp, #88	; 0x58
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800899e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a8:	2b22      	cmp	r3, #34	; 0x22
 80089aa:	f040 8098 	bne.w	8008ade <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089bc:	b2d9      	uxtb	r1, r3
 80089be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c8:	400a      	ands	r2, r1
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d17b      	bne.n	8008aee <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a14:	647b      	str	r3, [r7, #68]	; 0x44
 8008a16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	623b      	str	r3, [r7, #32]
   return(result);
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	f023 0301 	bic.w	r3, r3, #1
 8008a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a48:	633a      	str	r2, [r7, #48]	; 0x30
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e5      	bne.n	8008a28 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d12e      	bne.n	8008ad6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0310 	bic.w	r3, r3, #16
 8008a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	69b9      	ldr	r1, [r7, #24]
 8008aa2:	69fa      	ldr	r2, [r7, #28]
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e6      	bne.n	8008a7e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f003 0310 	and.w	r3, r3, #16
 8008aba:	2b10      	cmp	r3, #16
 8008abc:	d103      	bne.n	8008ac6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2210      	movs	r2, #16
 8008ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff f9c4 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ad4:	e00b      	b.n	8008aee <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7f9 f8fe 	bl	8001cd8 <HAL_UART_RxCpltCallback>
}
 8008adc:	e007      	b.n	8008aee <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f042 0208 	orr.w	r2, r2, #8
 8008aec:	619a      	str	r2, [r3, #24]
}
 8008aee:	bf00      	nop
 8008af0:	3758      	adds	r7, #88	; 0x58
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b096      	sub	sp, #88	; 0x58
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b0e:	2b22      	cmp	r3, #34	; 0x22
 8008b10:	f040 8098 	bne.w	8008c44 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b24:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b38:	1c9a      	adds	r2, r3, #2
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d17b      	bne.n	8008c54 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e6      	bne.n	8008b5c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3308      	adds	r3, #8
 8008b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f023 0301 	bic.w	r3, r3, #1
 8008ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e5      	bne.n	8008b8e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d12e      	bne.n	8008c3c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f023 0310 	bic.w	r3, r3, #16
 8008bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c02:	61bb      	str	r3, [r7, #24]
 8008c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6979      	ldr	r1, [r7, #20]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e6      	bne.n	8008be4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	f003 0310 	and.w	r3, r3, #16
 8008c20:	2b10      	cmp	r3, #16
 8008c22:	d103      	bne.n	8008c2c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2210      	movs	r2, #16
 8008c2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff f911 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c3a:	e00b      	b.n	8008c54 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7f9 f84b 	bl	8001cd8 <HAL_UART_RxCpltCallback>
}
 8008c42:	e007      	b.n	8008c54 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0208 	orr.w	r2, r2, #8
 8008c52:	619a      	str	r2, [r3, #24]
}
 8008c54:	bf00      	nop
 8008c56:	3758      	adds	r7, #88	; 0x58
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008c60:	bf00      	nop
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c72:	f3ef 8305 	mrs	r3, IPSR
 8008c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10f      	bne.n	8008c9e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c82:	607b      	str	r3, [r7, #4]
  return(result);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8008c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <osKernelInitialize+0x3a>
 8008c96:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <osKernelInitialize+0x64>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d103      	bne.n	8008ca6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008c9e:	f06f 0305 	mvn.w	r3, #5
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	e00c      	b.n	8008cc0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <osKernelInitialize+0x64>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d105      	bne.n	8008cba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cae:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <osKernelInitialize+0x64>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	e002      	b.n	8008cc0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	200007f0 	.word	0x200007f0

08008cd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cda:	f3ef 8305 	mrs	r3, IPSR
 8008cde:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10f      	bne.n	8008d06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cea:	607b      	str	r3, [r7, #4]
  return(result);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d105      	bne.n	8008cfe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8008cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d007      	beq.n	8008d0e <osKernelStart+0x3a>
 8008cfe:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <osKernelStart+0x68>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d103      	bne.n	8008d0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008d06:	f06f 0305 	mvn.w	r3, #5
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	e010      	b.n	8008d30 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <osKernelStart+0x68>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d109      	bne.n	8008d2a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d16:	f7ff ffa1 	bl	8008c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d1a:	4b08      	ldr	r3, [pc, #32]	; (8008d3c <osKernelStart+0x68>)
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d20:	f001 fb9a 	bl	800a458 <vTaskStartScheduler>
      stat = osOK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e002      	b.n	8008d30 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d30:	68fb      	ldr	r3, [r7, #12]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	200007f0 	.word	0x200007f0

08008d40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b090      	sub	sp, #64	; 0x40
 8008d44:	af04      	add	r7, sp, #16
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d50:	f3ef 8305 	mrs	r3, IPSR
 8008d54:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d56:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f040 808f 	bne.w	8008e7c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d62:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d105      	bne.n	8008d76 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8008d6e:	617b      	str	r3, [r7, #20]
  return(result);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <osThreadNew+0x3e>
 8008d76:	4b44      	ldr	r3, [pc, #272]	; (8008e88 <osThreadNew+0x148>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d07e      	beq.n	8008e7c <osThreadNew+0x13c>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d07b      	beq.n	8008e7c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008d84:	2380      	movs	r3, #128	; 0x80
 8008d86:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008d88:	2318      	movs	r3, #24
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
 8008d94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d045      	beq.n	8008e28 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <osThreadNew+0x6a>
        name = attr->name;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <osThreadNew+0x90>
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	2b38      	cmp	r3, #56	; 0x38
 8008dc2:	d805      	bhi.n	8008dd0 <osThreadNew+0x90>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <osThreadNew+0x94>
        return (NULL);
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e054      	b.n	8008e7e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	089b      	lsrs	r3, r3, #2
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00e      	beq.n	8008e0a <osThreadNew+0xca>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2ba7      	cmp	r3, #167	; 0xa7
 8008df2:	d90a      	bls.n	8008e0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <osThreadNew+0xca>
        mem = 1;
 8008e04:	2301      	movs	r3, #1
 8008e06:	623b      	str	r3, [r7, #32]
 8008e08:	e010      	b.n	8008e2c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10c      	bne.n	8008e2c <osThreadNew+0xec>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d108      	bne.n	8008e2c <osThreadNew+0xec>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d104      	bne.n	8008e2c <osThreadNew+0xec>
          mem = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	623b      	str	r3, [r7, #32]
 8008e26:	e001      	b.n	8008e2c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d110      	bne.n	8008e54 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e3a:	9202      	str	r2, [sp, #8]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 ff19 	bl	8009c80 <xTaskCreateStatic>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	e013      	b.n	8008e7c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d110      	bne.n	8008e7c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	f107 0310 	add.w	r3, r7, #16
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 ff6a 	bl	8009d46 <xTaskCreate>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d001      	beq.n	8008e7c <osThreadNew+0x13c>
          hTask = NULL;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e7c:	693b      	ldr	r3, [r7, #16]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3730      	adds	r7, #48	; 0x30
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	200007f0 	.word	0x200007f0

08008e8c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e94:	f3ef 8305 	mrs	r3, IPSR
 8008e98:	613b      	str	r3, [r7, #16]
  return(result);
 8008e9a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10f      	bne.n	8008ec0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d105      	bne.n	8008eb8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008eac:	f3ef 8311 	mrs	r3, BASEPRI
 8008eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d007      	beq.n	8008ec8 <osDelay+0x3c>
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <osDelay+0x58>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d103      	bne.n	8008ec8 <osDelay+0x3c>
    stat = osErrorISR;
 8008ec0:	f06f 0305 	mvn.w	r3, #5
 8008ec4:	617b      	str	r3, [r7, #20]
 8008ec6:	e007      	b.n	8008ed8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f001 f908 	bl	800a0e8 <vTaskDelay>
    }
  }

  return (stat);
 8008ed8:	697b      	ldr	r3, [r7, #20]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200007f0 	.word	0x200007f0

08008ee8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f002 fc03 	bl	800b6fc <pvTimerGetTimerID>
 8008ef6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d005      	beq.n	8008f0a <TimerCallback+0x22>
    callb->func (callb->arg);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	6852      	ldr	r2, [r2, #4]
 8008f06:	4610      	mov	r0, r2
 8008f08:	4798      	blx	r3
  }
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08e      	sub	sp, #56	; 0x38
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	460b      	mov	r3, r1
 8008f22:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008f24:	2300      	movs	r3, #0
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f28:	f3ef 8305 	mrs	r3, IPSR
 8008f2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d16a      	bne.n	800900a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f34:	f3ef 8310 	mrs	r3, PRIMASK
 8008f38:	617b      	str	r3, [r7, #20]
  return(result);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d105      	bne.n	8008f4c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f40:	f3ef 8311 	mrs	r3, BASEPRI
 8008f44:	613b      	str	r3, [r7, #16]
  return(result);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <osTimerNew+0x40>
 8008f4c:	4b31      	ldr	r3, [pc, #196]	; (8009014 <osTimerNew+0x100>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d05a      	beq.n	800900a <osTimerNew+0xf6>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d057      	beq.n	800900a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008f5a:	2008      	movs	r0, #8
 8008f5c:	f002 fe2a 	bl	800bbb4 <pvPortMalloc>
 8008f60:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d050      	beq.n	800900a <osTimerNew+0xf6>
      callb->func = func;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <osTimerNew+0x6c>
        reload = pdFALSE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7e:	e001      	b.n	8008f84 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8008f84:	f04f 33ff 	mov.w	r3, #4294967295
 8008f88:	623b      	str	r3, [r7, #32]
      name = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01c      	beq.n	8008fce <osTimerNew+0xba>
        if (attr->name != NULL) {
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <osTimerNew+0x8e>
          name = attr->name;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d006      	beq.n	8008fb8 <osTimerNew+0xa4>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b2b      	cmp	r3, #43	; 0x2b
 8008fb0:	d902      	bls.n	8008fb8 <osTimerNew+0xa4>
          mem = 1;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	623b      	str	r3, [r7, #32]
 8008fb6:	e00c      	b.n	8008fd2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d108      	bne.n	8008fd2 <osTimerNew+0xbe>
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <osTimerNew+0xbe>
            mem = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	e001      	b.n	8008fd2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d10c      	bne.n	8008ff2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <osTimerNew+0x104>)
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fea:	f001 fff6 	bl	800afda <xTimerCreateStatic>
 8008fee:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ff0:	e00b      	b.n	800900a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d108      	bne.n	800900a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <osTimerNew+0x104>)
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009000:	2101      	movs	r1, #1
 8009002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009004:	f001 ffc8 	bl	800af98 <xTimerCreate>
 8009008:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800900c:	4618      	mov	r0, r3
 800900e:	3730      	adds	r7, #48	; 0x30
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	200007f0 	.word	0x200007f0
 8009018:	08008ee9 	.word	0x08008ee9

0800901c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	; 0x28
 8009020:	af02      	add	r7, sp, #8
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800902a:	f3ef 8305 	mrs	r3, IPSR
 800902e:	617b      	str	r3, [r7, #20]
  return(result);
 8009030:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10f      	bne.n	8009056 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009036:	f3ef 8310 	mrs	r3, PRIMASK
 800903a:	613b      	str	r3, [r7, #16]
  return(result);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d105      	bne.n	800904e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009042:	f3ef 8311 	mrs	r3, BASEPRI
 8009046:	60fb      	str	r3, [r7, #12]
  return(result);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <osTimerStart+0x42>
 800904e:	4b12      	ldr	r3, [pc, #72]	; (8009098 <osTimerStart+0x7c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d103      	bne.n	800905e <osTimerStart+0x42>
    stat = osErrorISR;
 8009056:	f06f 0305 	mvn.w	r3, #5
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e017      	b.n	800908e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <osTimerStart+0x50>
    stat = osErrorParameter;
 8009064:	f06f 0303 	mvn.w	r3, #3
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	e010      	b.n	800908e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	2104      	movs	r1, #4
 8009076:	69b8      	ldr	r0, [r7, #24]
 8009078:	f002 f82e 	bl	800b0d8 <xTimerGenericCommand>
 800907c:	4603      	mov	r3, r0
 800907e:	2b01      	cmp	r3, #1
 8009080:	d102      	bne.n	8009088 <osTimerStart+0x6c>
      stat = osOK;
 8009082:	2300      	movs	r3, #0
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	e002      	b.n	800908e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8009088:	f06f 0302 	mvn.w	r3, #2
 800908c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800908e:	69fb      	ldr	r3, [r7, #28]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3720      	adds	r7, #32
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	200007f0 	.word	0x200007f0

0800909c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4a07      	ldr	r2, [pc, #28]	; (80090c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80090ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4a06      	ldr	r2, [pc, #24]	; (80090cc <vApplicationGetIdleTaskMemory+0x30>)
 80090b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2280      	movs	r2, #128	; 0x80
 80090b8:	601a      	str	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	200007f4 	.word	0x200007f4
 80090cc:	2000089c 	.word	0x2000089c

080090d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4a07      	ldr	r2, [pc, #28]	; (80090fc <vApplicationGetTimerTaskMemory+0x2c>)
 80090e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a06      	ldr	r2, [pc, #24]	; (8009100 <vApplicationGetTimerTaskMemory+0x30>)
 80090e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090ee:	601a      	str	r2, [r3, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20000a9c 	.word	0x20000a9c
 8009100:	20000b44 	.word	0x20000b44

08009104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f103 0208 	add.w	r2, r3, #8
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f04f 32ff 	mov.w	r2, #4294967295
 800911c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f103 0208 	add.w	r2, r3, #8
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f103 0208 	add.w	r2, r3, #8
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d103      	bne.n	80091c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e00c      	b.n	80091e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3308      	adds	r3, #8
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e002      	b.n	80091d4 <vListInsert+0x2e>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d2f6      	bcs.n	80091ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
}
 800920c:	bf00      	nop
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6892      	ldr	r2, [r2, #8]
 800922e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6852      	ldr	r2, [r2, #4]
 8009238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	429a      	cmp	r2, r3
 8009242:	d103      	bne.n	800924c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10c      	bne.n	800929a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	b672      	cpsid	i
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	b662      	cpsie	i
 8009294:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800929a:	f002 fb5f 	bl	800b95c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092aa:	fb01 f303 	mul.w	r3, r1, r3
 80092ae:	441a      	add	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ca:	3b01      	subs	r3, #1
 80092cc:	68f9      	ldr	r1, [r7, #12]
 80092ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092d0:	fb01 f303 	mul.w	r3, r1, r3
 80092d4:	441a      	add	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	22ff      	movs	r2, #255	; 0xff
 80092de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	22ff      	movs	r2, #255	; 0xff
 80092e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d114      	bne.n	800931a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01a      	beq.n	800932e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3310      	adds	r3, #16
 80092fc:	4618      	mov	r0, r3
 80092fe:	f001 fb53 	bl	800a9a8 <xTaskRemoveFromEventList>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d012      	beq.n	800932e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009308:	4b0c      	ldr	r3, [pc, #48]	; (800933c <xQueueGenericReset+0xd0>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	e009      	b.n	800932e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3310      	adds	r3, #16
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff fef0 	bl	8009104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3324      	adds	r3, #36	; 0x24
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff feeb 	bl	8009104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800932e:	f002 fb49 	bl	800b9c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009332:	2301      	movs	r3, #1
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	e000ed04 	.word	0xe000ed04

08009340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08e      	sub	sp, #56	; 0x38
 8009344:	af02      	add	r7, sp, #8
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10c      	bne.n	800936e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	b672      	cpsid	i
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	b662      	cpsie	i
 8009368:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10c      	bne.n	800938e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	b672      	cpsid	i
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	b662      	cpsie	i
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <xQueueGenericCreateStatic+0x5a>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <xQueueGenericCreateStatic+0x5e>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueGenericCreateStatic+0x60>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10c      	bne.n	80093be <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	b672      	cpsid	i
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	b662      	cpsie	i
 80093b8:	623b      	str	r3, [r7, #32]
}
 80093ba:	bf00      	nop
 80093bc:	e7fe      	b.n	80093bc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <xQueueGenericCreateStatic+0x8a>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <xQueueGenericCreateStatic+0x8e>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <xQueueGenericCreateStatic+0x90>
 80093ce:	2300      	movs	r3, #0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10c      	bne.n	80093ee <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	b672      	cpsid	i
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	b662      	cpsie	i
 80093e8:	61fb      	str	r3, [r7, #28]
}
 80093ea:	bf00      	nop
 80093ec:	e7fe      	b.n	80093ec <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093ee:	2350      	movs	r3, #80	; 0x50
 80093f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b50      	cmp	r3, #80	; 0x50
 80093f6:	d00c      	beq.n	8009412 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	b672      	cpsid	i
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	b662      	cpsie	i
 800940c:	61bb      	str	r3, [r7, #24]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009412:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009426:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4613      	mov	r3, r2
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f805 	bl	8009444 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800943c:	4618      	mov	r0, r3
 800943e:	3730      	adds	r7, #48	; 0x30
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e002      	b.n	8009466 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009472:	2101      	movs	r1, #1
 8009474:	69b8      	ldr	r0, [r7, #24]
 8009476:	f7ff fef9 	bl	800926c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	78fa      	ldrb	r2, [r7, #3]
 800947e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08e      	sub	sp, #56	; 0x38
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10c      	bne.n	80094c2 <xQueueGenericSend+0x36>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <xQueueGenericSend+0x44>
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <xQueueGenericSend+0x48>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <xQueueGenericSend+0x4a>
 80094d4:	2300      	movs	r3, #0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10c      	bne.n	80094f4 <xQueueGenericSend+0x68>
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	b672      	cpsid	i
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	b662      	cpsie	i
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d103      	bne.n	8009502 <xQueueGenericSend+0x76>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <xQueueGenericSend+0x7a>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <xQueueGenericSend+0x7c>
 8009506:	2300      	movs	r3, #0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10c      	bne.n	8009526 <xQueueGenericSend+0x9a>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	b672      	cpsid	i
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	b662      	cpsie	i
 8009520:	623b      	str	r3, [r7, #32]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009526:	f001 fc09 	bl	800ad3c <xTaskGetSchedulerState>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <xQueueGenericSend+0xaa>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <xQueueGenericSend+0xae>
 8009536:	2301      	movs	r3, #1
 8009538:	e000      	b.n	800953c <xQueueGenericSend+0xb0>
 800953a:	2300      	movs	r3, #0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10c      	bne.n	800955a <xQueueGenericSend+0xce>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	b672      	cpsid	i
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	b662      	cpsie	i
 8009554:	61fb      	str	r3, [r7, #28]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800955a:	f002 f9ff 	bl	800b95c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009566:	429a      	cmp	r2, r3
 8009568:	d302      	bcc.n	8009570 <xQueueGenericSend+0xe4>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d129      	bne.n	80095c4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	68b9      	ldr	r1, [r7, #8]
 8009574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009576:	f000 fa15 	bl	80099a4 <prvCopyDataToQueue>
 800957a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	2b00      	cmp	r3, #0
 8009582:	d010      	beq.n	80095a6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	3324      	adds	r3, #36	; 0x24
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fa0d 	bl	800a9a8 <xTaskRemoveFromEventList>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d013      	beq.n	80095bc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009594:	4b3f      	ldr	r3, [pc, #252]	; (8009694 <xQueueGenericSend+0x208>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	e00a      	b.n	80095bc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d007      	beq.n	80095bc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095ac:	4b39      	ldr	r3, [pc, #228]	; (8009694 <xQueueGenericSend+0x208>)
 80095ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095bc:	f002 fa02 	bl	800b9c4 <vPortExitCritical>
				return pdPASS;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e063      	b.n	800968c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095ca:	f002 f9fb 	bl	800b9c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e05c      	b.n	800968c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d106      	bne.n	80095e6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d8:	f107 0314 	add.w	r3, r7, #20
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 fa49 	bl	800aa74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095e2:	2301      	movs	r3, #1
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095e6:	f002 f9ed 	bl	800b9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095ea:	f000 ffa9 	bl	800a540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ee:	f002 f9b5 	bl	800b95c <vPortEnterCritical>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f8:	b25b      	sxtb	r3, r3
 80095fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fe:	d103      	bne.n	8009608 <xQueueGenericSend+0x17c>
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800960e:	b25b      	sxtb	r3, r3
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d103      	bne.n	800961e <xQueueGenericSend+0x192>
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800961e:	f002 f9d1 	bl	800b9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009622:	1d3a      	adds	r2, r7, #4
 8009624:	f107 0314 	add.w	r3, r7, #20
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f001 fa38 	bl	800aaa0 <xTaskCheckForTimeOut>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d124      	bne.n	8009680 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009638:	f000 faac 	bl	8009b94 <prvIsQueueFull>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d018      	beq.n	8009674 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	3310      	adds	r3, #16
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	4611      	mov	r1, r2
 800964a:	4618      	mov	r0, r3
 800964c:	f001 f958 	bl	800a900 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009652:	f000 fa37 	bl	8009ac4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009656:	f000 ff81 	bl	800a55c <xTaskResumeAll>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	f47f af7c 	bne.w	800955a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009662:	4b0c      	ldr	r3, [pc, #48]	; (8009694 <xQueueGenericSend+0x208>)
 8009664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	e772      	b.n	800955a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009676:	f000 fa25 	bl	8009ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800967a:	f000 ff6f 	bl	800a55c <xTaskResumeAll>
 800967e:	e76c      	b.n	800955a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009682:	f000 fa1f 	bl	8009ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009686:	f000 ff69 	bl	800a55c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800968a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800968c:	4618      	mov	r0, r3
 800968e:	3738      	adds	r7, #56	; 0x38
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	e000ed04 	.word	0xe000ed04

08009698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08e      	sub	sp, #56	; 0x38
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10c      	bne.n	80096ca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	b672      	cpsid	i
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	b662      	cpsie	i
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <xQueueGenericSendFromISR+0x40>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <xQueueGenericSendFromISR+0x44>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <xQueueGenericSendFromISR+0x46>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10c      	bne.n	80096fc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	b672      	cpsid	i
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	b662      	cpsie	i
 80096f6:	623b      	str	r3, [r7, #32]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d103      	bne.n	800970a <xQueueGenericSendFromISR+0x72>
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <xQueueGenericSendFromISR+0x76>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <xQueueGenericSendFromISR+0x78>
 800970e:	2300      	movs	r3, #0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10c      	bne.n	800972e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	b672      	cpsid	i
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	b662      	cpsie	i
 8009728:	61fb      	str	r3, [r7, #28]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800972e:	f002 f9fd 	bl	800bb2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009732:	f3ef 8211 	mrs	r2, BASEPRI
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	b672      	cpsid	i
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	b662      	cpsie	i
 800974a:	61ba      	str	r2, [r7, #24]
 800974c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800974e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975a:	429a      	cmp	r2, r3
 800975c:	d302      	bcc.n	8009764 <xQueueGenericSendFromISR+0xcc>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d12c      	bne.n	80097be <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	68b9      	ldr	r1, [r7, #8]
 8009772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009774:	f000 f916 	bl	80099a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009778:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800977c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009780:	d112      	bne.n	80097a8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	d016      	beq.n	80097b8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	3324      	adds	r3, #36	; 0x24
 800978e:	4618      	mov	r0, r3
 8009790:	f001 f90a 	bl	800a9a8 <xTaskRemoveFromEventList>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00e      	beq.n	80097b8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	e007      	b.n	80097b8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097ac:	3301      	adds	r3, #1
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	b25a      	sxtb	r2, r3
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097b8:	2301      	movs	r3, #1
 80097ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80097bc:	e001      	b.n	80097c2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
 80097c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3738      	adds	r7, #56	; 0x38
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08c      	sub	sp, #48	; 0x30
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097e4:	2300      	movs	r3, #0
 80097e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10c      	bne.n	800980c <xQueueReceive+0x34>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	b672      	cpsid	i
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	b662      	cpsie	i
 8009806:	623b      	str	r3, [r7, #32]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d103      	bne.n	800981a <xQueueReceive+0x42>
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <xQueueReceive+0x46>
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <xQueueReceive+0x48>
 800981e:	2300      	movs	r3, #0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10c      	bne.n	800983e <xQueueReceive+0x66>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	b672      	cpsid	i
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	b662      	cpsie	i
 8009838:	61fb      	str	r3, [r7, #28]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800983e:	f001 fa7d 	bl	800ad3c <xTaskGetSchedulerState>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <xQueueReceive+0x76>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <xQueueReceive+0x7a>
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <xQueueReceive+0x7c>
 8009852:	2300      	movs	r3, #0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10c      	bne.n	8009872 <xQueueReceive+0x9a>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	b672      	cpsid	i
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	b662      	cpsie	i
 800986c:	61bb      	str	r3, [r7, #24]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009872:	f002 f873 	bl	800b95c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01f      	beq.n	80098c2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009882:	68b9      	ldr	r1, [r7, #8]
 8009884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009886:	f000 f8f7 	bl	8009a78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	1e5a      	subs	r2, r3, #1
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00f      	beq.n	80098ba <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	3310      	adds	r3, #16
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 f882 	bl	800a9a8 <xTaskRemoveFromEventList>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098aa:	4b3d      	ldr	r3, [pc, #244]	; (80099a0 <xQueueReceive+0x1c8>)
 80098ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098ba:	f002 f883 	bl	800b9c4 <vPortExitCritical>
				return pdPASS;
 80098be:	2301      	movs	r3, #1
 80098c0:	e069      	b.n	8009996 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d103      	bne.n	80098d0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098c8:	f002 f87c 	bl	800b9c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098cc:	2300      	movs	r3, #0
 80098ce:	e062      	b.n	8009996 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098d6:	f107 0310 	add.w	r3, r7, #16
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 f8ca 	bl	800aa74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098e0:	2301      	movs	r3, #1
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098e4:	f002 f86e 	bl	800b9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098e8:	f000 fe2a 	bl	800a540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098ec:	f002 f836 	bl	800b95c <vPortEnterCritical>
 80098f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f6:	b25b      	sxtb	r3, r3
 80098f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fc:	d103      	bne.n	8009906 <xQueueReceive+0x12e>
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800990c:	b25b      	sxtb	r3, r3
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d103      	bne.n	800991c <xQueueReceive+0x144>
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800991c:	f002 f852 	bl	800b9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009920:	1d3a      	adds	r2, r7, #4
 8009922:	f107 0310 	add.w	r3, r7, #16
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f001 f8b9 	bl	800aaa0 <xTaskCheckForTimeOut>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d123      	bne.n	800997c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009936:	f000 f917 	bl	8009b68 <prvIsQueueEmpty>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d017      	beq.n	8009970 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	3324      	adds	r3, #36	; 0x24
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f000 ffd9 	bl	800a900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800994e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009950:	f000 f8b8 	bl	8009ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009954:	f000 fe02 	bl	800a55c <xTaskResumeAll>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d189      	bne.n	8009872 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800995e:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <xQueueReceive+0x1c8>)
 8009960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	e780      	b.n	8009872 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009972:	f000 f8a7 	bl	8009ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009976:	f000 fdf1 	bl	800a55c <xTaskResumeAll>
 800997a:	e77a      	b.n	8009872 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800997c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997e:	f000 f8a1 	bl	8009ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009982:	f000 fdeb 	bl	800a55c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009988:	f000 f8ee 	bl	8009b68 <prvIsQueueEmpty>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	f43f af6f 	beq.w	8009872 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009994:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009996:	4618      	mov	r0, r3
 8009998:	3730      	adds	r7, #48	; 0x30
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	e000ed04 	.word	0xe000ed04

080099a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10d      	bne.n	80099de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d14d      	bne.n	8009a66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 f9d2 	bl	800ad78 <xTaskPriorityDisinherit>
 80099d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	609a      	str	r2, [r3, #8]
 80099dc:	e043      	b.n	8009a66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d119      	bne.n	8009a18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6858      	ldr	r0, [r3, #4]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	461a      	mov	r2, r3
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	f002 fca8 	bl	800c344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	441a      	add	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d32b      	bcc.n	8009a66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	605a      	str	r2, [r3, #4]
 8009a16:	e026      	b.n	8009a66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68d8      	ldr	r0, [r3, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	461a      	mov	r2, r3
 8009a22:	68b9      	ldr	r1, [r7, #8]
 8009a24:	f002 fc8e 	bl	800c344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	425b      	negs	r3, r3
 8009a32:	441a      	add	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d207      	bcs.n	8009a54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4c:	425b      	negs	r3, r3
 8009a4e:	441a      	add	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d105      	bne.n	8009a66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a6e:	697b      	ldr	r3, [r7, #20]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d018      	beq.n	8009abc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	441a      	add	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d303      	bcc.n	8009aac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68d9      	ldr	r1, [r3, #12]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	6838      	ldr	r0, [r7, #0]
 8009ab8:	f002 fc44 	bl	800c344 <memcpy>
	}
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009acc:	f001 ff46 	bl	800b95c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ad6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ad8:	e011      	b.n	8009afe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d012      	beq.n	8009b08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3324      	adds	r3, #36	; 0x24
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 ff5e 	bl	800a9a8 <xTaskRemoveFromEventList>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009af2:	f001 f83b 	bl	800ab6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dce9      	bgt.n	8009ada <prvUnlockQueue+0x16>
 8009b06:	e000      	b.n	8009b0a <prvUnlockQueue+0x46>
					break;
 8009b08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	22ff      	movs	r2, #255	; 0xff
 8009b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b12:	f001 ff57 	bl	800b9c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b16:	f001 ff21 	bl	800b95c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b22:	e011      	b.n	8009b48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d012      	beq.n	8009b52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3310      	adds	r3, #16
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 ff39 	bl	800a9a8 <xTaskRemoveFromEventList>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b3c:	f001 f816 	bl	800ab6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	dce9      	bgt.n	8009b24 <prvUnlockQueue+0x60>
 8009b50:	e000      	b.n	8009b54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	22ff      	movs	r2, #255	; 0xff
 8009b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b5c:	f001 ff32 	bl	800b9c4 <vPortExitCritical>
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b70:	f001 fef4 	bl	800b95c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	e001      	b.n	8009b86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b86:	f001 ff1d 	bl	800b9c4 <vPortExitCritical>

	return xReturn;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b9c:	f001 fede 	bl	800b95c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d102      	bne.n	8009bb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bac:	2301      	movs	r3, #1
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e001      	b.n	8009bb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bb6:	f001 ff05 	bl	800b9c4 <vPortExitCritical>

	return xReturn;
 8009bba:	68fb      	ldr	r3, [r7, #12]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	e014      	b.n	8009bfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bd4:	4a0f      	ldr	r2, [pc, #60]	; (8009c14 <vQueueAddToRegistry+0x50>)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10b      	bne.n	8009bf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009be0:	490c      	ldr	r1, [pc, #48]	; (8009c14 <vQueueAddToRegistry+0x50>)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bea:	4a0a      	ldr	r2, [pc, #40]	; (8009c14 <vQueueAddToRegistry+0x50>)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bf6:	e006      	b.n	8009c06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b07      	cmp	r3, #7
 8009c02:	d9e7      	bls.n	8009bd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20000f44 	.word	0x20000f44

08009c18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c28:	f001 fe98 	bl	800b95c <vPortEnterCritical>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c38:	d103      	bne.n	8009c42 <vQueueWaitForMessageRestricted+0x2a>
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c48:	b25b      	sxtb	r3, r3
 8009c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4e:	d103      	bne.n	8009c58 <vQueueWaitForMessageRestricted+0x40>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c58:	f001 feb4 	bl	800b9c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	3324      	adds	r3, #36	; 0x24
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	68b9      	ldr	r1, [r7, #8]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 fe6d 	bl	800a94c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c72:	6978      	ldr	r0, [r7, #20]
 8009c74:	f7ff ff26 	bl	8009ac4 <prvUnlockQueue>
	}
 8009c78:	bf00      	nop
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08e      	sub	sp, #56	; 0x38
 8009c84:	af04      	add	r7, sp, #16
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10c      	bne.n	8009cae <xTaskCreateStatic+0x2e>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	b672      	cpsid	i
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	b662      	cpsie	i
 8009ca8:	623b      	str	r3, [r7, #32]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10c      	bne.n	8009cce <xTaskCreateStatic+0x4e>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	b672      	cpsid	i
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	b662      	cpsie	i
 8009cc8:	61fb      	str	r3, [r7, #28]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cce:	23a8      	movs	r3, #168	; 0xa8
 8009cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2ba8      	cmp	r3, #168	; 0xa8
 8009cd6:	d00c      	beq.n	8009cf2 <xTaskCreateStatic+0x72>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	b672      	cpsid	i
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	b662      	cpsie	i
 8009cec:	61bb      	str	r3, [r7, #24]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cf2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d01e      	beq.n	8009d38 <xTaskCreateStatic+0xb8>
 8009cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01b      	beq.n	8009d38 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d12:	2300      	movs	r3, #0
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	9302      	str	r3, [sp, #8]
 8009d1a:	f107 0314 	add.w	r3, r7, #20
 8009d1e:	9301      	str	r3, [sp, #4]
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f850 	bl	8009dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d32:	f000 f8f5 	bl	8009f20 <prvAddNewTaskToReadyList>
 8009d36:	e001      	b.n	8009d3c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d3c:	697b      	ldr	r3, [r7, #20]
	}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3728      	adds	r7, #40	; 0x28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b08c      	sub	sp, #48	; 0x30
 8009d4a:	af04      	add	r7, sp, #16
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	603b      	str	r3, [r7, #0]
 8009d52:	4613      	mov	r3, r2
 8009d54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 ff2a 	bl	800bbb4 <pvPortMalloc>
 8009d60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00e      	beq.n	8009d86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d68:	20a8      	movs	r0, #168	; 0xa8
 8009d6a:	f001 ff23 	bl	800bbb4 <pvPortMalloc>
 8009d6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8009d7c:	e005      	b.n	8009d8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d7e:	6978      	ldr	r0, [r7, #20]
 8009d80:	f001 ffe2 	bl	800bd48 <vPortFree>
 8009d84:	e001      	b.n	8009d8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d017      	beq.n	8009dc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d98:	88fa      	ldrh	r2, [r7, #6]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	9303      	str	r3, [sp, #12]
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	9302      	str	r3, [sp, #8]
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	68b9      	ldr	r1, [r7, #8]
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 f80e 	bl	8009dd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009db4:	69f8      	ldr	r0, [r7, #28]
 8009db6:	f000 f8b3 	bl	8009f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	61bb      	str	r3, [r7, #24]
 8009dbe:	e002      	b.n	8009dc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dc6:	69bb      	ldr	r3, [r7, #24]
	}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3720      	adds	r7, #32
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	461a      	mov	r2, r3
 8009de8:	21a5      	movs	r1, #165	; 0xa5
 8009dea:	f002 f9cc 	bl	800c186 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009df8:	440b      	add	r3, r1
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	f023 0307 	bic.w	r3, r3, #7
 8009e06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00c      	beq.n	8009e2c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	b672      	cpsid	i
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	b662      	cpsie	i
 8009e26:	617b      	str	r3, [r7, #20]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01f      	beq.n	8009e72 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e32:	2300      	movs	r3, #0
 8009e34:	61fb      	str	r3, [r7, #28]
 8009e36:	e012      	b.n	8009e5e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	7819      	ldrb	r1, [r3, #0]
 8009e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	3334      	adds	r3, #52	; 0x34
 8009e48:	460a      	mov	r2, r1
 8009e4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d006      	beq.n	8009e66 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	61fb      	str	r3, [r7, #28]
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	2b0f      	cmp	r3, #15
 8009e62:	d9e9      	bls.n	8009e38 <prvInitialiseNewTask+0x68>
 8009e64:	e000      	b.n	8009e68 <prvInitialiseNewTask+0x98>
			{
				break;
 8009e66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e70:	e003      	b.n	8009e7a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	2b37      	cmp	r3, #55	; 0x37
 8009e7e:	d901      	bls.n	8009e84 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e80:	2337      	movs	r3, #55	; 0x37
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	2200      	movs	r2, #0
 8009e94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff f952 	bl	8009144 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	3318      	adds	r3, #24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff f94d 	bl	8009144 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ebe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	3354      	adds	r3, #84	; 0x54
 8009ed4:	224c      	movs	r2, #76	; 0x4c
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 f954 	bl	800c186 <memset>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	4a0c      	ldr	r2, [pc, #48]	; (8009f14 <prvInitialiseNewTask+0x144>)
 8009ee2:	659a      	str	r2, [r3, #88]	; 0x58
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <prvInitialiseNewTask+0x148>)
 8009ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	4a0b      	ldr	r2, [pc, #44]	; (8009f1c <prvInitialiseNewTask+0x14c>)
 8009eee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	69b8      	ldr	r0, [r7, #24]
 8009ef6:	f001 fc23 	bl	800b740 <pxPortInitialiseStack>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f0c:	bf00      	nop
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	200051d0 	.word	0x200051d0
 8009f18:	20005238 	.word	0x20005238
 8009f1c:	200052a0 	.word	0x200052a0

08009f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f28:	f001 fd18 	bl	800b95c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f2c:	4b2d      	ldr	r3, [pc, #180]	; (8009fe4 <prvAddNewTaskToReadyList+0xc4>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	4a2c      	ldr	r2, [pc, #176]	; (8009fe4 <prvAddNewTaskToReadyList+0xc4>)
 8009f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f36:	4b2c      	ldr	r3, [pc, #176]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f3e:	4a2a      	ldr	r2, [pc, #168]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f44:	4b27      	ldr	r3, [pc, #156]	; (8009fe4 <prvAddNewTaskToReadyList+0xc4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d110      	bne.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f4c:	f000 fe32 	bl	800abb4 <prvInitialiseTaskLists>
 8009f50:	e00d      	b.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f52:	4b26      	ldr	r3, [pc, #152]	; (8009fec <prvAddNewTaskToReadyList+0xcc>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f5a:	4b23      	ldr	r3, [pc, #140]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d802      	bhi.n	8009f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f68:	4a1f      	ldr	r2, [pc, #124]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f6e:	4b20      	ldr	r3, [pc, #128]	; (8009ff0 <prvAddNewTaskToReadyList+0xd0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	4a1e      	ldr	r2, [pc, #120]	; (8009ff0 <prvAddNewTaskToReadyList+0xd0>)
 8009f76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f78:	4b1d      	ldr	r3, [pc, #116]	; (8009ff0 <prvAddNewTaskToReadyList+0xd0>)
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f84:	4b1b      	ldr	r3, [pc, #108]	; (8009ff4 <prvAddNewTaskToReadyList+0xd4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d903      	bls.n	8009f94 <prvAddNewTaskToReadyList+0x74>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	4a18      	ldr	r2, [pc, #96]	; (8009ff4 <prvAddNewTaskToReadyList+0xd4>)
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4a15      	ldr	r2, [pc, #84]	; (8009ff8 <prvAddNewTaskToReadyList+0xd8>)
 8009fa2:	441a      	add	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f7ff f8d7 	bl	800915e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fb0:	f001 fd08 	bl	800b9c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <prvAddNewTaskToReadyList+0xcc>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00e      	beq.n	8009fda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <prvAddNewTaskToReadyList+0xc8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d207      	bcs.n	8009fda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <prvAddNewTaskToReadyList+0xdc>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20001458 	.word	0x20001458
 8009fe8:	20000f84 	.word	0x20000f84
 8009fec:	20001464 	.word	0x20001464
 8009ff0:	20001474 	.word	0x20001474
 8009ff4:	20001460 	.word	0x20001460
 8009ff8:	20000f88 	.word	0x20000f88
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a008:	f001 fca8 	bl	800b95c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <vTaskDelete+0x18>
 800a012:	4b2d      	ldr	r3, [pc, #180]	; (800a0c8 <vTaskDelete+0xc8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	e000      	b.n	800a01a <vTaskDelete+0x1a>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff f8f9 	bl	8009218 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d004      	beq.n	800a038 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3318      	adds	r3, #24
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff f8f0 	bl	8009218 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a038:	4b24      	ldr	r3, [pc, #144]	; (800a0cc <vTaskDelete+0xcc>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3301      	adds	r3, #1
 800a03e:	4a23      	ldr	r2, [pc, #140]	; (800a0cc <vTaskDelete+0xcc>)
 800a040:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a042:	4b21      	ldr	r3, [pc, #132]	; (800a0c8 <vTaskDelete+0xc8>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d10b      	bne.n	800a064 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3304      	adds	r3, #4
 800a050:	4619      	mov	r1, r3
 800a052:	481f      	ldr	r0, [pc, #124]	; (800a0d0 <vTaskDelete+0xd0>)
 800a054:	f7ff f883 	bl	800915e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a058:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <vTaskDelete+0xd4>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3301      	adds	r3, #1
 800a05e:	4a1d      	ldr	r2, [pc, #116]	; (800a0d4 <vTaskDelete+0xd4>)
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	e009      	b.n	800a078 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a064:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <vTaskDelete+0xd8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3b01      	subs	r3, #1
 800a06a:	4a1b      	ldr	r2, [pc, #108]	; (800a0d8 <vTaskDelete+0xd8>)
 800a06c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fe0e 	bl	800ac90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a074:	f000 fe42 	bl	800acfc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a078:	f001 fca4 	bl	800b9c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a07c:	4b17      	ldr	r3, [pc, #92]	; (800a0dc <vTaskDelete+0xdc>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01d      	beq.n	800a0c0 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800a084:	4b10      	ldr	r3, [pc, #64]	; (800a0c8 <vTaskDelete+0xc8>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d118      	bne.n	800a0c0 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <vTaskDelete+0xe0>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00c      	beq.n	800a0b0 <vTaskDelete+0xb0>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	b672      	cpsid	i
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	b662      	cpsie	i
 800a0aa:	60bb      	str	r3, [r7, #8]
}
 800a0ac:	bf00      	nop
 800a0ae:	e7fe      	b.n	800a0ae <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800a0b0:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <vTaskDelete+0xe4>)
 800a0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0c0:	bf00      	nop
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000f84 	.word	0x20000f84
 800a0cc:	20001474 	.word	0x20001474
 800a0d0:	2000142c 	.word	0x2000142c
 800a0d4:	20001440 	.word	0x20001440
 800a0d8:	20001458 	.word	0x20001458
 800a0dc:	20001464 	.word	0x20001464
 800a0e0:	20001480 	.word	0x20001480
 800a0e4:	e000ed04 	.word	0xe000ed04

0800a0e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d019      	beq.n	800a12e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <vTaskDelay+0x64>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00c      	beq.n	800a11c <vTaskDelay+0x34>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	b672      	cpsid	i
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	b662      	cpsie	i
 800a116:	60bb      	str	r3, [r7, #8]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a11c:	f000 fa10 	bl	800a540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a120:	2100      	movs	r1, #0
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fe9a 	bl	800ae5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a128:	f000 fa18 	bl	800a55c <xTaskResumeAll>
 800a12c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d107      	bne.n	800a144 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <vTaskDelay+0x68>)
 800a136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a144:	bf00      	nop
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20001480 	.word	0x20001480
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a15c:	f001 fbfe 	bl	800b95c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <vTaskSuspend+0x18>
 800a166:	4b31      	ldr	r3, [pc, #196]	; (800a22c <vTaskSuspend+0xd8>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	e000      	b.n	800a16e <vTaskSuspend+0x1a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3304      	adds	r3, #4
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff f84f 	bl	8009218 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3318      	adds	r3, #24
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff f846 	bl	8009218 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3304      	adds	r3, #4
 800a190:	4619      	mov	r1, r3
 800a192:	4827      	ldr	r0, [pc, #156]	; (800a230 <vTaskSuspend+0xdc>)
 800a194:	f7fe ffe3 	bl	800915e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d103      	bne.n	800a1ac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a1ac:	f001 fc0a 	bl	800b9c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a1b0:	4b20      	ldr	r3, [pc, #128]	; (800a234 <vTaskSuspend+0xe0>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a1b8:	f001 fbd0 	bl	800b95c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a1bc:	f000 fd9e 	bl	800acfc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a1c0:	f001 fc00 	bl	800b9c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a1c4:	4b19      	ldr	r3, [pc, #100]	; (800a22c <vTaskSuspend+0xd8>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d129      	bne.n	800a222 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800a1ce:	4b19      	ldr	r3, [pc, #100]	; (800a234 <vTaskSuspend+0xe0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d019      	beq.n	800a20a <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a1d6:	4b18      	ldr	r3, [pc, #96]	; (800a238 <vTaskSuspend+0xe4>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00c      	beq.n	800a1f8 <vTaskSuspend+0xa4>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	b672      	cpsid	i
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	b662      	cpsie	i
 800a1f2:	60bb      	str	r3, [r7, #8]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 800a1f8:	4b10      	ldr	r3, [pc, #64]	; (800a23c <vTaskSuspend+0xe8>)
 800a1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a208:	e00b      	b.n	800a222 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <vTaskSuspend+0xdc>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <vTaskSuspend+0xec>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d103      	bne.n	800a21e <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 800a216:	4b05      	ldr	r3, [pc, #20]	; (800a22c <vTaskSuspend+0xd8>)
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
	}
 800a21c:	e001      	b.n	800a222 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800a21e:	f000 fb09 	bl	800a834 <vTaskSwitchContext>
	}
 800a222:	bf00      	nop
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000f84 	.word	0x20000f84
 800a230:	20001444 	.word	0x20001444
 800a234:	20001464 	.word	0x20001464
 800a238:	20001480 	.word	0x20001480
 800a23c:	e000ed04 	.word	0xe000ed04
 800a240:	20001458 	.word	0x20001458

0800a244 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10c      	bne.n	800a274 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	b672      	cpsid	i
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	b662      	cpsie	i
 800a26e:	60fb      	str	r3, [r7, #12]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	4a0a      	ldr	r2, [pc, #40]	; (800a2a4 <prvTaskIsTaskSuspended+0x60>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d10a      	bne.n	800a294 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	4a09      	ldr	r2, [pc, #36]	; (800a2a8 <prvTaskIsTaskSuspended+0x64>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d005      	beq.n	800a294 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800a290:	2301      	movs	r3, #1
 800a292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a294:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a296:	4618      	mov	r0, r3
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20001444 	.word	0x20001444
 800a2a8:	20001418 	.word	0x20001418

0800a2ac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10c      	bne.n	800a2d8 <vTaskResume+0x2c>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	b672      	cpsid	i
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	b662      	cpsie	i
 800a2d2:	60bb      	str	r3, [r7, #8]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a2d8:	4b20      	ldr	r3, [pc, #128]	; (800a35c <vTaskResume+0xb0>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d038      	beq.n	800a354 <vTaskResume+0xa8>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d035      	beq.n	800a354 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 800a2e8:	f001 fb38 	bl	800b95c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff ffa9 	bl	800a244 <prvTaskIsTaskSuspended>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d02b      	beq.n	800a350 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe ff8b 	bl	8009218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a306:	4b16      	ldr	r3, [pc, #88]	; (800a360 <vTaskResume+0xb4>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d903      	bls.n	800a316 <vTaskResume+0x6a>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	4a13      	ldr	r2, [pc, #76]	; (800a360 <vTaskResume+0xb4>)
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4a10      	ldr	r2, [pc, #64]	; (800a364 <vTaskResume+0xb8>)
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3304      	adds	r3, #4
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f7fe ff16 	bl	800915e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a336:	4b09      	ldr	r3, [pc, #36]	; (800a35c <vTaskResume+0xb0>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d307      	bcc.n	800a350 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a340:	4b09      	ldr	r3, [pc, #36]	; (800a368 <vTaskResume+0xbc>)
 800a342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a350:	f001 fb38 	bl	800b9c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20000f84 	.word	0x20000f84
 800a360:	20001460 	.word	0x20001460
 800a364:	20000f88 	.word	0x20000f88
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08a      	sub	sp, #40	; 0x28
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a374:	2300      	movs	r3, #0
 800a376:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10c      	bne.n	800a39c <xTaskResumeFromISR+0x30>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	b672      	cpsid	i
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	b662      	cpsie	i
 800a396:	61bb      	str	r3, [r7, #24]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a39c:	f001 fbc6 	bl	800bb2c <vPortValidateInterruptPriority>
	__asm volatile
 800a3a0:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	b672      	cpsid	i
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	b662      	cpsie	i
 800a3b8:	617a      	str	r2, [r7, #20]
 800a3ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a3bc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3be:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a3c0:	6a38      	ldr	r0, [r7, #32]
 800a3c2:	f7ff ff3f 	bl	800a244 <prvTaskIsTaskSuspended>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d030      	beq.n	800a42e <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3cc:	4b1d      	ldr	r3, [pc, #116]	; (800a444 <xTaskResumeFromISR+0xd8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d126      	bne.n	800a422 <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d8:	4b1b      	ldr	r3, [pc, #108]	; (800a448 <xTaskResumeFromISR+0xdc>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d301      	bcc.n	800a3e6 <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe ff14 	bl	8009218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f4:	4b15      	ldr	r3, [pc, #84]	; (800a44c <xTaskResumeFromISR+0xe0>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d903      	bls.n	800a404 <xTaskResumeFromISR+0x98>
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	4a12      	ldr	r2, [pc, #72]	; (800a44c <xTaskResumeFromISR+0xe0>)
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4a0f      	ldr	r2, [pc, #60]	; (800a450 <xTaskResumeFromISR+0xe4>)
 800a412:	441a      	add	r2, r3
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	3304      	adds	r3, #4
 800a418:	4619      	mov	r1, r3
 800a41a:	4610      	mov	r0, r2
 800a41c:	f7fe fe9f 	bl	800915e <vListInsertEnd>
 800a420:	e005      	b.n	800a42e <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	3318      	adds	r3, #24
 800a426:	4619      	mov	r1, r3
 800a428:	480a      	ldr	r0, [pc, #40]	; (800a454 <xTaskResumeFromISR+0xe8>)
 800a42a:	f7fe fe98 	bl	800915e <vListInsertEnd>
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f383 8811 	msr	BASEPRI, r3
}
 800a438:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3728      	adds	r7, #40	; 0x28
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	20001480 	.word	0x20001480
 800a448:	20000f84 	.word	0x20000f84
 800a44c:	20001460 	.word	0x20001460
 800a450:	20000f88 	.word	0x20000f88
 800a454:	20001418 	.word	0x20001418

0800a458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08a      	sub	sp, #40	; 0x28
 800a45c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a462:	2300      	movs	r3, #0
 800a464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a466:	463a      	mov	r2, r7
 800a468:	1d39      	adds	r1, r7, #4
 800a46a:	f107 0308 	add.w	r3, r7, #8
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fe14 	bl	800909c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	9202      	str	r2, [sp, #8]
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	2300      	movs	r3, #0
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	2300      	movs	r3, #0
 800a484:	460a      	mov	r2, r1
 800a486:	4926      	ldr	r1, [pc, #152]	; (800a520 <vTaskStartScheduler+0xc8>)
 800a488:	4826      	ldr	r0, [pc, #152]	; (800a524 <vTaskStartScheduler+0xcc>)
 800a48a:	f7ff fbf9 	bl	8009c80 <xTaskCreateStatic>
 800a48e:	4603      	mov	r3, r0
 800a490:	4a25      	ldr	r2, [pc, #148]	; (800a528 <vTaskStartScheduler+0xd0>)
 800a492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a494:	4b24      	ldr	r3, [pc, #144]	; (800a528 <vTaskStartScheduler+0xd0>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a49c:	2301      	movs	r3, #1
 800a49e:	617b      	str	r3, [r7, #20]
 800a4a0:	e001      	b.n	800a4a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d102      	bne.n	800a4b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4ac:	f000 fd2a 	bl	800af04 <xTimerCreateTimerTask>
 800a4b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d11d      	bne.n	800a4f4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4bc:	b672      	cpsid	i
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	b662      	cpsie	i
 800a4cc:	613b      	str	r3, [r7, #16]
}
 800a4ce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4d0:	4b16      	ldr	r3, [pc, #88]	; (800a52c <vTaskStartScheduler+0xd4>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3354      	adds	r3, #84	; 0x54
 800a4d6:	4a16      	ldr	r2, [pc, #88]	; (800a530 <vTaskStartScheduler+0xd8>)
 800a4d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4da:	4b16      	ldr	r3, [pc, #88]	; (800a534 <vTaskStartScheduler+0xdc>)
 800a4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4e2:	4b15      	ldr	r3, [pc, #84]	; (800a538 <vTaskStartScheduler+0xe0>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4e8:	4b14      	ldr	r3, [pc, #80]	; (800a53c <vTaskStartScheduler+0xe4>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4ee:	f001 f9b7 	bl	800b860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4f2:	e010      	b.n	800a516 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fa:	d10c      	bne.n	800a516 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	b672      	cpsid	i
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	b662      	cpsie	i
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <vTaskStartScheduler+0xbc>
}
 800a516:	bf00      	nop
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	0800d128 	.word	0x0800d128
 800a524:	0800ab85 	.word	0x0800ab85
 800a528:	2000147c 	.word	0x2000147c
 800a52c:	20000f84 	.word	0x20000f84
 800a530:	200000bc 	.word	0x200000bc
 800a534:	20001478 	.word	0x20001478
 800a538:	20001464 	.word	0x20001464
 800a53c:	2000145c 	.word	0x2000145c

0800a540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a540:	b480      	push	{r7}
 800a542:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a544:	4b04      	ldr	r3, [pc, #16]	; (800a558 <vTaskSuspendAll+0x18>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	4a03      	ldr	r2, [pc, #12]	; (800a558 <vTaskSuspendAll+0x18>)
 800a54c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a54e:	bf00      	nop
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	20001480 	.word	0x20001480

0800a55c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a56a:	4b43      	ldr	r3, [pc, #268]	; (800a678 <xTaskResumeAll+0x11c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10c      	bne.n	800a58c <xTaskResumeAll+0x30>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	b672      	cpsid	i
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	b662      	cpsie	i
 800a586:	603b      	str	r3, [r7, #0]
}
 800a588:	bf00      	nop
 800a58a:	e7fe      	b.n	800a58a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a58c:	f001 f9e6 	bl	800b95c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a590:	4b39      	ldr	r3, [pc, #228]	; (800a678 <xTaskResumeAll+0x11c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3b01      	subs	r3, #1
 800a596:	4a38      	ldr	r2, [pc, #224]	; (800a678 <xTaskResumeAll+0x11c>)
 800a598:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a59a:	4b37      	ldr	r3, [pc, #220]	; (800a678 <xTaskResumeAll+0x11c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d162      	bne.n	800a668 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5a2:	4b36      	ldr	r3, [pc, #216]	; (800a67c <xTaskResumeAll+0x120>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d05e      	beq.n	800a668 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5aa:	e02f      	b.n	800a60c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ac:	4b34      	ldr	r3, [pc, #208]	; (800a680 <xTaskResumeAll+0x124>)
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3318      	adds	r3, #24
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe fe2d 	bl	8009218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe fe28 	bl	8009218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5cc:	4b2d      	ldr	r3, [pc, #180]	; (800a684 <xTaskResumeAll+0x128>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d903      	bls.n	800a5dc <xTaskResumeAll+0x80>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d8:	4a2a      	ldr	r2, [pc, #168]	; (800a684 <xTaskResumeAll+0x128>)
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4a27      	ldr	r2, [pc, #156]	; (800a688 <xTaskResumeAll+0x12c>)
 800a5ea:	441a      	add	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	f7fe fdb3 	bl	800915e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fc:	4b23      	ldr	r3, [pc, #140]	; (800a68c <xTaskResumeAll+0x130>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a602:	429a      	cmp	r2, r3
 800a604:	d302      	bcc.n	800a60c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a606:	4b22      	ldr	r3, [pc, #136]	; (800a690 <xTaskResumeAll+0x134>)
 800a608:	2201      	movs	r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a60c:	4b1c      	ldr	r3, [pc, #112]	; (800a680 <xTaskResumeAll+0x124>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1cb      	bne.n	800a5ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a61a:	f000 fb6f 	bl	800acfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a61e:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <xTaskResumeAll+0x138>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d010      	beq.n	800a64c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a62a:	f000 f847 	bl	800a6bc <xTaskIncrementTick>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a634:	4b16      	ldr	r3, [pc, #88]	; (800a690 <xTaskResumeAll+0x134>)
 800a636:	2201      	movs	r2, #1
 800a638:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1f1      	bne.n	800a62a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a646:	4b13      	ldr	r3, [pc, #76]	; (800a694 <xTaskResumeAll+0x138>)
 800a648:	2200      	movs	r2, #0
 800a64a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a64c:	4b10      	ldr	r3, [pc, #64]	; (800a690 <xTaskResumeAll+0x134>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d009      	beq.n	800a668 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a654:	2301      	movs	r3, #1
 800a656:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a658:	4b0f      	ldr	r3, [pc, #60]	; (800a698 <xTaskResumeAll+0x13c>)
 800a65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a668:	f001 f9ac 	bl	800b9c4 <vPortExitCritical>

	return xAlreadyYielded;
 800a66c:	68bb      	ldr	r3, [r7, #8]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20001480 	.word	0x20001480
 800a67c:	20001458 	.word	0x20001458
 800a680:	20001418 	.word	0x20001418
 800a684:	20001460 	.word	0x20001460
 800a688:	20000f88 	.word	0x20000f88
 800a68c:	20000f84 	.word	0x20000f84
 800a690:	2000146c 	.word	0x2000146c
 800a694:	20001468 	.word	0x20001468
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6a2:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <xTaskGetTickCount+0x1c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6a8:	687b      	ldr	r3, [r7, #4]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	2000145c 	.word	0x2000145c

0800a6bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c6:	4b50      	ldr	r3, [pc, #320]	; (800a808 <xTaskIncrementTick+0x14c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f040 808b 	bne.w	800a7e6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6d0:	4b4e      	ldr	r3, [pc, #312]	; (800a80c <xTaskIncrementTick+0x150>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6d8:	4a4c      	ldr	r2, [pc, #304]	; (800a80c <xTaskIncrementTick+0x150>)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d122      	bne.n	800a72a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6e4:	4b4a      	ldr	r3, [pc, #296]	; (800a810 <xTaskIncrementTick+0x154>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00c      	beq.n	800a708 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f2:	b672      	cpsid	i
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	b662      	cpsie	i
 800a702:	603b      	str	r3, [r7, #0]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <xTaskIncrementTick+0x4a>
 800a708:	4b41      	ldr	r3, [pc, #260]	; (800a810 <xTaskIncrementTick+0x154>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	4b41      	ldr	r3, [pc, #260]	; (800a814 <xTaskIncrementTick+0x158>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a3f      	ldr	r2, [pc, #252]	; (800a810 <xTaskIncrementTick+0x154>)
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	4a3f      	ldr	r2, [pc, #252]	; (800a814 <xTaskIncrementTick+0x158>)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	4b3e      	ldr	r3, [pc, #248]	; (800a818 <xTaskIncrementTick+0x15c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	4a3d      	ldr	r2, [pc, #244]	; (800a818 <xTaskIncrementTick+0x15c>)
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	f000 fae9 	bl	800acfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a72a:	4b3c      	ldr	r3, [pc, #240]	; (800a81c <xTaskIncrementTick+0x160>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	429a      	cmp	r2, r3
 800a732:	d349      	bcc.n	800a7c8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a734:	4b36      	ldr	r3, [pc, #216]	; (800a810 <xTaskIncrementTick+0x154>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d104      	bne.n	800a748 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a73e:	4b37      	ldr	r3, [pc, #220]	; (800a81c <xTaskIncrementTick+0x160>)
 800a740:	f04f 32ff 	mov.w	r2, #4294967295
 800a744:	601a      	str	r2, [r3, #0]
					break;
 800a746:	e03f      	b.n	800a7c8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a748:	4b31      	ldr	r3, [pc, #196]	; (800a810 <xTaskIncrementTick+0x154>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d203      	bcs.n	800a768 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a760:	4a2e      	ldr	r2, [pc, #184]	; (800a81c <xTaskIncrementTick+0x160>)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a766:	e02f      	b.n	800a7c8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3304      	adds	r3, #4
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fe fd53 	bl	8009218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	3318      	adds	r3, #24
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fd4a 	bl	8009218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a788:	4b25      	ldr	r3, [pc, #148]	; (800a820 <xTaskIncrementTick+0x164>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d903      	bls.n	800a798 <xTaskIncrementTick+0xdc>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	4a22      	ldr	r2, [pc, #136]	; (800a820 <xTaskIncrementTick+0x164>)
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4a1f      	ldr	r2, [pc, #124]	; (800a824 <xTaskIncrementTick+0x168>)
 800a7a6:	441a      	add	r2, r3
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	f7fe fcd5 	bl	800915e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b8:	4b1b      	ldr	r3, [pc, #108]	; (800a828 <xTaskIncrementTick+0x16c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d3b8      	bcc.n	800a734 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7c6:	e7b5      	b.n	800a734 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7c8:	4b17      	ldr	r3, [pc, #92]	; (800a828 <xTaskIncrementTick+0x16c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ce:	4915      	ldr	r1, [pc, #84]	; (800a824 <xTaskIncrementTick+0x168>)
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	440b      	add	r3, r1
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d907      	bls.n	800a7f0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	e004      	b.n	800a7f0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a7e6:	4b11      	ldr	r3, [pc, #68]	; (800a82c <xTaskIncrementTick+0x170>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	4a0f      	ldr	r2, [pc, #60]	; (800a82c <xTaskIncrementTick+0x170>)
 800a7ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a7f0:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <xTaskIncrementTick+0x174>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a7fc:	697b      	ldr	r3, [r7, #20]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20001480 	.word	0x20001480
 800a80c:	2000145c 	.word	0x2000145c
 800a810:	20001410 	.word	0x20001410
 800a814:	20001414 	.word	0x20001414
 800a818:	20001470 	.word	0x20001470
 800a81c:	20001478 	.word	0x20001478
 800a820:	20001460 	.word	0x20001460
 800a824:	20000f88 	.word	0x20000f88
 800a828:	20000f84 	.word	0x20000f84
 800a82c:	20001468 	.word	0x20001468
 800a830:	2000146c 	.word	0x2000146c

0800a834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a83a:	4b2b      	ldr	r3, [pc, #172]	; (800a8e8 <vTaskSwitchContext+0xb4>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a842:	4b2a      	ldr	r3, [pc, #168]	; (800a8ec <vTaskSwitchContext+0xb8>)
 800a844:	2201      	movs	r2, #1
 800a846:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a848:	e048      	b.n	800a8dc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a84a:	4b28      	ldr	r3, [pc, #160]	; (800a8ec <vTaskSwitchContext+0xb8>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a850:	4b27      	ldr	r3, [pc, #156]	; (800a8f0 <vTaskSwitchContext+0xbc>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	e012      	b.n	800a87e <vTaskSwitchContext+0x4a>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <vTaskSwitchContext+0x44>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	b672      	cpsid	i
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	b662      	cpsie	i
 800a872:	607b      	str	r3, [r7, #4]
}
 800a874:	bf00      	nop
 800a876:	e7fe      	b.n	800a876 <vTaskSwitchContext+0x42>
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	491d      	ldr	r1, [pc, #116]	; (800a8f4 <vTaskSwitchContext+0xc0>)
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	440b      	add	r3, r1
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0e2      	beq.n	800a858 <vTaskSwitchContext+0x24>
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4a15      	ldr	r2, [pc, #84]	; (800a8f4 <vTaskSwitchContext+0xc0>)
 800a89e:	4413      	add	r3, r2
 800a8a0:	60bb      	str	r3, [r7, #8]
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	605a      	str	r2, [r3, #4]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	3308      	adds	r3, #8
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d104      	bne.n	800a8c2 <vTaskSwitchContext+0x8e>
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	605a      	str	r2, [r3, #4]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	4a0b      	ldr	r2, [pc, #44]	; (800a8f8 <vTaskSwitchContext+0xc4>)
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	4a08      	ldr	r2, [pc, #32]	; (800a8f0 <vTaskSwitchContext+0xbc>)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <vTaskSwitchContext+0xc4>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3354      	adds	r3, #84	; 0x54
 800a8d8:	4a08      	ldr	r2, [pc, #32]	; (800a8fc <vTaskSwitchContext+0xc8>)
 800a8da:	6013      	str	r3, [r2, #0]
}
 800a8dc:	bf00      	nop
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	20001480 	.word	0x20001480
 800a8ec:	2000146c 	.word	0x2000146c
 800a8f0:	20001460 	.word	0x20001460
 800a8f4:	20000f88 	.word	0x20000f88
 800a8f8:	20000f84 	.word	0x20000f84
 800a8fc:	200000bc 	.word	0x200000bc

0800a900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10c      	bne.n	800a92a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	b672      	cpsid	i
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	b662      	cpsie	i
 800a924:	60fb      	str	r3, [r7, #12]
}
 800a926:	bf00      	nop
 800a928:	e7fe      	b.n	800a928 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a92a:	4b07      	ldr	r3, [pc, #28]	; (800a948 <vTaskPlaceOnEventList+0x48>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3318      	adds	r3, #24
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7fe fc37 	bl	80091a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a938:	2101      	movs	r1, #1
 800a93a:	6838      	ldr	r0, [r7, #0]
 800a93c:	f000 fa8e 	bl	800ae5c <prvAddCurrentTaskToDelayedList>
}
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	20000f84 	.word	0x20000f84

0800a94c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10c      	bne.n	800a978 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	b672      	cpsid	i
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	b662      	cpsie	i
 800a972:	617b      	str	r3, [r7, #20]
}
 800a974:	bf00      	nop
 800a976:	e7fe      	b.n	800a976 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a978:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <vTaskPlaceOnEventListRestricted+0x58>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3318      	adds	r3, #24
 800a97e:	4619      	mov	r1, r3
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f7fe fbec 	bl	800915e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295
 800a990:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	68b8      	ldr	r0, [r7, #8]
 800a996:	f000 fa61 	bl	800ae5c <prvAddCurrentTaskToDelayedList>
	}
 800a99a:	bf00      	nop
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	20000f84 	.word	0x20000f84

0800a9a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10c      	bne.n	800a9d8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	b672      	cpsid	i
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	b662      	cpsie	i
 800a9d2:	60fb      	str	r3, [r7, #12]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	3318      	adds	r3, #24
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe fc1b 	bl	8009218 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9e2:	4b1e      	ldr	r3, [pc, #120]	; (800aa5c <xTaskRemoveFromEventList+0xb4>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d11d      	bne.n	800aa26 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fc12 	bl	8009218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f8:	4b19      	ldr	r3, [pc, #100]	; (800aa60 <xTaskRemoveFromEventList+0xb8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d903      	bls.n	800aa08 <xTaskRemoveFromEventList+0x60>
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	4a16      	ldr	r2, [pc, #88]	; (800aa60 <xTaskRemoveFromEventList+0xb8>)
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4a13      	ldr	r2, [pc, #76]	; (800aa64 <xTaskRemoveFromEventList+0xbc>)
 800aa16:	441a      	add	r2, r3
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f7fe fb9d 	bl	800915e <vListInsertEnd>
 800aa24:	e005      	b.n	800aa32 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	3318      	adds	r3, #24
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	480e      	ldr	r0, [pc, #56]	; (800aa68 <xTaskRemoveFromEventList+0xc0>)
 800aa2e:	f7fe fb96 	bl	800915e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <xTaskRemoveFromEventList+0xc4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d905      	bls.n	800aa4c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa44:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <xTaskRemoveFromEventList+0xc8>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	e001      	b.n	800aa50 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa50:	697b      	ldr	r3, [r7, #20]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20001480 	.word	0x20001480
 800aa60:	20001460 	.word	0x20001460
 800aa64:	20000f88 	.word	0x20000f88
 800aa68:	20001418 	.word	0x20001418
 800aa6c:	20000f84 	.word	0x20000f84
 800aa70:	2000146c 	.word	0x2000146c

0800aa74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <vTaskInternalSetTimeOutState+0x24>)
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa84:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <vTaskInternalSetTimeOutState+0x28>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	605a      	str	r2, [r3, #4]
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	20001470 	.word	0x20001470
 800aa9c:	2000145c 	.word	0x2000145c

0800aaa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10c      	bne.n	800aaca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	b672      	cpsid	i
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	b662      	cpsie	i
 800aac4:	613b      	str	r3, [r7, #16]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10c      	bne.n	800aaea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	b672      	cpsid	i
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	b662      	cpsie	i
 800aae4:	60fb      	str	r3, [r7, #12]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800aaea:	f000 ff37 	bl	800b95c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aaee:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <xTaskCheckForTimeOut+0xc4>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	69ba      	ldr	r2, [r7, #24]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab06:	d102      	bne.n	800ab0e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	61fb      	str	r3, [r7, #28]
 800ab0c:	e023      	b.n	800ab56 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b15      	ldr	r3, [pc, #84]	; (800ab68 <xTaskCheckForTimeOut+0xc8>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d007      	beq.n	800ab2a <xTaskCheckForTimeOut+0x8a>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d302      	bcc.n	800ab2a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab24:	2301      	movs	r3, #1
 800ab26:	61fb      	str	r3, [r7, #28]
 800ab28:	e015      	b.n	800ab56 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d20b      	bcs.n	800ab4c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	1ad2      	subs	r2, r2, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7ff ff97 	bl	800aa74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61fb      	str	r3, [r7, #28]
 800ab4a:	e004      	b.n	800ab56 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab52:	2301      	movs	r3, #1
 800ab54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab56:	f000 ff35 	bl	800b9c4 <vPortExitCritical>

	return xReturn;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3720      	adds	r7, #32
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	2000145c 	.word	0x2000145c
 800ab68:	20001470 	.word	0x20001470

0800ab6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab70:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <vTaskMissedYield+0x14>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
}
 800ab76:	bf00      	nop
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	2000146c 	.word	0x2000146c

0800ab84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab8c:	f000 f852 	bl	800ac34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <prvIdleTask+0x28>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d9f9      	bls.n	800ab8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab98:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <prvIdleTask+0x2c>)
 800ab9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aba8:	e7f0      	b.n	800ab8c <prvIdleTask+0x8>
 800abaa:	bf00      	nop
 800abac:	20000f88 	.word	0x20000f88
 800abb0:	e000ed04 	.word	0xe000ed04

0800abb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abba:	2300      	movs	r3, #0
 800abbc:	607b      	str	r3, [r7, #4]
 800abbe:	e00c      	b.n	800abda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4a12      	ldr	r2, [pc, #72]	; (800ac14 <prvInitialiseTaskLists+0x60>)
 800abcc:	4413      	add	r3, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fa98 	bl	8009104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3301      	adds	r3, #1
 800abd8:	607b      	str	r3, [r7, #4]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b37      	cmp	r3, #55	; 0x37
 800abde:	d9ef      	bls.n	800abc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abe0:	480d      	ldr	r0, [pc, #52]	; (800ac18 <prvInitialiseTaskLists+0x64>)
 800abe2:	f7fe fa8f 	bl	8009104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abe6:	480d      	ldr	r0, [pc, #52]	; (800ac1c <prvInitialiseTaskLists+0x68>)
 800abe8:	f7fe fa8c 	bl	8009104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abec:	480c      	ldr	r0, [pc, #48]	; (800ac20 <prvInitialiseTaskLists+0x6c>)
 800abee:	f7fe fa89 	bl	8009104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abf2:	480c      	ldr	r0, [pc, #48]	; (800ac24 <prvInitialiseTaskLists+0x70>)
 800abf4:	f7fe fa86 	bl	8009104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abf8:	480b      	ldr	r0, [pc, #44]	; (800ac28 <prvInitialiseTaskLists+0x74>)
 800abfa:	f7fe fa83 	bl	8009104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <prvInitialiseTaskLists+0x78>)
 800ac00:	4a05      	ldr	r2, [pc, #20]	; (800ac18 <prvInitialiseTaskLists+0x64>)
 800ac02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <prvInitialiseTaskLists+0x7c>)
 800ac06:	4a05      	ldr	r2, [pc, #20]	; (800ac1c <prvInitialiseTaskLists+0x68>)
 800ac08:	601a      	str	r2, [r3, #0]
}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20000f88 	.word	0x20000f88
 800ac18:	200013e8 	.word	0x200013e8
 800ac1c:	200013fc 	.word	0x200013fc
 800ac20:	20001418 	.word	0x20001418
 800ac24:	2000142c 	.word	0x2000142c
 800ac28:	20001444 	.word	0x20001444
 800ac2c:	20001410 	.word	0x20001410
 800ac30:	20001414 	.word	0x20001414

0800ac34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac3a:	e019      	b.n	800ac70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac3c:	f000 fe8e 	bl	800b95c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac40:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <prvCheckTasksWaitingTermination+0x50>)
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fae3 	bl	8009218 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac52:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <prvCheckTasksWaitingTermination+0x54>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a0b      	ldr	r2, [pc, #44]	; (800ac88 <prvCheckTasksWaitingTermination+0x54>)
 800ac5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4a0a      	ldr	r2, [pc, #40]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac66:	f000 fead 	bl	800b9c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f810 	bl	800ac90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac70:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e1      	bne.n	800ac3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	2000142c 	.word	0x2000142c
 800ac88:	20001458 	.word	0x20001458
 800ac8c:	20001440 	.word	0x20001440

0800ac90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3354      	adds	r3, #84	; 0x54
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f001 fa99 	bl	800c1d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d108      	bne.n	800acbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb0:	4618      	mov	r0, r3
 800acb2:	f001 f849 	bl	800bd48 <vPortFree>
				vPortFree( pxTCB );
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 f846 	bl	800bd48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acbc:	e01a      	b.n	800acf4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d103      	bne.n	800acd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f83d 	bl	800bd48 <vPortFree>
	}
 800acce:	e011      	b.n	800acf4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d00c      	beq.n	800acf4 <prvDeleteTCB+0x64>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	b672      	cpsid	i
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	b662      	cpsie	i
 800acee:	60fb      	str	r3, [r7, #12]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <prvDeleteTCB+0x62>
	}
 800acf4:	bf00      	nop
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad02:	4b0c      	ldr	r3, [pc, #48]	; (800ad34 <prvResetNextTaskUnblockTime+0x38>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d104      	bne.n	800ad16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <prvResetNextTaskUnblockTime+0x3c>)
 800ad0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad14:	e008      	b.n	800ad28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad16:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <prvResetNextTaskUnblockTime+0x38>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	4a04      	ldr	r2, [pc, #16]	; (800ad38 <prvResetNextTaskUnblockTime+0x3c>)
 800ad26:	6013      	str	r3, [r2, #0]
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	20001410 	.word	0x20001410
 800ad38:	20001478 	.word	0x20001478

0800ad3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad42:	4b0b      	ldr	r3, [pc, #44]	; (800ad70 <xTaskGetSchedulerState+0x34>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	e008      	b.n	800ad62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad50:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <xTaskGetSchedulerState+0x38>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	607b      	str	r3, [r7, #4]
 800ad5c:	e001      	b.n	800ad62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad62:	687b      	ldr	r3, [r7, #4]
	}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20001464 	.word	0x20001464
 800ad74:	20001480 	.word	0x20001480

0800ad78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad84:	2300      	movs	r3, #0
 800ad86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d05a      	beq.n	800ae44 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad8e:	4b30      	ldr	r3, [pc, #192]	; (800ae50 <xTaskPriorityDisinherit+0xd8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d00c      	beq.n	800adb2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	b672      	cpsid	i
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	b662      	cpsie	i
 800adac:	60fb      	str	r3, [r7, #12]
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10c      	bne.n	800add4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	b672      	cpsid	i
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	b662      	cpsie	i
 800adce:	60bb      	str	r3, [r7, #8]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d02c      	beq.n	800ae44 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d128      	bne.n	800ae44 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fa0e 	bl	8009218 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae14:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <xTaskPriorityDisinherit+0xdc>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d903      	bls.n	800ae24 <xTaskPriorityDisinherit+0xac>
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	4a0c      	ldr	r2, [pc, #48]	; (800ae54 <xTaskPriorityDisinherit+0xdc>)
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4a09      	ldr	r2, [pc, #36]	; (800ae58 <xTaskPriorityDisinherit+0xe0>)
 800ae32:	441a      	add	r2, r3
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	3304      	adds	r3, #4
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7fe f98f 	bl	800915e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae40:	2301      	movs	r3, #1
 800ae42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae44:	697b      	ldr	r3, [r7, #20]
	}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3718      	adds	r7, #24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20000f84 	.word	0x20000f84
 800ae54:	20001460 	.word	0x20001460
 800ae58:	20000f88 	.word	0x20000f88

0800ae5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae66:	4b21      	ldr	r3, [pc, #132]	; (800aeec <prvAddCurrentTaskToDelayedList+0x90>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae6c:	4b20      	ldr	r3, [pc, #128]	; (800aef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe f9d0 	bl	8009218 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7e:	d10a      	bne.n	800ae96 <prvAddCurrentTaskToDelayedList+0x3a>
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d007      	beq.n	800ae96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae86:	4b1a      	ldr	r3, [pc, #104]	; (800aef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4819      	ldr	r0, [pc, #100]	; (800aef4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ae90:	f7fe f965 	bl	800915e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae94:	e026      	b.n	800aee4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae9e:	4b14      	ldr	r3, [pc, #80]	; (800aef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d209      	bcs.n	800aec2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeae:	4b12      	ldr	r3, [pc, #72]	; (800aef8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	4b0f      	ldr	r3, [pc, #60]	; (800aef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4610      	mov	r0, r2
 800aebc:	f7fe f973 	bl	80091a6 <vListInsert>
}
 800aec0:	e010      	b.n	800aee4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aec2:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <prvAddCurrentTaskToDelayedList+0xa0>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	4b0a      	ldr	r3, [pc, #40]	; (800aef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f7fe f969 	bl	80091a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d202      	bcs.n	800aee4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aede:	4a08      	ldr	r2, [pc, #32]	; (800af00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	6013      	str	r3, [r2, #0]
}
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	2000145c 	.word	0x2000145c
 800aef0:	20000f84 	.word	0x20000f84
 800aef4:	20001444 	.word	0x20001444
 800aef8:	20001414 	.word	0x20001414
 800aefc:	20001410 	.word	0x20001410
 800af00:	20001478 	.word	0x20001478

0800af04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08a      	sub	sp, #40	; 0x28
 800af08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af0e:	f000 fbb5 	bl	800b67c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af12:	4b1d      	ldr	r3, [pc, #116]	; (800af88 <xTimerCreateTimerTask+0x84>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d021      	beq.n	800af5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af1e:	2300      	movs	r3, #0
 800af20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af22:	1d3a      	adds	r2, r7, #4
 800af24:	f107 0108 	add.w	r1, r7, #8
 800af28:	f107 030c 	add.w	r3, r7, #12
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fe f8cf 	bl	80090d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	9202      	str	r2, [sp, #8]
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	2302      	movs	r3, #2
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	2300      	movs	r3, #0
 800af42:	460a      	mov	r2, r1
 800af44:	4911      	ldr	r1, [pc, #68]	; (800af8c <xTimerCreateTimerTask+0x88>)
 800af46:	4812      	ldr	r0, [pc, #72]	; (800af90 <xTimerCreateTimerTask+0x8c>)
 800af48:	f7fe fe9a 	bl	8009c80 <xTaskCreateStatic>
 800af4c:	4603      	mov	r3, r0
 800af4e:	4a11      	ldr	r2, [pc, #68]	; (800af94 <xTimerCreateTimerTask+0x90>)
 800af50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af52:	4b10      	ldr	r3, [pc, #64]	; (800af94 <xTimerCreateTimerTask+0x90>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af5a:	2301      	movs	r3, #1
 800af5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10c      	bne.n	800af7e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	b672      	cpsid	i
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	b662      	cpsie	i
 800af78:	613b      	str	r3, [r7, #16]
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800af7e:	697b      	ldr	r3, [r7, #20]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	200014b4 	.word	0x200014b4
 800af8c:	0800d130 	.word	0x0800d130
 800af90:	0800b215 	.word	0x0800b215
 800af94:	200014b8 	.word	0x200014b8

0800af98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af02      	add	r7, sp, #8
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800afa6:	202c      	movs	r0, #44	; 0x2c
 800afa8:	f000 fe04 	bl	800bbb4 <pvPortMalloc>
 800afac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00d      	beq.n	800afd0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 f847 	bl	800b05e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800afd0:	697b      	ldr	r3, [r7, #20]
	}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b08a      	sub	sp, #40	; 0x28
 800afde:	af02      	add	r7, sp, #8
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800afe8:	232c      	movs	r3, #44	; 0x2c
 800afea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b2c      	cmp	r3, #44	; 0x2c
 800aff0:	d00c      	beq.n	800b00c <xTimerCreateStatic+0x32>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	b672      	cpsid	i
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	b662      	cpsie	i
 800b006:	61bb      	str	r3, [r7, #24]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b00c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10c      	bne.n	800b02e <xTimerCreateStatic+0x54>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	b672      	cpsid	i
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	b662      	cpsie	i
 800b028:	617b      	str	r3, [r7, #20]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b030:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00d      	beq.n	800b054 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2202      	movs	r2, #2
 800b03c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	9301      	str	r3, [sp, #4]
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 f805 	bl	800b05e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b054:	69fb      	ldr	r3, [r7, #28]
	}
 800b056:	4618      	mov	r0, r3
 800b058:	3720      	adds	r7, #32
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b086      	sub	sp, #24
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	607a      	str	r2, [r7, #4]
 800b06a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10c      	bne.n	800b08c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	b672      	cpsid	i
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	b662      	cpsie	i
 800b086:	617b      	str	r3, [r7, #20]
}
 800b088:	bf00      	nop
 800b08a:	e7fe      	b.n	800b08a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d01e      	beq.n	800b0d0 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b092:	f000 faf3 	bl	800b67c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	6a3a      	ldr	r2, [r7, #32]
 800b0ac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe f846 	bl	8009144 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d008      	beq.n	800b0d0 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c4:	f043 0304 	orr.w	r3, r3, #4
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b0d0:	bf00      	nop
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08a      	sub	sp, #40	; 0x28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
 800b0e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10c      	bne.n	800b10a <xTimerGenericCommand+0x32>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	b672      	cpsid	i
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	b662      	cpsie	i
 800b104:	623b      	str	r3, [r7, #32]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b10a:	4b1a      	ldr	r3, [pc, #104]	; (800b174 <xTimerGenericCommand+0x9c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d02a      	beq.n	800b168 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	2b05      	cmp	r3, #5
 800b122:	dc18      	bgt.n	800b156 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b124:	f7ff fe0a 	bl	800ad3c <xTaskGetSchedulerState>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d109      	bne.n	800b142 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b12e:	4b11      	ldr	r3, [pc, #68]	; (800b174 <xTimerGenericCommand+0x9c>)
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f107 0110 	add.w	r1, r7, #16
 800b136:	2300      	movs	r3, #0
 800b138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b13a:	f7fe f9a7 	bl	800948c <xQueueGenericSend>
 800b13e:	6278      	str	r0, [r7, #36]	; 0x24
 800b140:	e012      	b.n	800b168 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b142:	4b0c      	ldr	r3, [pc, #48]	; (800b174 <xTimerGenericCommand+0x9c>)
 800b144:	6818      	ldr	r0, [r3, #0]
 800b146:	f107 0110 	add.w	r1, r7, #16
 800b14a:	2300      	movs	r3, #0
 800b14c:	2200      	movs	r2, #0
 800b14e:	f7fe f99d 	bl	800948c <xQueueGenericSend>
 800b152:	6278      	str	r0, [r7, #36]	; 0x24
 800b154:	e008      	b.n	800b168 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b156:	4b07      	ldr	r3, [pc, #28]	; (800b174 <xTimerGenericCommand+0x9c>)
 800b158:	6818      	ldr	r0, [r3, #0]
 800b15a:	f107 0110 	add.w	r1, r7, #16
 800b15e:	2300      	movs	r3, #0
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	f7fe fa99 	bl	8009698 <xQueueGenericSendFromISR>
 800b166:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3728      	adds	r7, #40	; 0x28
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	200014b4 	.word	0x200014b4

0800b178 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b088      	sub	sp, #32
 800b17c:	af02      	add	r7, sp, #8
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b182:	4b23      	ldr	r3, [pc, #140]	; (800b210 <prvProcessExpiredTimer+0x98>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	3304      	adds	r3, #4
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe f841 	bl	8009218 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b19c:	f003 0304 	and.w	r3, r3, #4
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d024      	beq.n	800b1ee <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	699a      	ldr	r2, [r3, #24]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	18d1      	adds	r1, r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	6978      	ldr	r0, [r7, #20]
 800b1b2:	f000 f8d3 	bl	800b35c <prvInsertTimerInActiveList>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d021      	beq.n	800b200 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1bc:	2300      	movs	r3, #0
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	6978      	ldr	r0, [r7, #20]
 800b1c8:	f7ff ff86 	bl	800b0d8 <xTimerGenericCommand>
 800b1cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d115      	bne.n	800b200 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	b672      	cpsid	i
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	b662      	cpsie	i
 800b1e8:	60fb      	str	r3, [r7, #12]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1f4:	f023 0301 	bic.w	r3, r3, #1
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	6a1b      	ldr	r3, [r3, #32]
 800b204:	6978      	ldr	r0, [r7, #20]
 800b206:	4798      	blx	r3
}
 800b208:	bf00      	nop
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	200014ac 	.word	0x200014ac

0800b214 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b21c:	f107 0308 	add.w	r3, r7, #8
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f857 	bl	800b2d4 <prvGetNextExpireTime>
 800b226:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	4619      	mov	r1, r3
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 f803 	bl	800b238 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b232:	f000 f8d5 	bl	800b3e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b236:	e7f1      	b.n	800b21c <prvTimerTask+0x8>

0800b238 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b242:	f7ff f97d 	bl	800a540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b246:	f107 0308 	add.w	r3, r7, #8
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 f866 	bl	800b31c <prvSampleTimeNow>
 800b250:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d130      	bne.n	800b2ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <prvProcessTimerOrBlockTask+0x3c>
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	429a      	cmp	r2, r3
 800b264:	d806      	bhi.n	800b274 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b266:	f7ff f979 	bl	800a55c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b26a:	68f9      	ldr	r1, [r7, #12]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ff83 	bl	800b178 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b272:	e024      	b.n	800b2be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d008      	beq.n	800b28c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b27a:	4b13      	ldr	r3, [pc, #76]	; (800b2c8 <prvProcessTimerOrBlockTask+0x90>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <prvProcessTimerOrBlockTask+0x50>
 800b284:	2301      	movs	r3, #1
 800b286:	e000      	b.n	800b28a <prvProcessTimerOrBlockTask+0x52>
 800b288:	2300      	movs	r3, #0
 800b28a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <prvProcessTimerOrBlockTask+0x94>)
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	4619      	mov	r1, r3
 800b29a:	f7fe fcbd 	bl	8009c18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b29e:	f7ff f95d 	bl	800a55c <xTaskResumeAll>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b2a8:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <prvProcessTimerOrBlockTask+0x98>)
 800b2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ae:	601a      	str	r2, [r3, #0]
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	f3bf 8f6f 	isb	sy
}
 800b2b8:	e001      	b.n	800b2be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b2ba:	f7ff f94f 	bl	800a55c <xTaskResumeAll>
}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200014b0 	.word	0x200014b0
 800b2cc:	200014b4 	.word	0x200014b4
 800b2d0:	e000ed04 	.word	0xe000ed04

0800b2d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b2dc:	4b0e      	ldr	r3, [pc, #56]	; (800b318 <prvGetNextExpireTime+0x44>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <prvGetNextExpireTime+0x16>
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	e000      	b.n	800b2ec <prvGetNextExpireTime+0x18>
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d105      	bne.n	800b304 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2f8:	4b07      	ldr	r3, [pc, #28]	; (800b318 <prvGetNextExpireTime+0x44>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	60fb      	str	r3, [r7, #12]
 800b302:	e001      	b.n	800b308 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b308:	68fb      	ldr	r3, [r7, #12]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	200014ac 	.word	0x200014ac

0800b31c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b324:	f7ff f9ba 	bl	800a69c <xTaskGetTickCount>
 800b328:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b32a:	4b0b      	ldr	r3, [pc, #44]	; (800b358 <prvSampleTimeNow+0x3c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	429a      	cmp	r2, r3
 800b332:	d205      	bcs.n	800b340 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b334:	f000 f93c 	bl	800b5b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	e002      	b.n	800b346 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b346:	4a04      	ldr	r2, [pc, #16]	; (800b358 <prvSampleTimeNow+0x3c>)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b34c:	68fb      	ldr	r3, [r7, #12]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200014bc 	.word	0x200014bc

0800b35c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d812      	bhi.n	800b3a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	1ad2      	subs	r2, r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d302      	bcc.n	800b396 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b390:	2301      	movs	r3, #1
 800b392:	617b      	str	r3, [r7, #20]
 800b394:	e01b      	b.n	800b3ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <prvInsertTimerInActiveList+0x7c>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fd ff00 	bl	80091a6 <vListInsert>
 800b3a6:	e012      	b.n	800b3ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d206      	bcs.n	800b3be <prvInsertTimerInActiveList+0x62>
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d302      	bcc.n	800b3be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	e007      	b.n	800b3ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3be:	4b07      	ldr	r3, [pc, #28]	; (800b3dc <prvInsertTimerInActiveList+0x80>)
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	f7fd feec 	bl	80091a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b3ce:	697b      	ldr	r3, [r7, #20]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	200014b0 	.word	0x200014b0
 800b3dc:	200014ac 	.word	0x200014ac

0800b3e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08e      	sub	sp, #56	; 0x38
 800b3e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3e6:	e0d0      	b.n	800b58a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	da1a      	bge.n	800b424 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b3ee:	1d3b      	adds	r3, r7, #4
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10c      	bne.n	800b414 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	b672      	cpsid	i
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	b662      	cpsie	i
 800b40e:	61fb      	str	r3, [r7, #28]
}
 800b410:	bf00      	nop
 800b412:	e7fe      	b.n	800b412 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b41a:	6850      	ldr	r0, [r2, #4]
 800b41c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b41e:	6892      	ldr	r2, [r2, #8]
 800b420:	4611      	mov	r1, r2
 800b422:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f2c0 80af 	blt.w	800b58a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	3304      	adds	r3, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fd feeb 	bl	8009218 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b442:	463b      	mov	r3, r7
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff ff69 	bl	800b31c <prvSampleTimeNow>
 800b44a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b09      	cmp	r3, #9
 800b450:	f200 809a 	bhi.w	800b588 <prvProcessReceivedCommands+0x1a8>
 800b454:	a201      	add	r2, pc, #4	; (adr r2, 800b45c <prvProcessReceivedCommands+0x7c>)
 800b456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45a:	bf00      	nop
 800b45c:	0800b485 	.word	0x0800b485
 800b460:	0800b485 	.word	0x0800b485
 800b464:	0800b485 	.word	0x0800b485
 800b468:	0800b4fd 	.word	0x0800b4fd
 800b46c:	0800b511 	.word	0x0800b511
 800b470:	0800b55f 	.word	0x0800b55f
 800b474:	0800b485 	.word	0x0800b485
 800b478:	0800b485 	.word	0x0800b485
 800b47c:	0800b4fd 	.word	0x0800b4fd
 800b480:	0800b511 	.word	0x0800b511
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b48a:	f043 0301 	orr.w	r3, r3, #1
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	18d1      	adds	r1, r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4a4:	f7ff ff5a 	bl	800b35c <prvInsertTimerInActiveList>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d06d      	beq.n	800b58a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d062      	beq.n	800b58a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	441a      	add	r2, r3
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4d6:	f7ff fdff 	bl	800b0d8 <xTimerGenericCommand>
 800b4da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d153      	bne.n	800b58a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	b672      	cpsid	i
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	b662      	cpsie	i
 800b4f6:	61bb      	str	r3, [r7, #24]
}
 800b4f8:	bf00      	nop
 800b4fa:	e7fe      	b.n	800b4fa <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b502:	f023 0301 	bic.w	r3, r3, #1
 800b506:	b2da      	uxtb	r2, r3
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b50e:	e03c      	b.n	800b58a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b516:	f043 0301 	orr.w	r3, r3, #1
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b526:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10c      	bne.n	800b54a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	b672      	cpsid	i
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	b662      	cpsie	i
 800b544:	617b      	str	r3, [r7, #20]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	699a      	ldr	r2, [r3, #24]
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	18d1      	adds	r1, r2, r3
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b558:	f7ff ff00 	bl	800b35c <prvInsertTimerInActiveList>
					break;
 800b55c:	e015      	b.n	800b58a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d103      	bne.n	800b574 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b56c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b56e:	f000 fbeb 	bl	800bd48 <vPortFree>
 800b572:	e00a      	b.n	800b58a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b57a:	f023 0301 	bic.w	r3, r3, #1
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b586:	e000      	b.n	800b58a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b58a:	4b08      	ldr	r3, [pc, #32]	; (800b5ac <prvProcessReceivedCommands+0x1cc>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	1d39      	adds	r1, r7, #4
 800b590:	2200      	movs	r2, #0
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe f920 	bl	80097d8 <xQueueReceive>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f47f af24 	bne.w	800b3e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	3730      	adds	r7, #48	; 0x30
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	200014b4 	.word	0x200014b4

0800b5b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5b6:	e04a      	b.n	800b64e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5b8:	4b2e      	ldr	r3, [pc, #184]	; (800b674 <prvSwitchTimerLists+0xc4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c2:	4b2c      	ldr	r3, [pc, #176]	; (800b674 <prvSwitchTimerLists+0xc4>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fd fe21 	bl	8009218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5e4:	f003 0304 	and.w	r3, r3, #4
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d030      	beq.n	800b64e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	693a      	ldr	r2, [r7, #16]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d90e      	bls.n	800b61c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b60a:	4b1a      	ldr	r3, [pc, #104]	; (800b674 <prvSwitchTimerLists+0xc4>)
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3304      	adds	r3, #4
 800b612:	4619      	mov	r1, r3
 800b614:	4610      	mov	r0, r2
 800b616:	f7fd fdc6 	bl	80091a6 <vListInsert>
 800b61a:	e018      	b.n	800b64e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b61c:	2300      	movs	r3, #0
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	2300      	movs	r3, #0
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	2100      	movs	r1, #0
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7ff fd56 	bl	800b0d8 <xTimerGenericCommand>
 800b62c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10c      	bne.n	800b64e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	b672      	cpsid	i
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	b662      	cpsie	i
 800b648:	603b      	str	r3, [r7, #0]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b64e:	4b09      	ldr	r3, [pc, #36]	; (800b674 <prvSwitchTimerLists+0xc4>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1af      	bne.n	800b5b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b658:	4b06      	ldr	r3, [pc, #24]	; (800b674 <prvSwitchTimerLists+0xc4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b65e:	4b06      	ldr	r3, [pc, #24]	; (800b678 <prvSwitchTimerLists+0xc8>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a04      	ldr	r2, [pc, #16]	; (800b674 <prvSwitchTimerLists+0xc4>)
 800b664:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b666:	4a04      	ldr	r2, [pc, #16]	; (800b678 <prvSwitchTimerLists+0xc8>)
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	6013      	str	r3, [r2, #0]
}
 800b66c:	bf00      	nop
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	200014ac 	.word	0x200014ac
 800b678:	200014b0 	.word	0x200014b0

0800b67c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b682:	f000 f96b 	bl	800b95c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b686:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d120      	bne.n	800b6d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b68e:	4814      	ldr	r0, [pc, #80]	; (800b6e0 <prvCheckForValidListAndQueue+0x64>)
 800b690:	f7fd fd38 	bl	8009104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b694:	4813      	ldr	r0, [pc, #76]	; (800b6e4 <prvCheckForValidListAndQueue+0x68>)
 800b696:	f7fd fd35 	bl	8009104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b69a:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <prvCheckForValidListAndQueue+0x6c>)
 800b69c:	4a10      	ldr	r2, [pc, #64]	; (800b6e0 <prvCheckForValidListAndQueue+0x64>)
 800b69e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b6a0:	4b12      	ldr	r3, [pc, #72]	; (800b6ec <prvCheckForValidListAndQueue+0x70>)
 800b6a2:	4a10      	ldr	r2, [pc, #64]	; (800b6e4 <prvCheckForValidListAndQueue+0x68>)
 800b6a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <prvCheckForValidListAndQueue+0x74>)
 800b6ac:	4a11      	ldr	r2, [pc, #68]	; (800b6f4 <prvCheckForValidListAndQueue+0x78>)
 800b6ae:	2110      	movs	r1, #16
 800b6b0:	200a      	movs	r0, #10
 800b6b2:	f7fd fe45 	bl	8009340 <xQueueGenericCreateStatic>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	4a08      	ldr	r2, [pc, #32]	; (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b6ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b6bc:	4b07      	ldr	r3, [pc, #28]	; (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d005      	beq.n	800b6d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b6c4:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <prvCheckForValidListAndQueue+0x60>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	490b      	ldr	r1, [pc, #44]	; (800b6f8 <prvCheckForValidListAndQueue+0x7c>)
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fa7a 	bl	8009bc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6d0:	f000 f978 	bl	800b9c4 <vPortExitCritical>
}
 800b6d4:	bf00      	nop
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	200014b4 	.word	0x200014b4
 800b6e0:	20001484 	.word	0x20001484
 800b6e4:	20001498 	.word	0x20001498
 800b6e8:	200014ac 	.word	0x200014ac
 800b6ec:	200014b0 	.word	0x200014b0
 800b6f0:	20001560 	.word	0x20001560
 800b6f4:	200014c0 	.word	0x200014c0
 800b6f8:	0800d138 	.word	0x0800d138

0800b6fc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10c      	bne.n	800b728 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	b672      	cpsid	i
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	b662      	cpsie	i
 800b722:	60fb      	str	r3, [r7, #12]
}
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800b728:	f000 f918 	bl	800b95c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b732:	f000 f947 	bl	800b9c4 <vPortExitCritical>

	return pvReturn;
 800b736:	693b      	ldr	r3, [r7, #16]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3b04      	subs	r3, #4
 800b750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3b04      	subs	r3, #4
 800b75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f023 0201 	bic.w	r2, r3, #1
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3b04      	subs	r3, #4
 800b76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b770:	4a0c      	ldr	r2, [pc, #48]	; (800b7a4 <pxPortInitialiseStack+0x64>)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3b14      	subs	r3, #20
 800b77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3b04      	subs	r3, #4
 800b786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f06f 0202 	mvn.w	r2, #2
 800b78e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	3b20      	subs	r3, #32
 800b794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b796:	68fb      	ldr	r3, [r7, #12]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	0800b7a9 	.word	0x0800b7a9

0800b7a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7b2:	4b14      	ldr	r3, [pc, #80]	; (800b804 <prvTaskExitError+0x5c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ba:	d00c      	beq.n	800b7d6 <prvTaskExitError+0x2e>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	b672      	cpsid	i
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	b662      	cpsie	i
 800b7d0:	60fb      	str	r3, [r7, #12]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <prvTaskExitError+0x2c>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	b672      	cpsid	i
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	b662      	cpsie	i
 800b7ea:	60bb      	str	r3, [r7, #8]
}
 800b7ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b7ee:	bf00      	nop
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0fc      	beq.n	800b7f0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	20000060 	.word	0x20000060
	...

0800b810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <pxCurrentTCBConst2>)
 800b812:	6819      	ldr	r1, [r3, #0]
 800b814:	6808      	ldr	r0, [r1, #0]
 800b816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	f380 8809 	msr	PSP, r0
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f04f 0000 	mov.w	r0, #0
 800b826:	f380 8811 	msr	BASEPRI, r0
 800b82a:	4770      	bx	lr
 800b82c:	f3af 8000 	nop.w

0800b830 <pxCurrentTCBConst2>:
 800b830:	20000f84 	.word	0x20000f84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop

0800b838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b838:	4808      	ldr	r0, [pc, #32]	; (800b85c <prvPortStartFirstTask+0x24>)
 800b83a:	6800      	ldr	r0, [r0, #0]
 800b83c:	6800      	ldr	r0, [r0, #0]
 800b83e:	f380 8808 	msr	MSP, r0
 800b842:	f04f 0000 	mov.w	r0, #0
 800b846:	f380 8814 	msr	CONTROL, r0
 800b84a:	b662      	cpsie	i
 800b84c:	b661      	cpsie	f
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	df00      	svc	0
 800b858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b85a:	bf00      	nop
 800b85c:	e000ed08 	.word	0xe000ed08

0800b860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b866:	4b37      	ldr	r3, [pc, #220]	; (800b944 <xPortStartScheduler+0xe4>)
 800b868:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	22ff      	movs	r2, #255	; 0xff
 800b876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b880:	78fb      	ldrb	r3, [r7, #3]
 800b882:	b2db      	uxtb	r3, r3
 800b884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	4b2f      	ldr	r3, [pc, #188]	; (800b948 <xPortStartScheduler+0xe8>)
 800b88c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b88e:	4b2f      	ldr	r3, [pc, #188]	; (800b94c <xPortStartScheduler+0xec>)
 800b890:	2207      	movs	r2, #7
 800b892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b894:	e009      	b.n	800b8aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b896:	4b2d      	ldr	r3, [pc, #180]	; (800b94c <xPortStartScheduler+0xec>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	4a2b      	ldr	r2, [pc, #172]	; (800b94c <xPortStartScheduler+0xec>)
 800b89e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8aa:	78fb      	ldrb	r3, [r7, #3]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b2:	2b80      	cmp	r3, #128	; 0x80
 800b8b4:	d0ef      	beq.n	800b896 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8b6:	4b25      	ldr	r3, [pc, #148]	; (800b94c <xPortStartScheduler+0xec>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f1c3 0307 	rsb	r3, r3, #7
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d00c      	beq.n	800b8dc <xPortStartScheduler+0x7c>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	b672      	cpsid	i
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	b662      	cpsie	i
 800b8d6:	60bb      	str	r3, [r7, #8]
}
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b8dc:	4b1b      	ldr	r3, [pc, #108]	; (800b94c <xPortStartScheduler+0xec>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	4a1a      	ldr	r2, [pc, #104]	; (800b94c <xPortStartScheduler+0xec>)
 800b8e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b8e6:	4b19      	ldr	r3, [pc, #100]	; (800b94c <xPortStartScheduler+0xec>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b8ee:	4a17      	ldr	r2, [pc, #92]	; (800b94c <xPortStartScheduler+0xec>)
 800b8f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b8fa:	4b15      	ldr	r3, [pc, #84]	; (800b950 <xPortStartScheduler+0xf0>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a14      	ldr	r2, [pc, #80]	; (800b950 <xPortStartScheduler+0xf0>)
 800b900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b904:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b906:	4b12      	ldr	r3, [pc, #72]	; (800b950 <xPortStartScheduler+0xf0>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a11      	ldr	r2, [pc, #68]	; (800b950 <xPortStartScheduler+0xf0>)
 800b90c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b910:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b912:	f000 f8dd 	bl	800bad0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b916:	4b0f      	ldr	r3, [pc, #60]	; (800b954 <xPortStartScheduler+0xf4>)
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b91c:	f000 f8fc 	bl	800bb18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b920:	4b0d      	ldr	r3, [pc, #52]	; (800b958 <xPortStartScheduler+0xf8>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a0c      	ldr	r2, [pc, #48]	; (800b958 <xPortStartScheduler+0xf8>)
 800b926:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b92a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b92c:	f7ff ff84 	bl	800b838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b930:	f7fe ff80 	bl	800a834 <vTaskSwitchContext>
	prvTaskExitError();
 800b934:	f7ff ff38 	bl	800b7a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	e000e400 	.word	0xe000e400
 800b948:	200015b0 	.word	0x200015b0
 800b94c:	200015b4 	.word	0x200015b4
 800b950:	e000ed20 	.word	0xe000ed20
 800b954:	20000060 	.word	0x20000060
 800b958:	e000ef34 	.word	0xe000ef34

0800b95c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	b672      	cpsid	i
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	b662      	cpsie	i
 800b976:	607b      	str	r3, [r7, #4]
}
 800b978:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b97a:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <vPortEnterCritical+0x60>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3301      	adds	r3, #1
 800b980:	4a0e      	ldr	r2, [pc, #56]	; (800b9bc <vPortEnterCritical+0x60>)
 800b982:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b984:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <vPortEnterCritical+0x60>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d111      	bne.n	800b9b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b98c:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <vPortEnterCritical+0x64>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00c      	beq.n	800b9b0 <vPortEnterCritical+0x54>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	b672      	cpsid	i
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	b662      	cpsie	i
 800b9aa:	603b      	str	r3, [r7, #0]
}
 800b9ac:	bf00      	nop
 800b9ae:	e7fe      	b.n	800b9ae <vPortEnterCritical+0x52>
	}
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	20000060 	.word	0x20000060
 800b9c0:	e000ed04 	.word	0xe000ed04

0800b9c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9ca:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <vPortExitCritical+0x54>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10c      	bne.n	800b9ec <vPortExitCritical+0x28>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	b672      	cpsid	i
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	b662      	cpsie	i
 800b9e6:	607b      	str	r3, [r7, #4]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ba18 <vPortExitCritical+0x54>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	4a09      	ldr	r2, [pc, #36]	; (800ba18 <vPortExitCritical+0x54>)
 800b9f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b9f6:	4b08      	ldr	r3, [pc, #32]	; (800ba18 <vPortExitCritical+0x54>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d105      	bne.n	800ba0a <vPortExitCritical+0x46>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	f383 8811 	msr	BASEPRI, r3
}
 800ba08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba0a:	bf00      	nop
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	20000060 	.word	0x20000060
 800ba1c:	00000000 	.word	0x00000000

0800ba20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba20:	f3ef 8009 	mrs	r0, PSP
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	4b15      	ldr	r3, [pc, #84]	; (800ba80 <pxCurrentTCBConst>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	f01e 0f10 	tst.w	lr, #16
 800ba30:	bf08      	it	eq
 800ba32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3a:	6010      	str	r0, [r2, #0]
 800ba3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba44:	b672      	cpsid	i
 800ba46:	f380 8811 	msr	BASEPRI, r0
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	b662      	cpsie	i
 800ba54:	f7fe feee 	bl	800a834 <vTaskSwitchContext>
 800ba58:	f04f 0000 	mov.w	r0, #0
 800ba5c:	f380 8811 	msr	BASEPRI, r0
 800ba60:	bc09      	pop	{r0, r3}
 800ba62:	6819      	ldr	r1, [r3, #0]
 800ba64:	6808      	ldr	r0, [r1, #0]
 800ba66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6a:	f01e 0f10 	tst.w	lr, #16
 800ba6e:	bf08      	it	eq
 800ba70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba74:	f380 8809 	msr	PSP, r0
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop

0800ba80 <pxCurrentTCBConst>:
 800ba80:	20000f84 	.word	0x20000f84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	b672      	cpsid	i
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	b662      	cpsie	i
 800baa2:	607b      	str	r3, [r7, #4]
}
 800baa4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800baa6:	f7fe fe09 	bl	800a6bc <xTaskIncrementTick>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bab0:	4b06      	ldr	r3, [pc, #24]	; (800bacc <SysTick_Handler+0x44>)
 800bab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	2300      	movs	r3, #0
 800baba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	f383 8811 	msr	BASEPRI, r3
}
 800bac2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bad0:	b480      	push	{r7}
 800bad2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bad4:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <vPortSetupTimerInterrupt+0x34>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bada:	4b0b      	ldr	r3, [pc, #44]	; (800bb08 <vPortSetupTimerInterrupt+0x38>)
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bae0:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <vPortSetupTimerInterrupt+0x3c>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a0a      	ldr	r2, [pc, #40]	; (800bb10 <vPortSetupTimerInterrupt+0x40>)
 800bae6:	fba2 2303 	umull	r2, r3, r2, r3
 800baea:	099b      	lsrs	r3, r3, #6
 800baec:	4a09      	ldr	r2, [pc, #36]	; (800bb14 <vPortSetupTimerInterrupt+0x44>)
 800baee:	3b01      	subs	r3, #1
 800baf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800baf2:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <vPortSetupTimerInterrupt+0x34>)
 800baf4:	2207      	movs	r2, #7
 800baf6:	601a      	str	r2, [r3, #0]
}
 800baf8:	bf00      	nop
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	e000e010 	.word	0xe000e010
 800bb08:	e000e018 	.word	0xe000e018
 800bb0c:	20000054 	.word	0x20000054
 800bb10:	10624dd3 	.word	0x10624dd3
 800bb14:	e000e014 	.word	0xe000e014

0800bb18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb28 <vPortEnableVFP+0x10>
 800bb1c:	6801      	ldr	r1, [r0, #0]
 800bb1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb22:	6001      	str	r1, [r0, #0]
 800bb24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb26:	bf00      	nop
 800bb28:	e000ed88 	.word	0xe000ed88

0800bb2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb32:	f3ef 8305 	mrs	r3, IPSR
 800bb36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2b0f      	cmp	r3, #15
 800bb3c:	d916      	bls.n	800bb6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb3e:	4a19      	ldr	r2, [pc, #100]	; (800bba4 <vPortValidateInterruptPriority+0x78>)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4413      	add	r3, r2
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb48:	4b17      	ldr	r3, [pc, #92]	; (800bba8 <vPortValidateInterruptPriority+0x7c>)
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	7afa      	ldrb	r2, [r7, #11]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d20c      	bcs.n	800bb6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	b672      	cpsid	i
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	b662      	cpsie	i
 800bb66:	607b      	str	r3, [r7, #4]
}
 800bb68:	bf00      	nop
 800bb6a:	e7fe      	b.n	800bb6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb6c:	4b0f      	ldr	r3, [pc, #60]	; (800bbac <vPortValidateInterruptPriority+0x80>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb74:	4b0e      	ldr	r3, [pc, #56]	; (800bbb0 <vPortValidateInterruptPriority+0x84>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d90c      	bls.n	800bb96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb80:	b672      	cpsid	i
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	b662      	cpsie	i
 800bb90:	603b      	str	r3, [r7, #0]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <vPortValidateInterruptPriority+0x68>
	}
 800bb96:	bf00      	nop
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	e000e3f0 	.word	0xe000e3f0
 800bba8:	200015b0 	.word	0x200015b0
 800bbac:	e000ed0c 	.word	0xe000ed0c
 800bbb0:	200015b4 	.word	0x200015b4

0800bbb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08a      	sub	sp, #40	; 0x28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbc0:	f7fe fcbe 	bl	800a540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbc4:	4b5b      	ldr	r3, [pc, #364]	; (800bd34 <pvPortMalloc+0x180>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbcc:	f000 f91a 	bl	800be04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bbd0:	4b59      	ldr	r3, [pc, #356]	; (800bd38 <pvPortMalloc+0x184>)
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 8092 	bne.w	800bd02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d01f      	beq.n	800bc24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bbe4:	2208      	movs	r2, #8
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4413      	add	r3, r2
 800bbea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f003 0307 	and.w	r3, r3, #7
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d016      	beq.n	800bc24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f023 0307 	bic.w	r3, r3, #7
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f003 0307 	and.w	r3, r3, #7
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00c      	beq.n	800bc24 <pvPortMalloc+0x70>
	__asm volatile
 800bc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0e:	b672      	cpsid	i
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	b662      	cpsie	i
 800bc1e:	617b      	str	r3, [r7, #20]
}
 800bc20:	bf00      	nop
 800bc22:	e7fe      	b.n	800bc22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d06b      	beq.n	800bd02 <pvPortMalloc+0x14e>
 800bc2a:	4b44      	ldr	r3, [pc, #272]	; (800bd3c <pvPortMalloc+0x188>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d866      	bhi.n	800bd02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc34:	4b42      	ldr	r3, [pc, #264]	; (800bd40 <pvPortMalloc+0x18c>)
 800bc36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc38:	4b41      	ldr	r3, [pc, #260]	; (800bd40 <pvPortMalloc+0x18c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc3e:	e004      	b.n	800bc4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d903      	bls.n	800bc5c <pvPortMalloc+0xa8>
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1f1      	bne.n	800bc40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc5c:	4b35      	ldr	r3, [pc, #212]	; (800bd34 <pvPortMalloc+0x180>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d04d      	beq.n	800bd02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2208      	movs	r2, #8
 800bc6c:	4413      	add	r3, r2
 800bc6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	2308      	movs	r3, #8
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d921      	bls.n	800bccc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	f003 0307 	and.w	r3, r3, #7
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00c      	beq.n	800bcb4 <pvPortMalloc+0x100>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	b672      	cpsid	i
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	b662      	cpsie	i
 800bcae:	613b      	str	r3, [r7, #16]
}
 800bcb0:	bf00      	nop
 800bcb2:	e7fe      	b.n	800bcb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcc6:	69b8      	ldr	r0, [r7, #24]
 800bcc8:	f000 f8fe 	bl	800bec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bccc:	4b1b      	ldr	r3, [pc, #108]	; (800bd3c <pvPortMalloc+0x188>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	4a19      	ldr	r2, [pc, #100]	; (800bd3c <pvPortMalloc+0x188>)
 800bcd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bcda:	4b18      	ldr	r3, [pc, #96]	; (800bd3c <pvPortMalloc+0x188>)
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <pvPortMalloc+0x190>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d203      	bcs.n	800bcee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bce6:	4b15      	ldr	r3, [pc, #84]	; (800bd3c <pvPortMalloc+0x188>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a16      	ldr	r2, [pc, #88]	; (800bd44 <pvPortMalloc+0x190>)
 800bcec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <pvPortMalloc+0x184>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd02:	f7fe fc2b 	bl	800a55c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	f003 0307 	and.w	r3, r3, #7
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00c      	beq.n	800bd2a <pvPortMalloc+0x176>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	b672      	cpsid	i
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	b662      	cpsie	i
 800bd24:	60fb      	str	r3, [r7, #12]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <pvPortMalloc+0x174>
	return pvReturn;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3728      	adds	r7, #40	; 0x28
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	200051c0 	.word	0x200051c0
 800bd38:	200051cc 	.word	0x200051cc
 800bd3c:	200051c4 	.word	0x200051c4
 800bd40:	200051b8 	.word	0x200051b8
 800bd44:	200051c8 	.word	0x200051c8

0800bd48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d04c      	beq.n	800bdf4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd5a:	2308      	movs	r3, #8
 800bd5c:	425b      	negs	r3, r3
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	4413      	add	r3, r2
 800bd62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	4b23      	ldr	r3, [pc, #140]	; (800bdfc <vPortFree+0xb4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4013      	ands	r3, r2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10c      	bne.n	800bd90 <vPortFree+0x48>
	__asm volatile
 800bd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7a:	b672      	cpsid	i
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	b662      	cpsie	i
 800bd8a:	60fb      	str	r3, [r7, #12]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00c      	beq.n	800bdb2 <vPortFree+0x6a>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	b672      	cpsid	i
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	b662      	cpsie	i
 800bdac:	60bb      	str	r3, [r7, #8]
}
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	4b11      	ldr	r3, [pc, #68]	; (800bdfc <vPortFree+0xb4>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d019      	beq.n	800bdf4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d115      	bne.n	800bdf4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	685a      	ldr	r2, [r3, #4]
 800bdcc:	4b0b      	ldr	r3, [pc, #44]	; (800bdfc <vPortFree+0xb4>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	43db      	mvns	r3, r3
 800bdd2:	401a      	ands	r2, r3
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bdd8:	f7fe fbb2 	bl	800a540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	685a      	ldr	r2, [r3, #4]
 800bde0:	4b07      	ldr	r3, [pc, #28]	; (800be00 <vPortFree+0xb8>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4413      	add	r3, r2
 800bde6:	4a06      	ldr	r2, [pc, #24]	; (800be00 <vPortFree+0xb8>)
 800bde8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bdea:	6938      	ldr	r0, [r7, #16]
 800bdec:	f000 f86c 	bl	800bec8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bdf0:	f7fe fbb4 	bl	800a55c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bdf4:	bf00      	nop
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	200051cc 	.word	0x200051cc
 800be00:	200051c4 	.word	0x200051c4

0800be04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800be0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be10:	4b27      	ldr	r3, [pc, #156]	; (800beb0 <prvHeapInit+0xac>)
 800be12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f003 0307 	and.w	r3, r3, #7
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00c      	beq.n	800be38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3307      	adds	r3, #7
 800be22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f023 0307 	bic.w	r3, r3, #7
 800be2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	4a1f      	ldr	r2, [pc, #124]	; (800beb0 <prvHeapInit+0xac>)
 800be34:	4413      	add	r3, r2
 800be36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be3c:	4a1d      	ldr	r2, [pc, #116]	; (800beb4 <prvHeapInit+0xb0>)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be42:	4b1c      	ldr	r3, [pc, #112]	; (800beb4 <prvHeapInit+0xb0>)
 800be44:	2200      	movs	r2, #0
 800be46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	4413      	add	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be50:	2208      	movs	r2, #8
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	1a9b      	subs	r3, r3, r2
 800be56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f023 0307 	bic.w	r3, r3, #7
 800be5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4a15      	ldr	r2, [pc, #84]	; (800beb8 <prvHeapInit+0xb4>)
 800be64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be66:	4b14      	ldr	r3, [pc, #80]	; (800beb8 <prvHeapInit+0xb4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2200      	movs	r2, #0
 800be6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be6e:	4b12      	ldr	r3, [pc, #72]	; (800beb8 <prvHeapInit+0xb4>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	1ad2      	subs	r2, r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be84:	4b0c      	ldr	r3, [pc, #48]	; (800beb8 <prvHeapInit+0xb4>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	4a0a      	ldr	r2, [pc, #40]	; (800bebc <prvHeapInit+0xb8>)
 800be92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	4a09      	ldr	r2, [pc, #36]	; (800bec0 <prvHeapInit+0xbc>)
 800be9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be9c:	4b09      	ldr	r3, [pc, #36]	; (800bec4 <prvHeapInit+0xc0>)
 800be9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bea2:	601a      	str	r2, [r3, #0]
}
 800bea4:	bf00      	nop
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	200015b8 	.word	0x200015b8
 800beb4:	200051b8 	.word	0x200051b8
 800beb8:	200051c0 	.word	0x200051c0
 800bebc:	200051c8 	.word	0x200051c8
 800bec0:	200051c4 	.word	0x200051c4
 800bec4:	200051cc 	.word	0x200051cc

0800bec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bed0:	4b28      	ldr	r3, [pc, #160]	; (800bf74 <prvInsertBlockIntoFreeList+0xac>)
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	e002      	b.n	800bedc <prvInsertBlockIntoFreeList+0x14>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d8f7      	bhi.n	800bed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	4413      	add	r3, r2
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d108      	bne.n	800bf0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	441a      	add	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	441a      	add	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d118      	bne.n	800bf50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	4b15      	ldr	r3, [pc, #84]	; (800bf78 <prvInsertBlockIntoFreeList+0xb0>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d00d      	beq.n	800bf46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	441a      	add	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	e008      	b.n	800bf58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf46:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <prvInsertBlockIntoFreeList+0xb0>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	e003      	b.n	800bf58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d002      	beq.n	800bf66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf66:	bf00      	nop
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	200051b8 	.word	0x200051b8
 800bf78:	200051c0 	.word	0x200051c0

0800bf7c <std>:
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	b510      	push	{r4, lr}
 800bf80:	4604      	mov	r4, r0
 800bf82:	e9c0 3300 	strd	r3, r3, [r0]
 800bf86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf8a:	6083      	str	r3, [r0, #8]
 800bf8c:	8181      	strh	r1, [r0, #12]
 800bf8e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf90:	81c2      	strh	r2, [r0, #14]
 800bf92:	6183      	str	r3, [r0, #24]
 800bf94:	4619      	mov	r1, r3
 800bf96:	2208      	movs	r2, #8
 800bf98:	305c      	adds	r0, #92	; 0x5c
 800bf9a:	f000 f8f4 	bl	800c186 <memset>
 800bf9e:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <std+0x38>)
 800bfa0:	6263      	str	r3, [r4, #36]	; 0x24
 800bfa2:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <std+0x3c>)
 800bfa4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfa6:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <std+0x40>)
 800bfa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfaa:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <std+0x44>)
 800bfac:	6224      	str	r4, [r4, #32]
 800bfae:	6323      	str	r3, [r4, #48]	; 0x30
 800bfb0:	bd10      	pop	{r4, pc}
 800bfb2:	bf00      	nop
 800bfb4:	0800c101 	.word	0x0800c101
 800bfb8:	0800c123 	.word	0x0800c123
 800bfbc:	0800c15b 	.word	0x0800c15b
 800bfc0:	0800c17f 	.word	0x0800c17f

0800bfc4 <stdio_exit_handler>:
 800bfc4:	4a02      	ldr	r2, [pc, #8]	; (800bfd0 <stdio_exit_handler+0xc>)
 800bfc6:	4903      	ldr	r1, [pc, #12]	; (800bfd4 <stdio_exit_handler+0x10>)
 800bfc8:	4803      	ldr	r0, [pc, #12]	; (800bfd8 <stdio_exit_handler+0x14>)
 800bfca:	f000 b869 	b.w	800c0a0 <_fwalk_sglue>
 800bfce:	bf00      	nop
 800bfd0:	20000064 	.word	0x20000064
 800bfd4:	0800cc05 	.word	0x0800cc05
 800bfd8:	20000070 	.word	0x20000070

0800bfdc <cleanup_stdio>:
 800bfdc:	6841      	ldr	r1, [r0, #4]
 800bfde:	4b0c      	ldr	r3, [pc, #48]	; (800c010 <cleanup_stdio+0x34>)
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	d001      	beq.n	800bfec <cleanup_stdio+0x10>
 800bfe8:	f000 fe0c 	bl	800cc04 <_fflush_r>
 800bfec:	68a1      	ldr	r1, [r4, #8]
 800bfee:	4b09      	ldr	r3, [pc, #36]	; (800c014 <cleanup_stdio+0x38>)
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d002      	beq.n	800bffa <cleanup_stdio+0x1e>
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 fe05 	bl	800cc04 <_fflush_r>
 800bffa:	68e1      	ldr	r1, [r4, #12]
 800bffc:	4b06      	ldr	r3, [pc, #24]	; (800c018 <cleanup_stdio+0x3c>)
 800bffe:	4299      	cmp	r1, r3
 800c000:	d004      	beq.n	800c00c <cleanup_stdio+0x30>
 800c002:	4620      	mov	r0, r4
 800c004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c008:	f000 bdfc 	b.w	800cc04 <_fflush_r>
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	bf00      	nop
 800c010:	200051d0 	.word	0x200051d0
 800c014:	20005238 	.word	0x20005238
 800c018:	200052a0 	.word	0x200052a0

0800c01c <global_stdio_init.part.0>:
 800c01c:	b510      	push	{r4, lr}
 800c01e:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <global_stdio_init.part.0+0x30>)
 800c020:	4c0b      	ldr	r4, [pc, #44]	; (800c050 <global_stdio_init.part.0+0x34>)
 800c022:	4a0c      	ldr	r2, [pc, #48]	; (800c054 <global_stdio_init.part.0+0x38>)
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	4620      	mov	r0, r4
 800c028:	2200      	movs	r2, #0
 800c02a:	2104      	movs	r1, #4
 800c02c:	f7ff ffa6 	bl	800bf7c <std>
 800c030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c034:	2201      	movs	r2, #1
 800c036:	2109      	movs	r1, #9
 800c038:	f7ff ffa0 	bl	800bf7c <std>
 800c03c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c040:	2202      	movs	r2, #2
 800c042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c046:	2112      	movs	r1, #18
 800c048:	f7ff bf98 	b.w	800bf7c <std>
 800c04c:	20005308 	.word	0x20005308
 800c050:	200051d0 	.word	0x200051d0
 800c054:	0800bfc5 	.word	0x0800bfc5

0800c058 <__sfp_lock_acquire>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__sfp_lock_acquire+0x8>)
 800c05a:	f000 b971 	b.w	800c340 <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	20005311 	.word	0x20005311

0800c064 <__sfp_lock_release>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__sfp_lock_release+0x8>)
 800c066:	f000 b96c 	b.w	800c342 <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	20005311 	.word	0x20005311

0800c070 <__sinit>:
 800c070:	b510      	push	{r4, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	f7ff fff0 	bl	800c058 <__sfp_lock_acquire>
 800c078:	6a23      	ldr	r3, [r4, #32]
 800c07a:	b11b      	cbz	r3, 800c084 <__sinit+0x14>
 800c07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c080:	f7ff bff0 	b.w	800c064 <__sfp_lock_release>
 800c084:	4b04      	ldr	r3, [pc, #16]	; (800c098 <__sinit+0x28>)
 800c086:	6223      	str	r3, [r4, #32]
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <__sinit+0x2c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1f5      	bne.n	800c07c <__sinit+0xc>
 800c090:	f7ff ffc4 	bl	800c01c <global_stdio_init.part.0>
 800c094:	e7f2      	b.n	800c07c <__sinit+0xc>
 800c096:	bf00      	nop
 800c098:	0800bfdd 	.word	0x0800bfdd
 800c09c:	20005308 	.word	0x20005308

0800c0a0 <_fwalk_sglue>:
 800c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	4688      	mov	r8, r1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	2600      	movs	r6, #0
 800c0ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c0b4:	d505      	bpl.n	800c0c2 <_fwalk_sglue+0x22>
 800c0b6:	6824      	ldr	r4, [r4, #0]
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	d1f7      	bne.n	800c0ac <_fwalk_sglue+0xc>
 800c0bc:	4630      	mov	r0, r6
 800c0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	89ab      	ldrh	r3, [r5, #12]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d907      	bls.n	800c0d8 <_fwalk_sglue+0x38>
 800c0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	d003      	beq.n	800c0d8 <_fwalk_sglue+0x38>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	47c0      	blx	r8
 800c0d6:	4306      	orrs	r6, r0
 800c0d8:	3568      	adds	r5, #104	; 0x68
 800c0da:	e7e9      	b.n	800c0b0 <_fwalk_sglue+0x10>

0800c0dc <iprintf>:
 800c0dc:	b40f      	push	{r0, r1, r2, r3}
 800c0de:	b507      	push	{r0, r1, r2, lr}
 800c0e0:	4906      	ldr	r1, [pc, #24]	; (800c0fc <iprintf+0x20>)
 800c0e2:	ab04      	add	r3, sp, #16
 800c0e4:	6808      	ldr	r0, [r1, #0]
 800c0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ea:	6881      	ldr	r1, [r0, #8]
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	f000 fa59 	bl	800c5a4 <_vfiprintf_r>
 800c0f2:	b003      	add	sp, #12
 800c0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f8:	b004      	add	sp, #16
 800c0fa:	4770      	bx	lr
 800c0fc:	200000bc 	.word	0x200000bc

0800c100 <__sread>:
 800c100:	b510      	push	{r4, lr}
 800c102:	460c      	mov	r4, r1
 800c104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c108:	f000 f8cc 	bl	800c2a4 <_read_r>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	bfab      	itete	ge
 800c110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c112:	89a3      	ldrhlt	r3, [r4, #12]
 800c114:	181b      	addge	r3, r3, r0
 800c116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c11a:	bfac      	ite	ge
 800c11c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c11e:	81a3      	strhlt	r3, [r4, #12]
 800c120:	bd10      	pop	{r4, pc}

0800c122 <__swrite>:
 800c122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c126:	461f      	mov	r7, r3
 800c128:	898b      	ldrh	r3, [r1, #12]
 800c12a:	05db      	lsls	r3, r3, #23
 800c12c:	4605      	mov	r5, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	4616      	mov	r6, r2
 800c132:	d505      	bpl.n	800c140 <__swrite+0x1e>
 800c134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c138:	2302      	movs	r3, #2
 800c13a:	2200      	movs	r2, #0
 800c13c:	f000 f8a0 	bl	800c280 <_lseek_r>
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	4632      	mov	r2, r6
 800c14e:	463b      	mov	r3, r7
 800c150:	4628      	mov	r0, r5
 800c152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c156:	f000 b8b7 	b.w	800c2c8 <_write_r>

0800c15a <__sseek>:
 800c15a:	b510      	push	{r4, lr}
 800c15c:	460c      	mov	r4, r1
 800c15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c162:	f000 f88d 	bl	800c280 <_lseek_r>
 800c166:	1c43      	adds	r3, r0, #1
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	bf15      	itete	ne
 800c16c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c16e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c176:	81a3      	strheq	r3, [r4, #12]
 800c178:	bf18      	it	ne
 800c17a:	81a3      	strhne	r3, [r4, #12]
 800c17c:	bd10      	pop	{r4, pc}

0800c17e <__sclose>:
 800c17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c182:	f000 b817 	b.w	800c1b4 <_close_r>

0800c186 <memset>:
 800c186:	4402      	add	r2, r0
 800c188:	4603      	mov	r3, r0
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d100      	bne.n	800c190 <memset+0xa>
 800c18e:	4770      	bx	lr
 800c190:	f803 1b01 	strb.w	r1, [r3], #1
 800c194:	e7f9      	b.n	800c18a <memset+0x4>

0800c196 <strcat>:
 800c196:	b510      	push	{r4, lr}
 800c198:	4602      	mov	r2, r0
 800c19a:	7814      	ldrb	r4, [r2, #0]
 800c19c:	4613      	mov	r3, r2
 800c19e:	3201      	adds	r2, #1
 800c1a0:	2c00      	cmp	r4, #0
 800c1a2:	d1fa      	bne.n	800c19a <strcat+0x4>
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1ae:	2a00      	cmp	r2, #0
 800c1b0:	d1f9      	bne.n	800c1a6 <strcat+0x10>
 800c1b2:	bd10      	pop	{r4, pc}

0800c1b4 <_close_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	; (800c1d0 <_close_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f6 f9e3 	bl	800258a <_close>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_close_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_close_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	2000530c 	.word	0x2000530c

0800c1d4 <_reclaim_reent>:
 800c1d4:	4b29      	ldr	r3, [pc, #164]	; (800c27c <_reclaim_reent+0xa8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4283      	cmp	r3, r0
 800c1da:	b570      	push	{r4, r5, r6, lr}
 800c1dc:	4604      	mov	r4, r0
 800c1de:	d04b      	beq.n	800c278 <_reclaim_reent+0xa4>
 800c1e0:	69c3      	ldr	r3, [r0, #28]
 800c1e2:	b143      	cbz	r3, 800c1f6 <_reclaim_reent+0x22>
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d144      	bne.n	800c274 <_reclaim_reent+0xa0>
 800c1ea:	69e3      	ldr	r3, [r4, #28]
 800c1ec:	6819      	ldr	r1, [r3, #0]
 800c1ee:	b111      	cbz	r1, 800c1f6 <_reclaim_reent+0x22>
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f000 f8b5 	bl	800c360 <_free_r>
 800c1f6:	6961      	ldr	r1, [r4, #20]
 800c1f8:	b111      	cbz	r1, 800c200 <_reclaim_reent+0x2c>
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 f8b0 	bl	800c360 <_free_r>
 800c200:	69e1      	ldr	r1, [r4, #28]
 800c202:	b111      	cbz	r1, 800c20a <_reclaim_reent+0x36>
 800c204:	4620      	mov	r0, r4
 800c206:	f000 f8ab 	bl	800c360 <_free_r>
 800c20a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c20c:	b111      	cbz	r1, 800c214 <_reclaim_reent+0x40>
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 f8a6 	bl	800c360 <_free_r>
 800c214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c216:	b111      	cbz	r1, 800c21e <_reclaim_reent+0x4a>
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 f8a1 	bl	800c360 <_free_r>
 800c21e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c220:	b111      	cbz	r1, 800c228 <_reclaim_reent+0x54>
 800c222:	4620      	mov	r0, r4
 800c224:	f000 f89c 	bl	800c360 <_free_r>
 800c228:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c22a:	b111      	cbz	r1, 800c232 <_reclaim_reent+0x5e>
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 f897 	bl	800c360 <_free_r>
 800c232:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c234:	b111      	cbz	r1, 800c23c <_reclaim_reent+0x68>
 800c236:	4620      	mov	r0, r4
 800c238:	f000 f892 	bl	800c360 <_free_r>
 800c23c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c23e:	b111      	cbz	r1, 800c246 <_reclaim_reent+0x72>
 800c240:	4620      	mov	r0, r4
 800c242:	f000 f88d 	bl	800c360 <_free_r>
 800c246:	6a23      	ldr	r3, [r4, #32]
 800c248:	b1b3      	cbz	r3, 800c278 <_reclaim_reent+0xa4>
 800c24a:	4620      	mov	r0, r4
 800c24c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c250:	4718      	bx	r3
 800c252:	5949      	ldr	r1, [r1, r5]
 800c254:	b941      	cbnz	r1, 800c268 <_reclaim_reent+0x94>
 800c256:	3504      	adds	r5, #4
 800c258:	69e3      	ldr	r3, [r4, #28]
 800c25a:	2d80      	cmp	r5, #128	; 0x80
 800c25c:	68d9      	ldr	r1, [r3, #12]
 800c25e:	d1f8      	bne.n	800c252 <_reclaim_reent+0x7e>
 800c260:	4620      	mov	r0, r4
 800c262:	f000 f87d 	bl	800c360 <_free_r>
 800c266:	e7c0      	b.n	800c1ea <_reclaim_reent+0x16>
 800c268:	680e      	ldr	r6, [r1, #0]
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 f878 	bl	800c360 <_free_r>
 800c270:	4631      	mov	r1, r6
 800c272:	e7ef      	b.n	800c254 <_reclaim_reent+0x80>
 800c274:	2500      	movs	r5, #0
 800c276:	e7ef      	b.n	800c258 <_reclaim_reent+0x84>
 800c278:	bd70      	pop	{r4, r5, r6, pc}
 800c27a:	bf00      	nop
 800c27c:	200000bc 	.word	0x200000bc

0800c280 <_lseek_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	; (800c2a0 <_lseek_r+0x20>)
 800c284:	4604      	mov	r4, r0
 800c286:	4608      	mov	r0, r1
 800c288:	4611      	mov	r1, r2
 800c28a:	2200      	movs	r2, #0
 800c28c:	602a      	str	r2, [r5, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	f7f6 f9a2 	bl	80025d8 <_lseek>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_lseek_r+0x1e>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_lseek_r+0x1e>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	2000530c 	.word	0x2000530c

0800c2a4 <_read_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	; (800c2c4 <_read_r+0x20>)
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	602a      	str	r2, [r5, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f7f6 f930 	bl	8002518 <_read>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_read_r+0x1e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_read_r+0x1e>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	2000530c 	.word	0x2000530c

0800c2c8 <_write_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d07      	ldr	r5, [pc, #28]	; (800c2e8 <_write_r+0x20>)
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	602a      	str	r2, [r5, #0]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f7f6 f93b 	bl	8002552 <_write>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_write_r+0x1e>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_write_r+0x1e>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	2000530c 	.word	0x2000530c

0800c2ec <__errno>:
 800c2ec:	4b01      	ldr	r3, [pc, #4]	; (800c2f4 <__errno+0x8>)
 800c2ee:	6818      	ldr	r0, [r3, #0]
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	200000bc 	.word	0x200000bc

0800c2f8 <__libc_init_array>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	4d0d      	ldr	r5, [pc, #52]	; (800c330 <__libc_init_array+0x38>)
 800c2fc:	4c0d      	ldr	r4, [pc, #52]	; (800c334 <__libc_init_array+0x3c>)
 800c2fe:	1b64      	subs	r4, r4, r5
 800c300:	10a4      	asrs	r4, r4, #2
 800c302:	2600      	movs	r6, #0
 800c304:	42a6      	cmp	r6, r4
 800c306:	d109      	bne.n	800c31c <__libc_init_array+0x24>
 800c308:	4d0b      	ldr	r5, [pc, #44]	; (800c338 <__libc_init_array+0x40>)
 800c30a:	4c0c      	ldr	r4, [pc, #48]	; (800c33c <__libc_init_array+0x44>)
 800c30c:	f000 fdcc 	bl	800cea8 <_init>
 800c310:	1b64      	subs	r4, r4, r5
 800c312:	10a4      	asrs	r4, r4, #2
 800c314:	2600      	movs	r6, #0
 800c316:	42a6      	cmp	r6, r4
 800c318:	d105      	bne.n	800c326 <__libc_init_array+0x2e>
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c320:	4798      	blx	r3
 800c322:	3601      	adds	r6, #1
 800c324:	e7ee      	b.n	800c304 <__libc_init_array+0xc>
 800c326:	f855 3b04 	ldr.w	r3, [r5], #4
 800c32a:	4798      	blx	r3
 800c32c:	3601      	adds	r6, #1
 800c32e:	e7f2      	b.n	800c316 <__libc_init_array+0x1e>
 800c330:	0800e8dc 	.word	0x0800e8dc
 800c334:	0800e8dc 	.word	0x0800e8dc
 800c338:	0800e8dc 	.word	0x0800e8dc
 800c33c:	0800e8e0 	.word	0x0800e8e0

0800c340 <__retarget_lock_acquire_recursive>:
 800c340:	4770      	bx	lr

0800c342 <__retarget_lock_release_recursive>:
 800c342:	4770      	bx	lr

0800c344 <memcpy>:
 800c344:	440a      	add	r2, r1
 800c346:	4291      	cmp	r1, r2
 800c348:	f100 33ff 	add.w	r3, r0, #4294967295
 800c34c:	d100      	bne.n	800c350 <memcpy+0xc>
 800c34e:	4770      	bx	lr
 800c350:	b510      	push	{r4, lr}
 800c352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c35a:	4291      	cmp	r1, r2
 800c35c:	d1f9      	bne.n	800c352 <memcpy+0xe>
 800c35e:	bd10      	pop	{r4, pc}

0800c360 <_free_r>:
 800c360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c362:	2900      	cmp	r1, #0
 800c364:	d044      	beq.n	800c3f0 <_free_r+0x90>
 800c366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c36a:	9001      	str	r0, [sp, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f1a1 0404 	sub.w	r4, r1, #4
 800c372:	bfb8      	it	lt
 800c374:	18e4      	addlt	r4, r4, r3
 800c376:	f000 f8df 	bl	800c538 <__malloc_lock>
 800c37a:	4a1e      	ldr	r2, [pc, #120]	; (800c3f4 <_free_r+0x94>)
 800c37c:	9801      	ldr	r0, [sp, #4]
 800c37e:	6813      	ldr	r3, [r2, #0]
 800c380:	b933      	cbnz	r3, 800c390 <_free_r+0x30>
 800c382:	6063      	str	r3, [r4, #4]
 800c384:	6014      	str	r4, [r2, #0]
 800c386:	b003      	add	sp, #12
 800c388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c38c:	f000 b8da 	b.w	800c544 <__malloc_unlock>
 800c390:	42a3      	cmp	r3, r4
 800c392:	d908      	bls.n	800c3a6 <_free_r+0x46>
 800c394:	6825      	ldr	r5, [r4, #0]
 800c396:	1961      	adds	r1, r4, r5
 800c398:	428b      	cmp	r3, r1
 800c39a:	bf01      	itttt	eq
 800c39c:	6819      	ldreq	r1, [r3, #0]
 800c39e:	685b      	ldreq	r3, [r3, #4]
 800c3a0:	1949      	addeq	r1, r1, r5
 800c3a2:	6021      	streq	r1, [r4, #0]
 800c3a4:	e7ed      	b.n	800c382 <_free_r+0x22>
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	b10b      	cbz	r3, 800c3b0 <_free_r+0x50>
 800c3ac:	42a3      	cmp	r3, r4
 800c3ae:	d9fa      	bls.n	800c3a6 <_free_r+0x46>
 800c3b0:	6811      	ldr	r1, [r2, #0]
 800c3b2:	1855      	adds	r5, r2, r1
 800c3b4:	42a5      	cmp	r5, r4
 800c3b6:	d10b      	bne.n	800c3d0 <_free_r+0x70>
 800c3b8:	6824      	ldr	r4, [r4, #0]
 800c3ba:	4421      	add	r1, r4
 800c3bc:	1854      	adds	r4, r2, r1
 800c3be:	42a3      	cmp	r3, r4
 800c3c0:	6011      	str	r1, [r2, #0]
 800c3c2:	d1e0      	bne.n	800c386 <_free_r+0x26>
 800c3c4:	681c      	ldr	r4, [r3, #0]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	6053      	str	r3, [r2, #4]
 800c3ca:	440c      	add	r4, r1
 800c3cc:	6014      	str	r4, [r2, #0]
 800c3ce:	e7da      	b.n	800c386 <_free_r+0x26>
 800c3d0:	d902      	bls.n	800c3d8 <_free_r+0x78>
 800c3d2:	230c      	movs	r3, #12
 800c3d4:	6003      	str	r3, [r0, #0]
 800c3d6:	e7d6      	b.n	800c386 <_free_r+0x26>
 800c3d8:	6825      	ldr	r5, [r4, #0]
 800c3da:	1961      	adds	r1, r4, r5
 800c3dc:	428b      	cmp	r3, r1
 800c3de:	bf04      	itt	eq
 800c3e0:	6819      	ldreq	r1, [r3, #0]
 800c3e2:	685b      	ldreq	r3, [r3, #4]
 800c3e4:	6063      	str	r3, [r4, #4]
 800c3e6:	bf04      	itt	eq
 800c3e8:	1949      	addeq	r1, r1, r5
 800c3ea:	6021      	streq	r1, [r4, #0]
 800c3ec:	6054      	str	r4, [r2, #4]
 800c3ee:	e7ca      	b.n	800c386 <_free_r+0x26>
 800c3f0:	b003      	add	sp, #12
 800c3f2:	bd30      	pop	{r4, r5, pc}
 800c3f4:	20005314 	.word	0x20005314

0800c3f8 <sbrk_aligned>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	4e0e      	ldr	r6, [pc, #56]	; (800c434 <sbrk_aligned+0x3c>)
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	6831      	ldr	r1, [r6, #0]
 800c400:	4605      	mov	r5, r0
 800c402:	b911      	cbnz	r1, 800c40a <sbrk_aligned+0x12>
 800c404:	f000 fcbc 	bl	800cd80 <_sbrk_r>
 800c408:	6030      	str	r0, [r6, #0]
 800c40a:	4621      	mov	r1, r4
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 fcb7 	bl	800cd80 <_sbrk_r>
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	d00a      	beq.n	800c42c <sbrk_aligned+0x34>
 800c416:	1cc4      	adds	r4, r0, #3
 800c418:	f024 0403 	bic.w	r4, r4, #3
 800c41c:	42a0      	cmp	r0, r4
 800c41e:	d007      	beq.n	800c430 <sbrk_aligned+0x38>
 800c420:	1a21      	subs	r1, r4, r0
 800c422:	4628      	mov	r0, r5
 800c424:	f000 fcac 	bl	800cd80 <_sbrk_r>
 800c428:	3001      	adds	r0, #1
 800c42a:	d101      	bne.n	800c430 <sbrk_aligned+0x38>
 800c42c:	f04f 34ff 	mov.w	r4, #4294967295
 800c430:	4620      	mov	r0, r4
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	20005318 	.word	0x20005318

0800c438 <_malloc_r>:
 800c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c43c:	1ccd      	adds	r5, r1, #3
 800c43e:	f025 0503 	bic.w	r5, r5, #3
 800c442:	3508      	adds	r5, #8
 800c444:	2d0c      	cmp	r5, #12
 800c446:	bf38      	it	cc
 800c448:	250c      	movcc	r5, #12
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	4607      	mov	r7, r0
 800c44e:	db01      	blt.n	800c454 <_malloc_r+0x1c>
 800c450:	42a9      	cmp	r1, r5
 800c452:	d905      	bls.n	800c460 <_malloc_r+0x28>
 800c454:	230c      	movs	r3, #12
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	2600      	movs	r6, #0
 800c45a:	4630      	mov	r0, r6
 800c45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c460:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c534 <_malloc_r+0xfc>
 800c464:	f000 f868 	bl	800c538 <__malloc_lock>
 800c468:	f8d8 3000 	ldr.w	r3, [r8]
 800c46c:	461c      	mov	r4, r3
 800c46e:	bb5c      	cbnz	r4, 800c4c8 <_malloc_r+0x90>
 800c470:	4629      	mov	r1, r5
 800c472:	4638      	mov	r0, r7
 800c474:	f7ff ffc0 	bl	800c3f8 <sbrk_aligned>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	4604      	mov	r4, r0
 800c47c:	d155      	bne.n	800c52a <_malloc_r+0xf2>
 800c47e:	f8d8 4000 	ldr.w	r4, [r8]
 800c482:	4626      	mov	r6, r4
 800c484:	2e00      	cmp	r6, #0
 800c486:	d145      	bne.n	800c514 <_malloc_r+0xdc>
 800c488:	2c00      	cmp	r4, #0
 800c48a:	d048      	beq.n	800c51e <_malloc_r+0xe6>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	4631      	mov	r1, r6
 800c490:	4638      	mov	r0, r7
 800c492:	eb04 0903 	add.w	r9, r4, r3
 800c496:	f000 fc73 	bl	800cd80 <_sbrk_r>
 800c49a:	4581      	cmp	r9, r0
 800c49c:	d13f      	bne.n	800c51e <_malloc_r+0xe6>
 800c49e:	6821      	ldr	r1, [r4, #0]
 800c4a0:	1a6d      	subs	r5, r5, r1
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	f7ff ffa7 	bl	800c3f8 <sbrk_aligned>
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	d037      	beq.n	800c51e <_malloc_r+0xe6>
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	442b      	add	r3, r5
 800c4b2:	6023      	str	r3, [r4, #0]
 800c4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d038      	beq.n	800c52e <_malloc_r+0xf6>
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	42a2      	cmp	r2, r4
 800c4c0:	d12b      	bne.n	800c51a <_malloc_r+0xe2>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	605a      	str	r2, [r3, #4]
 800c4c6:	e00f      	b.n	800c4e8 <_malloc_r+0xb0>
 800c4c8:	6822      	ldr	r2, [r4, #0]
 800c4ca:	1b52      	subs	r2, r2, r5
 800c4cc:	d41f      	bmi.n	800c50e <_malloc_r+0xd6>
 800c4ce:	2a0b      	cmp	r2, #11
 800c4d0:	d917      	bls.n	800c502 <_malloc_r+0xca>
 800c4d2:	1961      	adds	r1, r4, r5
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	6025      	str	r5, [r4, #0]
 800c4d8:	bf18      	it	ne
 800c4da:	6059      	strne	r1, [r3, #4]
 800c4dc:	6863      	ldr	r3, [r4, #4]
 800c4de:	bf08      	it	eq
 800c4e0:	f8c8 1000 	streq.w	r1, [r8]
 800c4e4:	5162      	str	r2, [r4, r5]
 800c4e6:	604b      	str	r3, [r1, #4]
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f104 060b 	add.w	r6, r4, #11
 800c4ee:	f000 f829 	bl	800c544 <__malloc_unlock>
 800c4f2:	f026 0607 	bic.w	r6, r6, #7
 800c4f6:	1d23      	adds	r3, r4, #4
 800c4f8:	1af2      	subs	r2, r6, r3
 800c4fa:	d0ae      	beq.n	800c45a <_malloc_r+0x22>
 800c4fc:	1b9b      	subs	r3, r3, r6
 800c4fe:	50a3      	str	r3, [r4, r2]
 800c500:	e7ab      	b.n	800c45a <_malloc_r+0x22>
 800c502:	42a3      	cmp	r3, r4
 800c504:	6862      	ldr	r2, [r4, #4]
 800c506:	d1dd      	bne.n	800c4c4 <_malloc_r+0x8c>
 800c508:	f8c8 2000 	str.w	r2, [r8]
 800c50c:	e7ec      	b.n	800c4e8 <_malloc_r+0xb0>
 800c50e:	4623      	mov	r3, r4
 800c510:	6864      	ldr	r4, [r4, #4]
 800c512:	e7ac      	b.n	800c46e <_malloc_r+0x36>
 800c514:	4634      	mov	r4, r6
 800c516:	6876      	ldr	r6, [r6, #4]
 800c518:	e7b4      	b.n	800c484 <_malloc_r+0x4c>
 800c51a:	4613      	mov	r3, r2
 800c51c:	e7cc      	b.n	800c4b8 <_malloc_r+0x80>
 800c51e:	230c      	movs	r3, #12
 800c520:	603b      	str	r3, [r7, #0]
 800c522:	4638      	mov	r0, r7
 800c524:	f000 f80e 	bl	800c544 <__malloc_unlock>
 800c528:	e797      	b.n	800c45a <_malloc_r+0x22>
 800c52a:	6025      	str	r5, [r4, #0]
 800c52c:	e7dc      	b.n	800c4e8 <_malloc_r+0xb0>
 800c52e:	605b      	str	r3, [r3, #4]
 800c530:	deff      	udf	#255	; 0xff
 800c532:	bf00      	nop
 800c534:	20005314 	.word	0x20005314

0800c538 <__malloc_lock>:
 800c538:	4801      	ldr	r0, [pc, #4]	; (800c540 <__malloc_lock+0x8>)
 800c53a:	f7ff bf01 	b.w	800c340 <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	20005310 	.word	0x20005310

0800c544 <__malloc_unlock>:
 800c544:	4801      	ldr	r0, [pc, #4]	; (800c54c <__malloc_unlock+0x8>)
 800c546:	f7ff befc 	b.w	800c342 <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	20005310 	.word	0x20005310

0800c550 <__sfputc_r>:
 800c550:	6893      	ldr	r3, [r2, #8]
 800c552:	3b01      	subs	r3, #1
 800c554:	2b00      	cmp	r3, #0
 800c556:	b410      	push	{r4}
 800c558:	6093      	str	r3, [r2, #8]
 800c55a:	da08      	bge.n	800c56e <__sfputc_r+0x1e>
 800c55c:	6994      	ldr	r4, [r2, #24]
 800c55e:	42a3      	cmp	r3, r4
 800c560:	db01      	blt.n	800c566 <__sfputc_r+0x16>
 800c562:	290a      	cmp	r1, #10
 800c564:	d103      	bne.n	800c56e <__sfputc_r+0x1e>
 800c566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56a:	f000 bb73 	b.w	800cc54 <__swbuf_r>
 800c56e:	6813      	ldr	r3, [r2, #0]
 800c570:	1c58      	adds	r0, r3, #1
 800c572:	6010      	str	r0, [r2, #0]
 800c574:	7019      	strb	r1, [r3, #0]
 800c576:	4608      	mov	r0, r1
 800c578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <__sfputs_r>:
 800c57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c580:	4606      	mov	r6, r0
 800c582:	460f      	mov	r7, r1
 800c584:	4614      	mov	r4, r2
 800c586:	18d5      	adds	r5, r2, r3
 800c588:	42ac      	cmp	r4, r5
 800c58a:	d101      	bne.n	800c590 <__sfputs_r+0x12>
 800c58c:	2000      	movs	r0, #0
 800c58e:	e007      	b.n	800c5a0 <__sfputs_r+0x22>
 800c590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c594:	463a      	mov	r2, r7
 800c596:	4630      	mov	r0, r6
 800c598:	f7ff ffda 	bl	800c550 <__sfputc_r>
 800c59c:	1c43      	adds	r3, r0, #1
 800c59e:	d1f3      	bne.n	800c588 <__sfputs_r+0xa>
 800c5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5a4 <_vfiprintf_r>:
 800c5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a8:	460d      	mov	r5, r1
 800c5aa:	b09d      	sub	sp, #116	; 0x74
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	4698      	mov	r8, r3
 800c5b0:	4606      	mov	r6, r0
 800c5b2:	b118      	cbz	r0, 800c5bc <_vfiprintf_r+0x18>
 800c5b4:	6a03      	ldr	r3, [r0, #32]
 800c5b6:	b90b      	cbnz	r3, 800c5bc <_vfiprintf_r+0x18>
 800c5b8:	f7ff fd5a 	bl	800c070 <__sinit>
 800c5bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5be:	07d9      	lsls	r1, r3, #31
 800c5c0:	d405      	bmi.n	800c5ce <_vfiprintf_r+0x2a>
 800c5c2:	89ab      	ldrh	r3, [r5, #12]
 800c5c4:	059a      	lsls	r2, r3, #22
 800c5c6:	d402      	bmi.n	800c5ce <_vfiprintf_r+0x2a>
 800c5c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ca:	f7ff feb9 	bl	800c340 <__retarget_lock_acquire_recursive>
 800c5ce:	89ab      	ldrh	r3, [r5, #12]
 800c5d0:	071b      	lsls	r3, r3, #28
 800c5d2:	d501      	bpl.n	800c5d8 <_vfiprintf_r+0x34>
 800c5d4:	692b      	ldr	r3, [r5, #16]
 800c5d6:	b99b      	cbnz	r3, 800c600 <_vfiprintf_r+0x5c>
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f000 fb78 	bl	800ccd0 <__swsetup_r>
 800c5e0:	b170      	cbz	r0, 800c600 <_vfiprintf_r+0x5c>
 800c5e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5e4:	07dc      	lsls	r4, r3, #31
 800c5e6:	d504      	bpl.n	800c5f2 <_vfiprintf_r+0x4e>
 800c5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ec:	b01d      	add	sp, #116	; 0x74
 800c5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	0598      	lsls	r0, r3, #22
 800c5f6:	d4f7      	bmi.n	800c5e8 <_vfiprintf_r+0x44>
 800c5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5fa:	f7ff fea2 	bl	800c342 <__retarget_lock_release_recursive>
 800c5fe:	e7f3      	b.n	800c5e8 <_vfiprintf_r+0x44>
 800c600:	2300      	movs	r3, #0
 800c602:	9309      	str	r3, [sp, #36]	; 0x24
 800c604:	2320      	movs	r3, #32
 800c606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c60a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c60e:	2330      	movs	r3, #48	; 0x30
 800c610:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7c4 <_vfiprintf_r+0x220>
 800c614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c618:	f04f 0901 	mov.w	r9, #1
 800c61c:	4623      	mov	r3, r4
 800c61e:	469a      	mov	sl, r3
 800c620:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c624:	b10a      	cbz	r2, 800c62a <_vfiprintf_r+0x86>
 800c626:	2a25      	cmp	r2, #37	; 0x25
 800c628:	d1f9      	bne.n	800c61e <_vfiprintf_r+0x7a>
 800c62a:	ebba 0b04 	subs.w	fp, sl, r4
 800c62e:	d00b      	beq.n	800c648 <_vfiprintf_r+0xa4>
 800c630:	465b      	mov	r3, fp
 800c632:	4622      	mov	r2, r4
 800c634:	4629      	mov	r1, r5
 800c636:	4630      	mov	r0, r6
 800c638:	f7ff ffa1 	bl	800c57e <__sfputs_r>
 800c63c:	3001      	adds	r0, #1
 800c63e:	f000 80a9 	beq.w	800c794 <_vfiprintf_r+0x1f0>
 800c642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c644:	445a      	add	r2, fp
 800c646:	9209      	str	r2, [sp, #36]	; 0x24
 800c648:	f89a 3000 	ldrb.w	r3, [sl]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f000 80a1 	beq.w	800c794 <_vfiprintf_r+0x1f0>
 800c652:	2300      	movs	r3, #0
 800c654:	f04f 32ff 	mov.w	r2, #4294967295
 800c658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c65c:	f10a 0a01 	add.w	sl, sl, #1
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	9307      	str	r3, [sp, #28]
 800c664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c668:	931a      	str	r3, [sp, #104]	; 0x68
 800c66a:	4654      	mov	r4, sl
 800c66c:	2205      	movs	r2, #5
 800c66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c672:	4854      	ldr	r0, [pc, #336]	; (800c7c4 <_vfiprintf_r+0x220>)
 800c674:	f7f3 fde4 	bl	8000240 <memchr>
 800c678:	9a04      	ldr	r2, [sp, #16]
 800c67a:	b9d8      	cbnz	r0, 800c6b4 <_vfiprintf_r+0x110>
 800c67c:	06d1      	lsls	r1, r2, #27
 800c67e:	bf44      	itt	mi
 800c680:	2320      	movmi	r3, #32
 800c682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c686:	0713      	lsls	r3, r2, #28
 800c688:	bf44      	itt	mi
 800c68a:	232b      	movmi	r3, #43	; 0x2b
 800c68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c690:	f89a 3000 	ldrb.w	r3, [sl]
 800c694:	2b2a      	cmp	r3, #42	; 0x2a
 800c696:	d015      	beq.n	800c6c4 <_vfiprintf_r+0x120>
 800c698:	9a07      	ldr	r2, [sp, #28]
 800c69a:	4654      	mov	r4, sl
 800c69c:	2000      	movs	r0, #0
 800c69e:	f04f 0c0a 	mov.w	ip, #10
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6a8:	3b30      	subs	r3, #48	; 0x30
 800c6aa:	2b09      	cmp	r3, #9
 800c6ac:	d94d      	bls.n	800c74a <_vfiprintf_r+0x1a6>
 800c6ae:	b1b0      	cbz	r0, 800c6de <_vfiprintf_r+0x13a>
 800c6b0:	9207      	str	r2, [sp, #28]
 800c6b2:	e014      	b.n	800c6de <_vfiprintf_r+0x13a>
 800c6b4:	eba0 0308 	sub.w	r3, r0, r8
 800c6b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	9304      	str	r3, [sp, #16]
 800c6c0:	46a2      	mov	sl, r4
 800c6c2:	e7d2      	b.n	800c66a <_vfiprintf_r+0xc6>
 800c6c4:	9b03      	ldr	r3, [sp, #12]
 800c6c6:	1d19      	adds	r1, r3, #4
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	9103      	str	r1, [sp, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfbb      	ittet	lt
 800c6d0:	425b      	neglt	r3, r3
 800c6d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6d6:	9307      	strge	r3, [sp, #28]
 800c6d8:	9307      	strlt	r3, [sp, #28]
 800c6da:	bfb8      	it	lt
 800c6dc:	9204      	strlt	r2, [sp, #16]
 800c6de:	7823      	ldrb	r3, [r4, #0]
 800c6e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6e2:	d10c      	bne.n	800c6fe <_vfiprintf_r+0x15a>
 800c6e4:	7863      	ldrb	r3, [r4, #1]
 800c6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e8:	d134      	bne.n	800c754 <_vfiprintf_r+0x1b0>
 800c6ea:	9b03      	ldr	r3, [sp, #12]
 800c6ec:	1d1a      	adds	r2, r3, #4
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	9203      	str	r2, [sp, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bfb8      	it	lt
 800c6f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6fa:	3402      	adds	r4, #2
 800c6fc:	9305      	str	r3, [sp, #20]
 800c6fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7d4 <_vfiprintf_r+0x230>
 800c702:	7821      	ldrb	r1, [r4, #0]
 800c704:	2203      	movs	r2, #3
 800c706:	4650      	mov	r0, sl
 800c708:	f7f3 fd9a 	bl	8000240 <memchr>
 800c70c:	b138      	cbz	r0, 800c71e <_vfiprintf_r+0x17a>
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	eba0 000a 	sub.w	r0, r0, sl
 800c714:	2240      	movs	r2, #64	; 0x40
 800c716:	4082      	lsls	r2, r0
 800c718:	4313      	orrs	r3, r2
 800c71a:	3401      	adds	r4, #1
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c722:	4829      	ldr	r0, [pc, #164]	; (800c7c8 <_vfiprintf_r+0x224>)
 800c724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c728:	2206      	movs	r2, #6
 800c72a:	f7f3 fd89 	bl	8000240 <memchr>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d03f      	beq.n	800c7b2 <_vfiprintf_r+0x20e>
 800c732:	4b26      	ldr	r3, [pc, #152]	; (800c7cc <_vfiprintf_r+0x228>)
 800c734:	bb1b      	cbnz	r3, 800c77e <_vfiprintf_r+0x1da>
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	3307      	adds	r3, #7
 800c73a:	f023 0307 	bic.w	r3, r3, #7
 800c73e:	3308      	adds	r3, #8
 800c740:	9303      	str	r3, [sp, #12]
 800c742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c744:	443b      	add	r3, r7
 800c746:	9309      	str	r3, [sp, #36]	; 0x24
 800c748:	e768      	b.n	800c61c <_vfiprintf_r+0x78>
 800c74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c74e:	460c      	mov	r4, r1
 800c750:	2001      	movs	r0, #1
 800c752:	e7a6      	b.n	800c6a2 <_vfiprintf_r+0xfe>
 800c754:	2300      	movs	r3, #0
 800c756:	3401      	adds	r4, #1
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	4619      	mov	r1, r3
 800c75c:	f04f 0c0a 	mov.w	ip, #10
 800c760:	4620      	mov	r0, r4
 800c762:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c766:	3a30      	subs	r2, #48	; 0x30
 800c768:	2a09      	cmp	r2, #9
 800c76a:	d903      	bls.n	800c774 <_vfiprintf_r+0x1d0>
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d0c6      	beq.n	800c6fe <_vfiprintf_r+0x15a>
 800c770:	9105      	str	r1, [sp, #20]
 800c772:	e7c4      	b.n	800c6fe <_vfiprintf_r+0x15a>
 800c774:	fb0c 2101 	mla	r1, ip, r1, r2
 800c778:	4604      	mov	r4, r0
 800c77a:	2301      	movs	r3, #1
 800c77c:	e7f0      	b.n	800c760 <_vfiprintf_r+0x1bc>
 800c77e:	ab03      	add	r3, sp, #12
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	462a      	mov	r2, r5
 800c784:	4b12      	ldr	r3, [pc, #72]	; (800c7d0 <_vfiprintf_r+0x22c>)
 800c786:	a904      	add	r1, sp, #16
 800c788:	4630      	mov	r0, r6
 800c78a:	f3af 8000 	nop.w
 800c78e:	4607      	mov	r7, r0
 800c790:	1c78      	adds	r0, r7, #1
 800c792:	d1d6      	bne.n	800c742 <_vfiprintf_r+0x19e>
 800c794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c796:	07d9      	lsls	r1, r3, #31
 800c798:	d405      	bmi.n	800c7a6 <_vfiprintf_r+0x202>
 800c79a:	89ab      	ldrh	r3, [r5, #12]
 800c79c:	059a      	lsls	r2, r3, #22
 800c79e:	d402      	bmi.n	800c7a6 <_vfiprintf_r+0x202>
 800c7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7a2:	f7ff fdce 	bl	800c342 <__retarget_lock_release_recursive>
 800c7a6:	89ab      	ldrh	r3, [r5, #12]
 800c7a8:	065b      	lsls	r3, r3, #25
 800c7aa:	f53f af1d 	bmi.w	800c5e8 <_vfiprintf_r+0x44>
 800c7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7b0:	e71c      	b.n	800c5ec <_vfiprintf_r+0x48>
 800c7b2:	ab03      	add	r3, sp, #12
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	4b05      	ldr	r3, [pc, #20]	; (800c7d0 <_vfiprintf_r+0x22c>)
 800c7ba:	a904      	add	r1, sp, #16
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f000 f879 	bl	800c8b4 <_printf_i>
 800c7c2:	e7e4      	b.n	800c78e <_vfiprintf_r+0x1ea>
 800c7c4:	0800e8a0 	.word	0x0800e8a0
 800c7c8:	0800e8aa 	.word	0x0800e8aa
 800c7cc:	00000000 	.word	0x00000000
 800c7d0:	0800c57f 	.word	0x0800c57f
 800c7d4:	0800e8a6 	.word	0x0800e8a6

0800c7d8 <_printf_common>:
 800c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7dc:	4616      	mov	r6, r2
 800c7de:	4699      	mov	r9, r3
 800c7e0:	688a      	ldr	r2, [r1, #8]
 800c7e2:	690b      	ldr	r3, [r1, #16]
 800c7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	bfb8      	it	lt
 800c7ec:	4613      	movlt	r3, r2
 800c7ee:	6033      	str	r3, [r6, #0]
 800c7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7f4:	4607      	mov	r7, r0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	b10a      	cbz	r2, 800c7fe <_printf_common+0x26>
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	6033      	str	r3, [r6, #0]
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	0699      	lsls	r1, r3, #26
 800c802:	bf42      	ittt	mi
 800c804:	6833      	ldrmi	r3, [r6, #0]
 800c806:	3302      	addmi	r3, #2
 800c808:	6033      	strmi	r3, [r6, #0]
 800c80a:	6825      	ldr	r5, [r4, #0]
 800c80c:	f015 0506 	ands.w	r5, r5, #6
 800c810:	d106      	bne.n	800c820 <_printf_common+0x48>
 800c812:	f104 0a19 	add.w	sl, r4, #25
 800c816:	68e3      	ldr	r3, [r4, #12]
 800c818:	6832      	ldr	r2, [r6, #0]
 800c81a:	1a9b      	subs	r3, r3, r2
 800c81c:	42ab      	cmp	r3, r5
 800c81e:	dc26      	bgt.n	800c86e <_printf_common+0x96>
 800c820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c824:	1e13      	subs	r3, r2, #0
 800c826:	6822      	ldr	r2, [r4, #0]
 800c828:	bf18      	it	ne
 800c82a:	2301      	movne	r3, #1
 800c82c:	0692      	lsls	r2, r2, #26
 800c82e:	d42b      	bmi.n	800c888 <_printf_common+0xb0>
 800c830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c834:	4649      	mov	r1, r9
 800c836:	4638      	mov	r0, r7
 800c838:	47c0      	blx	r8
 800c83a:	3001      	adds	r0, #1
 800c83c:	d01e      	beq.n	800c87c <_printf_common+0xa4>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	6922      	ldr	r2, [r4, #16]
 800c842:	f003 0306 	and.w	r3, r3, #6
 800c846:	2b04      	cmp	r3, #4
 800c848:	bf02      	ittt	eq
 800c84a:	68e5      	ldreq	r5, [r4, #12]
 800c84c:	6833      	ldreq	r3, [r6, #0]
 800c84e:	1aed      	subeq	r5, r5, r3
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	bf0c      	ite	eq
 800c854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c858:	2500      	movne	r5, #0
 800c85a:	4293      	cmp	r3, r2
 800c85c:	bfc4      	itt	gt
 800c85e:	1a9b      	subgt	r3, r3, r2
 800c860:	18ed      	addgt	r5, r5, r3
 800c862:	2600      	movs	r6, #0
 800c864:	341a      	adds	r4, #26
 800c866:	42b5      	cmp	r5, r6
 800c868:	d11a      	bne.n	800c8a0 <_printf_common+0xc8>
 800c86a:	2000      	movs	r0, #0
 800c86c:	e008      	b.n	800c880 <_printf_common+0xa8>
 800c86e:	2301      	movs	r3, #1
 800c870:	4652      	mov	r2, sl
 800c872:	4649      	mov	r1, r9
 800c874:	4638      	mov	r0, r7
 800c876:	47c0      	blx	r8
 800c878:	3001      	adds	r0, #1
 800c87a:	d103      	bne.n	800c884 <_printf_common+0xac>
 800c87c:	f04f 30ff 	mov.w	r0, #4294967295
 800c880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c884:	3501      	adds	r5, #1
 800c886:	e7c6      	b.n	800c816 <_printf_common+0x3e>
 800c888:	18e1      	adds	r1, r4, r3
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	2030      	movs	r0, #48	; 0x30
 800c88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c892:	4422      	add	r2, r4
 800c894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c89c:	3302      	adds	r3, #2
 800c89e:	e7c7      	b.n	800c830 <_printf_common+0x58>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	47c0      	blx	r8
 800c8aa:	3001      	adds	r0, #1
 800c8ac:	d0e6      	beq.n	800c87c <_printf_common+0xa4>
 800c8ae:	3601      	adds	r6, #1
 800c8b0:	e7d9      	b.n	800c866 <_printf_common+0x8e>
	...

0800c8b4 <_printf_i>:
 800c8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b8:	7e0f      	ldrb	r7, [r1, #24]
 800c8ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8bc:	2f78      	cmp	r7, #120	; 0x78
 800c8be:	4691      	mov	r9, r2
 800c8c0:	4680      	mov	r8, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	469a      	mov	sl, r3
 800c8c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8ca:	d807      	bhi.n	800c8dc <_printf_i+0x28>
 800c8cc:	2f62      	cmp	r7, #98	; 0x62
 800c8ce:	d80a      	bhi.n	800c8e6 <_printf_i+0x32>
 800c8d0:	2f00      	cmp	r7, #0
 800c8d2:	f000 80d4 	beq.w	800ca7e <_printf_i+0x1ca>
 800c8d6:	2f58      	cmp	r7, #88	; 0x58
 800c8d8:	f000 80c0 	beq.w	800ca5c <_printf_i+0x1a8>
 800c8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8e4:	e03a      	b.n	800c95c <_printf_i+0xa8>
 800c8e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8ea:	2b15      	cmp	r3, #21
 800c8ec:	d8f6      	bhi.n	800c8dc <_printf_i+0x28>
 800c8ee:	a101      	add	r1, pc, #4	; (adr r1, 800c8f4 <_printf_i+0x40>)
 800c8f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8f4:	0800c94d 	.word	0x0800c94d
 800c8f8:	0800c961 	.word	0x0800c961
 800c8fc:	0800c8dd 	.word	0x0800c8dd
 800c900:	0800c8dd 	.word	0x0800c8dd
 800c904:	0800c8dd 	.word	0x0800c8dd
 800c908:	0800c8dd 	.word	0x0800c8dd
 800c90c:	0800c961 	.word	0x0800c961
 800c910:	0800c8dd 	.word	0x0800c8dd
 800c914:	0800c8dd 	.word	0x0800c8dd
 800c918:	0800c8dd 	.word	0x0800c8dd
 800c91c:	0800c8dd 	.word	0x0800c8dd
 800c920:	0800ca65 	.word	0x0800ca65
 800c924:	0800c98d 	.word	0x0800c98d
 800c928:	0800ca1f 	.word	0x0800ca1f
 800c92c:	0800c8dd 	.word	0x0800c8dd
 800c930:	0800c8dd 	.word	0x0800c8dd
 800c934:	0800ca87 	.word	0x0800ca87
 800c938:	0800c8dd 	.word	0x0800c8dd
 800c93c:	0800c98d 	.word	0x0800c98d
 800c940:	0800c8dd 	.word	0x0800c8dd
 800c944:	0800c8dd 	.word	0x0800c8dd
 800c948:	0800ca27 	.word	0x0800ca27
 800c94c:	682b      	ldr	r3, [r5, #0]
 800c94e:	1d1a      	adds	r2, r3, #4
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	602a      	str	r2, [r5, #0]
 800c954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c95c:	2301      	movs	r3, #1
 800c95e:	e09f      	b.n	800caa0 <_printf_i+0x1ec>
 800c960:	6820      	ldr	r0, [r4, #0]
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	0607      	lsls	r7, r0, #24
 800c966:	f103 0104 	add.w	r1, r3, #4
 800c96a:	6029      	str	r1, [r5, #0]
 800c96c:	d501      	bpl.n	800c972 <_printf_i+0xbe>
 800c96e:	681e      	ldr	r6, [r3, #0]
 800c970:	e003      	b.n	800c97a <_printf_i+0xc6>
 800c972:	0646      	lsls	r6, r0, #25
 800c974:	d5fb      	bpl.n	800c96e <_printf_i+0xba>
 800c976:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c97a:	2e00      	cmp	r6, #0
 800c97c:	da03      	bge.n	800c986 <_printf_i+0xd2>
 800c97e:	232d      	movs	r3, #45	; 0x2d
 800c980:	4276      	negs	r6, r6
 800c982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c986:	485a      	ldr	r0, [pc, #360]	; (800caf0 <_printf_i+0x23c>)
 800c988:	230a      	movs	r3, #10
 800c98a:	e012      	b.n	800c9b2 <_printf_i+0xfe>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	6820      	ldr	r0, [r4, #0]
 800c990:	1d19      	adds	r1, r3, #4
 800c992:	6029      	str	r1, [r5, #0]
 800c994:	0605      	lsls	r5, r0, #24
 800c996:	d501      	bpl.n	800c99c <_printf_i+0xe8>
 800c998:	681e      	ldr	r6, [r3, #0]
 800c99a:	e002      	b.n	800c9a2 <_printf_i+0xee>
 800c99c:	0641      	lsls	r1, r0, #25
 800c99e:	d5fb      	bpl.n	800c998 <_printf_i+0xe4>
 800c9a0:	881e      	ldrh	r6, [r3, #0]
 800c9a2:	4853      	ldr	r0, [pc, #332]	; (800caf0 <_printf_i+0x23c>)
 800c9a4:	2f6f      	cmp	r7, #111	; 0x6f
 800c9a6:	bf0c      	ite	eq
 800c9a8:	2308      	moveq	r3, #8
 800c9aa:	230a      	movne	r3, #10
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9b2:	6865      	ldr	r5, [r4, #4]
 800c9b4:	60a5      	str	r5, [r4, #8]
 800c9b6:	2d00      	cmp	r5, #0
 800c9b8:	bfa2      	ittt	ge
 800c9ba:	6821      	ldrge	r1, [r4, #0]
 800c9bc:	f021 0104 	bicge.w	r1, r1, #4
 800c9c0:	6021      	strge	r1, [r4, #0]
 800c9c2:	b90e      	cbnz	r6, 800c9c8 <_printf_i+0x114>
 800c9c4:	2d00      	cmp	r5, #0
 800c9c6:	d04b      	beq.n	800ca60 <_printf_i+0x1ac>
 800c9c8:	4615      	mov	r5, r2
 800c9ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9ce:	fb03 6711 	mls	r7, r3, r1, r6
 800c9d2:	5dc7      	ldrb	r7, [r0, r7]
 800c9d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9d8:	4637      	mov	r7, r6
 800c9da:	42bb      	cmp	r3, r7
 800c9dc:	460e      	mov	r6, r1
 800c9de:	d9f4      	bls.n	800c9ca <_printf_i+0x116>
 800c9e0:	2b08      	cmp	r3, #8
 800c9e2:	d10b      	bne.n	800c9fc <_printf_i+0x148>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	07de      	lsls	r6, r3, #31
 800c9e8:	d508      	bpl.n	800c9fc <_printf_i+0x148>
 800c9ea:	6923      	ldr	r3, [r4, #16]
 800c9ec:	6861      	ldr	r1, [r4, #4]
 800c9ee:	4299      	cmp	r1, r3
 800c9f0:	bfde      	ittt	le
 800c9f2:	2330      	movle	r3, #48	; 0x30
 800c9f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9fc:	1b52      	subs	r2, r2, r5
 800c9fe:	6122      	str	r2, [r4, #16]
 800ca00:	f8cd a000 	str.w	sl, [sp]
 800ca04:	464b      	mov	r3, r9
 800ca06:	aa03      	add	r2, sp, #12
 800ca08:	4621      	mov	r1, r4
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	f7ff fee4 	bl	800c7d8 <_printf_common>
 800ca10:	3001      	adds	r0, #1
 800ca12:	d14a      	bne.n	800caaa <_printf_i+0x1f6>
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
 800ca18:	b004      	add	sp, #16
 800ca1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	f043 0320 	orr.w	r3, r3, #32
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	4833      	ldr	r0, [pc, #204]	; (800caf4 <_printf_i+0x240>)
 800ca28:	2778      	movs	r7, #120	; 0x78
 800ca2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	6829      	ldr	r1, [r5, #0]
 800ca32:	061f      	lsls	r7, r3, #24
 800ca34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca38:	d402      	bmi.n	800ca40 <_printf_i+0x18c>
 800ca3a:	065f      	lsls	r7, r3, #25
 800ca3c:	bf48      	it	mi
 800ca3e:	b2b6      	uxthmi	r6, r6
 800ca40:	07df      	lsls	r7, r3, #31
 800ca42:	bf48      	it	mi
 800ca44:	f043 0320 	orrmi.w	r3, r3, #32
 800ca48:	6029      	str	r1, [r5, #0]
 800ca4a:	bf48      	it	mi
 800ca4c:	6023      	strmi	r3, [r4, #0]
 800ca4e:	b91e      	cbnz	r6, 800ca58 <_printf_i+0x1a4>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	f023 0320 	bic.w	r3, r3, #32
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	2310      	movs	r3, #16
 800ca5a:	e7a7      	b.n	800c9ac <_printf_i+0xf8>
 800ca5c:	4824      	ldr	r0, [pc, #144]	; (800caf0 <_printf_i+0x23c>)
 800ca5e:	e7e4      	b.n	800ca2a <_printf_i+0x176>
 800ca60:	4615      	mov	r5, r2
 800ca62:	e7bd      	b.n	800c9e0 <_printf_i+0x12c>
 800ca64:	682b      	ldr	r3, [r5, #0]
 800ca66:	6826      	ldr	r6, [r4, #0]
 800ca68:	6961      	ldr	r1, [r4, #20]
 800ca6a:	1d18      	adds	r0, r3, #4
 800ca6c:	6028      	str	r0, [r5, #0]
 800ca6e:	0635      	lsls	r5, r6, #24
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	d501      	bpl.n	800ca78 <_printf_i+0x1c4>
 800ca74:	6019      	str	r1, [r3, #0]
 800ca76:	e002      	b.n	800ca7e <_printf_i+0x1ca>
 800ca78:	0670      	lsls	r0, r6, #25
 800ca7a:	d5fb      	bpl.n	800ca74 <_printf_i+0x1c0>
 800ca7c:	8019      	strh	r1, [r3, #0]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	6123      	str	r3, [r4, #16]
 800ca82:	4615      	mov	r5, r2
 800ca84:	e7bc      	b.n	800ca00 <_printf_i+0x14c>
 800ca86:	682b      	ldr	r3, [r5, #0]
 800ca88:	1d1a      	adds	r2, r3, #4
 800ca8a:	602a      	str	r2, [r5, #0]
 800ca8c:	681d      	ldr	r5, [r3, #0]
 800ca8e:	6862      	ldr	r2, [r4, #4]
 800ca90:	2100      	movs	r1, #0
 800ca92:	4628      	mov	r0, r5
 800ca94:	f7f3 fbd4 	bl	8000240 <memchr>
 800ca98:	b108      	cbz	r0, 800ca9e <_printf_i+0x1ea>
 800ca9a:	1b40      	subs	r0, r0, r5
 800ca9c:	6060      	str	r0, [r4, #4]
 800ca9e:	6863      	ldr	r3, [r4, #4]
 800caa0:	6123      	str	r3, [r4, #16]
 800caa2:	2300      	movs	r3, #0
 800caa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caa8:	e7aa      	b.n	800ca00 <_printf_i+0x14c>
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	462a      	mov	r2, r5
 800caae:	4649      	mov	r1, r9
 800cab0:	4640      	mov	r0, r8
 800cab2:	47d0      	blx	sl
 800cab4:	3001      	adds	r0, #1
 800cab6:	d0ad      	beq.n	800ca14 <_printf_i+0x160>
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	079b      	lsls	r3, r3, #30
 800cabc:	d413      	bmi.n	800cae6 <_printf_i+0x232>
 800cabe:	68e0      	ldr	r0, [r4, #12]
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	4298      	cmp	r0, r3
 800cac4:	bfb8      	it	lt
 800cac6:	4618      	movlt	r0, r3
 800cac8:	e7a6      	b.n	800ca18 <_printf_i+0x164>
 800caca:	2301      	movs	r3, #1
 800cacc:	4632      	mov	r2, r6
 800cace:	4649      	mov	r1, r9
 800cad0:	4640      	mov	r0, r8
 800cad2:	47d0      	blx	sl
 800cad4:	3001      	adds	r0, #1
 800cad6:	d09d      	beq.n	800ca14 <_printf_i+0x160>
 800cad8:	3501      	adds	r5, #1
 800cada:	68e3      	ldr	r3, [r4, #12]
 800cadc:	9903      	ldr	r1, [sp, #12]
 800cade:	1a5b      	subs	r3, r3, r1
 800cae0:	42ab      	cmp	r3, r5
 800cae2:	dcf2      	bgt.n	800caca <_printf_i+0x216>
 800cae4:	e7eb      	b.n	800cabe <_printf_i+0x20a>
 800cae6:	2500      	movs	r5, #0
 800cae8:	f104 0619 	add.w	r6, r4, #25
 800caec:	e7f5      	b.n	800cada <_printf_i+0x226>
 800caee:	bf00      	nop
 800caf0:	0800e8b1 	.word	0x0800e8b1
 800caf4:	0800e8c2 	.word	0x0800e8c2

0800caf8 <__sflush_r>:
 800caf8:	898a      	ldrh	r2, [r1, #12]
 800cafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafe:	4605      	mov	r5, r0
 800cb00:	0710      	lsls	r0, r2, #28
 800cb02:	460c      	mov	r4, r1
 800cb04:	d458      	bmi.n	800cbb8 <__sflush_r+0xc0>
 800cb06:	684b      	ldr	r3, [r1, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dc05      	bgt.n	800cb18 <__sflush_r+0x20>
 800cb0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dc02      	bgt.n	800cb18 <__sflush_r+0x20>
 800cb12:	2000      	movs	r0, #0
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb1a:	2e00      	cmp	r6, #0
 800cb1c:	d0f9      	beq.n	800cb12 <__sflush_r+0x1a>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb24:	682f      	ldr	r7, [r5, #0]
 800cb26:	6a21      	ldr	r1, [r4, #32]
 800cb28:	602b      	str	r3, [r5, #0]
 800cb2a:	d032      	beq.n	800cb92 <__sflush_r+0x9a>
 800cb2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	075a      	lsls	r2, r3, #29
 800cb32:	d505      	bpl.n	800cb40 <__sflush_r+0x48>
 800cb34:	6863      	ldr	r3, [r4, #4]
 800cb36:	1ac0      	subs	r0, r0, r3
 800cb38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb3a:	b10b      	cbz	r3, 800cb40 <__sflush_r+0x48>
 800cb3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb3e:	1ac0      	subs	r0, r0, r3
 800cb40:	2300      	movs	r3, #0
 800cb42:	4602      	mov	r2, r0
 800cb44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb46:	6a21      	ldr	r1, [r4, #32]
 800cb48:	4628      	mov	r0, r5
 800cb4a:	47b0      	blx	r6
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	d106      	bne.n	800cb60 <__sflush_r+0x68>
 800cb52:	6829      	ldr	r1, [r5, #0]
 800cb54:	291d      	cmp	r1, #29
 800cb56:	d82b      	bhi.n	800cbb0 <__sflush_r+0xb8>
 800cb58:	4a29      	ldr	r2, [pc, #164]	; (800cc00 <__sflush_r+0x108>)
 800cb5a:	410a      	asrs	r2, r1
 800cb5c:	07d6      	lsls	r6, r2, #31
 800cb5e:	d427      	bmi.n	800cbb0 <__sflush_r+0xb8>
 800cb60:	2200      	movs	r2, #0
 800cb62:	6062      	str	r2, [r4, #4]
 800cb64:	04d9      	lsls	r1, r3, #19
 800cb66:	6922      	ldr	r2, [r4, #16]
 800cb68:	6022      	str	r2, [r4, #0]
 800cb6a:	d504      	bpl.n	800cb76 <__sflush_r+0x7e>
 800cb6c:	1c42      	adds	r2, r0, #1
 800cb6e:	d101      	bne.n	800cb74 <__sflush_r+0x7c>
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	b903      	cbnz	r3, 800cb76 <__sflush_r+0x7e>
 800cb74:	6560      	str	r0, [r4, #84]	; 0x54
 800cb76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb78:	602f      	str	r7, [r5, #0]
 800cb7a:	2900      	cmp	r1, #0
 800cb7c:	d0c9      	beq.n	800cb12 <__sflush_r+0x1a>
 800cb7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb82:	4299      	cmp	r1, r3
 800cb84:	d002      	beq.n	800cb8c <__sflush_r+0x94>
 800cb86:	4628      	mov	r0, r5
 800cb88:	f7ff fbea 	bl	800c360 <_free_r>
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	6360      	str	r0, [r4, #52]	; 0x34
 800cb90:	e7c0      	b.n	800cb14 <__sflush_r+0x1c>
 800cb92:	2301      	movs	r3, #1
 800cb94:	4628      	mov	r0, r5
 800cb96:	47b0      	blx	r6
 800cb98:	1c41      	adds	r1, r0, #1
 800cb9a:	d1c8      	bne.n	800cb2e <__sflush_r+0x36>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0c5      	beq.n	800cb2e <__sflush_r+0x36>
 800cba2:	2b1d      	cmp	r3, #29
 800cba4:	d001      	beq.n	800cbaa <__sflush_r+0xb2>
 800cba6:	2b16      	cmp	r3, #22
 800cba8:	d101      	bne.n	800cbae <__sflush_r+0xb6>
 800cbaa:	602f      	str	r7, [r5, #0]
 800cbac:	e7b1      	b.n	800cb12 <__sflush_r+0x1a>
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	e7ad      	b.n	800cb14 <__sflush_r+0x1c>
 800cbb8:	690f      	ldr	r7, [r1, #16]
 800cbba:	2f00      	cmp	r7, #0
 800cbbc:	d0a9      	beq.n	800cb12 <__sflush_r+0x1a>
 800cbbe:	0793      	lsls	r3, r2, #30
 800cbc0:	680e      	ldr	r6, [r1, #0]
 800cbc2:	bf08      	it	eq
 800cbc4:	694b      	ldreq	r3, [r1, #20]
 800cbc6:	600f      	str	r7, [r1, #0]
 800cbc8:	bf18      	it	ne
 800cbca:	2300      	movne	r3, #0
 800cbcc:	eba6 0807 	sub.w	r8, r6, r7
 800cbd0:	608b      	str	r3, [r1, #8]
 800cbd2:	f1b8 0f00 	cmp.w	r8, #0
 800cbd6:	dd9c      	ble.n	800cb12 <__sflush_r+0x1a>
 800cbd8:	6a21      	ldr	r1, [r4, #32]
 800cbda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbdc:	4643      	mov	r3, r8
 800cbde:	463a      	mov	r2, r7
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	47b0      	blx	r6
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	dc06      	bgt.n	800cbf6 <__sflush_r+0xfe>
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf4:	e78e      	b.n	800cb14 <__sflush_r+0x1c>
 800cbf6:	4407      	add	r7, r0
 800cbf8:	eba8 0800 	sub.w	r8, r8, r0
 800cbfc:	e7e9      	b.n	800cbd2 <__sflush_r+0xda>
 800cbfe:	bf00      	nop
 800cc00:	dfbffffe 	.word	0xdfbffffe

0800cc04 <_fflush_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	690b      	ldr	r3, [r1, #16]
 800cc08:	4605      	mov	r5, r0
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	b913      	cbnz	r3, 800cc14 <_fflush_r+0x10>
 800cc0e:	2500      	movs	r5, #0
 800cc10:	4628      	mov	r0, r5
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	b118      	cbz	r0, 800cc1e <_fflush_r+0x1a>
 800cc16:	6a03      	ldr	r3, [r0, #32]
 800cc18:	b90b      	cbnz	r3, 800cc1e <_fflush_r+0x1a>
 800cc1a:	f7ff fa29 	bl	800c070 <__sinit>
 800cc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d0f3      	beq.n	800cc0e <_fflush_r+0xa>
 800cc26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc28:	07d0      	lsls	r0, r2, #31
 800cc2a:	d404      	bmi.n	800cc36 <_fflush_r+0x32>
 800cc2c:	0599      	lsls	r1, r3, #22
 800cc2e:	d402      	bmi.n	800cc36 <_fflush_r+0x32>
 800cc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc32:	f7ff fb85 	bl	800c340 <__retarget_lock_acquire_recursive>
 800cc36:	4628      	mov	r0, r5
 800cc38:	4621      	mov	r1, r4
 800cc3a:	f7ff ff5d 	bl	800caf8 <__sflush_r>
 800cc3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc40:	07da      	lsls	r2, r3, #31
 800cc42:	4605      	mov	r5, r0
 800cc44:	d4e4      	bmi.n	800cc10 <_fflush_r+0xc>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	059b      	lsls	r3, r3, #22
 800cc4a:	d4e1      	bmi.n	800cc10 <_fflush_r+0xc>
 800cc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc4e:	f7ff fb78 	bl	800c342 <__retarget_lock_release_recursive>
 800cc52:	e7dd      	b.n	800cc10 <_fflush_r+0xc>

0800cc54 <__swbuf_r>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	460e      	mov	r6, r1
 800cc58:	4614      	mov	r4, r2
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	b118      	cbz	r0, 800cc66 <__swbuf_r+0x12>
 800cc5e:	6a03      	ldr	r3, [r0, #32]
 800cc60:	b90b      	cbnz	r3, 800cc66 <__swbuf_r+0x12>
 800cc62:	f7ff fa05 	bl	800c070 <__sinit>
 800cc66:	69a3      	ldr	r3, [r4, #24]
 800cc68:	60a3      	str	r3, [r4, #8]
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	071a      	lsls	r2, r3, #28
 800cc6e:	d525      	bpl.n	800ccbc <__swbuf_r+0x68>
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	b31b      	cbz	r3, 800ccbc <__swbuf_r+0x68>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	6922      	ldr	r2, [r4, #16]
 800cc78:	1a98      	subs	r0, r3, r2
 800cc7a:	6963      	ldr	r3, [r4, #20]
 800cc7c:	b2f6      	uxtb	r6, r6
 800cc7e:	4283      	cmp	r3, r0
 800cc80:	4637      	mov	r7, r6
 800cc82:	dc04      	bgt.n	800cc8e <__swbuf_r+0x3a>
 800cc84:	4621      	mov	r1, r4
 800cc86:	4628      	mov	r0, r5
 800cc88:	f7ff ffbc 	bl	800cc04 <_fflush_r>
 800cc8c:	b9e0      	cbnz	r0, 800ccc8 <__swbuf_r+0x74>
 800cc8e:	68a3      	ldr	r3, [r4, #8]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	60a3      	str	r3, [r4, #8]
 800cc94:	6823      	ldr	r3, [r4, #0]
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	6022      	str	r2, [r4, #0]
 800cc9a:	701e      	strb	r6, [r3, #0]
 800cc9c:	6962      	ldr	r2, [r4, #20]
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d004      	beq.n	800ccae <__swbuf_r+0x5a>
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	07db      	lsls	r3, r3, #31
 800cca8:	d506      	bpl.n	800ccb8 <__swbuf_r+0x64>
 800ccaa:	2e0a      	cmp	r6, #10
 800ccac:	d104      	bne.n	800ccb8 <__swbuf_r+0x64>
 800ccae:	4621      	mov	r1, r4
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	f7ff ffa7 	bl	800cc04 <_fflush_r>
 800ccb6:	b938      	cbnz	r0, 800ccc8 <__swbuf_r+0x74>
 800ccb8:	4638      	mov	r0, r7
 800ccba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f000 f806 	bl	800ccd0 <__swsetup_r>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d0d5      	beq.n	800cc74 <__swbuf_r+0x20>
 800ccc8:	f04f 37ff 	mov.w	r7, #4294967295
 800cccc:	e7f4      	b.n	800ccb8 <__swbuf_r+0x64>
	...

0800ccd0 <__swsetup_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4b2a      	ldr	r3, [pc, #168]	; (800cd7c <__swsetup_r+0xac>)
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	6818      	ldr	r0, [r3, #0]
 800ccd8:	460c      	mov	r4, r1
 800ccda:	b118      	cbz	r0, 800cce4 <__swsetup_r+0x14>
 800ccdc:	6a03      	ldr	r3, [r0, #32]
 800ccde:	b90b      	cbnz	r3, 800cce4 <__swsetup_r+0x14>
 800cce0:	f7ff f9c6 	bl	800c070 <__sinit>
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccea:	0718      	lsls	r0, r3, #28
 800ccec:	d422      	bmi.n	800cd34 <__swsetup_r+0x64>
 800ccee:	06d9      	lsls	r1, r3, #27
 800ccf0:	d407      	bmi.n	800cd02 <__swsetup_r+0x32>
 800ccf2:	2309      	movs	r3, #9
 800ccf4:	602b      	str	r3, [r5, #0]
 800ccf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccfa:	81a3      	strh	r3, [r4, #12]
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	e034      	b.n	800cd6c <__swsetup_r+0x9c>
 800cd02:	0758      	lsls	r0, r3, #29
 800cd04:	d512      	bpl.n	800cd2c <__swsetup_r+0x5c>
 800cd06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd08:	b141      	cbz	r1, 800cd1c <__swsetup_r+0x4c>
 800cd0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd0e:	4299      	cmp	r1, r3
 800cd10:	d002      	beq.n	800cd18 <__swsetup_r+0x48>
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7ff fb24 	bl	800c360 <_free_r>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	6363      	str	r3, [r4, #52]	; 0x34
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	2300      	movs	r3, #0
 800cd26:	6063      	str	r3, [r4, #4]
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	6023      	str	r3, [r4, #0]
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	f043 0308 	orr.w	r3, r3, #8
 800cd32:	81a3      	strh	r3, [r4, #12]
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	b94b      	cbnz	r3, 800cd4c <__swsetup_r+0x7c>
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd42:	d003      	beq.n	800cd4c <__swsetup_r+0x7c>
 800cd44:	4621      	mov	r1, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f000 f850 	bl	800cdec <__smakebuf_r>
 800cd4c:	89a0      	ldrh	r0, [r4, #12]
 800cd4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd52:	f010 0301 	ands.w	r3, r0, #1
 800cd56:	d00a      	beq.n	800cd6e <__swsetup_r+0x9e>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	60a3      	str	r3, [r4, #8]
 800cd5c:	6963      	ldr	r3, [r4, #20]
 800cd5e:	425b      	negs	r3, r3
 800cd60:	61a3      	str	r3, [r4, #24]
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	b943      	cbnz	r3, 800cd78 <__swsetup_r+0xa8>
 800cd66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd6a:	d1c4      	bne.n	800ccf6 <__swsetup_r+0x26>
 800cd6c:	bd38      	pop	{r3, r4, r5, pc}
 800cd6e:	0781      	lsls	r1, r0, #30
 800cd70:	bf58      	it	pl
 800cd72:	6963      	ldrpl	r3, [r4, #20]
 800cd74:	60a3      	str	r3, [r4, #8]
 800cd76:	e7f4      	b.n	800cd62 <__swsetup_r+0x92>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	e7f7      	b.n	800cd6c <__swsetup_r+0x9c>
 800cd7c:	200000bc 	.word	0x200000bc

0800cd80 <_sbrk_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4d06      	ldr	r5, [pc, #24]	; (800cd9c <_sbrk_r+0x1c>)
 800cd84:	2300      	movs	r3, #0
 800cd86:	4604      	mov	r4, r0
 800cd88:	4608      	mov	r0, r1
 800cd8a:	602b      	str	r3, [r5, #0]
 800cd8c:	f7f5 fc32 	bl	80025f4 <_sbrk>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d102      	bne.n	800cd9a <_sbrk_r+0x1a>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	b103      	cbz	r3, 800cd9a <_sbrk_r+0x1a>
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	bd38      	pop	{r3, r4, r5, pc}
 800cd9c:	2000530c 	.word	0x2000530c

0800cda0 <__swhatbuf_r>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	460c      	mov	r4, r1
 800cda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda8:	2900      	cmp	r1, #0
 800cdaa:	b096      	sub	sp, #88	; 0x58
 800cdac:	4615      	mov	r5, r2
 800cdae:	461e      	mov	r6, r3
 800cdb0:	da0d      	bge.n	800cdce <__swhatbuf_r+0x2e>
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdb8:	f04f 0100 	mov.w	r1, #0
 800cdbc:	bf0c      	ite	eq
 800cdbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdc2:	2340      	movne	r3, #64	; 0x40
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	6031      	str	r1, [r6, #0]
 800cdc8:	602b      	str	r3, [r5, #0]
 800cdca:	b016      	add	sp, #88	; 0x58
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	466a      	mov	r2, sp
 800cdd0:	f000 f848 	bl	800ce64 <_fstat_r>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	dbec      	blt.n	800cdb2 <__swhatbuf_r+0x12>
 800cdd8:	9901      	ldr	r1, [sp, #4]
 800cdda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cde2:	4259      	negs	r1, r3
 800cde4:	4159      	adcs	r1, r3
 800cde6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdea:	e7eb      	b.n	800cdc4 <__swhatbuf_r+0x24>

0800cdec <__smakebuf_r>:
 800cdec:	898b      	ldrh	r3, [r1, #12]
 800cdee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdf0:	079d      	lsls	r5, r3, #30
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	d507      	bpl.n	800ce08 <__smakebuf_r+0x1c>
 800cdf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	2301      	movs	r3, #1
 800ce02:	6163      	str	r3, [r4, #20]
 800ce04:	b002      	add	sp, #8
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	ab01      	add	r3, sp, #4
 800ce0a:	466a      	mov	r2, sp
 800ce0c:	f7ff ffc8 	bl	800cda0 <__swhatbuf_r>
 800ce10:	9900      	ldr	r1, [sp, #0]
 800ce12:	4605      	mov	r5, r0
 800ce14:	4630      	mov	r0, r6
 800ce16:	f7ff fb0f 	bl	800c438 <_malloc_r>
 800ce1a:	b948      	cbnz	r0, 800ce30 <__smakebuf_r+0x44>
 800ce1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce20:	059a      	lsls	r2, r3, #22
 800ce22:	d4ef      	bmi.n	800ce04 <__smakebuf_r+0x18>
 800ce24:	f023 0303 	bic.w	r3, r3, #3
 800ce28:	f043 0302 	orr.w	r3, r3, #2
 800ce2c:	81a3      	strh	r3, [r4, #12]
 800ce2e:	e7e3      	b.n	800cdf8 <__smakebuf_r+0xc>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	6020      	str	r0, [r4, #0]
 800ce34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	9b00      	ldr	r3, [sp, #0]
 800ce3c:	6163      	str	r3, [r4, #20]
 800ce3e:	9b01      	ldr	r3, [sp, #4]
 800ce40:	6120      	str	r0, [r4, #16]
 800ce42:	b15b      	cbz	r3, 800ce5c <__smakebuf_r+0x70>
 800ce44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f000 f81d 	bl	800ce88 <_isatty_r>
 800ce4e:	b128      	cbz	r0, 800ce5c <__smakebuf_r+0x70>
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	f043 0301 	orr.w	r3, r3, #1
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	431d      	orrs	r5, r3
 800ce60:	81a5      	strh	r5, [r4, #12]
 800ce62:	e7cf      	b.n	800ce04 <__smakebuf_r+0x18>

0800ce64 <_fstat_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4d07      	ldr	r5, [pc, #28]	; (800ce84 <_fstat_r+0x20>)
 800ce68:	2300      	movs	r3, #0
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	4608      	mov	r0, r1
 800ce6e:	4611      	mov	r1, r2
 800ce70:	602b      	str	r3, [r5, #0]
 800ce72:	f7f5 fb96 	bl	80025a2 <_fstat>
 800ce76:	1c43      	adds	r3, r0, #1
 800ce78:	d102      	bne.n	800ce80 <_fstat_r+0x1c>
 800ce7a:	682b      	ldr	r3, [r5, #0]
 800ce7c:	b103      	cbz	r3, 800ce80 <_fstat_r+0x1c>
 800ce7e:	6023      	str	r3, [r4, #0]
 800ce80:	bd38      	pop	{r3, r4, r5, pc}
 800ce82:	bf00      	nop
 800ce84:	2000530c 	.word	0x2000530c

0800ce88 <_isatty_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4d06      	ldr	r5, [pc, #24]	; (800cea4 <_isatty_r+0x1c>)
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	4604      	mov	r4, r0
 800ce90:	4608      	mov	r0, r1
 800ce92:	602b      	str	r3, [r5, #0]
 800ce94:	f7f5 fb95 	bl	80025c2 <_isatty>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d102      	bne.n	800cea2 <_isatty_r+0x1a>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	b103      	cbz	r3, 800cea2 <_isatty_r+0x1a>
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	2000530c 	.word	0x2000530c

0800cea8 <_init>:
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceaa:	bf00      	nop
 800ceac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceae:	bc08      	pop	{r3}
 800ceb0:	469e      	mov	lr, r3
 800ceb2:	4770      	bx	lr

0800ceb4 <_fini>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	bf00      	nop
 800ceb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceba:	bc08      	pop	{r3}
 800cebc:	469e      	mov	lr, r3
 800cebe:	4770      	bx	lr
