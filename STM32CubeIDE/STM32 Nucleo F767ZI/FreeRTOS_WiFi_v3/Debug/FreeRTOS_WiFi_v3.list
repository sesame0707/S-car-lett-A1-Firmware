
FreeRTOS_WiFi_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b40  08004b40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b48  08004b48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  08004bc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08004bc0  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afe1  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ece  00000000  00000000  0002b0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002cf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000654  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275f1  00000000  00000000  0002de34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c987  00000000  00000000  00055425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f16a0  00000000  00000000  00061dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024dc  00000000  00000000  0015344c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00155928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080043c8 	.word	0x080043c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080043c8 	.word	0x080043c8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <sizeofuser>:
userDetails user[maxnumberofusers];

int usernumber = 0;

int sizeofuser (userDetails *user)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	int size=0;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
	while (user[size].firstname[0] != '\0') size++;
 8000618:	e002      	b.n	8000620 <sizeofuser+0x14>
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	4613      	mov	r3, r2
 8000624:	015b      	lsls	r3, r3, #5
 8000626:	4413      	add	r3, r2
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f3      	bne.n	800061a <sizeofuser+0xe>
	return size+1;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
}
 8000636:	4618      	mov	r0, r3
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD, char *STAIP)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b098      	sub	sp, #96	; 0x60
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	char data[80];

	Ringbuf_init();
 8000650:	f000 faa6 	bl	8000ba0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8000654:	4832      	ldr	r0, [pc, #200]	; (8000720 <ESP_Init+0xdc>)
 8000656:	f000 fbb1 	bl	8000dbc <Uart_sendstring>
	HAL_Delay(2000);
 800065a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800065e:	f001 f951 	bl	8001904 <HAL_Delay>

	/********* AT **********/
	Uart_flush();
 8000662:	f000 fc61 	bl	8000f28 <Uart_flush>
	Uart_sendstring("AT\r\n");
 8000666:	482f      	ldr	r0, [pc, #188]	; (8000724 <ESP_Init+0xe0>)
 8000668:	f000 fba8 	bl	8000dbc <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 800066c:	bf00      	nop
 800066e:	482e      	ldr	r0, [pc, #184]	; (8000728 <ESP_Init+0xe4>)
 8000670:	f000 fd26 	bl	80010c0 <Wait_for>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ESP_Init+0x2a>


	/********* AT+CWMODE=1 **********/
	Uart_flush();
 800067a:	f000 fc55 	bl	8000f28 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n");
 800067e:	482b      	ldr	r0, [pc, #172]	; (800072c <ESP_Init+0xe8>)
 8000680:	f000 fb9c 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000684:	bf00      	nop
 8000686:	4828      	ldr	r0, [pc, #160]	; (8000728 <ESP_Init+0xe4>)
 8000688:	f000 fd1a 	bl	80010c0 <Wait_for>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0f9      	beq.n	8000686 <ESP_Init+0x42>

	/* Set Static IP Address */
	/********* AT+CWSTAIP=IPADDRESS **********/
	Uart_flush();
 8000692:	f000 fc49 	bl	8000f28 <Uart_flush>
	sprintf (data, "AT+CIPSTA=\"%s\"\r\n", STAIP);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4924      	ldr	r1, [pc, #144]	; (8000730 <ESP_Init+0xec>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 f9de 	bl	8003a60 <siprintf>
	Uart_sendstring(data);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fb87 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006ae:	bf00      	nop
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <ESP_Init+0xe4>)
 80006b2:	f000 fd05 	bl	80010c0 <Wait_for>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f9      	beq.n	80006b0 <ESP_Init+0x6c>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush();
 80006bc:	f000 fc34 	bl	8000f28 <Uart_flush>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80006c0:	f107 0010 	add.w	r0, r7, #16
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	491a      	ldr	r1, [pc, #104]	; (8000734 <ESP_Init+0xf0>)
 80006ca:	f003 f9c9 	bl	8003a60 <siprintf>
	Uart_sendstring(data);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fb72 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006d8:	bf00      	nop
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <ESP_Init+0xe4>)
 80006dc:	f000 fcf0 	bl	80010c0 <Wait_for>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f9      	beq.n	80006da <ESP_Init+0x96>

	/********* AT+CIPMUX **********/
	Uart_flush();
 80006e6:	f000 fc1f 	bl	8000f28 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n");
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <ESP_Init+0xf4>)
 80006ec:	f000 fb66 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006f0:	bf00      	nop
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <ESP_Init+0xe4>)
 80006f4:	f000 fce4 	bl	80010c0 <Wait_for>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <ESP_Init+0xae>

	/********* AT+CIPSERVER **********/
	Uart_flush();
 80006fe:	f000 fc13 	bl	8000f28 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n");
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ESP_Init+0xf8>)
 8000704:	f000 fb5a 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000708:	bf00      	nop
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <ESP_Init+0xe4>)
 800070c:	f000 fcd8 	bl	80010c0 <Wait_for>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <ESP_Init+0xc6>

}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3760      	adds	r7, #96	; 0x60
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	0800498c 	.word	0x0800498c
 8000724:	08004998 	.word	0x08004998
 8000728:	080049a0 	.word	0x080049a0
 800072c:	080049a8 	.word	0x080049a8
 8000730:	080049b8 	.word	0x080049b8
 8000734:	080049cc 	.word	0x080049cc
 8000738:	080049e4 	.word	0x080049e4
 800073c:	080049f4 	.word	0x080049f4

08000740 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b098      	sub	sp, #96	; 0x60
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fd82 	bl	8000254 <strlen>
 8000750:	4603      	mov	r3, r0
 8000752:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	Uart_flush();
 8000754:	f000 fbe8 	bl	8000f28 <Uart_flush>
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8000758:	f107 000c 	add.w	r0, r7, #12
 800075c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	4919      	ldr	r1, [pc, #100]	; (80007c8 <Server_Send+0x88>)
 8000762:	f003 f97d 	bl	8003a60 <siprintf>
	Uart_sendstring(data);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fb26 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for(">")));
 8000770:	bf00      	nop
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <Server_Send+0x8c>)
 8000774:	f000 fca4 	bl	80010c0 <Wait_for>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <Server_Send+0x32>
	Uart_sendstring (str);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 fb1c 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for("SEND OK")));
 8000784:	bf00      	nop
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <Server_Send+0x90>)
 8000788:	f000 fc9a 	bl	80010c0 <Wait_for>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <Server_Send+0x46>
	Uart_flush();
 8000792:	f000 fbc9 	bl	8000f28 <Uart_flush>
	sprintf (data, "AT+CIPCLOSE=%d\r\n",Link_ID);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	490d      	ldr	r1, [pc, #52]	; (80007d4 <Server_Send+0x94>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 f95e 	bl	8003a60 <siprintf>
	Uart_sendstring(data);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fb07 	bl	8000dbc <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80007ae:	bf00      	nop
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <Server_Send+0x98>)
 80007b2:	f000 fc85 	bl	80010c0 <Wait_for>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0f9      	beq.n	80007b0 <Server_Send+0x70>
	return 1;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3760      	adds	r7, #96	; 0x60
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08004a08 	.word	0x08004a08
 80007cc:	08004a1c 	.word	0x08004a1c
 80007d0:	08004a20 	.word	0x08004a20
 80007d4:	08004a28 	.word	0x08004a28
 80007d8:	080049a0 	.word	0x080049a0

080007dc <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
 80007e2:	b087      	sub	sp, #28
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007ea:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80007ee:	6018      	str	r0, [r3, #0]
 80007f0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007f4:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80007f8:	6019      	str	r1, [r3, #0]
	char datatosend[4096] = {0};
 80007fa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80007fe:	2200      	movs	r2, #0
 8000800:	f843 2c08 	str.w	r2, [r3, #-8]
 8000804:	3b04      	subs	r3, #4
 8000806:	f640 72fc 	movw	r2, #4092	; 0xffc
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f003 f947 	bl	8003aa0 <memset>
	if (!(strcmp (str, "/page1")))
 8000812:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000816:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800081a:	497a      	ldr	r1, [pc, #488]	; (8000a04 <Server_Handle+0x228>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	f7ff fd0f 	bl	8000240 <strcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d11a      	bne.n	800085e <Server_Handle+0x82>
	{
		sprintf(datatosend, page1);
 8000828:	4b77      	ldr	r3, [pc, #476]	; (8000a08 <Server_Handle+0x22c>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b77      	ldr	r3, [pc, #476]	; (8000a0c <Server_Handle+0x230>)
 800082e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000832:	f103 0310 	add.w	r3, r3, #16
 8000836:	443b      	add	r3, r7
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f003 f910 	bl	8003a60 <siprintf>
		Server_Send(datatosend, Link_ID);
 8000840:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000844:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 8000848:	4b70      	ldr	r3, [pc, #448]	; (8000a0c <Server_Handle+0x230>)
 800084a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800084e:	f103 0310 	add.w	r3, r3, #16
 8000852:	443b      	add	r3, r7
 8000854:	6811      	ldr	r1, [r2, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff72 	bl	8000740 <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 800085c:	e0cb      	b.n	80009f6 <Server_Handle+0x21a>
	else if (!(strcmp (str, "/page2")))
 800085e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000862:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000866:	496a      	ldr	r1, [pc, #424]	; (8000a10 <Server_Handle+0x234>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	f7ff fce9 	bl	8000240 <strcmp>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	f040 80a6 	bne.w	80009c2 <Server_Handle+0x1e6>
		sprintf(datatosend, page2_Top);
 8000876:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <Server_Handle+0x238>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <Server_Handle+0x230>)
 800087c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000880:	f103 0310 	add.w	r3, r3, #16
 8000884:	443b      	add	r3, r7
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f003 f8e9 	bl	8003a60 <siprintf>
		strcat (datatosend, table);
 800088e:	4b62      	ldr	r3, [pc, #392]	; (8000a18 <Server_Handle+0x23c>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <Server_Handle+0x230>)
 8000894:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000898:	f103 0310 	add.w	r3, r3, #16
 800089c:	443b      	add	r3, r7
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 f905 	bl	8003ab0 <strcat>
		int bufsize = (sizeofuser (user));
 80008a6:	485d      	ldr	r0, [pc, #372]	; (8000a1c <Server_Handle+0x240>)
 80008a8:	f7ff feb0 	bl	800060c <sizeofuser>
 80008ac:	f641 0308 	movw	r3, #6152	; 0x1808
 80008b0:	443b      	add	r3, r7
 80008b2:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	f641 020c 	movw	r2, #6156	; 0x180c
 80008ba:	443a      	add	r2, r7
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	e041      	b.n	8000944 <Server_Handle+0x168>
			sprintf (localbuf, "<tr><td>%s %s</td>	<td>%s</td></tr>",user[i].firstname,user[i].lastname,user[i].age);
 80008c0:	f641 030c 	movw	r3, #6156	; 0x180c
 80008c4:	443b      	add	r3, r7
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	015b      	lsls	r3, r3, #5
 80008cc:	4413      	add	r3, r2
 80008ce:	4a53      	ldr	r2, [pc, #332]	; (8000a1c <Server_Handle+0x240>)
 80008d0:	1899      	adds	r1, r3, r2
 80008d2:	f641 030c 	movw	r3, #6156	; 0x180c
 80008d6:	443b      	add	r3, r7
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4613      	mov	r3, r2
 80008dc:	015b      	lsls	r3, r3, #5
 80008de:	4413      	add	r3, r2
 80008e0:	3308      	adds	r3, #8
 80008e2:	4a4e      	ldr	r2, [pc, #312]	; (8000a1c <Server_Handle+0x240>)
 80008e4:	4413      	add	r3, r2
 80008e6:	1ddc      	adds	r4, r3, #7
 80008e8:	f641 030c 	movw	r3, #6156	; 0x180c
 80008ec:	443b      	add	r3, r7
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	015b      	lsls	r3, r3, #5
 80008f4:	4413      	add	r3, r2
 80008f6:	3318      	adds	r3, #24
 80008f8:	4a48      	ldr	r2, [pc, #288]	; (8000a1c <Server_Handle+0x240>)
 80008fa:	4413      	add	r3, r2
 80008fc:	3306      	adds	r3, #6
 80008fe:	4848      	ldr	r0, [pc, #288]	; (8000a20 <Server_Handle+0x244>)
 8000900:	f641 0210 	movw	r2, #6160	; 0x1810
 8000904:	4402      	add	r2, r0
 8000906:	19d0      	adds	r0, r2, r7
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4623      	mov	r3, r4
 800090c:	460a      	mov	r2, r1
 800090e:	4945      	ldr	r1, [pc, #276]	; (8000a24 <Server_Handle+0x248>)
 8000910:	f003 f8a6 	bl	8003a60 <siprintf>
			strcat (datatosend, localbuf);
 8000914:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <Server_Handle+0x244>)
 8000916:	f641 0310 	movw	r3, #6160	; 0x1810
 800091a:	4413      	add	r3, r2
 800091c:	19da      	adds	r2, r3, r7
 800091e:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <Server_Handle+0x230>)
 8000920:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000924:	f103 0310 	add.w	r3, r3, #16
 8000928:	443b      	add	r3, r7
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f003 f8bf 	bl	8003ab0 <strcat>
		for (int i=0; i<bufsize; i++)
 8000932:	f641 030c 	movw	r3, #6156	; 0x180c
 8000936:	443b      	add	r3, r7
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	f641 020c 	movw	r2, #6156	; 0x180c
 8000940:	443a      	add	r2, r7
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	f641 030c 	movw	r3, #6156	; 0x180c
 8000948:	443b      	add	r3, r7
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	f641 0308 	movw	r3, #6152	; 0x1808
 8000950:	443b      	add	r3, r7
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbb3      	blt.n	80008c0 <Server_Handle+0xe4>
		strcat (datatosend, "</table>");
 8000958:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <Server_Handle+0x230>)
 800095a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800095e:	f103 0310 	add.w	r3, r3, #16
 8000962:	443b      	add	r3, r7
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fc75 	bl	8000254 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <Server_Handle+0x230>)
 8000970:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000974:	f103 0310 	add.w	r3, r3, #16
 8000978:	443b      	add	r3, r7
 800097a:	4413      	add	r3, r2
 800097c:	492a      	ldr	r1, [pc, #168]	; (8000a28 <Server_Handle+0x24c>)
 800097e:	461a      	mov	r2, r3
 8000980:	460b      	mov	r3, r1
 8000982:	cb03      	ldmia	r3!, {r0, r1}
 8000984:	6010      	str	r0, [r2, #0]
 8000986:	6051      	str	r1, [r2, #4]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 800098c:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <Server_Handle+0x250>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <Server_Handle+0x230>)
 8000992:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000996:	f103 0310 	add.w	r3, r3, #16
 800099a:	443b      	add	r3, r7
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 f886 	bl	8003ab0 <strcat>
		Server_Send(datatosend, Link_ID);
 80009a4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80009a8:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <Server_Handle+0x230>)
 80009ae:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80009b2:	f103 0310 	add.w	r3, r3, #16
 80009b6:	443b      	add	r3, r7
 80009b8:	6811      	ldr	r1, [r2, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fec0 	bl	8000740 <Server_Send>
}
 80009c0:	e019      	b.n	80009f6 <Server_Handle+0x21a>
		sprintf (datatosend, home);
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <Server_Handle+0x254>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <Server_Handle+0x230>)
 80009c8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80009cc:	f103 0310 	add.w	r3, r3, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 f843 	bl	8003a60 <siprintf>
		Server_Send(datatosend, Link_ID);
 80009da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80009de:	f5a3 6201 	sub.w	r2, r3, #2064	; 0x810
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <Server_Handle+0x230>)
 80009e4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80009e8:	f103 0310 	add.w	r3, r3, #16
 80009ec:	443b      	add	r3, r7
 80009ee:	6811      	ldr	r1, [r2, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fea5 	bl	8000740 <Server_Send>
}
 80009f6:	bf00      	nop
 80009f8:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08004a3c 	.word	0x08004a3c
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	ffffeff8 	.word	0xffffeff8
 8000a10:	08004a44 	.word	0x08004a44
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000010 	.word	0x20000010
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	ffffe7f8 	.word	0xffffe7f8
 8000a24:	08004a4c 	.word	0x08004a4c
 8000a28:	08004a70 	.word	0x08004a70
 8000a2c:	2000000c 	.word	0x2000000c
 8000a30:	20000000 	.word	0x20000000

08000a34 <Server_Start>:

void Server_Start (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0a2      	sub	sp, #136	; 0x88
 8000a38:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	227c      	movs	r2, #124	; 0x7c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 f82a 	bl	8003aa0 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID)));
 8000a4c:	bf00      	nop
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	461a      	mov	r2, r3
 8000a52:	2101      	movs	r1, #1
 8000a54:	4844      	ldr	r0, [pc, #272]	; (8000b68 <Server_Start+0x134>)
 8000a56:	f000 fb07 	bl	8001068 <Get_after>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f6      	beq.n	8000a4e <Server_Start+0x1a>

	Link_ID -= 48;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3b30      	subs	r3, #48	; 0x30
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader)));
 8000a68:	bf00      	nop
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	483e      	ldr	r0, [pc, #248]	; (8000b6c <Server_Start+0x138>)
 8000a72:	f000 fa85 	bl	8000f80 <Copy_upto>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f6      	beq.n	8000a6a <Server_Start+0x36>
	if (Look_for("/page1", buftostoreheader) == 1)
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	4619      	mov	r1, r3
 8000a82:	483b      	ldr	r0, [pc, #236]	; (8000b70 <Server_Start+0x13c>)
 8000a84:	f000 f8d3 	bl	8000c2e <Look_for>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d13c      	bne.n	8000b08 <Server_Start+0xd4>
	{
		GetDataFromBuffer("fname=", "&", buftostoreheader, user[usernumber].firstname);
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <Server_Start+0x140>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4613      	mov	r3, r2
 8000a94:	015b      	lsls	r3, r3, #5
 8000a96:	4413      	add	r3, r2
 8000a98:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <Server_Start+0x144>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	f107 0208 	add.w	r2, r7, #8
 8000aa0:	4936      	ldr	r1, [pc, #216]	; (8000b7c <Server_Start+0x148>)
 8000aa2:	4837      	ldr	r0, [pc, #220]	; (8000b80 <Server_Start+0x14c>)
 8000aa4:	f000 f99f 	bl	8000de6 <GetDataFromBuffer>
		GetDataFromBuffer("lname=", "&", buftostoreheader, user[usernumber].lastname);
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <Server_Start+0x140>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4613      	mov	r3, r2
 8000aae:	015b      	lsls	r3, r3, #5
 8000ab0:	4413      	add	r3, r2
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <Server_Start+0x144>)
 8000ab6:	4413      	add	r3, r2
 8000ab8:	3307      	adds	r3, #7
 8000aba:	f107 0208 	add.w	r2, r7, #8
 8000abe:	492f      	ldr	r1, [pc, #188]	; (8000b7c <Server_Start+0x148>)
 8000ac0:	4830      	ldr	r0, [pc, #192]	; (8000b84 <Server_Start+0x150>)
 8000ac2:	f000 f990 	bl	8000de6 <GetDataFromBuffer>
		GetDataFromBuffer("age=", " HTTP", buftostoreheader, user[usernumber].age);
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <Server_Start+0x140>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4613      	mov	r3, r2
 8000acc:	015b      	lsls	r3, r3, #5
 8000ace:	4413      	add	r3, r2
 8000ad0:	3318      	adds	r3, #24
 8000ad2:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <Server_Start+0x144>)
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3306      	adds	r3, #6
 8000ad8:	f107 0208 	add.w	r2, r7, #8
 8000adc:	492a      	ldr	r1, [pc, #168]	; (8000b88 <Server_Start+0x154>)
 8000ade:	482b      	ldr	r0, [pc, #172]	; (8000b8c <Server_Start+0x158>)
 8000ae0:	f000 f981 	bl	8000de6 <GetDataFromBuffer>
		usernumber++;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <Server_Start+0x140>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <Server_Start+0x140>)
 8000aec:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <Server_Start+0x140>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	dd02      	ble.n	8000afc <Server_Start+0xc8>
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <Server_Start+0x140>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
		Server_Handle("/page1",Link_ID);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4619      	mov	r1, r3
 8000b00:	481b      	ldr	r0, [pc, #108]	; (8000b70 <Server_Start+0x13c>)
 8000b02:	f7ff fe6b 	bl	80007dc <Server_Handle>

	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 8000b06:	e02b      	b.n	8000b60 <Server_Start+0x12c>
	else if (Look_for("/page2", buftostoreheader) == 1)
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4820      	ldr	r0, [pc, #128]	; (8000b90 <Server_Start+0x15c>)
 8000b10:	f000 f88d 	bl	8000c2e <Look_for>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d105      	bne.n	8000b26 <Server_Start+0xf2>
		Server_Handle("/page2",Link_ID);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481c      	ldr	r0, [pc, #112]	; (8000b90 <Server_Start+0x15c>)
 8000b20:	f7ff fe5c 	bl	80007dc <Server_Handle>
}
 8000b24:	e01c      	b.n	8000b60 <Server_Start+0x12c>
	else if (Look_for("/home", buftostoreheader) == 1)
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4819      	ldr	r0, [pc, #100]	; (8000b94 <Server_Start+0x160>)
 8000b2e:	f000 f87e 	bl	8000c2e <Look_for>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <Server_Start+0x110>
		Server_Handle("/home",Link_ID);
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4815      	ldr	r0, [pc, #84]	; (8000b94 <Server_Start+0x160>)
 8000b3e:	f7ff fe4d 	bl	80007dc <Server_Handle>
}
 8000b42:	e00d      	b.n	8000b60 <Server_Start+0x12c>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <Server_Start+0x164>)
 8000b4c:	f000 f86f 	bl	8000c2e <Look_for>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d004      	beq.n	8000b60 <Server_Start+0x12c>
		Server_Handle("/ ", Link_ID);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4810      	ldr	r0, [pc, #64]	; (8000b9c <Server_Start+0x168>)
 8000b5c:	f7ff fe3e 	bl	80007dc <Server_Handle>
}
 8000b60:	bf00      	nop
 8000b62:	3788      	adds	r7, #136	; 0x88
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08004a7c 	.word	0x08004a7c
 8000b6c:	08004a84 	.word	0x08004a84
 8000b70:	08004a3c 	.word	0x08004a3c
 8000b74:	200001d8 	.word	0x200001d8
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	08004a90 	.word	0x08004a90
 8000b80:	08004a94 	.word	0x08004a94
 8000b84:	08004a9c 	.word	0x08004a9c
 8000b88:	08004aa4 	.word	0x08004aa4
 8000b8c:	08004aac 	.word	0x08004aac
 8000b90:	08004a44 	.word	0x08004a44
 8000b94:	08004ab4 	.word	0x08004ab4
 8000b98:	08004abc 	.word	0x08004abc
 8000b9c:	08004acc 	.word	0x08004acc

08000ba0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <Ringbuf_init+0x3c>)
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <Ringbuf_init+0x40>)
 8000ba8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <Ringbuf_init+0x44>)
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <Ringbuf_init+0x48>)
 8000bae:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <Ringbuf_init+0x4c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <Ringbuf_init+0x4c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0201 	orr.w	r2, r2, #1
 8000bbe:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <Ringbuf_init+0x4c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <Ringbuf_init+0x4c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0220 	orr.w	r2, r2, #32
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200002f4 	.word	0x200002f4
 8000be0:	20000264 	.word	0x20000264
 8000be4:	200002f8 	.word	0x200002f8
 8000be8:	200002ac 	.word	0x200002ac
 8000bec:	200001dc 	.word	0x200001dc

08000bf0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	3301      	adds	r3, #1
 8000c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c06:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d007      	beq.n	8000c22 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	79f9      	ldrb	r1, [r7, #7]
 8000c1a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fb0b 	bl	8000254 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000c42:	6838      	ldr	r0, [r7, #0]
 8000c44:	f7ff fb06 	bl	8000254 <strlen>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000c54:	e002      	b.n	8000c5c <Look_for+0x2e>
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	440b      	add	r3, r1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d1f2      	bne.n	8000c56 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx])
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d111      	bne.n	8000ca8 <Look_for+0x7a>
	{
		while (str[so_far] == buffertolookinto[indx])
 8000c84:	e005      	b.n	8000c92 <Look_for+0x64>
		{
			so_far++;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
			indx++;
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
		while (str[so_far] == buffertolookinto[indx])
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6839      	ldr	r1, [r7, #0]
 8000c9e:	440b      	add	r3, r1
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d0ef      	beq.n	8000c86 <Look_for+0x58>
 8000ca6:	e008      	b.n	8000cba <Look_for+0x8c>
		}
	}
	else
	{
		so_far =0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
		if (indx >= bufferlength) return -1;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbcf      	blt.n	8000c54 <Look_for+0x26>
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	e007      	b.n	8000cca <Look_for+0x9c>
		goto repeat;
	}

	if (so_far == stringlength) return 1;
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d101      	bne.n	8000cc6 <Look_for+0x98>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e001      	b.n	8000cca <Look_for+0x9c>
	else return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <Uart_read>:

int Uart_read(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <Uart_read+0x4c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <Uart_read+0x4c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d102      	bne.n	8000cf0 <Uart_read+0x1c>
  {
    return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e010      	b.n	8000d12 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <Uart_read+0x4c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <Uart_read+0x4c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <Uart_read+0x4c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <Uart_read+0x4c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d0e:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200002f4 	.word	0x200002f4

08000d24 <Uart_write>:

void Uart_write(int c)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db21      	blt.n	8000d76 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <Uart_write+0x60>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d3e:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000d40:	bf00      	nop
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <Uart_write+0x60>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d0f9      	beq.n	8000d42 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <Uart_write+0x60>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <Uart_write+0x60>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	b2c9      	uxtb	r1, r1
 8000d5c:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <Uart_write+0x60>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <Uart_write+0x64>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <Uart_write+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d74:	601a      	str	r2, [r3, #0]
	}
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200002f8 	.word	0x200002f8
 8000d88:	200001dc 	.word	0x200001dc

08000d8c <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <IsDataAvailable+0x2c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <IsDataAvailable+0x2c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3340      	adds	r3, #64	; 0x40
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200002f4 	.word	0x200002f4

08000dbc <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000dc4:	e006      	b.n	8000dd4 <Uart_sendstring+0x18>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffa8 	bl	8000d24 <Uart_write>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f4      	bne.n	8000dc6 <Uart_sendstring+0xa>
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <GetDataFromBuffer>:

  while(*s) Uart_write(*s++);
}

void GetDataFromBuffer (char *startString, char *endString, char *buffertocopyfrom, char *buffertocopyinto)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b08c      	sub	sp, #48	; 0x30
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
	int startStringLength = strlen (startString);
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f7ff fa2d 	bl	8000254 <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	623b      	str	r3, [r7, #32]
	int endStringLength   = strlen (endString);
 8000dfe:	68b8      	ldr	r0, [r7, #8]
 8000e00:	f7ff fa28 	bl	8000254 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	61fb      	str	r3, [r7, #28]
	int so_far = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indx = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	int startposition = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
	int endposition = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

repeat1:
	while (startString[so_far] != buffertocopyfrom[indx]) indx++;
 8000e18:	e002      	b.n	8000e20 <GetDataFromBuffer+0x3a>
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4413      	add	r3, r2
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d1f2      	bne.n	8000e1a <GetDataFromBuffer+0x34>
	if (startString[so_far] == buffertocopyfrom[indx])
 8000e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	440b      	add	r3, r1
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d110      	bne.n	8000e6a <GetDataFromBuffer+0x84>
	{
		while (startString[so_far] == buffertocopyfrom[indx])
 8000e48:	e005      	b.n	8000e56 <GetDataFromBuffer+0x70>
		{
			so_far++;
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	3301      	adds	r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
		while (startString[so_far] == buffertocopyfrom[indx])
 8000e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	440b      	add	r3, r1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d0ef      	beq.n	8000e4a <GetDataFromBuffer+0x64>
		}
	}

	if (so_far == startStringLength) startposition = indx;
 8000e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d104      	bne.n	8000e7c <GetDataFromBuffer+0x96>
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	61bb      	str	r3, [r7, #24]
	{
		so_far =0;
		goto repeat1;
	}

	so_far = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e7a:	e006      	b.n	8000e8a <GetDataFromBuffer+0xa4>
		so_far =0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat1;
 8000e80:	e7ca      	b.n	8000e18 <GetDataFromBuffer+0x32>

repeat2:
	while (endString[so_far] != buffertocopyfrom[indx]) indx++;
 8000e82:	e002      	b.n	8000e8a <GetDataFromBuffer+0xa4>
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	3301      	adds	r3, #1
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	440b      	add	r3, r1
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d1f2      	bne.n	8000e84 <GetDataFromBuffer+0x9e>
	if (endString[so_far] == buffertocopyfrom[indx])
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	440b      	add	r3, r1
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d110      	bne.n	8000ed4 <GetDataFromBuffer+0xee>
	{
		while (endString[so_far] == buffertocopyfrom[indx])
 8000eb2:	e005      	b.n	8000ec0 <GetDataFromBuffer+0xda>
		{
			so_far++;
 8000eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
		while (endString[so_far] == buffertocopyfrom[indx])
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	440b      	add	r3, r1
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d0ef      	beq.n	8000eb4 <GetDataFromBuffer+0xce>
		}
	}

	if (so_far == endStringLength) endposition = indx-endStringLength;
 8000ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d10a      	bne.n	8000ef2 <GetDataFromBuffer+0x10c>
 8000edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
	{
		so_far =0;
		goto repeat2;
	}

	so_far = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
	indx=0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i=startposition; i<endposition; i++)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef0:	e010      	b.n	8000f14 <GetDataFromBuffer+0x12e>
		so_far =0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat2;
 8000ef6:	e7c4      	b.n	8000e82 <GetDataFromBuffer+0x9c>
	{
		buffertocopyinto[indx] = buffertocopyfrom[i];
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	441a      	add	r2, r3
 8000efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	440b      	add	r3, r1
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	701a      	strb	r2, [r3, #0]
		indx++;
 8000f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i=startposition; i<endposition; i++)
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
 8000f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbed      	blt.n	8000ef8 <GetDataFromBuffer+0x112>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <Uart_flush>:

void Uart_flush (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <Uart_flush+0x20>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2240      	movs	r2, #64	; 0x40
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fdb3 	bl	8003aa0 <memset>
	_rx_buffer->head = 0;
 8000f3a:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <Uart_flush+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200002f4 	.word	0x200002f4

08000f4c <Uart_peek>:

int Uart_peek()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <Uart_peek+0x30>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <Uart_peek+0x30>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d102      	bne.n	8000f66 <Uart_peek+0x1a>
  {
    return -1;
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	e005      	b.n	8000f72 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <Uart_peek+0x30>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <Uart_peek+0x30>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f70:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	200002f4 	.word	0x200002f4

08000f80 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff f960 	bl	8000254 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8000f9c:	bf00      	nop
 8000f9e:	f7ff fef5 	bl	8000d8c <IsDataAvailable>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0fa      	beq.n	8000f9e <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8000fa8:	e01b      	b.n	8000fe2 <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <Copy_upto+0xe4>)
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <Copy_upto+0xe4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	4403      	add	r3, r0
 8000fba:	5c8a      	ldrb	r2, [r1, r2]
 8000fbc:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <Copy_upto+0xe4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <Copy_upto+0xe4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fce:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8000fd6:	bf00      	nop
 8000fd8:	f7ff fed8 	bl	8000d8c <IsDataAvailable>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0fa      	beq.n	8000fd8 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 8000fe2:	f7ff ffb3 	bl	8000f4c <Uart_peek>
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d1da      	bne.n	8000faa <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8000ff4:	e019      	b.n	800102a <Copy_upto+0xaa>
	{
		so_far++;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8000ffc:	f7ff fe6a 	bl	8000cd4 <Uart_read>
 8001000:	4601      	mov	r1, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	613a      	str	r2, [r7, #16]
 8001008:	461a      	mov	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	429a      	cmp	r2, r3
 8001018:	d101      	bne.n	800101e <Copy_upto+0x9e>
 800101a:	2301      	movs	r3, #1
 800101c:	e01d      	b.n	800105a <Copy_upto+0xda>
		while (!IsDataAvailable());
 800101e:	bf00      	nop
 8001020:	f7ff feb4 	bl	8000d8c <IsDataAvailable>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0fa      	beq.n	8001020 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 800102a:	f7ff ff8f 	bl	8000f4c <Uart_peek>
 800102e:	4601      	mov	r1, r0
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4299      	cmp	r1, r3
 800103a:	d0dc      	beq.n	8000ff6 <Copy_upto+0x76>
	}

	if (so_far != len)
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d002      	beq.n	800104a <Copy_upto+0xca>
	{
		so_far = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
		goto again;
 8001048:	e7a8      	b.n	8000f9c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	429a      	cmp	r2, r3
 8001050:	d101      	bne.n	8001056 <Copy_upto+0xd6>
 8001052:	2301      	movs	r3, #1
 8001054:	e001      	b.n	800105a <Copy_upto+0xda>
	else return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200002f4 	.word	0x200002f4

08001068 <Get_after>:

int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	460b      	mov	r3, r1
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string) != 1);
 8001076:	bf00      	nop
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 f821 	bl	80010c0 <Wait_for>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d1f9      	bne.n	8001078 <Get_after+0x10>
	for (int indx=0; indx<numberofchars; indx++)
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e010      	b.n	80010ac <Get_after+0x44>
	{
		while (!(IsDataAvailable()));
 800108a:	bf00      	nop
 800108c:	f7ff fe7e 	bl	8000d8c <IsDataAvailable>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0fa      	beq.n	800108c <Get_after+0x24>
		buffertosave[indx] = Uart_read();
 8001096:	f7ff fe1d 	bl	8000cd4 <Uart_read>
 800109a:	4601      	mov	r1, r0
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbea      	blt.n	800108a <Get_after+0x22>
	}
	return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <Wait_for>:


int Wait_for (char *string)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f8c1 	bl	8000254 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80010d6:	bf00      	nop
 80010d8:	f7ff fe58 	bl	8000d8c <IsDataAvailable>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0fa      	beq.n	80010d8 <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80010e2:	e008      	b.n	80010f6 <Wait_for+0x36>
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <Wait_for+0xa4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <Wait_for+0xa4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
 80010f6:	f7ff ff29 	bl	8000f4c <Uart_peek>
 80010fa:	4601      	mov	r1, r0
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4299      	cmp	r1, r3
 8001106:	d1ed      	bne.n	80010e4 <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 8001108:	e010      	b.n	800112c <Wait_for+0x6c>
	{
		so_far++;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8001110:	f7ff fde0 	bl	8000cd4 <Uart_read>
		if (so_far == len) return 1;
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	429a      	cmp	r2, r3
 800111a:	d101      	bne.n	8001120 <Wait_for+0x60>
 800111c:	2301      	movs	r3, #1
 800111e:	e01d      	b.n	800115c <Wait_for+0x9c>
		while (!IsDataAvailable());
 8001120:	bf00      	nop
 8001122:	f7ff fe33 	bl	8000d8c <IsDataAvailable>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0fa      	beq.n	8001122 <Wait_for+0x62>
	while (Uart_peek() == string [so_far])
 800112c:	f7ff ff0e 	bl	8000f4c <Uart_peek>
 8001130:	4601      	mov	r1, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4299      	cmp	r1, r3
 800113c:	d0e5      	beq.n	800110a <Wait_for+0x4a>
	}

	if (so_far != len)
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d002      	beq.n	800114c <Wait_for+0x8c>
	{
		so_far = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
		goto again;
 800114a:	e7c4      	b.n	80010d6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	429a      	cmp	r2, r3
 8001152:	d101      	bne.n	8001158 <Wait_for+0x98>
 8001154:	2301      	movs	r3, #1
 8001156:	e001      	b.n	800115c <Wait_for+0x9c>
	else return -1;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200002f4 	.word	0x200002f4

08001168 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b00      	cmp	r3, #0
 8001188:	d013      	beq.n	80011b2 <Uart_isr+0x4a>
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f003 0320 	and.w	r3, r3, #32
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00e      	beq.n	80011b2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
    	huart->Instance->ISR;                       /* Read status register */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <Uart_isr+0xac>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fd20 	bl	8000bf0 <store_char>
        return;
 80011b0:	e02c      	b.n	800120c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d027      	beq.n	800120c <Uart_isr+0xa4>
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d022      	beq.n	800120c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <Uart_isr+0xb0>)
 80011c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <Uart_isr+0xb0>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d108      	bne.n	80011e4 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e0:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->TDR = c;

    	    }
    	return;
 80011e2:	e012      	b.n	800120a <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <Uart_isr+0xb0>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <Uart_isr+0xb0>)
 80011ea:	5cd3      	ldrb	r3, [r2, r3]
 80011ec:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <Uart_isr+0xb0>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	3301      	adds	r3, #1
 80011f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <Uart_isr+0xb0>)
 80011fa:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->ISR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	7bba      	ldrb	r2, [r7, #14]
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 800120a:	bf00      	nop
    }
}
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200002f4 	.word	0x200002f4
 8001218:	200002ac 	.word	0x200002ac

0800121c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <MX_GPIO_Init+0x214>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a7e      	ldr	r2, [pc, #504]	; (8001430 <MX_GPIO_Init+0x214>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b7c      	ldr	r3, [pc, #496]	; (8001430 <MX_GPIO_Init+0x214>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b79      	ldr	r3, [pc, #484]	; (8001430 <MX_GPIO_Init+0x214>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a78      	ldr	r2, [pc, #480]	; (8001430 <MX_GPIO_Init+0x214>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b76      	ldr	r3, [pc, #472]	; (8001430 <MX_GPIO_Init+0x214>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b73      	ldr	r3, [pc, #460]	; (8001430 <MX_GPIO_Init+0x214>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a72      	ldr	r2, [pc, #456]	; (8001430 <MX_GPIO_Init+0x214>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b70      	ldr	r3, [pc, #448]	; (8001430 <MX_GPIO_Init+0x214>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <MX_GPIO_Init+0x214>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a6c      	ldr	r2, [pc, #432]	; (8001430 <MX_GPIO_Init+0x214>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <MX_GPIO_Init+0x214>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <MX_GPIO_Init+0x214>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a66      	ldr	r2, [pc, #408]	; (8001430 <MX_GPIO_Init+0x214>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <MX_GPIO_Init+0x214>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012aa:	4b61      	ldr	r3, [pc, #388]	; (8001430 <MX_GPIO_Init+0x214>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a60      	ldr	r2, [pc, #384]	; (8001430 <MX_GPIO_Init+0x214>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <MX_GPIO_Init+0x214>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80012c8:	485a      	ldr	r0, [pc, #360]	; (8001434 <MX_GPIO_Init+0x218>)
 80012ca:	f000 fdfd 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	4859      	ldr	r0, [pc, #356]	; (8001438 <MX_GPIO_Init+0x21c>)
 80012d4:	f000 fdf8 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4853      	ldr	r0, [pc, #332]	; (800143c <MX_GPIO_Init+0x220>)
 80012f0:	f000 fc3e 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012f4:	2332      	movs	r3, #50	; 0x32
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	484b      	ldr	r0, [pc, #300]	; (800143c <MX_GPIO_Init+0x220>)
 8001310:	f000 fc2e 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001314:	2386      	movs	r3, #134	; 0x86
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001324:	230b      	movs	r3, #11
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4844      	ldr	r0, [pc, #272]	; (8001440 <MX_GPIO_Init+0x224>)
 8001330:	f000 fc1e 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001334:	f244 0381 	movw	r3, #16513	; 0x4081
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4839      	ldr	r0, [pc, #228]	; (8001434 <MX_GPIO_Init+0x218>)
 800134e:	f000 fc0f 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4831      	ldr	r0, [pc, #196]	; (8001434 <MX_GPIO_Init+0x218>)
 8001370:	f000 fbfe 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001374:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001386:	2307      	movs	r3, #7
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <MX_GPIO_Init+0x228>)
 8001392:	f000 fbed 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4822      	ldr	r0, [pc, #136]	; (8001438 <MX_GPIO_Init+0x21c>)
 80013ae:	f000 fbdf 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <MX_GPIO_Init+0x21c>)
 80013c6:	f000 fbd3 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013dc:	230a      	movs	r3, #10
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4816      	ldr	r0, [pc, #88]	; (8001440 <MX_GPIO_Init+0x224>)
 80013e8:	f000 fbc2 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_GPIO_Init+0x224>)
 8001402:	f000 fbb5 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001406:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001418:	230b      	movs	r3, #11
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_GPIO_Init+0x21c>)
 8001424:	f000 fba4 	bl	8001b70 <HAL_GPIO_Init>

}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400
 8001438:	40021800 	.word	0x40021800
 800143c:	40020800 	.word	0x40020800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020c00 	.word	0x40020c00

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f000 f9fd 	bl	800184a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f812 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f7ff fee2 	bl	800121c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001458:	f000 f922 	bl	80016a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("ares", "willysmc", "192.168.0.102");
 800145c:	4a03      	ldr	r2, [pc, #12]	; (800146c <main+0x24>)
 800145e:	4904      	ldr	r1, [pc, #16]	; (8001470 <main+0x28>)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <main+0x2c>)
 8001462:	f7ff f8ef 	bl	8000644 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 8001466:	f7ff fae5 	bl	8000a34 <Server_Start>
 800146a:	e7fc      	b.n	8001466 <main+0x1e>
 800146c:	08004ad0 	.word	0x08004ad0
 8001470:	08004ae0 	.word	0x08004ae0
 8001474:	08004aec 	.word	0x08004aec

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2234      	movs	r2, #52	; 0x34
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fb0a 	bl	8003aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <SystemClock_Config+0xd4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a2a      	ldr	r2, [pc, #168]	; (800154c <SystemClock_Config+0xd4>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <SystemClock_Config+0xd4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <SystemClock_Config+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a25      	ldr	r2, [pc, #148]	; (8001550 <SystemClock_Config+0xd8>)
 80014ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <SystemClock_Config+0xd8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d4:	2310      	movs	r3, #16
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d8:	2302      	movs	r3, #2
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014dc:	2300      	movs	r3, #0
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014e0:	2308      	movs	r3, #8
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014e4:	23d8      	movs	r3, #216	; 0xd8
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fd4f 	bl	8001f9c <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001504:	f000 f826 	bl	8001554 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001508:	f000 fcf8 	bl	8001efc <HAL_PWREx_EnableOverDrive>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001512:	f000 f81f 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001516:	230f      	movs	r3, #15
 8001518:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151a:	2302      	movs	r3, #2
 800151c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001522:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	2107      	movs	r1, #7
 8001534:	4618      	mov	r0, r3
 8001536:	f000 ffdf 	bl	80024f8 <HAL_RCC_ClockConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001540:	f000 f808 	bl	8001554 <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	3750      	adds	r7, #80	; 0x50
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x44>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_MspInit+0x44>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_MspInit+0x44>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x44>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x44>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x44>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f966 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <USART1_IRQHandler+0x10>)
 8001602:	f7ff fdb1 	bl	8001168 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200001dc 	.word	0x200001dc

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f002 fa46 	bl	8003ad0 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20080000 	.word	0x20080000
 8001670:	00000400 	.word	0x00000400
 8001674:	200002fc 	.word	0x200002fc
 8001678:	20000450 	.word	0x20000450

0800167c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <MX_USART1_UART_Init>:
//UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <MX_USART1_UART_Init+0x5c>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016e4:	f001 fd54 	bl	8003190 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f7ff ff31 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001dc 	.word	0x200001dc
 80016fc:	40011000 	.word	0x40011000

08001700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0ae      	sub	sp, #184	; 0xb8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2290      	movs	r2, #144	; 0x90
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f9bd 	bl	8003aa0 <memset>
  if(uartHandle->Instance==USART1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a30      	ldr	r2, [pc, #192]	; (80017ec <HAL_UART_MspInit+0xec>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d158      	bne.n	80017e2 <HAL_UART_MspInit+0xe2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001734:	2300      	movs	r3, #0
 8001736:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f8ff 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001748:	f7ff ff04 	bl	8001554 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_UART_MspInit+0xf0>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_UART_MspInit+0xf0>)
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	6453      	str	r3, [r2, #68]	; 0x44
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_UART_MspInit+0xf0>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_UART_MspInit+0xf0>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_UART_MspInit+0xf0>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_UART_MspInit+0xf0>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800177c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001796:	2304      	movs	r3, #4
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <HAL_UART_MspInit+0xf4>)
 80017a4:	f000 f9e4 	bl	8001b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a8:	2340      	movs	r3, #64	; 0x40
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c0:	2307      	movs	r3, #7
 80017c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_UART_MspInit+0xf4>)
 80017ce:	f000 f9cf 	bl	8001b70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2025      	movs	r0, #37	; 0x25
 80017d8:	f000 f993 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017dc:	2025      	movs	r0, #37	; 0x25
 80017de:	f000 f9ac 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	37b8      	adds	r7, #184	; 0xb8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40011000 	.word	0x40011000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001822:	f7ff ff2b 	bl	800167c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f002 f959 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fe0d 	bl	8001448 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800183c:	08004b50 	.word	0x08004b50
  ldr r2, =_sbss
 8001840:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001844:	2000044c 	.word	0x2000044c

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>

0800184a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	2003      	movs	r0, #3
 8001850:	f000 f94c 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001854:	2000      	movs	r0, #0
 8001856:	f000 f805 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185a:	f7ff fe81 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f967 	bl	8001b56 <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f000 f92f 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000014 	.word	0x20000014
 80018bc:	2000001c 	.word	0x2000001c
 80018c0:	20000018 	.word	0x20000018

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000001c 	.word	0x2000001c
 80018e8:	20000300 	.word	0x20000300

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000300 	.word	0x20000300

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000001c 	.word	0x2000001c

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <__NVIC_SetPriorityGrouping+0x40>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	4313      	orrs	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x40>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	05fa0000 	.word	0x05fa0000

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff3e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff31 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e175      	b.n	8001e7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 8164 	bne.w	8001e76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x56>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80be 	beq.w	8001e76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_GPIO_Init+0x324>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d12:	4a61      	ldr	r2, [pc, #388]	; (8001e98 <HAL_GPIO_Init+0x328>)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_GPIO_Init+0x32c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d037      	beq.n	8001dae <HAL_GPIO_Init+0x23e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a57      	ldr	r2, [pc, #348]	; (8001ea0 <HAL_GPIO_Init+0x330>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d031      	beq.n	8001daa <HAL_GPIO_Init+0x23a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a56      	ldr	r2, [pc, #344]	; (8001ea4 <HAL_GPIO_Init+0x334>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d02b      	beq.n	8001da6 <HAL_GPIO_Init+0x236>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <HAL_GPIO_Init+0x338>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d025      	beq.n	8001da2 <HAL_GPIO_Init+0x232>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a54      	ldr	r2, [pc, #336]	; (8001eac <HAL_GPIO_Init+0x33c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01f      	beq.n	8001d9e <HAL_GPIO_Init+0x22e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a53      	ldr	r2, [pc, #332]	; (8001eb0 <HAL_GPIO_Init+0x340>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x22a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_GPIO_Init+0x344>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x226>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a51      	ldr	r2, [pc, #324]	; (8001eb8 <HAL_GPIO_Init+0x348>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x222>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a50      	ldr	r2, [pc, #320]	; (8001ebc <HAL_GPIO_Init+0x34c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x21e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4f      	ldr	r2, [pc, #316]	; (8001ec0 <HAL_GPIO_Init+0x350>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x21a>
 8001d86:	2309      	movs	r3, #9
 8001d88:	e012      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	e010      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001d8e:	2308      	movs	r3, #8
 8001d90:	e00e      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e00c      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001d96:	2306      	movs	r3, #6
 8001d98:	e00a      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e008      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x240>
 8001dae:	2300      	movs	r3, #0
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	f002 0203 	and.w	r2, r2, #3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dc0:	4935      	ldr	r1, [pc, #212]	; (8001e98 <HAL_GPIO_Init+0x328>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e1c:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_GPIO_Init+0x354>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b0f      	cmp	r3, #15
 8001e80:	f67f ae86 	bls.w	8001b90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020c00 	.word	0x40020c00
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40021400 	.word	0x40021400
 8001eb4:	40021800 	.word	0x40021800
 8001eb8:	40021c00 	.word	0x40021c00
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40022400 	.word	0x40022400
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2a:	f7ff fcdf 	bl	80018ec <HAL_GetTick>
 8001f2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f30:	e009      	b.n	8001f46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f32:	f7ff fcdb 	bl	80018ec <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f40:	d901      	bls.n	8001f46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e022      	b.n	8001f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f52:	d1ee      	bne.n	8001f32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f60:	f7ff fcc4 	bl	80018ec <HAL_GetTick>
 8001f64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f66:	e009      	b.n	8001f7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f68:	f7ff fcc0 	bl	80018ec <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f76:	d901      	bls.n	8001f7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e007      	b.n	8001f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f88:	d1ee      	bne.n	8001f68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e29b      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8087 	beq.w	80020ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc0:	4b96      	ldr	r3, [pc, #600]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d00c      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fcc:	4b93      	ldr	r3, [pc, #588]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d112      	bne.n	8001ffe <HAL_RCC_OscConfig+0x62>
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe4:	d10b      	bne.n	8001ffe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d06c      	beq.n	80020cc <HAL_RCC_OscConfig+0x130>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d168      	bne.n	80020cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e275      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x7a>
 8002008:	4b84      	ldr	r3, [pc, #528]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a83      	ldr	r2, [pc, #524]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e02e      	b.n	8002074 <HAL_RCC_OscConfig+0xd8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x9c>
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7e      	ldr	r2, [pc, #504]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b7c      	ldr	r3, [pc, #496]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7b      	ldr	r2, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xd8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0xc0>
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a72      	ldr	r2, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xd8>
 800205c:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6b      	ldr	r2, [pc, #428]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fc36 	bl	80018ec <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fc32 	bl	80018ec <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e229      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xe8>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff fc22 	bl	80018ec <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fc1e 	bl	80018ec <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e215      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x110>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d069      	beq.n	80021ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d11c      	bne.n	800212c <HAL_RCC_OscConfig+0x190>
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d116      	bne.n	800212c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x17a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1e9      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	493d      	ldr	r1, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	e040      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d023      	beq.n	800217c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002134:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a38      	ldr	r2, [pc, #224]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff fbd4 	bl	80018ec <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff fbd0 	bl	80018ec <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1c7      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4929      	ldr	r1, [pc, #164]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
 800217a:	e018      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x280>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_RCC_OscConfig+0x280>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff fbb0 	bl	80018ec <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7ff fbac 	bl	80018ec <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1a3      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d038      	beq.n	800222c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d019      	beq.n	80021f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff fb8d 	bl	80018ec <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7ff fb89 	bl	80018ec <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e180      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x23a>
 80021f4:	e01a      	b.n	800222c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_RCC_OscConfig+0x280>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff fb73 	bl	80018ec <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff fb6f 	bl	80018ec <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d903      	bls.n	8002220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e166      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
 800221c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b92      	ldr	r3, [pc, #584]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a4 	beq.w	8002382 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b89      	ldr	r3, [pc, #548]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a88      	ldr	r2, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b86      	ldr	r3, [pc, #536]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002262:	4b83      	ldr	r3, [pc, #524]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800226e:	4b80      	ldr	r3, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7ff fb37 	bl	80018ec <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7ff fb33 	bl	80018ec <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e12a      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002294:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x4d4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x31a>
 80022a8:	4b70      	ldr	r3, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a6f      	ldr	r2, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	e02d      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x33c>
 80022be:	4b6b      	ldr	r3, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a6a      	ldr	r2, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	e01c      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x35e>
 80022e0:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a61      	ldr	r2, [pc, #388]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	4b5f      	ldr	r3, [pc, #380]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a5e      	ldr	r2, [pc, #376]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a5b      	ldr	r2, [pc, #364]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7ff fae7 	bl	80018ec <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7ff fae3 	bl	80018ec <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0d8      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <HAL_RCC_OscConfig+0x386>
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff fad1 	bl	80018ec <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7ff facd 	bl	80018ec <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0c2      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a3c      	ldr	r2, [pc, #240]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80ae 	beq.w	80024e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d06d      	beq.n	8002474 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d14b      	bne.n	8002438 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a31      	ldr	r2, [pc, #196]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80023a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fa9e 	bl	80018ec <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff fa9a 	bl	80018ec <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e091      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	085b      	lsrs	r3, r3, #1
 80023ea:	3b01      	subs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	071b      	lsls	r3, r3, #28
 80023fe:	491b      	ldr	r1, [pc, #108]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff fa6c 	bl	80018ec <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7ff fa68 	bl	80018ec <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e05f      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x47c>
 8002436:	e057      	b.n	80024e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff fa52 	bl	80018ec <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff fa4e 	bl	80018ec <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e045      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_OscConfig+0x4d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x4b0>
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x54c>
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_RCC_OscConfig+0x558>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d030      	beq.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d129      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d122      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d119      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d10f      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0d0      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 020f 	bic.w	r2, r3, #15
 8002526:	4965      	ldr	r1, [pc, #404]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d040      	beq.n	800261c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d115      	bne.n	80025da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e073      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4936      	ldr	r1, [pc, #216]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7ff f97e 	bl	80018ec <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7ff f97a 	bl	80018ec <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e053      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d210      	bcs.n	800264c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 020f 	bic.w	r2, r3, #15
 8002632:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x1cc>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1d0>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1d4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f8da 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08004af4 	.word	0x08004af4
 80026c8:	20000014 	.word	0x20000014
 80026cc:	20000018 	.word	0x20000018

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b094      	sub	sp, #80	; 0x50
 80026d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	647b      	str	r3, [r7, #68]	; 0x44
 80026dc:	2300      	movs	r3, #0
 80026de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e0:	2300      	movs	r3, #0
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e8:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d00d      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x40>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	f200 80e1 	bhi.w	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x3a>
 8002702:	e0db      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002708:	e0db      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800270c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800270e:	e0d8      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800271a:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d063      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002726:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	2200      	movs	r2, #0
 800272e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002730:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
 800273e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002742:	4622      	mov	r2, r4
 8002744:	462b      	mov	r3, r5
 8002746:	f04f 0000 	mov.w	r0, #0
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	0159      	lsls	r1, r3, #5
 8002750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002754:	0150      	lsls	r0, r2, #5
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4621      	mov	r1, r4
 800275c:	1a51      	subs	r1, r2, r1
 800275e:	6139      	str	r1, [r7, #16]
 8002760:	4629      	mov	r1, r5
 8002762:	eb63 0301 	sbc.w	r3, r3, r1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002774:	4659      	mov	r1, fp
 8002776:	018b      	lsls	r3, r1, #6
 8002778:	4651      	mov	r1, sl
 800277a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800277e:	4651      	mov	r1, sl
 8002780:	018a      	lsls	r2, r1, #6
 8002782:	4651      	mov	r1, sl
 8002784:	ebb2 0801 	subs.w	r8, r2, r1
 8002788:	4659      	mov	r1, fp
 800278a:	eb63 0901 	sbc.w	r9, r3, r1
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a2:	4690      	mov	r8, r2
 80027a4:	4699      	mov	r9, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	eb18 0303 	adds.w	r3, r8, r3
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	462b      	mov	r3, r5
 80027b0:	eb49 0303 	adc.w	r3, r9, r3
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027c2:	4629      	mov	r1, r5
 80027c4:	028b      	lsls	r3, r1, #10
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027cc:	4621      	mov	r1, r4
 80027ce:	028a      	lsls	r2, r1, #10
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	2200      	movs	r2, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e0:	f7fd fd96 	bl	8000310 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ec:	e058      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	2200      	movs	r2, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	4611      	mov	r1, r2
 80027fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
 8002804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	0159      	lsls	r1, r3, #5
 8002816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281a:	0150      	lsls	r0, r2, #5
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4641      	mov	r1, r8
 8002822:	ebb2 0a01 	subs.w	sl, r2, r1
 8002826:	4649      	mov	r1, r9
 8002828:	eb63 0b01 	sbc.w	fp, r3, r1
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800283c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002840:	ebb2 040a 	subs.w	r4, r2, sl
 8002844:	eb63 050b 	sbc.w	r5, r3, fp
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	00eb      	lsls	r3, r5, #3
 8002852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002856:	00e2      	lsls	r2, r4, #3
 8002858:	4614      	mov	r4, r2
 800285a:	461d      	mov	r5, r3
 800285c:	4643      	mov	r3, r8
 800285e:	18e3      	adds	r3, r4, r3
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	464b      	mov	r3, r9
 8002864:	eb45 0303 	adc.w	r3, r5, r3
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002876:	4629      	mov	r1, r5
 8002878:	028b      	lsls	r3, r1, #10
 800287a:	4621      	mov	r1, r4
 800287c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002880:	4621      	mov	r1, r4
 8002882:	028a      	lsls	r2, r1, #10
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288a:	2200      	movs	r2, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	61fa      	str	r2, [r7, #28]
 8002890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002894:	f7fd fd3c 	bl	8000310 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4613      	mov	r3, r2
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80028b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3750      	adds	r7, #80	; 0x50
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	00f42400 	.word	0x00f42400

080028d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_GetHCLKFreq+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000014 	.word	0x20000014

080028f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f4:	f7ff fff0 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0a9b      	lsrs	r3, r3, #10
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	08004b04 	.word	0x08004b04

08002918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800291c:	f7ff ffdc 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0b5b      	lsrs	r3, r3, #13
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK2Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	08004b04 	.word	0x08004b04

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002968:	4b69      	ldr	r3, [pc, #420]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a68      	ldr	r2, [pc, #416]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002972:	6093      	str	r3, [r2, #8]
 8002974:	4b66      	ldr	r3, [pc, #408]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	4964      	ldr	r1, [pc, #400]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d017      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800299a:	4b5d      	ldr	r3, [pc, #372]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	4959      	ldr	r1, [pc, #356]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b8:	d101      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d017      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d6:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	494a      	ldr	r1, [pc, #296]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f4:	d101      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 808b 	beq.w	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	4a39      	ldr	r2, [pc, #228]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a30:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a3c:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a48:	f7fe ff50 	bl	80018ec <HAL_GetTick>
 8002a4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fe ff4c 	bl	80018ec <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e38f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6e:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d035      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d02e      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a1a      	ldr	r2, [pc, #104]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d114      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe ff14 	bl	80018ec <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe ff10 	bl	80018ec <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e351      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ee      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af6:	d111      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b06:	400b      	ands	r3, r1
 8002b08:	4901      	ldr	r1, [pc, #4]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40007000 	.word	0x40007000
 8002b18:	0ffffcff 	.word	0x0ffffcff
 8002b1c:	4bac      	ldr	r3, [pc, #688]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4aab      	ldr	r2, [pc, #684]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b26:	6093      	str	r3, [r2, #8]
 8002b28:	4ba9      	ldr	r3, [pc, #676]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	49a6      	ldr	r1, [pc, #664]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d010      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b46:	4ba2      	ldr	r3, [pc, #648]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b4c:	4aa0      	ldr	r2, [pc, #640]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b56:	4b9e      	ldr	r3, [pc, #632]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	499b      	ldr	r1, [pc, #620]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b74:	4b96      	ldr	r3, [pc, #600]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b82:	4993      	ldr	r1, [pc, #588]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b96:	4b8e      	ldr	r3, [pc, #568]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba4:	498a      	ldr	r1, [pc, #552]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb8:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc6:	4982      	ldr	r1, [pc, #520]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bda:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4979      	ldr	r1, [pc, #484]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bfc:	4b74      	ldr	r3, [pc, #464]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4971      	ldr	r1, [pc, #452]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c1e:	4b6c      	ldr	r3, [pc, #432]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	f023 020c 	bic.w	r2, r3, #12
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	4968      	ldr	r1, [pc, #416]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c40:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	4960      	ldr	r1, [pc, #384]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c62:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	4957      	ldr	r1, [pc, #348]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c84:	4b52      	ldr	r3, [pc, #328]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	494f      	ldr	r1, [pc, #316]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	4946      	ldr	r1, [pc, #280]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	493e      	ldr	r1, [pc, #248]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	4935      	ldr	r1, [pc, #212]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d0c:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1a:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d011      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d2e:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3c:	4924      	ldr	r1, [pc, #144]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	4914      	ldr	r1, [pc, #80]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da0:	490b      	ldr	r1, [pc, #44]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00f      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc4:	4902      	ldr	r1, [pc, #8]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dcc:	e002      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002de0:	4b8a      	ldr	r3, [pc, #552]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	4986      	ldr	r1, [pc, #536]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e04:	4b81      	ldr	r3, [pc, #516]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	497d      	ldr	r1, [pc, #500]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d006      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80d6 	beq.w	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e30:	4b76      	ldr	r3, [pc, #472]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a75      	ldr	r2, [pc, #468]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fd56 	bl	80018ec <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e44:	f7fe fd52 	bl	80018ec <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e195      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d021      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11d      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e76:	4b65      	ldr	r3, [pc, #404]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e84:	4b61      	ldr	r3, [pc, #388]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8a:	0e1b      	lsrs	r3, r3, #24
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	019a      	lsls	r2, r3, #6
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	041b      	lsls	r3, r3, #16
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	4958      	ldr	r1, [pc, #352]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02e      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002edc:	d129      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ede:	4b4b      	ldr	r3, [pc, #300]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef2:	0f1b      	lsrs	r3, r3, #28
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	019a      	lsls	r2, r3, #6
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	071b      	lsls	r3, r3, #28
 8002f12:	493e      	ldr	r1, [pc, #248]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f20:	f023 021f 	bic.w	r2, r3, #31
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	4938      	ldr	r1, [pc, #224]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01d      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f44:	0e1b      	lsrs	r3, r3, #24
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f52:	0f1b      	lsrs	r3, r3, #28
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	019a      	lsls	r2, r3, #6
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	061b      	lsls	r3, r3, #24
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	071b      	lsls	r3, r3, #28
 8002f72:	4926      	ldr	r1, [pc, #152]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d011      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	019a      	lsls	r2, r3, #6
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	491a      	ldr	r1, [pc, #104]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb6:	f7fe fc99 	bl	80018ec <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fbe:	f7fe fc95 	bl	80018ec <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b64      	cmp	r3, #100	; 0x64
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0d8      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	f040 80ce 	bne.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fc7c 	bl	80018ec <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ff6:	e00b      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ff8:	f7fe fc78 	bl	80018ec <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d904      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0bb      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301c:	d0ec      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800303a:	2b00      	cmp	r3, #0
 800303c:	d02e      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12a      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003054:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	0f1b      	lsrs	r3, r3, #28
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	019a      	lsls	r2, r3, #6
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	4944      	ldr	r1, [pc, #272]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003082:	4b42      	ldr	r3, [pc, #264]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003088:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	493d      	ldr	r1, [pc, #244]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d022      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b0:	d11d      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	0e1b      	lsrs	r3, r3, #24
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	0f1b      	lsrs	r3, r3, #28
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	019a      	lsls	r2, r3, #6
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	061b      	lsls	r3, r3, #24
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	071b      	lsls	r3, r3, #28
 80030e6:	4929      	ldr	r1, [pc, #164]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d028      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	0e1b      	lsrs	r3, r3, #24
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	019a      	lsls	r2, r3, #6
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	071b      	lsls	r3, r3, #28
 800312e:	4917      	ldr	r1, [pc, #92]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	4911      	ldr	r1, [pc, #68]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0e      	ldr	r2, [pc, #56]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003158:	f7fe fbc8 	bl	80018ec <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003160:	f7fe fbc4 	bl	80018ec <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e007      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317e:	d1ef      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800

08003190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e040      	b.n	8003224 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe faa4 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f82c 	bl	800322c <UART_SetConfig>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e022      	b.n	8003224 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa84 	bl	80036f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fb0b 	bl	8003838 <UART_CheckIdleState>
 8003222:	4603      	mov	r3, r0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4ba6      	ldr	r3, [pc, #664]	; (80034f0 <UART_SetConfig+0x2c4>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	430b      	orrs	r3, r1
 8003262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a94      	ldr	r2, [pc, #592]	; (80034f4 <UART_SetConfig+0x2c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0xbe>
 80032a8:	4b93      	ldr	r3, [pc, #588]	; (80034f8 <UART_SetConfig+0x2cc>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d816      	bhi.n	80032e4 <UART_SetConfig+0xb8>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <UART_SetConfig+0x90>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032d9 	.word	0x080032d9
 80032c4:	080032d3 	.word	0x080032d3
 80032c8:	080032df 	.word	0x080032df
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e150      	b.n	8003574 <UART_SetConfig+0x348>
 80032d2:	2302      	movs	r3, #2
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e14d      	b.n	8003574 <UART_SetConfig+0x348>
 80032d8:	2304      	movs	r3, #4
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e14a      	b.n	8003574 <UART_SetConfig+0x348>
 80032de:	2308      	movs	r3, #8
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e147      	b.n	8003574 <UART_SetConfig+0x348>
 80032e4:	2310      	movs	r3, #16
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e144      	b.n	8003574 <UART_SetConfig+0x348>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a83      	ldr	r2, [pc, #524]	; (80034fc <UART_SetConfig+0x2d0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d132      	bne.n	800335a <UART_SetConfig+0x12e>
 80032f4:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <UART_SetConfig+0x2cc>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d828      	bhi.n	8003354 <UART_SetConfig+0x128>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <UART_SetConfig+0xdc>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	0800333d 	.word	0x0800333d
 800330c:	08003355 	.word	0x08003355
 8003310:	08003355 	.word	0x08003355
 8003314:	08003355 	.word	0x08003355
 8003318:	08003349 	.word	0x08003349
 800331c:	08003355 	.word	0x08003355
 8003320:	08003355 	.word	0x08003355
 8003324:	08003355 	.word	0x08003355
 8003328:	08003343 	.word	0x08003343
 800332c:	08003355 	.word	0x08003355
 8003330:	08003355 	.word	0x08003355
 8003334:	08003355 	.word	0x08003355
 8003338:	0800334f 	.word	0x0800334f
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e118      	b.n	8003574 <UART_SetConfig+0x348>
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e115      	b.n	8003574 <UART_SetConfig+0x348>
 8003348:	2304      	movs	r3, #4
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e112      	b.n	8003574 <UART_SetConfig+0x348>
 800334e:	2308      	movs	r3, #8
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e10f      	b.n	8003574 <UART_SetConfig+0x348>
 8003354:	2310      	movs	r3, #16
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e10c      	b.n	8003574 <UART_SetConfig+0x348>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a68      	ldr	r2, [pc, #416]	; (8003500 <UART_SetConfig+0x2d4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d120      	bne.n	80033a6 <UART_SetConfig+0x17a>
 8003364:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <UART_SetConfig+0x2cc>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800336e:	2b30      	cmp	r3, #48	; 0x30
 8003370:	d013      	beq.n	800339a <UART_SetConfig+0x16e>
 8003372:	2b30      	cmp	r3, #48	; 0x30
 8003374:	d814      	bhi.n	80033a0 <UART_SetConfig+0x174>
 8003376:	2b20      	cmp	r3, #32
 8003378:	d009      	beq.n	800338e <UART_SetConfig+0x162>
 800337a:	2b20      	cmp	r3, #32
 800337c:	d810      	bhi.n	80033a0 <UART_SetConfig+0x174>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <UART_SetConfig+0x15c>
 8003382:	2b10      	cmp	r3, #16
 8003384:	d006      	beq.n	8003394 <UART_SetConfig+0x168>
 8003386:	e00b      	b.n	80033a0 <UART_SetConfig+0x174>
 8003388:	2300      	movs	r3, #0
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0f2      	b.n	8003574 <UART_SetConfig+0x348>
 800338e:	2302      	movs	r3, #2
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e0ef      	b.n	8003574 <UART_SetConfig+0x348>
 8003394:	2304      	movs	r3, #4
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e0ec      	b.n	8003574 <UART_SetConfig+0x348>
 800339a:	2308      	movs	r3, #8
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	e0e9      	b.n	8003574 <UART_SetConfig+0x348>
 80033a0:	2310      	movs	r3, #16
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e0e6      	b.n	8003574 <UART_SetConfig+0x348>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a56      	ldr	r2, [pc, #344]	; (8003504 <UART_SetConfig+0x2d8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d120      	bne.n	80033f2 <UART_SetConfig+0x1c6>
 80033b0:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <UART_SetConfig+0x2cc>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ba:	2bc0      	cmp	r3, #192	; 0xc0
 80033bc:	d013      	beq.n	80033e6 <UART_SetConfig+0x1ba>
 80033be:	2bc0      	cmp	r3, #192	; 0xc0
 80033c0:	d814      	bhi.n	80033ec <UART_SetConfig+0x1c0>
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d009      	beq.n	80033da <UART_SetConfig+0x1ae>
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d810      	bhi.n	80033ec <UART_SetConfig+0x1c0>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <UART_SetConfig+0x1a8>
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d006      	beq.n	80033e0 <UART_SetConfig+0x1b4>
 80033d2:	e00b      	b.n	80033ec <UART_SetConfig+0x1c0>
 80033d4:	2300      	movs	r3, #0
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e0cc      	b.n	8003574 <UART_SetConfig+0x348>
 80033da:	2302      	movs	r3, #2
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e0c9      	b.n	8003574 <UART_SetConfig+0x348>
 80033e0:	2304      	movs	r3, #4
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e0c6      	b.n	8003574 <UART_SetConfig+0x348>
 80033e6:	2308      	movs	r3, #8
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e0c3      	b.n	8003574 <UART_SetConfig+0x348>
 80033ec:	2310      	movs	r3, #16
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e0c0      	b.n	8003574 <UART_SetConfig+0x348>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a44      	ldr	r2, [pc, #272]	; (8003508 <UART_SetConfig+0x2dc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d125      	bne.n	8003448 <UART_SetConfig+0x21c>
 80033fc:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <UART_SetConfig+0x2cc>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	d017      	beq.n	800343c <UART_SetConfig+0x210>
 800340c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003410:	d817      	bhi.n	8003442 <UART_SetConfig+0x216>
 8003412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003416:	d00b      	beq.n	8003430 <UART_SetConfig+0x204>
 8003418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341c:	d811      	bhi.n	8003442 <UART_SetConfig+0x216>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <UART_SetConfig+0x1fe>
 8003422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003426:	d006      	beq.n	8003436 <UART_SetConfig+0x20a>
 8003428:	e00b      	b.n	8003442 <UART_SetConfig+0x216>
 800342a:	2300      	movs	r3, #0
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e0a1      	b.n	8003574 <UART_SetConfig+0x348>
 8003430:	2302      	movs	r3, #2
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e09e      	b.n	8003574 <UART_SetConfig+0x348>
 8003436:	2304      	movs	r3, #4
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e09b      	b.n	8003574 <UART_SetConfig+0x348>
 800343c:	2308      	movs	r3, #8
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e098      	b.n	8003574 <UART_SetConfig+0x348>
 8003442:	2310      	movs	r3, #16
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e095      	b.n	8003574 <UART_SetConfig+0x348>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2f      	ldr	r2, [pc, #188]	; (800350c <UART_SetConfig+0x2e0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d125      	bne.n	800349e <UART_SetConfig+0x272>
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <UART_SetConfig+0x2cc>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800345c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003460:	d017      	beq.n	8003492 <UART_SetConfig+0x266>
 8003462:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003466:	d817      	bhi.n	8003498 <UART_SetConfig+0x26c>
 8003468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346c:	d00b      	beq.n	8003486 <UART_SetConfig+0x25a>
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d811      	bhi.n	8003498 <UART_SetConfig+0x26c>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <UART_SetConfig+0x254>
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d006      	beq.n	800348c <UART_SetConfig+0x260>
 800347e:	e00b      	b.n	8003498 <UART_SetConfig+0x26c>
 8003480:	2301      	movs	r3, #1
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e076      	b.n	8003574 <UART_SetConfig+0x348>
 8003486:	2302      	movs	r3, #2
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e073      	b.n	8003574 <UART_SetConfig+0x348>
 800348c:	2304      	movs	r3, #4
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e070      	b.n	8003574 <UART_SetConfig+0x348>
 8003492:	2308      	movs	r3, #8
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e06d      	b.n	8003574 <UART_SetConfig+0x348>
 8003498:	2310      	movs	r3, #16
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e06a      	b.n	8003574 <UART_SetConfig+0x348>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <UART_SetConfig+0x2e4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d138      	bne.n	800351a <UART_SetConfig+0x2ee>
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <UART_SetConfig+0x2cc>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b6:	d017      	beq.n	80034e8 <UART_SetConfig+0x2bc>
 80034b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034bc:	d82a      	bhi.n	8003514 <UART_SetConfig+0x2e8>
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d00b      	beq.n	80034dc <UART_SetConfig+0x2b0>
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c8:	d824      	bhi.n	8003514 <UART_SetConfig+0x2e8>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <UART_SetConfig+0x2aa>
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	d006      	beq.n	80034e2 <UART_SetConfig+0x2b6>
 80034d4:	e01e      	b.n	8003514 <UART_SetConfig+0x2e8>
 80034d6:	2300      	movs	r3, #0
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e04b      	b.n	8003574 <UART_SetConfig+0x348>
 80034dc:	2302      	movs	r3, #2
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e048      	b.n	8003574 <UART_SetConfig+0x348>
 80034e2:	2304      	movs	r3, #4
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e045      	b.n	8003574 <UART_SetConfig+0x348>
 80034e8:	2308      	movs	r3, #8
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e042      	b.n	8003574 <UART_SetConfig+0x348>
 80034ee:	bf00      	nop
 80034f0:	efff69f3 	.word	0xefff69f3
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40004400 	.word	0x40004400
 8003500:	40004800 	.word	0x40004800
 8003504:	40004c00 	.word	0x40004c00
 8003508:	40005000 	.word	0x40005000
 800350c:	40011400 	.word	0x40011400
 8003510:	40007800 	.word	0x40007800
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e02c      	b.n	8003574 <UART_SetConfig+0x348>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <UART_SetConfig+0x4bc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0x344>
 8003524:	4b71      	ldr	r3, [pc, #452]	; (80036ec <UART_SetConfig+0x4c0>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800352e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003532:	d017      	beq.n	8003564 <UART_SetConfig+0x338>
 8003534:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003538:	d817      	bhi.n	800356a <UART_SetConfig+0x33e>
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353e:	d00b      	beq.n	8003558 <UART_SetConfig+0x32c>
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d811      	bhi.n	800356a <UART_SetConfig+0x33e>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <UART_SetConfig+0x326>
 800354a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354e:	d006      	beq.n	800355e <UART_SetConfig+0x332>
 8003550:	e00b      	b.n	800356a <UART_SetConfig+0x33e>
 8003552:	2300      	movs	r3, #0
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e00d      	b.n	8003574 <UART_SetConfig+0x348>
 8003558:	2302      	movs	r3, #2
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e00a      	b.n	8003574 <UART_SetConfig+0x348>
 800355e:	2304      	movs	r3, #4
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e007      	b.n	8003574 <UART_SetConfig+0x348>
 8003564:	2308      	movs	r3, #8
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e004      	b.n	8003574 <UART_SetConfig+0x348>
 800356a:	2310      	movs	r3, #16
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e001      	b.n	8003574 <UART_SetConfig+0x348>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	d15b      	bne.n	8003636 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800357e:	7ffb      	ldrb	r3, [r7, #31]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d828      	bhi.n	80035d6 <UART_SetConfig+0x3aa>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <UART_SetConfig+0x360>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035b9 	.word	0x080035b9
 8003594:	080035c1 	.word	0x080035c1
 8003598:	080035d7 	.word	0x080035d7
 800359c:	080035c7 	.word	0x080035c7
 80035a0:	080035d7 	.word	0x080035d7
 80035a4:	080035d7 	.word	0x080035d7
 80035a8:	080035d7 	.word	0x080035d7
 80035ac:	080035cf 	.word	0x080035cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7ff f99e 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 80035b4:	61b8      	str	r0, [r7, #24]
        break;
 80035b6:	e013      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7ff f9ae 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 80035bc:	61b8      	str	r0, [r7, #24]
        break;
 80035be:	e00f      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <UART_SetConfig+0x4c4>)
 80035c2:	61bb      	str	r3, [r7, #24]
        break;
 80035c4:	e00c      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c6:	f7ff f883 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 80035ca:	61b8      	str	r0, [r7, #24]
        break;
 80035cc:	e008      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d2:	61bb      	str	r3, [r7, #24]
        break;
 80035d4:	e004      	b.n	80035e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	77bb      	strb	r3, [r7, #30]
        break;
 80035de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d074      	beq.n	80036d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	005a      	lsls	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d916      	bls.n	8003630 <UART_SetConfig+0x404>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d212      	bcs.n	8003630 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f023 030f 	bic.w	r3, r3, #15
 8003612:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	b29a      	uxth	r2, r3
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	4313      	orrs	r3, r2
 8003624:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	89fa      	ldrh	r2, [r7, #14]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e04f      	b.n	80036d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77bb      	strb	r3, [r7, #30]
 8003634:	e04c      	b.n	80036d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d828      	bhi.n	800368e <UART_SetConfig+0x462>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x418>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003669 	.word	0x08003669
 8003648:	08003671 	.word	0x08003671
 800364c:	08003679 	.word	0x08003679
 8003650:	0800368f 	.word	0x0800368f
 8003654:	0800367f 	.word	0x0800367f
 8003658:	0800368f 	.word	0x0800368f
 800365c:	0800368f 	.word	0x0800368f
 8003660:	0800368f 	.word	0x0800368f
 8003664:	08003687 	.word	0x08003687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7ff f942 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 800366c:	61b8      	str	r0, [r7, #24]
        break;
 800366e:	e013      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003670:	f7ff f952 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 8003674:	61b8      	str	r0, [r7, #24]
        break;
 8003676:	e00f      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <UART_SetConfig+0x4c4>)
 800367a:	61bb      	str	r3, [r7, #24]
        break;
 800367c:	e00c      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367e:	f7ff f827 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8003682:	61b8      	str	r0, [r7, #24]
        break;
 8003684:	e008      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368a:	61bb      	str	r3, [r7, #24]
        break;
 800368c:	e004      	b.n	8003698 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	77bb      	strb	r3, [r7, #30]
        break;
 8003696:	bf00      	nop
    }

    if (pclk != 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	085a      	lsrs	r2, r3, #1
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	441a      	add	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d909      	bls.n	80036cc <UART_SetConfig+0x4a0>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036be:	d205      	bcs.n	80036cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	e001      	b.n	80036d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40007c00 	.word	0x40007c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	00f42400 	.word	0x00f42400

080036f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01a      	beq.n	800380a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f2:	d10a      	bne.n	800380a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
  }
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af02      	add	r7, sp, #8
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003848:	f7fe f850 	bl	80018ec <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b08      	cmp	r3, #8
 800385a:	d10e      	bne.n	800387a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800385c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f831 	bl	80038d2 <UART_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e027      	b.n	80038ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d10e      	bne.n	80038a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f81b 	bl	80038d2 <UART_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e011      	b.n	80038ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b09c      	sub	sp, #112	; 0x70
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e2:	e0a7      	b.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	f000 80a3 	beq.w	8003a34 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7fd fffd 	bl	80018ec <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <UART_WaitOnFlagUntilTimeout+0x32>
 80038fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003900:	2b00      	cmp	r3, #0
 8003902:	d13f      	bne.n	8003984 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003918:	667b      	str	r3, [r7, #100]	; 0x64
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003924:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003928:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e6      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3308      	adds	r3, #8
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	663b      	str	r3, [r7, #96]	; 0x60
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003956:	64ba      	str	r2, [r7, #72]	; 0x48
 8003958:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800395c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e068      	b.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d050      	beq.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a0:	d148      	bne.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
 80039cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e6      	bne.n	80039ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	613b      	str	r3, [r7, #16]
   return(result);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039fe:	623a      	str	r2, [r7, #32]
 8003a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	69f9      	ldr	r1, [r7, #28]
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e010      	b.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	f43f af48 	beq.w	80038e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3770      	adds	r7, #112	; 0x70
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <siprintf>:
 8003a60:	b40e      	push	{r1, r2, r3}
 8003a62:	b500      	push	{lr}
 8003a64:	b09c      	sub	sp, #112	; 0x70
 8003a66:	ab1d      	add	r3, sp, #116	; 0x74
 8003a68:	9002      	str	r0, [sp, #8]
 8003a6a:	9006      	str	r0, [sp, #24]
 8003a6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a70:	4809      	ldr	r0, [pc, #36]	; (8003a98 <siprintf+0x38>)
 8003a72:	9107      	str	r1, [sp, #28]
 8003a74:	9104      	str	r1, [sp, #16]
 8003a76:	4909      	ldr	r1, [pc, #36]	; (8003a9c <siprintf+0x3c>)
 8003a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a7c:	9105      	str	r1, [sp, #20]
 8003a7e:	6800      	ldr	r0, [r0, #0]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	a902      	add	r1, sp, #8
 8003a84:	f000 f9a2 	bl	8003dcc <_svfiprintf_r>
 8003a88:	9b02      	ldr	r3, [sp, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	b01c      	add	sp, #112	; 0x70
 8003a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a94:	b003      	add	sp, #12
 8003a96:	4770      	bx	lr
 8003a98:	2000006c 	.word	0x2000006c
 8003a9c:	ffff0208 	.word	0xffff0208

08003aa0 <memset>:
 8003aa0:	4402      	add	r2, r0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d100      	bne.n	8003aaa <memset+0xa>
 8003aa8:	4770      	bx	lr
 8003aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003aae:	e7f9      	b.n	8003aa4 <memset+0x4>

08003ab0 <strcat>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	7814      	ldrb	r4, [r2, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	3201      	adds	r2, #1
 8003aba:	2c00      	cmp	r4, #0
 8003abc:	d1fa      	bne.n	8003ab4 <strcat+0x4>
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ac4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	d1f9      	bne.n	8003ac0 <strcat+0x10>
 8003acc:	bd10      	pop	{r4, pc}
	...

08003ad0 <__errno>:
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <__errno+0x8>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	2000006c 	.word	0x2000006c

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4d0d      	ldr	r5, [pc, #52]	; (8003b14 <__libc_init_array+0x38>)
 8003ae0:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	4d0b      	ldr	r5, [pc, #44]	; (8003b1c <__libc_init_array+0x40>)
 8003aee:	4c0c      	ldr	r4, [pc, #48]	; (8003b20 <__libc_init_array+0x44>)
 8003af0:	f000 fc6a 	bl	80043c8 <_init>
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	2600      	movs	r6, #0
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	08004b48 	.word	0x08004b48
 8003b18:	08004b48 	.word	0x08004b48
 8003b1c:	08004b48 	.word	0x08004b48
 8003b20:	08004b4c 	.word	0x08004b4c

08003b24 <__retarget_lock_acquire_recursive>:
 8003b24:	4770      	bx	lr

08003b26 <__retarget_lock_release_recursive>:
 8003b26:	4770      	bx	lr

08003b28 <_free_r>:
 8003b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	d044      	beq.n	8003bb8 <_free_r+0x90>
 8003b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b32:	9001      	str	r0, [sp, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f1a1 0404 	sub.w	r4, r1, #4
 8003b3a:	bfb8      	it	lt
 8003b3c:	18e4      	addlt	r4, r4, r3
 8003b3e:	f000 f8df 	bl	8003d00 <__malloc_lock>
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <_free_r+0x94>)
 8003b44:	9801      	ldr	r0, [sp, #4]
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	b933      	cbnz	r3, 8003b58 <_free_r+0x30>
 8003b4a:	6063      	str	r3, [r4, #4]
 8003b4c:	6014      	str	r4, [r2, #0]
 8003b4e:	b003      	add	sp, #12
 8003b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b54:	f000 b8da 	b.w	8003d0c <__malloc_unlock>
 8003b58:	42a3      	cmp	r3, r4
 8003b5a:	d908      	bls.n	8003b6e <_free_r+0x46>
 8003b5c:	6825      	ldr	r5, [r4, #0]
 8003b5e:	1961      	adds	r1, r4, r5
 8003b60:	428b      	cmp	r3, r1
 8003b62:	bf01      	itttt	eq
 8003b64:	6819      	ldreq	r1, [r3, #0]
 8003b66:	685b      	ldreq	r3, [r3, #4]
 8003b68:	1949      	addeq	r1, r1, r5
 8003b6a:	6021      	streq	r1, [r4, #0]
 8003b6c:	e7ed      	b.n	8003b4a <_free_r+0x22>
 8003b6e:	461a      	mov	r2, r3
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	b10b      	cbz	r3, 8003b78 <_free_r+0x50>
 8003b74:	42a3      	cmp	r3, r4
 8003b76:	d9fa      	bls.n	8003b6e <_free_r+0x46>
 8003b78:	6811      	ldr	r1, [r2, #0]
 8003b7a:	1855      	adds	r5, r2, r1
 8003b7c:	42a5      	cmp	r5, r4
 8003b7e:	d10b      	bne.n	8003b98 <_free_r+0x70>
 8003b80:	6824      	ldr	r4, [r4, #0]
 8003b82:	4421      	add	r1, r4
 8003b84:	1854      	adds	r4, r2, r1
 8003b86:	42a3      	cmp	r3, r4
 8003b88:	6011      	str	r1, [r2, #0]
 8003b8a:	d1e0      	bne.n	8003b4e <_free_r+0x26>
 8003b8c:	681c      	ldr	r4, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	6053      	str	r3, [r2, #4]
 8003b92:	440c      	add	r4, r1
 8003b94:	6014      	str	r4, [r2, #0]
 8003b96:	e7da      	b.n	8003b4e <_free_r+0x26>
 8003b98:	d902      	bls.n	8003ba0 <_free_r+0x78>
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	6003      	str	r3, [r0, #0]
 8003b9e:	e7d6      	b.n	8003b4e <_free_r+0x26>
 8003ba0:	6825      	ldr	r5, [r4, #0]
 8003ba2:	1961      	adds	r1, r4, r5
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	bf04      	itt	eq
 8003ba8:	6819      	ldreq	r1, [r3, #0]
 8003baa:	685b      	ldreq	r3, [r3, #4]
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	bf04      	itt	eq
 8003bb0:	1949      	addeq	r1, r1, r5
 8003bb2:	6021      	streq	r1, [r4, #0]
 8003bb4:	6054      	str	r4, [r2, #4]
 8003bb6:	e7ca      	b.n	8003b4e <_free_r+0x26>
 8003bb8:	b003      	add	sp, #12
 8003bba:	bd30      	pop	{r4, r5, pc}
 8003bbc:	20000444 	.word	0x20000444

08003bc0 <sbrk_aligned>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	4e0e      	ldr	r6, [pc, #56]	; (8003bfc <sbrk_aligned+0x3c>)
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	6831      	ldr	r1, [r6, #0]
 8003bc8:	4605      	mov	r5, r0
 8003bca:	b911      	cbnz	r1, 8003bd2 <sbrk_aligned+0x12>
 8003bcc:	f000 fba6 	bl	800431c <_sbrk_r>
 8003bd0:	6030      	str	r0, [r6, #0]
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 fba1 	bl	800431c <_sbrk_r>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d00a      	beq.n	8003bf4 <sbrk_aligned+0x34>
 8003bde:	1cc4      	adds	r4, r0, #3
 8003be0:	f024 0403 	bic.w	r4, r4, #3
 8003be4:	42a0      	cmp	r0, r4
 8003be6:	d007      	beq.n	8003bf8 <sbrk_aligned+0x38>
 8003be8:	1a21      	subs	r1, r4, r0
 8003bea:	4628      	mov	r0, r5
 8003bec:	f000 fb96 	bl	800431c <_sbrk_r>
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	d101      	bne.n	8003bf8 <sbrk_aligned+0x38>
 8003bf4:	f04f 34ff 	mov.w	r4, #4294967295
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	20000448 	.word	0x20000448

08003c00 <_malloc_r>:
 8003c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c04:	1ccd      	adds	r5, r1, #3
 8003c06:	f025 0503 	bic.w	r5, r5, #3
 8003c0a:	3508      	adds	r5, #8
 8003c0c:	2d0c      	cmp	r5, #12
 8003c0e:	bf38      	it	cc
 8003c10:	250c      	movcc	r5, #12
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	4607      	mov	r7, r0
 8003c16:	db01      	blt.n	8003c1c <_malloc_r+0x1c>
 8003c18:	42a9      	cmp	r1, r5
 8003c1a:	d905      	bls.n	8003c28 <_malloc_r+0x28>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	2600      	movs	r6, #0
 8003c22:	4630      	mov	r0, r6
 8003c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003cfc <_malloc_r+0xfc>
 8003c2c:	f000 f868 	bl	8003d00 <__malloc_lock>
 8003c30:	f8d8 3000 	ldr.w	r3, [r8]
 8003c34:	461c      	mov	r4, r3
 8003c36:	bb5c      	cbnz	r4, 8003c90 <_malloc_r+0x90>
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f7ff ffc0 	bl	8003bc0 <sbrk_aligned>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	4604      	mov	r4, r0
 8003c44:	d155      	bne.n	8003cf2 <_malloc_r+0xf2>
 8003c46:	f8d8 4000 	ldr.w	r4, [r8]
 8003c4a:	4626      	mov	r6, r4
 8003c4c:	2e00      	cmp	r6, #0
 8003c4e:	d145      	bne.n	8003cdc <_malloc_r+0xdc>
 8003c50:	2c00      	cmp	r4, #0
 8003c52:	d048      	beq.n	8003ce6 <_malloc_r+0xe6>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	4631      	mov	r1, r6
 8003c58:	4638      	mov	r0, r7
 8003c5a:	eb04 0903 	add.w	r9, r4, r3
 8003c5e:	f000 fb5d 	bl	800431c <_sbrk_r>
 8003c62:	4581      	cmp	r9, r0
 8003c64:	d13f      	bne.n	8003ce6 <_malloc_r+0xe6>
 8003c66:	6821      	ldr	r1, [r4, #0]
 8003c68:	1a6d      	subs	r5, r5, r1
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f7ff ffa7 	bl	8003bc0 <sbrk_aligned>
 8003c72:	3001      	adds	r0, #1
 8003c74:	d037      	beq.n	8003ce6 <_malloc_r+0xe6>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	442b      	add	r3, r5
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d038      	beq.n	8003cf6 <_malloc_r+0xf6>
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	42a2      	cmp	r2, r4
 8003c88:	d12b      	bne.n	8003ce2 <_malloc_r+0xe2>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	e00f      	b.n	8003cb0 <_malloc_r+0xb0>
 8003c90:	6822      	ldr	r2, [r4, #0]
 8003c92:	1b52      	subs	r2, r2, r5
 8003c94:	d41f      	bmi.n	8003cd6 <_malloc_r+0xd6>
 8003c96:	2a0b      	cmp	r2, #11
 8003c98:	d917      	bls.n	8003cca <_malloc_r+0xca>
 8003c9a:	1961      	adds	r1, r4, r5
 8003c9c:	42a3      	cmp	r3, r4
 8003c9e:	6025      	str	r5, [r4, #0]
 8003ca0:	bf18      	it	ne
 8003ca2:	6059      	strne	r1, [r3, #4]
 8003ca4:	6863      	ldr	r3, [r4, #4]
 8003ca6:	bf08      	it	eq
 8003ca8:	f8c8 1000 	streq.w	r1, [r8]
 8003cac:	5162      	str	r2, [r4, r5]
 8003cae:	604b      	str	r3, [r1, #4]
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f104 060b 	add.w	r6, r4, #11
 8003cb6:	f000 f829 	bl	8003d0c <__malloc_unlock>
 8003cba:	f026 0607 	bic.w	r6, r6, #7
 8003cbe:	1d23      	adds	r3, r4, #4
 8003cc0:	1af2      	subs	r2, r6, r3
 8003cc2:	d0ae      	beq.n	8003c22 <_malloc_r+0x22>
 8003cc4:	1b9b      	subs	r3, r3, r6
 8003cc6:	50a3      	str	r3, [r4, r2]
 8003cc8:	e7ab      	b.n	8003c22 <_malloc_r+0x22>
 8003cca:	42a3      	cmp	r3, r4
 8003ccc:	6862      	ldr	r2, [r4, #4]
 8003cce:	d1dd      	bne.n	8003c8c <_malloc_r+0x8c>
 8003cd0:	f8c8 2000 	str.w	r2, [r8]
 8003cd4:	e7ec      	b.n	8003cb0 <_malloc_r+0xb0>
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	6864      	ldr	r4, [r4, #4]
 8003cda:	e7ac      	b.n	8003c36 <_malloc_r+0x36>
 8003cdc:	4634      	mov	r4, r6
 8003cde:	6876      	ldr	r6, [r6, #4]
 8003ce0:	e7b4      	b.n	8003c4c <_malloc_r+0x4c>
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	e7cc      	b.n	8003c80 <_malloc_r+0x80>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4638      	mov	r0, r7
 8003cec:	f000 f80e 	bl	8003d0c <__malloc_unlock>
 8003cf0:	e797      	b.n	8003c22 <_malloc_r+0x22>
 8003cf2:	6025      	str	r5, [r4, #0]
 8003cf4:	e7dc      	b.n	8003cb0 <_malloc_r+0xb0>
 8003cf6:	605b      	str	r3, [r3, #4]
 8003cf8:	deff      	udf	#255	; 0xff
 8003cfa:	bf00      	nop
 8003cfc:	20000444 	.word	0x20000444

08003d00 <__malloc_lock>:
 8003d00:	4801      	ldr	r0, [pc, #4]	; (8003d08 <__malloc_lock+0x8>)
 8003d02:	f7ff bf0f 	b.w	8003b24 <__retarget_lock_acquire_recursive>
 8003d06:	bf00      	nop
 8003d08:	20000440 	.word	0x20000440

08003d0c <__malloc_unlock>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	; (8003d14 <__malloc_unlock+0x8>)
 8003d0e:	f7ff bf0a 	b.w	8003b26 <__retarget_lock_release_recursive>
 8003d12:	bf00      	nop
 8003d14:	20000440 	.word	0x20000440

08003d18 <__ssputs_r>:
 8003d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1c:	688e      	ldr	r6, [r1, #8]
 8003d1e:	461f      	mov	r7, r3
 8003d20:	42be      	cmp	r6, r7
 8003d22:	680b      	ldr	r3, [r1, #0]
 8003d24:	4682      	mov	sl, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4690      	mov	r8, r2
 8003d2a:	d82c      	bhi.n	8003d86 <__ssputs_r+0x6e>
 8003d2c:	898a      	ldrh	r2, [r1, #12]
 8003d2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d32:	d026      	beq.n	8003d82 <__ssputs_r+0x6a>
 8003d34:	6965      	ldr	r5, [r4, #20]
 8003d36:	6909      	ldr	r1, [r1, #16]
 8003d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d3c:	eba3 0901 	sub.w	r9, r3, r1
 8003d40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d44:	1c7b      	adds	r3, r7, #1
 8003d46:	444b      	add	r3, r9
 8003d48:	106d      	asrs	r5, r5, #1
 8003d4a:	429d      	cmp	r5, r3
 8003d4c:	bf38      	it	cc
 8003d4e:	461d      	movcc	r5, r3
 8003d50:	0553      	lsls	r3, r2, #21
 8003d52:	d527      	bpl.n	8003da4 <__ssputs_r+0x8c>
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7ff ff53 	bl	8003c00 <_malloc_r>
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	b360      	cbz	r0, 8003db8 <__ssputs_r+0xa0>
 8003d5e:	6921      	ldr	r1, [r4, #16]
 8003d60:	464a      	mov	r2, r9
 8003d62:	f000 faeb 	bl	800433c <memcpy>
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	6126      	str	r6, [r4, #16]
 8003d74:	6165      	str	r5, [r4, #20]
 8003d76:	444e      	add	r6, r9
 8003d78:	eba5 0509 	sub.w	r5, r5, r9
 8003d7c:	6026      	str	r6, [r4, #0]
 8003d7e:	60a5      	str	r5, [r4, #8]
 8003d80:	463e      	mov	r6, r7
 8003d82:	42be      	cmp	r6, r7
 8003d84:	d900      	bls.n	8003d88 <__ssputs_r+0x70>
 8003d86:	463e      	mov	r6, r7
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	4632      	mov	r2, r6
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	f000 faab 	bl	80042e8 <memmove>
 8003d92:	68a3      	ldr	r3, [r4, #8]
 8003d94:	1b9b      	subs	r3, r3, r6
 8003d96:	60a3      	str	r3, [r4, #8]
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	4433      	add	r3, r6
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	2000      	movs	r0, #0
 8003da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da4:	462a      	mov	r2, r5
 8003da6:	f000 fad7 	bl	8004358 <_realloc_r>
 8003daa:	4606      	mov	r6, r0
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d1e0      	bne.n	8003d72 <__ssputs_r+0x5a>
 8003db0:	6921      	ldr	r1, [r4, #16]
 8003db2:	4650      	mov	r0, sl
 8003db4:	f7ff feb8 	bl	8003b28 <_free_r>
 8003db8:	230c      	movs	r3, #12
 8003dba:	f8ca 3000 	str.w	r3, [sl]
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dca:	e7e9      	b.n	8003da0 <__ssputs_r+0x88>

08003dcc <_svfiprintf_r>:
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	4698      	mov	r8, r3
 8003dd2:	898b      	ldrh	r3, [r1, #12]
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	b09d      	sub	sp, #116	; 0x74
 8003dd8:	4607      	mov	r7, r0
 8003dda:	460d      	mov	r5, r1
 8003ddc:	4614      	mov	r4, r2
 8003dde:	d50e      	bpl.n	8003dfe <_svfiprintf_r+0x32>
 8003de0:	690b      	ldr	r3, [r1, #16]
 8003de2:	b963      	cbnz	r3, 8003dfe <_svfiprintf_r+0x32>
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	f7ff ff0b 	bl	8003c00 <_malloc_r>
 8003dea:	6028      	str	r0, [r5, #0]
 8003dec:	6128      	str	r0, [r5, #16]
 8003dee:	b920      	cbnz	r0, 8003dfa <_svfiprintf_r+0x2e>
 8003df0:	230c      	movs	r3, #12
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	e0d0      	b.n	8003f9c <_svfiprintf_r+0x1d0>
 8003dfa:	2340      	movs	r3, #64	; 0x40
 8003dfc:	616b      	str	r3, [r5, #20]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9309      	str	r3, [sp, #36]	; 0x24
 8003e02:	2320      	movs	r3, #32
 8003e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e0c:	2330      	movs	r3, #48	; 0x30
 8003e0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fb4 <_svfiprintf_r+0x1e8>
 8003e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e16:	f04f 0901 	mov.w	r9, #1
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	469a      	mov	sl, r3
 8003e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e22:	b10a      	cbz	r2, 8003e28 <_svfiprintf_r+0x5c>
 8003e24:	2a25      	cmp	r2, #37	; 0x25
 8003e26:	d1f9      	bne.n	8003e1c <_svfiprintf_r+0x50>
 8003e28:	ebba 0b04 	subs.w	fp, sl, r4
 8003e2c:	d00b      	beq.n	8003e46 <_svfiprintf_r+0x7a>
 8003e2e:	465b      	mov	r3, fp
 8003e30:	4622      	mov	r2, r4
 8003e32:	4629      	mov	r1, r5
 8003e34:	4638      	mov	r0, r7
 8003e36:	f7ff ff6f 	bl	8003d18 <__ssputs_r>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	f000 80a9 	beq.w	8003f92 <_svfiprintf_r+0x1c6>
 8003e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e42:	445a      	add	r2, fp
 8003e44:	9209      	str	r2, [sp, #36]	; 0x24
 8003e46:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80a1 	beq.w	8003f92 <_svfiprintf_r+0x1c6>
 8003e50:	2300      	movs	r3, #0
 8003e52:	f04f 32ff 	mov.w	r2, #4294967295
 8003e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e5a:	f10a 0a01 	add.w	sl, sl, #1
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	9307      	str	r3, [sp, #28]
 8003e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e66:	931a      	str	r3, [sp, #104]	; 0x68
 8003e68:	4654      	mov	r4, sl
 8003e6a:	2205      	movs	r2, #5
 8003e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e70:	4850      	ldr	r0, [pc, #320]	; (8003fb4 <_svfiprintf_r+0x1e8>)
 8003e72:	f7fc f9fd 	bl	8000270 <memchr>
 8003e76:	9a04      	ldr	r2, [sp, #16]
 8003e78:	b9d8      	cbnz	r0, 8003eb2 <_svfiprintf_r+0xe6>
 8003e7a:	06d0      	lsls	r0, r2, #27
 8003e7c:	bf44      	itt	mi
 8003e7e:	2320      	movmi	r3, #32
 8003e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e84:	0711      	lsls	r1, r2, #28
 8003e86:	bf44      	itt	mi
 8003e88:	232b      	movmi	r3, #43	; 0x2b
 8003e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e92:	2b2a      	cmp	r3, #42	; 0x2a
 8003e94:	d015      	beq.n	8003ec2 <_svfiprintf_r+0xf6>
 8003e96:	9a07      	ldr	r2, [sp, #28]
 8003e98:	4654      	mov	r4, sl
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f04f 0c0a 	mov.w	ip, #10
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ea6:	3b30      	subs	r3, #48	; 0x30
 8003ea8:	2b09      	cmp	r3, #9
 8003eaa:	d94d      	bls.n	8003f48 <_svfiprintf_r+0x17c>
 8003eac:	b1b0      	cbz	r0, 8003edc <_svfiprintf_r+0x110>
 8003eae:	9207      	str	r2, [sp, #28]
 8003eb0:	e014      	b.n	8003edc <_svfiprintf_r+0x110>
 8003eb2:	eba0 0308 	sub.w	r3, r0, r8
 8003eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	9304      	str	r3, [sp, #16]
 8003ebe:	46a2      	mov	sl, r4
 8003ec0:	e7d2      	b.n	8003e68 <_svfiprintf_r+0x9c>
 8003ec2:	9b03      	ldr	r3, [sp, #12]
 8003ec4:	1d19      	adds	r1, r3, #4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	9103      	str	r1, [sp, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bfbb      	ittet	lt
 8003ece:	425b      	neglt	r3, r3
 8003ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ed4:	9307      	strge	r3, [sp, #28]
 8003ed6:	9307      	strlt	r3, [sp, #28]
 8003ed8:	bfb8      	it	lt
 8003eda:	9204      	strlt	r2, [sp, #16]
 8003edc:	7823      	ldrb	r3, [r4, #0]
 8003ede:	2b2e      	cmp	r3, #46	; 0x2e
 8003ee0:	d10c      	bne.n	8003efc <_svfiprintf_r+0x130>
 8003ee2:	7863      	ldrb	r3, [r4, #1]
 8003ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee6:	d134      	bne.n	8003f52 <_svfiprintf_r+0x186>
 8003ee8:	9b03      	ldr	r3, [sp, #12]
 8003eea:	1d1a      	adds	r2, r3, #4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	9203      	str	r2, [sp, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bfb8      	it	lt
 8003ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ef8:	3402      	adds	r4, #2
 8003efa:	9305      	str	r3, [sp, #20]
 8003efc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003fc4 <_svfiprintf_r+0x1f8>
 8003f00:	7821      	ldrb	r1, [r4, #0]
 8003f02:	2203      	movs	r2, #3
 8003f04:	4650      	mov	r0, sl
 8003f06:	f7fc f9b3 	bl	8000270 <memchr>
 8003f0a:	b138      	cbz	r0, 8003f1c <_svfiprintf_r+0x150>
 8003f0c:	9b04      	ldr	r3, [sp, #16]
 8003f0e:	eba0 000a 	sub.w	r0, r0, sl
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	4082      	lsls	r2, r0
 8003f16:	4313      	orrs	r3, r2
 8003f18:	3401      	adds	r4, #1
 8003f1a:	9304      	str	r3, [sp, #16]
 8003f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f20:	4825      	ldr	r0, [pc, #148]	; (8003fb8 <_svfiprintf_r+0x1ec>)
 8003f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f26:	2206      	movs	r2, #6
 8003f28:	f7fc f9a2 	bl	8000270 <memchr>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d038      	beq.n	8003fa2 <_svfiprintf_r+0x1d6>
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <_svfiprintf_r+0x1f0>)
 8003f32:	bb1b      	cbnz	r3, 8003f7c <_svfiprintf_r+0x1b0>
 8003f34:	9b03      	ldr	r3, [sp, #12]
 8003f36:	3307      	adds	r3, #7
 8003f38:	f023 0307 	bic.w	r3, r3, #7
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	9303      	str	r3, [sp, #12]
 8003f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f42:	4433      	add	r3, r6
 8003f44:	9309      	str	r3, [sp, #36]	; 0x24
 8003f46:	e768      	b.n	8003e1a <_svfiprintf_r+0x4e>
 8003f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	2001      	movs	r0, #1
 8003f50:	e7a6      	b.n	8003ea0 <_svfiprintf_r+0xd4>
 8003f52:	2300      	movs	r3, #0
 8003f54:	3401      	adds	r4, #1
 8003f56:	9305      	str	r3, [sp, #20]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f04f 0c0a 	mov.w	ip, #10
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f64:	3a30      	subs	r2, #48	; 0x30
 8003f66:	2a09      	cmp	r2, #9
 8003f68:	d903      	bls.n	8003f72 <_svfiprintf_r+0x1a6>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0c6      	beq.n	8003efc <_svfiprintf_r+0x130>
 8003f6e:	9105      	str	r1, [sp, #20]
 8003f70:	e7c4      	b.n	8003efc <_svfiprintf_r+0x130>
 8003f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f76:	4604      	mov	r4, r0
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e7f0      	b.n	8003f5e <_svfiprintf_r+0x192>
 8003f7c:	ab03      	add	r3, sp, #12
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	462a      	mov	r2, r5
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <_svfiprintf_r+0x1f4>)
 8003f84:	a904      	add	r1, sp, #16
 8003f86:	4638      	mov	r0, r7
 8003f88:	f3af 8000 	nop.w
 8003f8c:	1c42      	adds	r2, r0, #1
 8003f8e:	4606      	mov	r6, r0
 8003f90:	d1d6      	bne.n	8003f40 <_svfiprintf_r+0x174>
 8003f92:	89ab      	ldrh	r3, [r5, #12]
 8003f94:	065b      	lsls	r3, r3, #25
 8003f96:	f53f af2d 	bmi.w	8003df4 <_svfiprintf_r+0x28>
 8003f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f9c:	b01d      	add	sp, #116	; 0x74
 8003f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa2:	ab03      	add	r3, sp, #12
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	462a      	mov	r2, r5
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <_svfiprintf_r+0x1f4>)
 8003faa:	a904      	add	r1, sp, #16
 8003fac:	4638      	mov	r0, r7
 8003fae:	f000 f879 	bl	80040a4 <_printf_i>
 8003fb2:	e7eb      	b.n	8003f8c <_svfiprintf_r+0x1c0>
 8003fb4:	08004b0c 	.word	0x08004b0c
 8003fb8:	08004b16 	.word	0x08004b16
 8003fbc:	00000000 	.word	0x00000000
 8003fc0:	08003d19 	.word	0x08003d19
 8003fc4:	08004b12 	.word	0x08004b12

08003fc8 <_printf_common>:
 8003fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	4616      	mov	r6, r2
 8003fce:	4699      	mov	r9, r3
 8003fd0:	688a      	ldr	r2, [r1, #8]
 8003fd2:	690b      	ldr	r3, [r1, #16]
 8003fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bfb8      	it	lt
 8003fdc:	4613      	movlt	r3, r2
 8003fde:	6033      	str	r3, [r6, #0]
 8003fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fe4:	4607      	mov	r7, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	b10a      	cbz	r2, 8003fee <_printf_common+0x26>
 8003fea:	3301      	adds	r3, #1
 8003fec:	6033      	str	r3, [r6, #0]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	0699      	lsls	r1, r3, #26
 8003ff2:	bf42      	ittt	mi
 8003ff4:	6833      	ldrmi	r3, [r6, #0]
 8003ff6:	3302      	addmi	r3, #2
 8003ff8:	6033      	strmi	r3, [r6, #0]
 8003ffa:	6825      	ldr	r5, [r4, #0]
 8003ffc:	f015 0506 	ands.w	r5, r5, #6
 8004000:	d106      	bne.n	8004010 <_printf_common+0x48>
 8004002:	f104 0a19 	add.w	sl, r4, #25
 8004006:	68e3      	ldr	r3, [r4, #12]
 8004008:	6832      	ldr	r2, [r6, #0]
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	42ab      	cmp	r3, r5
 800400e:	dc26      	bgt.n	800405e <_printf_common+0x96>
 8004010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004014:	1e13      	subs	r3, r2, #0
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	bf18      	it	ne
 800401a:	2301      	movne	r3, #1
 800401c:	0692      	lsls	r2, r2, #26
 800401e:	d42b      	bmi.n	8004078 <_printf_common+0xb0>
 8004020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004024:	4649      	mov	r1, r9
 8004026:	4638      	mov	r0, r7
 8004028:	47c0      	blx	r8
 800402a:	3001      	adds	r0, #1
 800402c:	d01e      	beq.n	800406c <_printf_common+0xa4>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	6922      	ldr	r2, [r4, #16]
 8004032:	f003 0306 	and.w	r3, r3, #6
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf02      	ittt	eq
 800403a:	68e5      	ldreq	r5, [r4, #12]
 800403c:	6833      	ldreq	r3, [r6, #0]
 800403e:	1aed      	subeq	r5, r5, r3
 8004040:	68a3      	ldr	r3, [r4, #8]
 8004042:	bf0c      	ite	eq
 8004044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004048:	2500      	movne	r5, #0
 800404a:	4293      	cmp	r3, r2
 800404c:	bfc4      	itt	gt
 800404e:	1a9b      	subgt	r3, r3, r2
 8004050:	18ed      	addgt	r5, r5, r3
 8004052:	2600      	movs	r6, #0
 8004054:	341a      	adds	r4, #26
 8004056:	42b5      	cmp	r5, r6
 8004058:	d11a      	bne.n	8004090 <_printf_common+0xc8>
 800405a:	2000      	movs	r0, #0
 800405c:	e008      	b.n	8004070 <_printf_common+0xa8>
 800405e:	2301      	movs	r3, #1
 8004060:	4652      	mov	r2, sl
 8004062:	4649      	mov	r1, r9
 8004064:	4638      	mov	r0, r7
 8004066:	47c0      	blx	r8
 8004068:	3001      	adds	r0, #1
 800406a:	d103      	bne.n	8004074 <_printf_common+0xac>
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004074:	3501      	adds	r5, #1
 8004076:	e7c6      	b.n	8004006 <_printf_common+0x3e>
 8004078:	18e1      	adds	r1, r4, r3
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	2030      	movs	r0, #48	; 0x30
 800407e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004082:	4422      	add	r2, r4
 8004084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800408c:	3302      	adds	r3, #2
 800408e:	e7c7      	b.n	8004020 <_printf_common+0x58>
 8004090:	2301      	movs	r3, #1
 8004092:	4622      	mov	r2, r4
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	47c0      	blx	r8
 800409a:	3001      	adds	r0, #1
 800409c:	d0e6      	beq.n	800406c <_printf_common+0xa4>
 800409e:	3601      	adds	r6, #1
 80040a0:	e7d9      	b.n	8004056 <_printf_common+0x8e>
	...

080040a4 <_printf_i>:
 80040a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	7e0f      	ldrb	r7, [r1, #24]
 80040aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040ac:	2f78      	cmp	r7, #120	; 0x78
 80040ae:	4691      	mov	r9, r2
 80040b0:	4680      	mov	r8, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	469a      	mov	sl, r3
 80040b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ba:	d807      	bhi.n	80040cc <_printf_i+0x28>
 80040bc:	2f62      	cmp	r7, #98	; 0x62
 80040be:	d80a      	bhi.n	80040d6 <_printf_i+0x32>
 80040c0:	2f00      	cmp	r7, #0
 80040c2:	f000 80d4 	beq.w	800426e <_printf_i+0x1ca>
 80040c6:	2f58      	cmp	r7, #88	; 0x58
 80040c8:	f000 80c0 	beq.w	800424c <_printf_i+0x1a8>
 80040cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040d4:	e03a      	b.n	800414c <_printf_i+0xa8>
 80040d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040da:	2b15      	cmp	r3, #21
 80040dc:	d8f6      	bhi.n	80040cc <_printf_i+0x28>
 80040de:	a101      	add	r1, pc, #4	; (adr r1, 80040e4 <_printf_i+0x40>)
 80040e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	08004151 	.word	0x08004151
 80040ec:	080040cd 	.word	0x080040cd
 80040f0:	080040cd 	.word	0x080040cd
 80040f4:	080040cd 	.word	0x080040cd
 80040f8:	080040cd 	.word	0x080040cd
 80040fc:	08004151 	.word	0x08004151
 8004100:	080040cd 	.word	0x080040cd
 8004104:	080040cd 	.word	0x080040cd
 8004108:	080040cd 	.word	0x080040cd
 800410c:	080040cd 	.word	0x080040cd
 8004110:	08004255 	.word	0x08004255
 8004114:	0800417d 	.word	0x0800417d
 8004118:	0800420f 	.word	0x0800420f
 800411c:	080040cd 	.word	0x080040cd
 8004120:	080040cd 	.word	0x080040cd
 8004124:	08004277 	.word	0x08004277
 8004128:	080040cd 	.word	0x080040cd
 800412c:	0800417d 	.word	0x0800417d
 8004130:	080040cd 	.word	0x080040cd
 8004134:	080040cd 	.word	0x080040cd
 8004138:	08004217 	.word	0x08004217
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	602a      	str	r2, [r5, #0]
 8004144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800414c:	2301      	movs	r3, #1
 800414e:	e09f      	b.n	8004290 <_printf_i+0x1ec>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	0607      	lsls	r7, r0, #24
 8004156:	f103 0104 	add.w	r1, r3, #4
 800415a:	6029      	str	r1, [r5, #0]
 800415c:	d501      	bpl.n	8004162 <_printf_i+0xbe>
 800415e:	681e      	ldr	r6, [r3, #0]
 8004160:	e003      	b.n	800416a <_printf_i+0xc6>
 8004162:	0646      	lsls	r6, r0, #25
 8004164:	d5fb      	bpl.n	800415e <_printf_i+0xba>
 8004166:	f9b3 6000 	ldrsh.w	r6, [r3]
 800416a:	2e00      	cmp	r6, #0
 800416c:	da03      	bge.n	8004176 <_printf_i+0xd2>
 800416e:	232d      	movs	r3, #45	; 0x2d
 8004170:	4276      	negs	r6, r6
 8004172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004176:	485a      	ldr	r0, [pc, #360]	; (80042e0 <_printf_i+0x23c>)
 8004178:	230a      	movs	r3, #10
 800417a:	e012      	b.n	80041a2 <_printf_i+0xfe>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	6820      	ldr	r0, [r4, #0]
 8004180:	1d19      	adds	r1, r3, #4
 8004182:	6029      	str	r1, [r5, #0]
 8004184:	0605      	lsls	r5, r0, #24
 8004186:	d501      	bpl.n	800418c <_printf_i+0xe8>
 8004188:	681e      	ldr	r6, [r3, #0]
 800418a:	e002      	b.n	8004192 <_printf_i+0xee>
 800418c:	0641      	lsls	r1, r0, #25
 800418e:	d5fb      	bpl.n	8004188 <_printf_i+0xe4>
 8004190:	881e      	ldrh	r6, [r3, #0]
 8004192:	4853      	ldr	r0, [pc, #332]	; (80042e0 <_printf_i+0x23c>)
 8004194:	2f6f      	cmp	r7, #111	; 0x6f
 8004196:	bf0c      	ite	eq
 8004198:	2308      	moveq	r3, #8
 800419a:	230a      	movne	r3, #10
 800419c:	2100      	movs	r1, #0
 800419e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041a2:	6865      	ldr	r5, [r4, #4]
 80041a4:	60a5      	str	r5, [r4, #8]
 80041a6:	2d00      	cmp	r5, #0
 80041a8:	bfa2      	ittt	ge
 80041aa:	6821      	ldrge	r1, [r4, #0]
 80041ac:	f021 0104 	bicge.w	r1, r1, #4
 80041b0:	6021      	strge	r1, [r4, #0]
 80041b2:	b90e      	cbnz	r6, 80041b8 <_printf_i+0x114>
 80041b4:	2d00      	cmp	r5, #0
 80041b6:	d04b      	beq.n	8004250 <_printf_i+0x1ac>
 80041b8:	4615      	mov	r5, r2
 80041ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80041be:	fb03 6711 	mls	r7, r3, r1, r6
 80041c2:	5dc7      	ldrb	r7, [r0, r7]
 80041c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041c8:	4637      	mov	r7, r6
 80041ca:	42bb      	cmp	r3, r7
 80041cc:	460e      	mov	r6, r1
 80041ce:	d9f4      	bls.n	80041ba <_printf_i+0x116>
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d10b      	bne.n	80041ec <_printf_i+0x148>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	07de      	lsls	r6, r3, #31
 80041d8:	d508      	bpl.n	80041ec <_printf_i+0x148>
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	6861      	ldr	r1, [r4, #4]
 80041de:	4299      	cmp	r1, r3
 80041e0:	bfde      	ittt	le
 80041e2:	2330      	movle	r3, #48	; 0x30
 80041e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ec:	1b52      	subs	r2, r2, r5
 80041ee:	6122      	str	r2, [r4, #16]
 80041f0:	f8cd a000 	str.w	sl, [sp]
 80041f4:	464b      	mov	r3, r9
 80041f6:	aa03      	add	r2, sp, #12
 80041f8:	4621      	mov	r1, r4
 80041fa:	4640      	mov	r0, r8
 80041fc:	f7ff fee4 	bl	8003fc8 <_printf_common>
 8004200:	3001      	adds	r0, #1
 8004202:	d14a      	bne.n	800429a <_printf_i+0x1f6>
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	b004      	add	sp, #16
 800420a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f043 0320 	orr.w	r3, r3, #32
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	4833      	ldr	r0, [pc, #204]	; (80042e4 <_printf_i+0x240>)
 8004218:	2778      	movs	r7, #120	; 0x78
 800421a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	6829      	ldr	r1, [r5, #0]
 8004222:	061f      	lsls	r7, r3, #24
 8004224:	f851 6b04 	ldr.w	r6, [r1], #4
 8004228:	d402      	bmi.n	8004230 <_printf_i+0x18c>
 800422a:	065f      	lsls	r7, r3, #25
 800422c:	bf48      	it	mi
 800422e:	b2b6      	uxthmi	r6, r6
 8004230:	07df      	lsls	r7, r3, #31
 8004232:	bf48      	it	mi
 8004234:	f043 0320 	orrmi.w	r3, r3, #32
 8004238:	6029      	str	r1, [r5, #0]
 800423a:	bf48      	it	mi
 800423c:	6023      	strmi	r3, [r4, #0]
 800423e:	b91e      	cbnz	r6, 8004248 <_printf_i+0x1a4>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f023 0320 	bic.w	r3, r3, #32
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	2310      	movs	r3, #16
 800424a:	e7a7      	b.n	800419c <_printf_i+0xf8>
 800424c:	4824      	ldr	r0, [pc, #144]	; (80042e0 <_printf_i+0x23c>)
 800424e:	e7e4      	b.n	800421a <_printf_i+0x176>
 8004250:	4615      	mov	r5, r2
 8004252:	e7bd      	b.n	80041d0 <_printf_i+0x12c>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	6826      	ldr	r6, [r4, #0]
 8004258:	6961      	ldr	r1, [r4, #20]
 800425a:	1d18      	adds	r0, r3, #4
 800425c:	6028      	str	r0, [r5, #0]
 800425e:	0635      	lsls	r5, r6, #24
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	d501      	bpl.n	8004268 <_printf_i+0x1c4>
 8004264:	6019      	str	r1, [r3, #0]
 8004266:	e002      	b.n	800426e <_printf_i+0x1ca>
 8004268:	0670      	lsls	r0, r6, #25
 800426a:	d5fb      	bpl.n	8004264 <_printf_i+0x1c0>
 800426c:	8019      	strh	r1, [r3, #0]
 800426e:	2300      	movs	r3, #0
 8004270:	6123      	str	r3, [r4, #16]
 8004272:	4615      	mov	r5, r2
 8004274:	e7bc      	b.n	80041f0 <_printf_i+0x14c>
 8004276:	682b      	ldr	r3, [r5, #0]
 8004278:	1d1a      	adds	r2, r3, #4
 800427a:	602a      	str	r2, [r5, #0]
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	6862      	ldr	r2, [r4, #4]
 8004280:	2100      	movs	r1, #0
 8004282:	4628      	mov	r0, r5
 8004284:	f7fb fff4 	bl	8000270 <memchr>
 8004288:	b108      	cbz	r0, 800428e <_printf_i+0x1ea>
 800428a:	1b40      	subs	r0, r0, r5
 800428c:	6060      	str	r0, [r4, #4]
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	2300      	movs	r3, #0
 8004294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004298:	e7aa      	b.n	80041f0 <_printf_i+0x14c>
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	462a      	mov	r2, r5
 800429e:	4649      	mov	r1, r9
 80042a0:	4640      	mov	r0, r8
 80042a2:	47d0      	blx	sl
 80042a4:	3001      	adds	r0, #1
 80042a6:	d0ad      	beq.n	8004204 <_printf_i+0x160>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	079b      	lsls	r3, r3, #30
 80042ac:	d413      	bmi.n	80042d6 <_printf_i+0x232>
 80042ae:	68e0      	ldr	r0, [r4, #12]
 80042b0:	9b03      	ldr	r3, [sp, #12]
 80042b2:	4298      	cmp	r0, r3
 80042b4:	bfb8      	it	lt
 80042b6:	4618      	movlt	r0, r3
 80042b8:	e7a6      	b.n	8004208 <_printf_i+0x164>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4632      	mov	r2, r6
 80042be:	4649      	mov	r1, r9
 80042c0:	4640      	mov	r0, r8
 80042c2:	47d0      	blx	sl
 80042c4:	3001      	adds	r0, #1
 80042c6:	d09d      	beq.n	8004204 <_printf_i+0x160>
 80042c8:	3501      	adds	r5, #1
 80042ca:	68e3      	ldr	r3, [r4, #12]
 80042cc:	9903      	ldr	r1, [sp, #12]
 80042ce:	1a5b      	subs	r3, r3, r1
 80042d0:	42ab      	cmp	r3, r5
 80042d2:	dcf2      	bgt.n	80042ba <_printf_i+0x216>
 80042d4:	e7eb      	b.n	80042ae <_printf_i+0x20a>
 80042d6:	2500      	movs	r5, #0
 80042d8:	f104 0619 	add.w	r6, r4, #25
 80042dc:	e7f5      	b.n	80042ca <_printf_i+0x226>
 80042de:	bf00      	nop
 80042e0:	08004b1d 	.word	0x08004b1d
 80042e4:	08004b2e 	.word	0x08004b2e

080042e8 <memmove>:
 80042e8:	4288      	cmp	r0, r1
 80042ea:	b510      	push	{r4, lr}
 80042ec:	eb01 0402 	add.w	r4, r1, r2
 80042f0:	d902      	bls.n	80042f8 <memmove+0x10>
 80042f2:	4284      	cmp	r4, r0
 80042f4:	4623      	mov	r3, r4
 80042f6:	d807      	bhi.n	8004308 <memmove+0x20>
 80042f8:	1e43      	subs	r3, r0, #1
 80042fa:	42a1      	cmp	r1, r4
 80042fc:	d008      	beq.n	8004310 <memmove+0x28>
 80042fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004306:	e7f8      	b.n	80042fa <memmove+0x12>
 8004308:	4402      	add	r2, r0
 800430a:	4601      	mov	r1, r0
 800430c:	428a      	cmp	r2, r1
 800430e:	d100      	bne.n	8004312 <memmove+0x2a>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800431a:	e7f7      	b.n	800430c <memmove+0x24>

0800431c <_sbrk_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d06      	ldr	r5, [pc, #24]	; (8004338 <_sbrk_r+0x1c>)
 8004320:	2300      	movs	r3, #0
 8004322:	4604      	mov	r4, r0
 8004324:	4608      	mov	r0, r1
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	f7fd f972 	bl	8001610 <_sbrk>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_sbrk_r+0x1a>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_sbrk_r+0x1a>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	2000043c 	.word	0x2000043c

0800433c <memcpy>:
 800433c:	440a      	add	r2, r1
 800433e:	4291      	cmp	r1, r2
 8004340:	f100 33ff 	add.w	r3, r0, #4294967295
 8004344:	d100      	bne.n	8004348 <memcpy+0xc>
 8004346:	4770      	bx	lr
 8004348:	b510      	push	{r4, lr}
 800434a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800434e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004352:	4291      	cmp	r1, r2
 8004354:	d1f9      	bne.n	800434a <memcpy+0xe>
 8004356:	bd10      	pop	{r4, pc}

08004358 <_realloc_r>:
 8004358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435c:	4680      	mov	r8, r0
 800435e:	4614      	mov	r4, r2
 8004360:	460e      	mov	r6, r1
 8004362:	b921      	cbnz	r1, 800436e <_realloc_r+0x16>
 8004364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004368:	4611      	mov	r1, r2
 800436a:	f7ff bc49 	b.w	8003c00 <_malloc_r>
 800436e:	b92a      	cbnz	r2, 800437c <_realloc_r+0x24>
 8004370:	f7ff fbda 	bl	8003b28 <_free_r>
 8004374:	4625      	mov	r5, r4
 8004376:	4628      	mov	r0, r5
 8004378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800437c:	f000 f81b 	bl	80043b6 <_malloc_usable_size_r>
 8004380:	4284      	cmp	r4, r0
 8004382:	4607      	mov	r7, r0
 8004384:	d802      	bhi.n	800438c <_realloc_r+0x34>
 8004386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800438a:	d812      	bhi.n	80043b2 <_realloc_r+0x5a>
 800438c:	4621      	mov	r1, r4
 800438e:	4640      	mov	r0, r8
 8004390:	f7ff fc36 	bl	8003c00 <_malloc_r>
 8004394:	4605      	mov	r5, r0
 8004396:	2800      	cmp	r0, #0
 8004398:	d0ed      	beq.n	8004376 <_realloc_r+0x1e>
 800439a:	42bc      	cmp	r4, r7
 800439c:	4622      	mov	r2, r4
 800439e:	4631      	mov	r1, r6
 80043a0:	bf28      	it	cs
 80043a2:	463a      	movcs	r2, r7
 80043a4:	f7ff ffca 	bl	800433c <memcpy>
 80043a8:	4631      	mov	r1, r6
 80043aa:	4640      	mov	r0, r8
 80043ac:	f7ff fbbc 	bl	8003b28 <_free_r>
 80043b0:	e7e1      	b.n	8004376 <_realloc_r+0x1e>
 80043b2:	4635      	mov	r5, r6
 80043b4:	e7df      	b.n	8004376 <_realloc_r+0x1e>

080043b6 <_malloc_usable_size_r>:
 80043b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ba:	1f18      	subs	r0, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bfbc      	itt	lt
 80043c0:	580b      	ldrlt	r3, [r1, r0]
 80043c2:	18c0      	addlt	r0, r0, r3
 80043c4:	4770      	bx	lr
	...

080043c8 <_init>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr

080043d4 <_fini>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr
