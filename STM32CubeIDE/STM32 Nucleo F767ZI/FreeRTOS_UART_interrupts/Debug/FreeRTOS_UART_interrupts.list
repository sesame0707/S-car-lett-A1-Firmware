
FreeRTOS_UART_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007048  08007048  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007050  08007050  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007050  08007050  00017050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c20  20000060  080070b8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c80  080070b8  00024c80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b4f3  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039e7  00000000  00000000  0003b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0003efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001072  00000000  00000000  000404d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029fa7  00000000  00000000  00041542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae35  00000000  00000000  0006b4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010574a  00000000  00000000  0008631e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005aac  00000000  00000000  0018ba68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00191514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08006fd0 	.word	0x08006fd0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08006fd0 	.word	0x08006fd0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <MX_FREERTOS_Init+0x18>)
 8000542:	2100      	movs	r1, #0
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_FREERTOS_Init+0x1c>)
 8000546:	f003 fed1 	bl	80042ec <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <MX_FREERTOS_Init+0x20>)
 800054e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	0800700c 	.word	0x0800700c
 8000558:	08000561 	.word	0x08000561
 800055c:	2000007c 	.word	0x2000007c

08000560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
//	uint8_t data[] = "A\r\n";

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f003 ff65 	bl	8004438 <osDelay>
 800056e:	e7fb      	b.n	8000568 <StartDefaultTask+0x8>

08000570 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b8a      	ldr	r3, [pc, #552]	; (80007b0 <MX_GPIO_Init+0x240>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a89      	ldr	r2, [pc, #548]	; (80007b0 <MX_GPIO_Init+0x240>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b87      	ldr	r3, [pc, #540]	; (80007b0 <MX_GPIO_Init+0x240>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	61bb      	str	r3, [r7, #24]
 800059c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b84      	ldr	r3, [pc, #528]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a83      	ldr	r2, [pc, #524]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b81      	ldr	r3, [pc, #516]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b7e      	ldr	r3, [pc, #504]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a7d      	ldr	r2, [pc, #500]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b7b      	ldr	r3, [pc, #492]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b78      	ldr	r3, [pc, #480]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a77      	ldr	r2, [pc, #476]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b72      	ldr	r3, [pc, #456]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a71      	ldr	r2, [pc, #452]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b6f      	ldr	r3, [pc, #444]	; (80007b0 <MX_GPIO_Init+0x240>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005fe:	4b6c      	ldr	r3, [pc, #432]	; (80007b0 <MX_GPIO_Init+0x240>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a6b      	ldr	r2, [pc, #428]	; (80007b0 <MX_GPIO_Init+0x240>)
 8000604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b69      	ldr	r3, [pc, #420]	; (80007b0 <MX_GPIO_Init+0x240>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f244 0181 	movw	r1, #16513	; 0x4081
 800061c:	4865      	ldr	r0, [pc, #404]	; (80007b4 <MX_GPIO_Init+0x244>)
 800061e:	f000 fedf 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	4864      	ldr	r0, [pc, #400]	; (80007b8 <MX_GPIO_Init+0x248>)
 8000628:	f000 feda 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000632:	4862      	ldr	r0, [pc, #392]	; (80007bc <MX_GPIO_Init+0x24c>)
 8000634:	f000 fed4 	bl	80013e0 <HAL_GPIO_WritePin>
                          |API_TURN_LEFT_LEDs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	485b      	ldr	r0, [pc, #364]	; (80007bc <MX_GPIO_Init+0x24c>)
 8000650:	f000 fd1a 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000654:	2332      	movs	r3, #50	; 0x32
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000664:	230b      	movs	r3, #11
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4853      	ldr	r0, [pc, #332]	; (80007bc <MX_GPIO_Init+0x24c>)
 8000670:	f000 fd0a 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000674:	2386      	movs	r3, #134	; 0x86
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000684:	230b      	movs	r3, #11
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	484c      	ldr	r0, [pc, #304]	; (80007c0 <MX_GPIO_Init+0x250>)
 8000690:	f000 fcfa 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000694:	f244 0381 	movw	r3, #16513	; 0x4081
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4841      	ldr	r0, [pc, #260]	; (80007b4 <MX_GPIO_Init+0x244>)
 80006ae:	f000 fceb 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c4:	230b      	movs	r3, #11
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4839      	ldr	r0, [pc, #228]	; (80007b4 <MX_GPIO_Init+0x244>)
 80006d0:	f000 fcda 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006e6:	2307      	movs	r3, #7
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4834      	ldr	r0, [pc, #208]	; (80007c4 <MX_GPIO_Init+0x254>)
 80006f2:	f000 fcc9 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006f6:	2340      	movs	r3, #64	; 0x40
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	482a      	ldr	r0, [pc, #168]	; (80007b8 <MX_GPIO_Init+0x248>)
 800070e:	f000 fcbb 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4824      	ldr	r0, [pc, #144]	; (80007b8 <MX_GPIO_Init+0x248>)
 8000726:	f000 fcaf 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 800072a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800072e:	61fb      	str	r3, [r7, #28]
                          |API_TURN_LEFT_LEDs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	481e      	ldr	r0, [pc, #120]	; (80007bc <MX_GPIO_Init+0x24c>)
 8000744:	f000 fca0 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000748:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800075a:	230a      	movs	r3, #10
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4816      	ldr	r0, [pc, #88]	; (80007c0 <MX_GPIO_Init+0x250>)
 8000766:	f000 fc8f 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800076a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <MX_GPIO_Init+0x250>)
 8000780:	f000 fc82 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000784:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_GPIO_Init+0x248>)
 80007a2:	f000 fc71 	bl	8001088 <HAL_GPIO_Init>

}
 80007a6:	bf00      	nop
 80007a8:	3730      	adds	r7, #48	; 0x30
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020400 	.word	0x40020400
 80007b8:	40021800 	.word	0x40021800
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fabb 	bl	8000d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f814 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff fecc 	bl	8000570 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007d8:	f000 f9e0 	bl	8000b9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT( &huart1, rx_buffer, 1 );
 80007dc:	2201      	movs	r2, #1
 80007de:	4905      	ldr	r1, [pc, #20]	; (80007f4 <main+0x2c>)
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <main+0x30>)
 80007e2:	f002 fadb 	bl	8002d9c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80007e6:	f003 fd17 	bl	8004218 <osKernelInitialize>
  MX_FREERTOS_Init();
 80007ea:	f7ff fea7 	bl	800053c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007ee:	f003 fd47 	bl	8004280 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <main+0x2a>
 80007f4:	20000080 	.word	0x20000080
 80007f8:	200000d4 	.word	0x200000d4

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2234      	movs	r2, #52	; 0x34
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f006 faf6 	bl	8006dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <SystemClock_Config+0xd4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <SystemClock_Config+0xd4>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <SystemClock_Config+0xd4>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <SystemClock_Config+0xd8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <SystemClock_Config+0xd8>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <SystemClock_Config+0xd8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000868:	23d8      	movs	r3, #216	; 0xd8
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fe33 	bl	80014e8 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000888:	f000 f8a4 	bl	80009d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800088c:	f000 fddc 	bl	8001448 <HAL_PWREx_EnableOverDrive>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000896:	f000 f89d 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2302      	movs	r3, #2
 80008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2107      	movs	r1, #7
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 f8c3 	bl	8001a44 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008c4:	f000 f886 	bl	80009d4 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart1x ) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

//	moj_parser();
	switch(rx_buffer[0]) {
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <HAL_UART_RxCpltCallback+0xac>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d842      	bhi.n	8000970 <HAL_UART_RxCpltCallback+0x98>
 80008ea:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <HAL_UART_RxCpltCallback+0x18>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	0800090d 	.word	0x0800090d
 80008f4:	08000917 	.word	0x08000917
 80008f8:	08000923 	.word	0x08000923
 80008fc:	0800092d 	.word	0x0800092d
 8000900:	08000939 	.word	0x08000939
 8000904:	08000945 	.word	0x08000945
 8000908:	0800095b 	.word	0x0800095b
	case 0x1:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	481e      	ldr	r0, [pc, #120]	; (8000988 <HAL_UART_RxCpltCallback+0xb0>)
 8000910:	f000 fd7f 	bl	8001412 <HAL_GPIO_TogglePin>
		break;
 8000914:	e02c      	b.n	8000970 <HAL_UART_RxCpltCallback+0x98>
	case 0x2:
		HAL_GPIO_TogglePin(API_START_ENGIN_LEDs_GPIO_Port, API_START_ENGIN_LEDs_Pin);
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <HAL_UART_RxCpltCallback+0xb4>)
 800091c:	f000 fd79 	bl	8001412 <HAL_GPIO_TogglePin>
		break;
 8000920:	e026      	b.n	8000970 <HAL_UART_RxCpltCallback+0x98>
	case 0x3:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000922:	2101      	movs	r1, #1
 8000924:	4818      	ldr	r0, [pc, #96]	; (8000988 <HAL_UART_RxCpltCallback+0xb0>)
 8000926:	f000 fd74 	bl	8001412 <HAL_GPIO_TogglePin>
		break;
 800092a:	e021      	b.n	8000970 <HAL_UART_RxCpltCallback+0x98>
	case 0x4:
		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 800092c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000930:	4816      	ldr	r0, [pc, #88]	; (800098c <HAL_UART_RxCpltCallback+0xb4>)
 8000932:	f000 fd6e 	bl	8001412 <HAL_GPIO_TogglePin>
		break;
 8000936:	e01b      	b.n	8000970 <HAL_UART_RxCpltCallback+0x98>
	case 0x5:
		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 8000938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <HAL_UART_RxCpltCallback+0xb4>)
 800093e:	f000 fd68 	bl	8001412 <HAL_GPIO_TogglePin>
		break;
 8000942:	e015      	b.n	8000970 <HAL_UART_RxCpltCallback+0x98>
	case 0x6:
		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 8000944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000948:	4810      	ldr	r0, [pc, #64]	; (800098c <HAL_UART_RxCpltCallback+0xb4>)
 800094a:	f000 fd62 	bl	8001412 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 800094e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <HAL_UART_RxCpltCallback+0xb4>)
 8000954:	f000 fd5d 	bl	8001412 <HAL_GPIO_TogglePin>
		break;
 8000958:	e00a      	b.n	8000970 <HAL_UART_RxCpltCallback+0x98>
	case 0x7:
		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 800095a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <HAL_UART_RxCpltCallback+0xb4>)
 8000960:	f000 fd57 	bl	8001412 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 8000964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <HAL_UART_RxCpltCallback+0xb4>)
 800096a:	f000 fd52 	bl	8001412 <HAL_GPIO_TogglePin>
		break;
 800096e:	bf00      	nop
	default:
	}

	HAL_UART_Receive_IT( &huart1, rx_buffer, 1 );	// used for "opening" ST MCU for future interrupts on RX
 8000970:	2201      	movs	r2, #1
 8000972:	4904      	ldr	r1, [pc, #16]	; (8000984 <HAL_UART_RxCpltCallback+0xac>)
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <HAL_UART_RxCpltCallback+0xb8>)
 8000976:	f002 fa11 	bl	8002d9c <HAL_UART_Receive_IT>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000080 	.word	0x20000080
 8000988:	40020400 	.word	0x40020400
 800098c:	40020800 	.word	0x40020800
 8000990:	200000d4 	.word	0x200000d4

08000994 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart1 ){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <HAL_UART_TxCpltCallback+0x18>)
 80009a0:	f000 fd37 	bl	8001412 <HAL_GPIO_TogglePin>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40020400 	.word	0x40020400

080009b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c2:	f000 f9cd 	bl	8000d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40001000 	.word	0x40001000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210f      	movs	r1, #15
 8000a1a:	f06f 0001 	mvn.w	r0, #1
 8000a1e:	f000 fa77 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a40:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <HAL_InitTick+0xe0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a32      	ldr	r2, [pc, #200]	; (8000b10 <HAL_InitTick+0xe0>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_InitTick+0xe0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 0310 	and.w	r3, r3, #16
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a58:	f107 0210 	add.w	r2, r7, #16
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fa12 	bl	8001e8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d103      	bne.n	8000a7a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a72:	f001 f9e3 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8000a76:	6378      	str	r0, [r7, #52]	; 0x34
 8000a78:	e004      	b.n	8000a84 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a7a:	f001 f9df 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9b      	lsrs	r3, r3, #18
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_InitTick+0xe8>)
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <HAL_InitTick+0xec>)
 8000a96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <HAL_InitTick+0xe8>)
 8000a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_InitTick+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <HAL_InitTick+0xe8>)
 8000aba:	f001 fe41 	bl	8002740 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11b      	bne.n	8000b04 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <HAL_InitTick+0xe8>)
 8000ace:	f001 fe99 	bl	8002804 <HAL_TIM_Base_Start_IT>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d111      	bne.n	8000b04 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ae0:	2036      	movs	r0, #54	; 0x36
 8000ae2:	f000 fa31 	bl	8000f48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d808      	bhi.n	8000afe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2036      	movs	r0, #54	; 0x36
 8000af2:	f000 fa0d 	bl	8000f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_InitTick+0xf0>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e002      	b.n	8000b04 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3738      	adds	r7, #56	; 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	20000088 	.word	0x20000088
 8000b1c:	40001000 	.word	0x40001000
 8000b20:	20000004 	.word	0x20000004

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <USART1_IRQHandler+0x10>)
 8000b56:	f002 f965 	bl	8002e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000d4 	.word	0x200000d4

08000b64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM6_DAC_IRQHandler+0x10>)
 8000b6a:	f001 fec3 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000088 	.word	0x20000088

08000b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART1_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000be0:	f002 f88e 	bl	8002d00 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f7ff fef3 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000d4 	.word	0x200000d4
 8000bf8:	40011000 	.word	0x40011000

08000bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0ae      	sub	sp, #184	; 0xb8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2290      	movs	r2, #144	; 0x90
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f006 f8ed 	bl	8006dfc <memset>
  if(uartHandle->Instance==USART1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <HAL_UART_MspInit+0xec>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d158      	bne.n	8000cde <HAL_UART_MspInit+0xe2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c2c:	2340      	movs	r3, #64	; 0x40
 8000c2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c30:	2300      	movs	r3, #0
 8000c32:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 f959 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c44:	f7ff fec6 	bl	80009d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <HAL_UART_MspInit+0xf0>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <HAL_UART_MspInit+0xf0>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6453      	str	r3, [r2, #68]	; 0x44
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_UART_MspInit+0xf0>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_UART_MspInit+0xf0>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <HAL_UART_MspInit+0xf0>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_UART_MspInit+0xf0>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c92:	2304      	movs	r3, #4
 8000c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <HAL_UART_MspInit+0xf4>)
 8000ca0:	f000 f9f2 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <HAL_UART_MspInit+0xf4>)
 8000cca:	f000 f9dd 	bl	8001088 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	2025      	movs	r0, #37	; 0x25
 8000cd4:	f000 f91c 	bl	8000f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd8:	2025      	movs	r0, #37	; 0x25
 8000cda:	f000 f935 	bl	8000f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cde:	bf00      	nop
 8000ce0:	37b8      	adds	r7, #184	; 0xb8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1e:	f7ff ff2b 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f006 f8c9 	bl	8006eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fd4f 	bl	80007c8 <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d2c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d38:	08007058 	.word	0x08007058
  ldr r2, =_sbss
 8000d3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d40:	20004c80 	.word	0x20004c80

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>

08000d46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f8d5 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d50:	200f      	movs	r0, #15
 8000d52:	f7ff fe6d 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d56:	f7ff fe43 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	2000015c 	.word	0x2000015c

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	2000015c 	.word	0x2000015c

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <__NVIC_SetPriorityGrouping+0x40>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	05fa0000 	.word	0x05fa0000

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f72:	f7ff ff09 	bl	8000d88 <HAL_GetTick>
 8000f76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d008      	beq.n	8000f96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e052      	b.n	800103c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0216 	bic.w	r2, r2, #22
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <HAL_DMA_Abort+0x62>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0208 	bic.w	r2, r2, #8
 8000fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe6:	e013      	b.n	8001010 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fe8:	f7ff fece 	bl	8000d88 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d90c      	bls.n	8001010 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e015      	b.n	800103c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1e4      	bne.n	8000fe8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001022:	223f      	movs	r2, #63	; 0x3f
 8001024:	409a      	lsls	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d004      	beq.n	8001062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00c      	b.n	800107c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2205      	movs	r2, #5
 8001066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e175      	b.n	8001394 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8164 	bne.w	800138e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d005      	beq.n	80010de <HAL_GPIO_Init+0x56>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d130      	bne.n	8001140 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 0201 	and.w	r2, r3, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b03      	cmp	r3, #3
 800114a:	d017      	beq.n	800117c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80be 	beq.w	800138e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b66      	ldr	r3, [pc, #408]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a65      	ldr	r2, [pc, #404]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800122a:	4a61      	ldr	r2, [pc, #388]	; (80013b0 <HAL_GPIO_Init+0x328>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_GPIO_Init+0x32c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d037      	beq.n	80012c6 <HAL_GPIO_Init+0x23e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <HAL_GPIO_Init+0x330>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d031      	beq.n	80012c2 <HAL_GPIO_Init+0x23a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a56      	ldr	r2, [pc, #344]	; (80013bc <HAL_GPIO_Init+0x334>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02b      	beq.n	80012be <HAL_GPIO_Init+0x236>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a55      	ldr	r2, [pc, #340]	; (80013c0 <HAL_GPIO_Init+0x338>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x232>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a54      	ldr	r2, [pc, #336]	; (80013c4 <HAL_GPIO_Init+0x33c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x22e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a53      	ldr	r2, [pc, #332]	; (80013c8 <HAL_GPIO_Init+0x340>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x22a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a52      	ldr	r2, [pc, #328]	; (80013cc <HAL_GPIO_Init+0x344>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x226>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <HAL_GPIO_Init+0x348>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x222>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <HAL_GPIO_Init+0x34c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x21e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x350>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x21a>
 800129e:	2309      	movs	r3, #9
 80012a0:	e012      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012a2:	230a      	movs	r3, #10
 80012a4:	e010      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012a6:	2308      	movs	r3, #8
 80012a8:	e00e      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e00c      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012ae:	2306      	movs	r3, #6
 80012b0:	e00a      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012b2:	2305      	movs	r3, #5
 80012b4:	e008      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e004      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012be:	2302      	movs	r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x240>
 80012c6:	2300      	movs	r3, #0
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	f002 0203 	and.w	r2, r2, #3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4093      	lsls	r3, r2
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012d8:	4935      	ldr	r1, [pc, #212]	; (80013b0 <HAL_GPIO_Init+0x328>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <HAL_GPIO_Init+0x354>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a34      	ldr	r2, [pc, #208]	; (80013dc <HAL_GPIO_Init+0x354>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <HAL_GPIO_Init+0x354>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a29      	ldr	r2, [pc, #164]	; (80013dc <HAL_GPIO_Init+0x354>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HAL_GPIO_Init+0x354>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800135e:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <HAL_GPIO_Init+0x354>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_GPIO_Init+0x354>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_GPIO_Init+0x354>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f ae86 	bls.w	80010a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	40022000 	.word	0x40022000
 80013d8:	40022400 	.word	0x40022400
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001424:	887a      	ldrh	r2, [r7, #2]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	041a      	lsls	r2, r3, #16
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43d9      	mvns	r1, r3
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	400b      	ands	r3, r1
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001476:	f7ff fc87 	bl	8000d88 <HAL_GetTick>
 800147a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800147c:	e009      	b.n	8001492 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800147e:	f7ff fc83 	bl	8000d88 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800148c:	d901      	bls.n	8001492 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e022      	b.n	80014d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149e:	d1ee      	bne.n	800147e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ac:	f7ff fc6c 	bl	8000d88 <HAL_GetTick>
 80014b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014b2:	e009      	b.n	80014c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b4:	f7ff fc68 	bl	8000d88 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c2:	d901      	bls.n	80014c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e007      	b.n	80014d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014d4:	d1ee      	bne.n	80014b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e29b      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8087 	beq.w	800161a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800150c:	4b96      	ldr	r3, [pc, #600]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b04      	cmp	r3, #4
 8001516:	d00c      	beq.n	8001532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001518:	4b93      	ldr	r3, [pc, #588]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	d112      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
 8001524:	4b90      	ldr	r3, [pc, #576]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001530:	d10b      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001532:	4b8d      	ldr	r3, [pc, #564]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d06c      	beq.n	8001618 <HAL_RCC_OscConfig+0x130>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d168      	bne.n	8001618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e275      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x7a>
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a83      	ldr	r2, [pc, #524]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800155a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e02e      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x9c>
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7e      	ldr	r2, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7b      	ldr	r2, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e01d      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0xc0>
 800158e:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a75      	ldr	r2, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b73      	ldr	r3, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a72      	ldr	r2, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 80015a8:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b6c      	ldr	r3, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6b      	ldr	r2, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fbde 	bl	8000d88 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fbda 	bl	8000d88 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e229      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b61      	ldr	r3, [pc, #388]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0xe8>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbca 	bl	8000d88 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbc6 	bl	8000d88 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e215      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x110>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d069      	beq.n	80016fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001626:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001632:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d11c      	bne.n	8001678 <HAL_RCC_OscConfig+0x190>
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d116      	bne.n	8001678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x17a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e1e9      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	493d      	ldr	r1, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	e040      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d023      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fb7c 	bl	8000d88 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fb78 	bl	8000d88 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1c7      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4929      	ldr	r1, [pc, #164]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
 80016c6:	e018      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb58 	bl	8000d88 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb54 	bl	8000d88 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1a3      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d038      	beq.n	8001778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d019      	beq.n	8001742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fb35 	bl	8000d88 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fb31 	bl	8000d88 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e180      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x23a>
 8001740:	e01a      	b.n	8001778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fb1b 	bl	8000d88 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fb17 	bl	8000d88 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d903      	bls.n	800176c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e166      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
 8001768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a4 	beq.w	80018ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a88      	ldr	r2, [pc, #544]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	4b83      	ldr	r3, [pc, #524]	; (80019bc <HAL_RCC_OscConfig+0x4d4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ba:	4b80      	ldr	r3, [pc, #512]	; (80019bc <HAL_RCC_OscConfig+0x4d4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7f      	ldr	r2, [pc, #508]	; (80019bc <HAL_RCC_OscConfig+0x4d4>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fadf 	bl	8000d88 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fadb 	bl	8000d88 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e12a      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e0:	4b76      	ldr	r3, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x4d4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x31a>
 80017f4:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a6f      	ldr	r2, [pc, #444]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x33c>
 800180a:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a6a      	ldr	r2, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a67      	ldr	r2, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	e01c      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x35e>
 800182c:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a61      	ldr	r2, [pc, #388]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	4b5f      	ldr	r3, [pc, #380]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a5e      	ldr	r2, [pc, #376]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001846:	4b5c      	ldr	r3, [pc, #368]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a5b      	ldr	r2, [pc, #364]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	4a58      	ldr	r2, [pc, #352]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff fa8f 	bl	8000d88 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fa8b 	bl	8000d88 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0d8      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCC_OscConfig+0x386>
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fa79 	bl	8000d88 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fa75 	bl	8000d88 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0c2      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80ae 	beq.w	8001a34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d06d      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d14b      	bne.n	8001984 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fa46 	bl	8000d88 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fa42 	bl	8000d88 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e091      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	3b01      	subs	r3, #1
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	071b      	lsls	r3, r3, #28
 800194a:	491b      	ldr	r1, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fa14 	bl	8000d88 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fa10 	bl	8000d88 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e05f      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x47c>
 8001982:	e057      	b.n	8001a34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 800198a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f9fa 	bl	8000d88 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f9f6 	bl	8000d88 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e045      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x4b0>
 80019b6:	e03d      	b.n	8001a34 <HAL_RCC_OscConfig+0x54c>
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_RCC_OscConfig+0x558>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d030      	beq.n	8001a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d129      	bne.n	8001a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d122      	bne.n	8001a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019f0:	4013      	ands	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d119      	bne.n	8001a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	085b      	lsrs	r3, r3, #1
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d10f      	bne.n	8001a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0d0      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d910      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 020f 	bic.w	r2, r3, #15
 8001a72:	4965      	ldr	r1, [pc, #404]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	494d      	ldr	r1, [pc, #308]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d040      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d115      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e07f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e073      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e06b      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4936      	ldr	r1, [pc, #216]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b38:	f7ff f926 	bl	8000d88 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff f922 	bl	8000d88 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e053      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d210      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 020f 	bic.w	r2, r3, #15
 8001b7e:	4922      	ldr	r1, [pc, #136]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e032      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4916      	ldr	r1, [pc, #88]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	490e      	ldr	r1, [pc, #56]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd6:	f000 f821 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	490a      	ldr	r1, [pc, #40]	; (8001c10 <HAL_RCC_ClockConfig+0x1cc>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1d4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe ff1a 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08007030 	.word	0x08007030
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c20:	b094      	sub	sp, #80	; 0x50
 8001c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
 8001c28:	2300      	movs	r3, #0
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c34:	4b79      	ldr	r3, [pc, #484]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d00d      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x40>
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	f200 80e1 	bhi.w	8001e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x34>
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c4e:	e0db      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c50:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c54:	e0db      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c56:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5a:	e0d8      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c66:	4b6d      	ldr	r3, [pc, #436]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c72:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	2200      	movs	r2, #0
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c8e:	4622      	mov	r2, r4
 8001c90:	462b      	mov	r3, r5
 8001c92:	f04f 0000 	mov.w	r0, #0
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	0159      	lsls	r1, r3, #5
 8001c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca0:	0150      	lsls	r0, r2, #5
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	1a51      	subs	r1, r2, r1
 8001caa:	6139      	str	r1, [r7, #16]
 8001cac:	4629      	mov	r1, r5
 8001cae:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	018b      	lsls	r3, r1, #6
 8001cc4:	4651      	mov	r1, sl
 8001cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cca:	4651      	mov	r1, sl
 8001ccc:	018a      	lsls	r2, r1, #6
 8001cce:	4651      	mov	r1, sl
 8001cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8001cd4:	4659      	mov	r1, fp
 8001cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cee:	4690      	mov	r8, r2
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	eb18 0303 	adds.w	r3, r8, r3
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	eb49 0303 	adc.w	r3, r9, r3
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d0e:	4629      	mov	r1, r5
 8001d10:	028b      	lsls	r3, r1, #10
 8001d12:	4621      	mov	r1, r4
 8001d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d18:	4621      	mov	r1, r4
 8001d1a:	028a      	lsls	r2, r1, #10
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d22:	2200      	movs	r2, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d2c:	f7fe fa88 	bl	8000240 <__aeabi_uldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4613      	mov	r3, r2
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d38:	e058      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3a:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	2200      	movs	r2, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	4611      	mov	r1, r2
 8001d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d54:	4642      	mov	r2, r8
 8001d56:	464b      	mov	r3, r9
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	0159      	lsls	r1, r3, #5
 8001d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d66:	0150      	lsls	r0, r2, #5
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4641      	mov	r1, r8
 8001d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d72:	4649      	mov	r1, r9
 8001d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d90:	eb63 050b 	sbc.w	r5, r3, fp
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	00eb      	lsls	r3, r5, #3
 8001d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da2:	00e2      	lsls	r2, r4, #3
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	4643      	mov	r3, r8
 8001daa:	18e3      	adds	r3, r4, r3
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	464b      	mov	r3, r9
 8001db0:	eb45 0303 	adc.w	r3, r5, r3
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	028b      	lsls	r3, r1, #10
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dcc:	4621      	mov	r1, r4
 8001dce:	028a      	lsls	r2, r1, #10
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	61fa      	str	r2, [r7, #28]
 8001ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de0:	f7fe fa2e 	bl	8000240 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	0c1b      	lsrs	r3, r3, #16
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3750      	adds	r7, #80	; 0x50
 8001e14:	46bd      	mov	sp, r7
 8001e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	00f42400 	.word	0x00f42400

08001e24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a9b      	lsrs	r3, r3, #10
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	08007040 	.word	0x08007040

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffdc 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08007040 	.word	0x08007040

08001e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	220f      	movs	r2, #15
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_GetClockConfig+0x60>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d012      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f18:	4b69      	ldr	r3, [pc, #420]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f22:	6093      	str	r3, [r2, #8]
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	4964      	ldr	r1, [pc, #400]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	4959      	ldr	r1, [pc, #356]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f68:	d101      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d017      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f86:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	494a      	ldr	r1, [pc, #296]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa4:	d101      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 808b 	beq.w	80020ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe0:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fec:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff8:	f7fe fec6 	bl	8000d88 <HAL_GetTick>
 8001ffc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002000:	f7fe fec2 	bl	8000d88 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e38f      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002026:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d035      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	d02e      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002044:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d114      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fe8a 	bl	8000d88 <HAL_GetTick>
 8002074:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7fe fe86 	bl	8000d88 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e351      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ee      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020a6:	d111      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020b6:	400b      	ands	r3, r1
 80020b8:	4901      	ldr	r1, [pc, #4]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
 80020be:	e00b      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000
 80020c8:	0ffffcff 	.word	0x0ffffcff
 80020cc:	4bac      	ldr	r3, [pc, #688]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4aab      	ldr	r2, [pc, #684]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020d6:	6093      	str	r3, [r2, #8]
 80020d8:	4ba9      	ldr	r3, [pc, #676]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	49a6      	ldr	r1, [pc, #664]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d010      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020f6:	4ba2      	ldr	r3, [pc, #648]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020fc:	4aa0      	ldr	r2, [pc, #640]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002102:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002106:	4b9e      	ldr	r3, [pc, #632]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002108:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	499b      	ldr	r1, [pc, #620]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002124:	4b96      	ldr	r3, [pc, #600]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002132:	4993      	ldr	r1, [pc, #588]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002146:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002154:	498a      	ldr	r1, [pc, #552]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002168:	4b85      	ldr	r3, [pc, #532]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002176:	4982      	ldr	r1, [pc, #520]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4979      	ldr	r1, [pc, #484]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ac:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4971      	ldr	r1, [pc, #452]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ce:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f023 020c 	bic.w	r2, r3, #12
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021dc:	4968      	ldr	r1, [pc, #416]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021f0:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4960      	ldr	r1, [pc, #384]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002220:	4957      	ldr	r1, [pc, #348]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	494f      	ldr	r1, [pc, #316]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4946      	ldr	r1, [pc, #280]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002278:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	493e      	ldr	r1, [pc, #248]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ca:	492d      	ldr	r1, [pc, #180]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d011      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ec:	4924      	ldr	r1, [pc, #144]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022fc:	d101      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	4914      	ldr	r1, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00f      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002374:	4902      	ldr	r1, [pc, #8]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800237c:	e002      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002390:	4b8a      	ldr	r3, [pc, #552]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002396:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	4986      	ldr	r1, [pc, #536]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023b4:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c4:	497d      	ldr	r1, [pc, #500]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d006      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80d6 	beq.w	800258c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023e0:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a75      	ldr	r2, [pc, #468]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe fccc 	bl	8000d88 <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023f4:	f7fe fcc8 	bl	8000d88 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e195      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d021      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11d      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800243a:	0e1b      	lsrs	r3, r3, #24
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	019a      	lsls	r2, r3, #6
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	071b      	lsls	r3, r3, #28
 800245a:	4958      	ldr	r1, [pc, #352]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02e      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248c:	d129      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800248e:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800249c:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a2:	0f1b      	lsrs	r3, r3, #28
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	019a      	lsls	r2, r3, #6
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	431a      	orrs	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	071b      	lsls	r3, r3, #28
 80024c2:	493e      	ldr	r1, [pc, #248]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024ca:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d0:	f023 021f 	bic.w	r2, r3, #31
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	3b01      	subs	r3, #1
 80024da:	4938      	ldr	r1, [pc, #224]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01d      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	0e1b      	lsrs	r3, r3, #24
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002502:	0f1b      	lsrs	r3, r3, #28
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	019a      	lsls	r2, r3, #6
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	041b      	lsls	r3, r3, #16
 8002516:	431a      	orrs	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	061b      	lsls	r3, r3, #24
 800251c:	431a      	orrs	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	071b      	lsls	r3, r3, #28
 8002522:	4926      	ldr	r1, [pc, #152]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d011      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	019a      	lsls	r2, r3, #6
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	071b      	lsls	r3, r3, #28
 8002552:	491a      	ldr	r1, [pc, #104]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002566:	f7fe fc0f 	bl	8000d88 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800256e:	f7fe fc0b 	bl	8000d88 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	; 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0d8      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	f040 80ce 	bne.w	8002730 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a08      	ldr	r2, [pc, #32]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a0:	f7fe fbf2 	bl	8000d88 <HAL_GetTick>
 80025a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025a6:	e00b      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025a8:	f7fe fbee 	bl	8000d88 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d904      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0bb      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025c0:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025cc:	d0ec      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d02e      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d12a      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002604:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	0f1b      	lsrs	r3, r3, #28
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	019a      	lsls	r2, r3, #6
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	4944      	ldr	r1, [pc, #272]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002638:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	3b01      	subs	r3, #1
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	493d      	ldr	r1, [pc, #244]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d022      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800265c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002660:	d11d      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	0e1b      	lsrs	r3, r3, #24
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	0f1b      	lsrs	r3, r3, #28
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	019a      	lsls	r2, r3, #6
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	061b      	lsls	r3, r3, #24
 8002690:	431a      	orrs	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	071b      	lsls	r3, r3, #28
 8002696:	4929      	ldr	r1, [pc, #164]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d028      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	0e1b      	lsrs	r3, r3, #24
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	019a      	lsls	r2, r3, #6
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	431a      	orrs	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	4917      	ldr	r1, [pc, #92]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	4911      	ldr	r1, [pc, #68]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002708:	f7fe fb3e 	bl	8000d88 <HAL_GetTick>
 800270c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002710:	f7fe fb3a 	bl	8000d88 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e007      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800272a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800272e:	d1ef      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e049      	b.n	80027e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f841 	bl	80027ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fa00 	bl	8002b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d001      	beq.n	800281c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e054      	b.n	80028c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d022      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x80>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d01d      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x80>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d018      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x80>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d013      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x80>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00e      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x80>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d009      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x80>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d004      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x80>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_TIM_Base_Start_IT+0xe8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d115      	bne.n	80028b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_TIM_Base_Start_IT+0xec>)
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d015      	beq.n	80028c2 <HAL_TIM_Base_Start_IT+0xbe>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d011      	beq.n	80028c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	e008      	b.n	80028c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e000      	b.n	80028c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40010000 	.word	0x40010000
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800
 80028e0:	40000c00 	.word	0x40000c00
 80028e4:	40010400 	.word	0x40010400
 80028e8:	40014000 	.word	0x40014000
 80028ec:	40001800 	.word	0x40001800
 80028f0:	00010007 	.word	0x00010007

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d122      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0202 	mvn.w	r2, #2
 8002920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f905 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8f7 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f908 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8db 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8cd 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8de 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0208 	mvn.w	r2, #8
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8b1 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8a3 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8b4 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0210 	mvn.w	r2, #16
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2208      	movs	r2, #8
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f887 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f879 	bl	8002b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f88a 	bl	8002b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0201 	mvn.w	r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd ff9c 	bl	80009b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f91a 	bl	8002cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d107      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f90d 	bl	8002cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f838 	bl	8002b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0220 	mvn.w	r2, #32
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8cd 	bl	8002cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a40      	ldr	r2, [pc, #256]	; (8002c98 <TIM_Base_SetConfig+0x114>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba2:	d00f      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <TIM_Base_SetConfig+0x118>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00b      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <TIM_Base_SetConfig+0x11c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <TIM_Base_SetConfig+0x120>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a3a      	ldr	r2, [pc, #232]	; (8002ca8 <TIM_Base_SetConfig+0x124>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <TIM_Base_SetConfig+0x114>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d027      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <TIM_Base_SetConfig+0x118>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d023      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <TIM_Base_SetConfig+0x11c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <TIM_Base_SetConfig+0x120>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01b      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <TIM_Base_SetConfig+0x124>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d017      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a28      	ldr	r2, [pc, #160]	; (8002cac <TIM_Base_SetConfig+0x128>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <TIM_Base_SetConfig+0x12c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00f      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <TIM_Base_SetConfig+0x130>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <TIM_Base_SetConfig+0x134>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <TIM_Base_SetConfig+0x138>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <TIM_Base_SetConfig+0x13c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d108      	bne.n	8002c48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <TIM_Base_SetConfig+0x114>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <TIM_Base_SetConfig+0xf8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <TIM_Base_SetConfig+0x124>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d103      	bne.n	8002c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	615a      	str	r2, [r3, #20]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40000c00 	.word	0x40000c00
 8002ca8:	40010400 	.word	0x40010400
 8002cac:	40014000 	.word	0x40014000
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800
 8002cb8:	40001800 	.word	0x40001800
 8002cbc:	40001c00 	.word	0x40001c00
 8002cc0:	40002000 	.word	0x40002000

08002cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e040      	b.n	8002d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd ff6a 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fb78 	bl	8003434 <UART_SetConfig>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e022      	b.n	8002d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fdd0 	bl	80038fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fe57 	bl	8003a40 <UART_CheckIdleState>
 8002d92:	4603      	mov	r3, r0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d132      	bne.n	8002e1a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_UART_Receive_IT+0x24>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e02b      	b.n	8002e1c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d018      	beq.n	8002e0a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	613b      	str	r3, [r7, #16]
   return(result);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	69f9      	ldr	r1, [r7, #28]
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e6      	bne.n	8002dd8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 ff29 	bl	8003c68 <UART_Start_Receive_IT>
 8002e16:	4603      	mov	r3, r0
 8002e18:	e000      	b.n	8002e1c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0ba      	sub	sp, #232	; 0xe8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e52:	4013      	ands	r3, r2
 8002e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d115      	bne.n	8002e8c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00f      	beq.n	8002e8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 82ac 	beq.w	80033da <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
      }
      return;
 8002e8a:	e2a6      	b.n	80033da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8117 	beq.w	80030c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ea2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ea6:	4b85      	ldr	r3, [pc, #532]	; (80030bc <HAL_UART_IRQHandler+0x298>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 810a 	beq.w	80030c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d011      	beq.n	8002ee0 <HAL_UART_IRQHandler+0xbc>
 8002ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d011      	beq.n	8002f10 <HAL_UART_IRQHandler+0xec>
 8002eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2202      	movs	r2, #2
 8002efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d011      	beq.n	8002f40 <HAL_UART_IRQHandler+0x11c>
 8002f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d017      	beq.n	8002f7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f72:	f043 0208 	orr.w	r2, r3, #8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_UART_IRQHandler+0x18a>
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8212 	beq.w	80033de <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d005      	beq.n	8003006 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003002:	2b00      	cmp	r3, #0
 8003004:	d04f      	beq.n	80030a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fef4 	bl	8003df4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d141      	bne.n	800309e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3308      	adds	r3, #8
 8003020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3308      	adds	r3, #8
 8003042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800304a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800305e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1d9      	bne.n	800301a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306a:	2b00      	cmp	r3, #0
 800306c:	d013      	beq.n	8003096 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_UART_IRQHandler+0x29c>)
 8003074:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd ffe2 	bl	8001044 <HAL_DMA_Abort_IT>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d017      	beq.n	80030b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003090:	4610      	mov	r0, r2
 8003092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	e00f      	b.n	80030b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9ac 	bl	80033f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e00b      	b.n	80030b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9a8 	bl	80033f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e007      	b.n	80030b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9a4 	bl	80033f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80030b4:	e193      	b.n	80033de <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b6:	bf00      	nop
    return;
 80030b8:	e191      	b.n	80033de <HAL_UART_IRQHandler+0x5ba>
 80030ba:	bf00      	nop
 80030bc:	04000120 	.word	0x04000120
 80030c0:	08003ebd 	.word	0x08003ebd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f040 814c 	bne.w	8003366 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8145 	beq.w	8003366 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 813e 	beq.w	8003366 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	f040 80b6 	bne.w	800326e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800310e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8165 	beq.w	80033e2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800311e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003122:	429a      	cmp	r2, r3
 8003124:	f080 815d 	bcs.w	80033e2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800312e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313c:	f000 8086 	beq.w	800324c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800315c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800316a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800316e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003176:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1da      	bne.n	8003140 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3308      	adds	r3, #8
 8003190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800319a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3308      	adds	r3, #8
 80031aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e1      	bne.n	800318a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3308      	adds	r3, #8
 80031cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e3      	bne.n	80031c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800321a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321c:	f023 0310 	bic.w	r3, r3, #16
 8003220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800322e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003230:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800323c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e4      	bne.n	800320c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fe8c 	bl	8000f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800325e:	b29b      	uxth	r3, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	b29b      	uxth	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8ce 	bl	8003408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800326c:	e0b9      	b.n	80033e2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800327a:	b29b      	uxth	r3, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80ab 	beq.w	80033e6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a6 	beq.w	80033e6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
 80032be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e4      	bne.n	800329a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	623b      	str	r3, [r7, #32]
   return(result);
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032f4:	633a      	str	r2, [r7, #48]	; 0x30
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e3      	bne.n	80032d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	60fb      	str	r3, [r7, #12]
   return(result);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f023 0310 	bic.w	r3, r3, #16
 8003330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	69b9      	ldr	r1, [r7, #24]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	617b      	str	r3, [r7, #20]
   return(result);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e4      	bne.n	800331c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800335c:	4619      	mov	r1, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f852 	bl	8003408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003364:	e03f      	b.n	80033e6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <HAL_UART_IRQHandler+0x56c>
 8003372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f849 	bl	8003420 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800338e:	e02d      	b.n	80033ec <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01c      	beq.n	80033ea <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
    }
    return;
 80033b8:	e017      	b.n	80033ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d012      	beq.n	80033ec <HAL_UART_IRQHandler+0x5c8>
 80033c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fd88 	bl	8003ee8 <UART_EndTransmit_IT>
    return;
 80033d8:	e008      	b.n	80033ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80033da:	bf00      	nop
 80033dc:	e006      	b.n	80033ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80033de:	bf00      	nop
 80033e0:	e004      	b.n	80033ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80033ea:	bf00      	nop
  }

}
 80033ec:	37e8      	adds	r7, #232	; 0xe8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4ba6      	ldr	r3, [pc, #664]	; (80036f8 <UART_SetConfig+0x2c4>)
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	6979      	ldr	r1, [r7, #20]
 8003468:	430b      	orrs	r3, r1
 800346a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a94      	ldr	r2, [pc, #592]	; (80036fc <UART_SetConfig+0x2c8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d120      	bne.n	80034f2 <UART_SetConfig+0xbe>
 80034b0:	4b93      	ldr	r3, [pc, #588]	; (8003700 <UART_SetConfig+0x2cc>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d816      	bhi.n	80034ec <UART_SetConfig+0xb8>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0x90>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034d5 	.word	0x080034d5
 80034c8:	080034e1 	.word	0x080034e1
 80034cc:	080034db 	.word	0x080034db
 80034d0:	080034e7 	.word	0x080034e7
 80034d4:	2301      	movs	r3, #1
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e150      	b.n	800377c <UART_SetConfig+0x348>
 80034da:	2302      	movs	r3, #2
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e14d      	b.n	800377c <UART_SetConfig+0x348>
 80034e0:	2304      	movs	r3, #4
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e14a      	b.n	800377c <UART_SetConfig+0x348>
 80034e6:	2308      	movs	r3, #8
 80034e8:	77fb      	strb	r3, [r7, #31]
 80034ea:	e147      	b.n	800377c <UART_SetConfig+0x348>
 80034ec:	2310      	movs	r3, #16
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e144      	b.n	800377c <UART_SetConfig+0x348>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a83      	ldr	r2, [pc, #524]	; (8003704 <UART_SetConfig+0x2d0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d132      	bne.n	8003562 <UART_SetConfig+0x12e>
 80034fc:	4b80      	ldr	r3, [pc, #512]	; (8003700 <UART_SetConfig+0x2cc>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d828      	bhi.n	800355c <UART_SetConfig+0x128>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0xdc>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003545 	.word	0x08003545
 8003514:	0800355d 	.word	0x0800355d
 8003518:	0800355d 	.word	0x0800355d
 800351c:	0800355d 	.word	0x0800355d
 8003520:	08003551 	.word	0x08003551
 8003524:	0800355d 	.word	0x0800355d
 8003528:	0800355d 	.word	0x0800355d
 800352c:	0800355d 	.word	0x0800355d
 8003530:	0800354b 	.word	0x0800354b
 8003534:	0800355d 	.word	0x0800355d
 8003538:	0800355d 	.word	0x0800355d
 800353c:	0800355d 	.word	0x0800355d
 8003540:	08003557 	.word	0x08003557
 8003544:	2300      	movs	r3, #0
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e118      	b.n	800377c <UART_SetConfig+0x348>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e115      	b.n	800377c <UART_SetConfig+0x348>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e112      	b.n	800377c <UART_SetConfig+0x348>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e10f      	b.n	800377c <UART_SetConfig+0x348>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e10c      	b.n	800377c <UART_SetConfig+0x348>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a68      	ldr	r2, [pc, #416]	; (8003708 <UART_SetConfig+0x2d4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d120      	bne.n	80035ae <UART_SetConfig+0x17a>
 800356c:	4b64      	ldr	r3, [pc, #400]	; (8003700 <UART_SetConfig+0x2cc>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003576:	2b30      	cmp	r3, #48	; 0x30
 8003578:	d013      	beq.n	80035a2 <UART_SetConfig+0x16e>
 800357a:	2b30      	cmp	r3, #48	; 0x30
 800357c:	d814      	bhi.n	80035a8 <UART_SetConfig+0x174>
 800357e:	2b20      	cmp	r3, #32
 8003580:	d009      	beq.n	8003596 <UART_SetConfig+0x162>
 8003582:	2b20      	cmp	r3, #32
 8003584:	d810      	bhi.n	80035a8 <UART_SetConfig+0x174>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <UART_SetConfig+0x15c>
 800358a:	2b10      	cmp	r3, #16
 800358c:	d006      	beq.n	800359c <UART_SetConfig+0x168>
 800358e:	e00b      	b.n	80035a8 <UART_SetConfig+0x174>
 8003590:	2300      	movs	r3, #0
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e0f2      	b.n	800377c <UART_SetConfig+0x348>
 8003596:	2302      	movs	r3, #2
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e0ef      	b.n	800377c <UART_SetConfig+0x348>
 800359c:	2304      	movs	r3, #4
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e0ec      	b.n	800377c <UART_SetConfig+0x348>
 80035a2:	2308      	movs	r3, #8
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e0e9      	b.n	800377c <UART_SetConfig+0x348>
 80035a8:	2310      	movs	r3, #16
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e0e6      	b.n	800377c <UART_SetConfig+0x348>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a56      	ldr	r2, [pc, #344]	; (800370c <UART_SetConfig+0x2d8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d120      	bne.n	80035fa <UART_SetConfig+0x1c6>
 80035b8:	4b51      	ldr	r3, [pc, #324]	; (8003700 <UART_SetConfig+0x2cc>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035c2:	2bc0      	cmp	r3, #192	; 0xc0
 80035c4:	d013      	beq.n	80035ee <UART_SetConfig+0x1ba>
 80035c6:	2bc0      	cmp	r3, #192	; 0xc0
 80035c8:	d814      	bhi.n	80035f4 <UART_SetConfig+0x1c0>
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d009      	beq.n	80035e2 <UART_SetConfig+0x1ae>
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d810      	bhi.n	80035f4 <UART_SetConfig+0x1c0>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <UART_SetConfig+0x1a8>
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d006      	beq.n	80035e8 <UART_SetConfig+0x1b4>
 80035da:	e00b      	b.n	80035f4 <UART_SetConfig+0x1c0>
 80035dc:	2300      	movs	r3, #0
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e0cc      	b.n	800377c <UART_SetConfig+0x348>
 80035e2:	2302      	movs	r3, #2
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e0c9      	b.n	800377c <UART_SetConfig+0x348>
 80035e8:	2304      	movs	r3, #4
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e0c6      	b.n	800377c <UART_SetConfig+0x348>
 80035ee:	2308      	movs	r3, #8
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e0c3      	b.n	800377c <UART_SetConfig+0x348>
 80035f4:	2310      	movs	r3, #16
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e0c0      	b.n	800377c <UART_SetConfig+0x348>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a44      	ldr	r2, [pc, #272]	; (8003710 <UART_SetConfig+0x2dc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d125      	bne.n	8003650 <UART_SetConfig+0x21c>
 8003604:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <UART_SetConfig+0x2cc>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003612:	d017      	beq.n	8003644 <UART_SetConfig+0x210>
 8003614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003618:	d817      	bhi.n	800364a <UART_SetConfig+0x216>
 800361a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361e:	d00b      	beq.n	8003638 <UART_SetConfig+0x204>
 8003620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003624:	d811      	bhi.n	800364a <UART_SetConfig+0x216>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <UART_SetConfig+0x1fe>
 800362a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362e:	d006      	beq.n	800363e <UART_SetConfig+0x20a>
 8003630:	e00b      	b.n	800364a <UART_SetConfig+0x216>
 8003632:	2300      	movs	r3, #0
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e0a1      	b.n	800377c <UART_SetConfig+0x348>
 8003638:	2302      	movs	r3, #2
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e09e      	b.n	800377c <UART_SetConfig+0x348>
 800363e:	2304      	movs	r3, #4
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e09b      	b.n	800377c <UART_SetConfig+0x348>
 8003644:	2308      	movs	r3, #8
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e098      	b.n	800377c <UART_SetConfig+0x348>
 800364a:	2310      	movs	r3, #16
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e095      	b.n	800377c <UART_SetConfig+0x348>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2f      	ldr	r2, [pc, #188]	; (8003714 <UART_SetConfig+0x2e0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d125      	bne.n	80036a6 <UART_SetConfig+0x272>
 800365a:	4b29      	ldr	r3, [pc, #164]	; (8003700 <UART_SetConfig+0x2cc>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003668:	d017      	beq.n	800369a <UART_SetConfig+0x266>
 800366a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800366e:	d817      	bhi.n	80036a0 <UART_SetConfig+0x26c>
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003674:	d00b      	beq.n	800368e <UART_SetConfig+0x25a>
 8003676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367a:	d811      	bhi.n	80036a0 <UART_SetConfig+0x26c>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <UART_SetConfig+0x254>
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d006      	beq.n	8003694 <UART_SetConfig+0x260>
 8003686:	e00b      	b.n	80036a0 <UART_SetConfig+0x26c>
 8003688:	2301      	movs	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e076      	b.n	800377c <UART_SetConfig+0x348>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e073      	b.n	800377c <UART_SetConfig+0x348>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e070      	b.n	800377c <UART_SetConfig+0x348>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e06d      	b.n	800377c <UART_SetConfig+0x348>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e06a      	b.n	800377c <UART_SetConfig+0x348>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <UART_SetConfig+0x2e4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d138      	bne.n	8003722 <UART_SetConfig+0x2ee>
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036be:	d017      	beq.n	80036f0 <UART_SetConfig+0x2bc>
 80036c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036c4:	d82a      	bhi.n	800371c <UART_SetConfig+0x2e8>
 80036c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ca:	d00b      	beq.n	80036e4 <UART_SetConfig+0x2b0>
 80036cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d0:	d824      	bhi.n	800371c <UART_SetConfig+0x2e8>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <UART_SetConfig+0x2aa>
 80036d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036da:	d006      	beq.n	80036ea <UART_SetConfig+0x2b6>
 80036dc:	e01e      	b.n	800371c <UART_SetConfig+0x2e8>
 80036de:	2300      	movs	r3, #0
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	e04b      	b.n	800377c <UART_SetConfig+0x348>
 80036e4:	2302      	movs	r3, #2
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	e048      	b.n	800377c <UART_SetConfig+0x348>
 80036ea:	2304      	movs	r3, #4
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	e045      	b.n	800377c <UART_SetConfig+0x348>
 80036f0:	2308      	movs	r3, #8
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e042      	b.n	800377c <UART_SetConfig+0x348>
 80036f6:	bf00      	nop
 80036f8:	efff69f3 	.word	0xefff69f3
 80036fc:	40011000 	.word	0x40011000
 8003700:	40023800 	.word	0x40023800
 8003704:	40004400 	.word	0x40004400
 8003708:	40004800 	.word	0x40004800
 800370c:	40004c00 	.word	0x40004c00
 8003710:	40005000 	.word	0x40005000
 8003714:	40011400 	.word	0x40011400
 8003718:	40007800 	.word	0x40007800
 800371c:	2310      	movs	r3, #16
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e02c      	b.n	800377c <UART_SetConfig+0x348>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a72      	ldr	r2, [pc, #456]	; (80038f0 <UART_SetConfig+0x4bc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d125      	bne.n	8003778 <UART_SetConfig+0x344>
 800372c:	4b71      	ldr	r3, [pc, #452]	; (80038f4 <UART_SetConfig+0x4c0>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003736:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800373a:	d017      	beq.n	800376c <UART_SetConfig+0x338>
 800373c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003740:	d817      	bhi.n	8003772 <UART_SetConfig+0x33e>
 8003742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003746:	d00b      	beq.n	8003760 <UART_SetConfig+0x32c>
 8003748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374c:	d811      	bhi.n	8003772 <UART_SetConfig+0x33e>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <UART_SetConfig+0x326>
 8003752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003756:	d006      	beq.n	8003766 <UART_SetConfig+0x332>
 8003758:	e00b      	b.n	8003772 <UART_SetConfig+0x33e>
 800375a:	2300      	movs	r3, #0
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e00d      	b.n	800377c <UART_SetConfig+0x348>
 8003760:	2302      	movs	r3, #2
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e00a      	b.n	800377c <UART_SetConfig+0x348>
 8003766:	2304      	movs	r3, #4
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e007      	b.n	800377c <UART_SetConfig+0x348>
 800376c:	2308      	movs	r3, #8
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e004      	b.n	800377c <UART_SetConfig+0x348>
 8003772:	2310      	movs	r3, #16
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e001      	b.n	800377c <UART_SetConfig+0x348>
 8003778:	2310      	movs	r3, #16
 800377a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003784:	d15b      	bne.n	800383e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003786:	7ffb      	ldrb	r3, [r7, #31]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d828      	bhi.n	80037de <UART_SetConfig+0x3aa>
 800378c:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <UART_SetConfig+0x360>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037c9 	.word	0x080037c9
 80037a0:	080037df 	.word	0x080037df
 80037a4:	080037cf 	.word	0x080037cf
 80037a8:	080037df 	.word	0x080037df
 80037ac:	080037df 	.word	0x080037df
 80037b0:	080037df 	.word	0x080037df
 80037b4:	080037d7 	.word	0x080037d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b8:	f7fe fb40 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 80037bc:	61b8      	str	r0, [r7, #24]
        break;
 80037be:	e013      	b.n	80037e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7fe fb50 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 80037c4:	61b8      	str	r0, [r7, #24]
        break;
 80037c6:	e00f      	b.n	80037e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <UART_SetConfig+0x4c4>)
 80037ca:	61bb      	str	r3, [r7, #24]
        break;
 80037cc:	e00c      	b.n	80037e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7fe fa25 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80037d2:	61b8      	str	r0, [r7, #24]
        break;
 80037d4:	e008      	b.n	80037e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037da:	61bb      	str	r3, [r7, #24]
        break;
 80037dc:	e004      	b.n	80037e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	77bb      	strb	r3, [r7, #30]
        break;
 80037e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d074      	beq.n	80038d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	005a      	lsls	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	d916      	bls.n	8003838 <UART_SetConfig+0x404>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d212      	bcs.n	8003838 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f023 030f 	bic.w	r3, r3, #15
 800381a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	b29a      	uxth	r2, r3
 8003828:	89fb      	ldrh	r3, [r7, #14]
 800382a:	4313      	orrs	r3, r2
 800382c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	89fa      	ldrh	r2, [r7, #14]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	e04f      	b.n	80038d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	77bb      	strb	r3, [r7, #30]
 800383c:	e04c      	b.n	80038d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800383e:	7ffb      	ldrb	r3, [r7, #31]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d828      	bhi.n	8003896 <UART_SetConfig+0x462>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <UART_SetConfig+0x418>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	08003871 	.word	0x08003871
 8003850:	08003879 	.word	0x08003879
 8003854:	08003881 	.word	0x08003881
 8003858:	08003897 	.word	0x08003897
 800385c:	08003887 	.word	0x08003887
 8003860:	08003897 	.word	0x08003897
 8003864:	08003897 	.word	0x08003897
 8003868:	08003897 	.word	0x08003897
 800386c:	0800388f 	.word	0x0800388f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003870:	f7fe fae4 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8003874:	61b8      	str	r0, [r7, #24]
        break;
 8003876:	e013      	b.n	80038a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7fe faf4 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 800387c:	61b8      	str	r0, [r7, #24]
        break;
 800387e:	e00f      	b.n	80038a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <UART_SetConfig+0x4c4>)
 8003882:	61bb      	str	r3, [r7, #24]
        break;
 8003884:	e00c      	b.n	80038a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003886:	f7fe f9c9 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 800388a:	61b8      	str	r0, [r7, #24]
        break;
 800388c:	e008      	b.n	80038a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003892:	61bb      	str	r3, [r7, #24]
        break;
 8003894:	e004      	b.n	80038a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	77bb      	strb	r3, [r7, #30]
        break;
 800389e:	bf00      	nop
    }

    if (pclk != 0U)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	085a      	lsrs	r2, r3, #1
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b0f      	cmp	r3, #15
 80038be:	d909      	bls.n	80038d4 <UART_SetConfig+0x4a0>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c6:	d205      	bcs.n	80038d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	e001      	b.n	80038d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40007c00 	.word	0x40007c00
 80038f4:	40023800 	.word	0x40023800
 80038f8:	00f42400 	.word	0x00f42400

080038fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01a      	beq.n	8003a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fa:	d10a      	bne.n	8003a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a50:	f7fd f99a 	bl	8000d88 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d10e      	bne.n	8003a82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f831 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e027      	b.n	8003ad2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d10e      	bne.n	8003aae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f81b 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e011      	b.n	8003ad2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b09c      	sub	sp, #112	; 0x70
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	e0a7      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	f000 80a3 	beq.w	8003c3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fd f947 	bl	8000d88 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x32>
 8003b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13f      	bne.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b20:	667b      	str	r3, [r7, #100]	; 0x64
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e6      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	663b      	str	r3, [r7, #96]	; 0x60
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e5      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e068      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d050      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba8:	d148      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e6      	bne.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3308      	adds	r3, #8
 8003c04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c06:	623a      	str	r2, [r7, #32]
 8003c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e010      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	f43f af48 	beq.w	8003aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3770      	adds	r7, #112	; 0x70
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b097      	sub	sp, #92	; 0x5c
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	d10e      	bne.n	8003cba <UART_Start_Receive_IT+0x52>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <UART_Start_Receive_IT+0x48>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cae:	e02d      	b.n	8003d0c <UART_Start_Receive_IT+0xa4>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	22ff      	movs	r2, #255	; 0xff
 8003cb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cb8:	e028      	b.n	8003d0c <UART_Start_Receive_IT+0xa4>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10d      	bne.n	8003cde <UART_Start_Receive_IT+0x76>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <UART_Start_Receive_IT+0x6c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd2:	e01b      	b.n	8003d0c <UART_Start_Receive_IT+0xa4>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	227f      	movs	r2, #127	; 0x7f
 8003cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cdc:	e016      	b.n	8003d0c <UART_Start_Receive_IT+0xa4>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce6:	d10d      	bne.n	8003d04 <UART_Start_Receive_IT+0x9c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d104      	bne.n	8003cfa <UART_Start_Receive_IT+0x92>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	227f      	movs	r2, #127	; 0x7f
 8003cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf8:	e008      	b.n	8003d0c <UART_Start_Receive_IT+0xa4>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	223f      	movs	r2, #63	; 0x3f
 8003cfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d02:	e003      	b.n	8003d0c <UART_Start_Receive_IT+0xa4>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2222      	movs	r2, #34	; 0x22
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3308      	adds	r3, #8
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	657b      	str	r3, [r7, #84]	; 0x54
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	d107      	bne.n	8003d6a <UART_Start_Receive_IT+0x102>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a21      	ldr	r2, [pc, #132]	; (8003dec <UART_Start_Receive_IT+0x184>)
 8003d66:	669a      	str	r2, [r3, #104]	; 0x68
 8003d68:	e002      	b.n	8003d70 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a20      	ldr	r2, [pc, #128]	; (8003df0 <UART_Start_Receive_IT+0x188>)
 8003d6e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d019      	beq.n	8003dac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
 8003d98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e6      	bne.n	8003d78 <UART_Start_Receive_IT+0x110>
 8003daa:	e018      	b.n	8003dde <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f043 0320 	orr.w	r3, r3, #32
 8003dc0:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	69f9      	ldr	r1, [r7, #28]
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	375c      	adds	r7, #92	; 0x5c
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	080040a3 	.word	0x080040a3
 8003df0:	08003f3d 	.word	0x08003f3d

08003df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b095      	sub	sp, #84	; 0x54
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e6      	bne.n	8003dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d118      	bne.n	8003e9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	613b      	str	r3, [r7, #16]
   return(result);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e6      	bne.n	8003e6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003eb0:	bf00      	nop
 8003eb2:	3754      	adds	r7, #84	; 0x54
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fa8a 	bl	80033f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6979      	ldr	r1, [r7, #20]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e6      	bne.n	8003ef0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fc fd30 	bl	8000994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f34:	bf00      	nop
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b096      	sub	sp, #88	; 0x58
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f4a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f54:	2b22      	cmp	r3, #34	; 0x22
 8003f56:	f040 8098 	bne.w	800408a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f68:	b2d9      	uxtb	r1, r3
 8003f6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	400a      	ands	r2, r1
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d17b      	bne.n	800409a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e6      	bne.n	8003fa2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ff4:	633a      	str	r2, [r7, #48]	; 0x30
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	2b01      	cmp	r3, #1
 8004022:	d12e      	bne.n	8004082 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	60fb      	str	r3, [r7, #12]
   return(result);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	617b      	str	r3, [r7, #20]
   return(result);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e6      	bne.n	800402a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d103      	bne.n	8004072 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2210      	movs	r2, #16
 8004070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff f9c4 	bl	8003408 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004080:	e00b      	b.n	800409a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fc28 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 8004088:	e007      	b.n	800409a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0208 	orr.w	r2, r2, #8
 8004098:	619a      	str	r2, [r3, #24]
}
 800409a:	bf00      	nop
 800409c:	3758      	adds	r7, #88	; 0x58
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b096      	sub	sp, #88	; 0x58
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ba:	2b22      	cmp	r3, #34	; 0x22
 80040bc:	f040 8098 	bne.w	80041f0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80040d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80040d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040d8:	4013      	ands	r3, r2
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d17b      	bne.n	8004200 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004126:	643b      	str	r3, [r7, #64]	; 0x40
 8004128:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800412c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e6      	bne.n	8004108 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	61fb      	str	r3, [r7, #28]
   return(result);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800415a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004186:	2b01      	cmp	r3, #1
 8004188:	d12e      	bne.n	80041e8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	60bb      	str	r3, [r7, #8]
   return(result);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f023 0310 	bic.w	r3, r3, #16
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6979      	ldr	r1, [r7, #20]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	613b      	str	r3, [r7, #16]
   return(result);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e6      	bne.n	8004190 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d103      	bne.n	80041d8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2210      	movs	r2, #16
 80041d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff f911 	bl	8003408 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041e6:	e00b      	b.n	8004200 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fc fb75 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 80041ee:	e007      	b.n	8004200 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	619a      	str	r2, [r3, #24]
}
 8004200:	bf00      	nop
 8004202:	3758      	adds	r7, #88	; 0x58
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800421e:	f3ef 8305 	mrs	r3, IPSR
 8004222:	60bb      	str	r3, [r7, #8]
  return(result);
 8004224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422a:	f3ef 8310 	mrs	r3, PRIMASK
 800422e:	607b      	str	r3, [r7, #4]
  return(result);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004236:	f3ef 8311 	mrs	r3, BASEPRI
 800423a:	603b      	str	r3, [r7, #0]
  return(result);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <osKernelInitialize+0x3a>
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <osKernelInitialize+0x64>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d103      	bne.n	8004252 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800424a:	f06f 0305 	mvn.w	r3, #5
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e00c      	b.n	800426c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <osKernelInitialize+0x64>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <osKernelInitialize+0x64>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	e002      	b.n	800426c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000160 	.word	0x20000160

08004280 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004286:	f3ef 8305 	mrs	r3, IPSR
 800428a:	60bb      	str	r3, [r7, #8]
  return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004292:	f3ef 8310 	mrs	r3, PRIMASK
 8004296:	607b      	str	r3, [r7, #4]
  return(result);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d105      	bne.n	80042aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800429e:	f3ef 8311 	mrs	r3, BASEPRI
 80042a2:	603b      	str	r3, [r7, #0]
  return(result);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <osKernelStart+0x3a>
 80042aa:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <osKernelStart+0x68>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d103      	bne.n	80042ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80042b2:	f06f 0305 	mvn.w	r3, #5
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e010      	b.n	80042dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <osKernelStart+0x68>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d109      	bne.n	80042d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042c2:	f7ff ffa1 	bl	8004208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <osKernelStart+0x68>)
 80042c8:	2202      	movs	r2, #2
 80042ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042cc:	f001 f8ca 	bl	8005464 <vTaskStartScheduler>
      stat = osOK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e002      	b.n	80042dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000160 	.word	0x20000160

080042ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b090      	sub	sp, #64	; 0x40
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fc:	f3ef 8305 	mrs	r3, IPSR
 8004300:	61fb      	str	r3, [r7, #28]
  return(result);
 8004302:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 808f 	bne.w	8004428 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430a:	f3ef 8310 	mrs	r3, PRIMASK
 800430e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d105      	bne.n	8004322 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004316:	f3ef 8311 	mrs	r3, BASEPRI
 800431a:	617b      	str	r3, [r7, #20]
  return(result);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <osThreadNew+0x3e>
 8004322:	4b44      	ldr	r3, [pc, #272]	; (8004434 <osThreadNew+0x148>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d07e      	beq.n	8004428 <osThreadNew+0x13c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d07b      	beq.n	8004428 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004334:	2318      	movs	r3, #24
 8004336:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d045      	beq.n	80043d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <osThreadNew+0x6a>
        name = attr->name;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <osThreadNew+0x90>
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	2b38      	cmp	r3, #56	; 0x38
 800436e:	d805      	bhi.n	800437c <osThreadNew+0x90>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <osThreadNew+0x94>
        return (NULL);
 800437c:	2300      	movs	r3, #0
 800437e:	e054      	b.n	800442a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <osThreadNew+0xca>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2ba7      	cmp	r3, #167	; 0xa7
 800439e:	d90a      	bls.n	80043b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <osThreadNew+0xca>
        mem = 1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	e010      	b.n	80043d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <osThreadNew+0xec>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d108      	bne.n	80043d8 <osThreadNew+0xec>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d104      	bne.n	80043d8 <osThreadNew+0xec>
          mem = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	e001      	b.n	80043d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d110      	bne.n	8004400 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043e6:	9202      	str	r2, [sp, #8]
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fe3f 	bl	8005078 <xTaskCreateStatic>
 80043fa:	4603      	mov	r3, r0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e013      	b.n	8004428 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d110      	bne.n	8004428 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	b29a      	uxth	r2, r3
 800440a:	f107 0310 	add.w	r3, r7, #16
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fe90 	bl	800513e <xTaskCreate>
 800441e:	4603      	mov	r3, r0
 8004420:	2b01      	cmp	r3, #1
 8004422:	d001      	beq.n	8004428 <osThreadNew+0x13c>
          hTask = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004428:	693b      	ldr	r3, [r7, #16]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3730      	adds	r7, #48	; 0x30
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000160 	.word	0x20000160

08004438 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004440:	f3ef 8305 	mrs	r3, IPSR
 8004444:	613b      	str	r3, [r7, #16]
  return(result);
 8004446:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10f      	bne.n	800446c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444c:	f3ef 8310 	mrs	r3, PRIMASK
 8004450:	60fb      	str	r3, [r7, #12]
  return(result);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004458:	f3ef 8311 	mrs	r3, BASEPRI
 800445c:	60bb      	str	r3, [r7, #8]
  return(result);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <osDelay+0x3c>
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <osDelay+0x58>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d103      	bne.n	8004474 <osDelay+0x3c>
    stat = osErrorISR;
 800446c:	f06f 0305 	mvn.w	r3, #5
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e007      	b.n	8004484 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <osDelay+0x4c>
      vTaskDelay(ticks);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 ffba 	bl	80053f8 <vTaskDelay>
    }
  }

  return (stat);
 8004484:	697b      	ldr	r3, [r7, #20]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000160 	.word	0x20000160

08004494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80044a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a06      	ldr	r2, [pc, #24]	; (80044c4 <vApplicationGetIdleTaskMemory+0x30>)
 80044aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000164 	.word	0x20000164
 80044c4:	2000020c 	.word	0x2000020c

080044c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80044d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <vApplicationGetTimerTaskMemory+0x30>)
 80044de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	2000040c 	.word	0x2000040c
 80044f8:	200004b4 	.word	0x200004b4

080044fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f103 0208 	add.w	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f103 0208 	add.w	r2, r3, #8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f103 0208 	add.w	r2, r3, #8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d103      	bne.n	80045be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e00c      	b.n	80045d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3308      	adds	r3, #8
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e002      	b.n	80045cc <vListInsert+0x2e>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d2f6      	bcs.n	80045c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6892      	ldr	r2, [r2, #8]
 8004626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6852      	ldr	r2, [r2, #4]
 8004630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d103      	bne.n	8004644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	1e5a      	subs	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10c      	bne.n	8004692 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	b672      	cpsid	i
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	b662      	cpsie	i
 800468c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004692:	f002 f8a3 	bl	80067dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	441a      	add	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	3b01      	subs	r3, #1
 80046c4:	68f9      	ldr	r1, [r7, #12]
 80046c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	441a      	add	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	22ff      	movs	r2, #255	; 0xff
 80046de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d114      	bne.n	8004712 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01a      	beq.n	8004726 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3310      	adds	r3, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 f95d 	bl	80059b4 <xTaskRemoveFromEventList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <xQueueGenericReset+0xd0>)
 8004702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	e009      	b.n	8004726 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3310      	adds	r3, #16
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fef0 	bl	80044fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3324      	adds	r3, #36	; 0x24
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff feeb 	bl	80044fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004726:	f002 f88d 	bl	8006844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800472a:	2301      	movs	r3, #1
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	; 0x38
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10c      	bne.n	8004766 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	b672      	cpsid	i
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	b662      	cpsie	i
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10c      	bne.n	8004786 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	b672      	cpsid	i
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	b662      	cpsie	i
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <xQueueGenericCreateStatic+0x5a>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <xQueueGenericCreateStatic+0x5e>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <xQueueGenericCreateStatic+0x60>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10c      	bne.n	80047b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	b672      	cpsid	i
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	b662      	cpsie	i
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <xQueueGenericCreateStatic+0x8a>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <xQueueGenericCreateStatic+0x8e>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <xQueueGenericCreateStatic+0x90>
 80047c6:	2300      	movs	r3, #0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10c      	bne.n	80047e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	b672      	cpsid	i
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	b662      	cpsie	i
 80047e0:	61fb      	str	r3, [r7, #28]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047e6:	2350      	movs	r3, #80	; 0x50
 80047e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b50      	cmp	r3, #80	; 0x50
 80047ee:	d00c      	beq.n	800480a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	b672      	cpsid	i
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	b662      	cpsie	i
 8004804:	61bb      	str	r3, [r7, #24]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800480a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800481e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f805 	bl	800483c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004834:	4618      	mov	r0, r3
 8004836:	3730      	adds	r7, #48	; 0x30
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e002      	b.n	800485e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800486a:	2101      	movs	r1, #1
 800486c:	69b8      	ldr	r0, [r7, #24]
 800486e:	f7ff fef9 	bl	8004664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	; 0x38
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004892:	2300      	movs	r3, #0
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10c      	bne.n	80048ba <xQueueGenericSend+0x36>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	b672      	cpsid	i
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	b662      	cpsie	i
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <xQueueGenericSend+0x44>
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <xQueueGenericSend+0x48>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <xQueueGenericSend+0x4a>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <xQueueGenericSend+0x68>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	b672      	cpsid	i
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	b662      	cpsie	i
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d103      	bne.n	80048fa <xQueueGenericSend+0x76>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <xQueueGenericSend+0x7a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueGenericSend+0x7c>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10c      	bne.n	800491e <xQueueGenericSend+0x9a>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	b672      	cpsid	i
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	b662      	cpsie	i
 8004918:	623b      	str	r3, [r7, #32]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800491e:	f001 fa13 	bl	8005d48 <xTaskGetSchedulerState>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <xQueueGenericSend+0xaa>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <xQueueGenericSend+0xae>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <xQueueGenericSend+0xb0>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10c      	bne.n	8004952 <xQueueGenericSend+0xce>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	b672      	cpsid	i
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	b662      	cpsie	i
 800494c:	61fb      	str	r3, [r7, #28]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004952:	f001 ff43 	bl	80067dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <xQueueGenericSend+0xe4>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d129      	bne.n	80049bc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800496e:	f000 fa15 	bl	8004d9c <prvCopyDataToQueue>
 8004972:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	2b00      	cmp	r3, #0
 800497a:	d010      	beq.n	800499e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	3324      	adds	r3, #36	; 0x24
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f817 	bl	80059b4 <xTaskRemoveFromEventList>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800498c:	4b3f      	ldr	r3, [pc, #252]	; (8004a8c <xQueueGenericSend+0x208>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	e00a      	b.n	80049b4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049a4:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <xQueueGenericSend+0x208>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049b4:	f001 ff46 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e063      	b.n	8004a84 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049c2:	f001 ff3f 	bl	8006844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e05c      	b.n	8004a84 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049d0:	f107 0314 	add.w	r3, r7, #20
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f853 	bl	8005a80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049da:	2301      	movs	r3, #1
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049de:	f001 ff31 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049e2:	f000 fdb3 	bl	800554c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049e6:	f001 fef9 	bl	80067dc <vPortEnterCritical>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d103      	bne.n	8004a00 <xQueueGenericSend+0x17c>
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a06:	b25b      	sxtb	r3, r3
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d103      	bne.n	8004a16 <xQueueGenericSend+0x192>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a16:	f001 ff15 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a1a:	1d3a      	adds	r2, r7, #4
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 f842 	bl	8005aac <xTaskCheckForTimeOut>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d124      	bne.n	8004a78 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a30:	f000 faac 	bl	8004f8c <prvIsQueueFull>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d018      	beq.n	8004a6c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	3310      	adds	r3, #16
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 ff62 	bl	800590c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a4a:	f000 fa37 	bl	8004ebc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a4e:	f000 fd8b 	bl	8005568 <xTaskResumeAll>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f47f af7c 	bne.w	8004952 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <xQueueGenericSend+0x208>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	e772      	b.n	8004952 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a6e:	f000 fa25 	bl	8004ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a72:	f000 fd79 	bl	8005568 <xTaskResumeAll>
 8004a76:	e76c      	b.n	8004952 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a7a:	f000 fa1f 	bl	8004ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a7e:	f000 fd73 	bl	8005568 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3738      	adds	r7, #56	; 0x38
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08e      	sub	sp, #56	; 0x38
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10c      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	b672      	cpsid	i
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	b662      	cpsie	i
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <xQueueGenericSendFromISR+0x40>
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <xQueueGenericSendFromISR+0x44>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <xQueueGenericSendFromISR+0x46>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	b672      	cpsid	i
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	b662      	cpsie	i
 8004aee:	623b      	str	r3, [r7, #32]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSendFromISR+0x72>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <xQueueGenericSendFromISR+0x76>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericSendFromISR+0x78>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10c      	bne.n	8004b26 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	b672      	cpsid	i
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	b662      	cpsie	i
 8004b20:	61fb      	str	r3, [r7, #28]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b26:	f001 ff41 	bl	80069ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	b672      	cpsid	i
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	b662      	cpsie	i
 8004b42:	61ba      	str	r2, [r7, #24]
 8004b44:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b46:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <xQueueGenericSendFromISR+0xcc>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d12c      	bne.n	8004bb6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6c:	f000 f916 	bl	8004d9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d112      	bne.n	8004ba0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	3324      	adds	r3, #36	; 0x24
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ff14 	bl	80059b4 <xTaskRemoveFromEventList>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00e      	beq.n	8004bb0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00b      	beq.n	8004bb0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e007      	b.n	8004bb0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	b25a      	sxtb	r2, r3
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004bb4:	e001      	b.n	8004bba <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3738      	adds	r7, #56	; 0x38
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10c      	bne.n	8004c04 <xQueueReceive+0x34>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	b672      	cpsid	i
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	b662      	cpsie	i
 8004bfe:	623b      	str	r3, [r7, #32]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <xQueueReceive+0x42>
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <xQueueReceive+0x46>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <xQueueReceive+0x48>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10c      	bne.n	8004c36 <xQueueReceive+0x66>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	b672      	cpsid	i
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	b662      	cpsie	i
 8004c30:	61fb      	str	r3, [r7, #28]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c36:	f001 f887 	bl	8005d48 <xTaskGetSchedulerState>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <xQueueReceive+0x76>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <xQueueReceive+0x7a>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <xQueueReceive+0x7c>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10c      	bne.n	8004c6a <xQueueReceive+0x9a>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	b672      	cpsid	i
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	b662      	cpsie	i
 8004c64:	61bb      	str	r3, [r7, #24]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c6a:	f001 fdb7 	bl	80067dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01f      	beq.n	8004cba <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7e:	f000 f8f7 	bl	8004e70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1e5a      	subs	r2, r3, #1
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00f      	beq.n	8004cb2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	3310      	adds	r3, #16
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fe8c 	bl	80059b4 <xTaskRemoveFromEventList>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	; (8004d98 <xQueueReceive+0x1c8>)
 8004ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cb2:	f001 fdc7 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e069      	b.n	8004d8e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cc0:	f001 fdc0 	bl	8006844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e062      	b.n	8004d8e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cce:	f107 0310 	add.w	r3, r7, #16
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fed4 	bl	8005a80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cdc:	f001 fdb2 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ce0:	f000 fc34 	bl	800554c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce4:	f001 fd7a 	bl	80067dc <vPortEnterCritical>
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d103      	bne.n	8004cfe <xQueueReceive+0x12e>
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d04:	b25b      	sxtb	r3, r3
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d103      	bne.n	8004d14 <xQueueReceive+0x144>
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d14:	f001 fd96 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d18:	1d3a      	adds	r2, r7, #4
 8004d1a:	f107 0310 	add.w	r3, r7, #16
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fec3 	bl	8005aac <xTaskCheckForTimeOut>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d123      	bne.n	8004d74 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d2e:	f000 f917 	bl	8004f60 <prvIsQueueEmpty>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d017      	beq.n	8004d68 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fde3 	bl	800590c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d48:	f000 f8b8 	bl	8004ebc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d4c:	f000 fc0c 	bl	8005568 <xTaskResumeAll>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d189      	bne.n	8004c6a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <xQueueReceive+0x1c8>)
 8004d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	e780      	b.n	8004c6a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d6a:	f000 f8a7 	bl	8004ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6e:	f000 fbfb 	bl	8005568 <xTaskResumeAll>
 8004d72:	e77a      	b.n	8004c6a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d76:	f000 f8a1 	bl	8004ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d7a:	f000 fbf5 	bl	8005568 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d80:	f000 f8ee 	bl	8004f60 <prvIsQueueEmpty>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f43f af6f 	beq.w	8004c6a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3730      	adds	r7, #48	; 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d14d      	bne.n	8004e5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 ffdc 	bl	8005d84 <xTaskPriorityDisinherit>
 8004dcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	e043      	b.n	8004e5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d119      	bne.n	8004e10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6858      	ldr	r0, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f002 f88c 	bl	8006f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d32b      	bcc.n	8004e5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	e026      	b.n	8004e5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68d8      	ldr	r0, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	f002 f872 	bl	8006f04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	425b      	negs	r3, r3
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d207      	bcs.n	8004e4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	425b      	negs	r3, r3
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d105      	bne.n	8004e5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e66:	697b      	ldr	r3, [r7, #20]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d303      	bcc.n	8004ea4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68d9      	ldr	r1, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	461a      	mov	r2, r3
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f002 f828 	bl	8006f04 <memcpy>
	}
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ec4:	f001 fc8a 	bl	80067dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ece:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ed0:	e011      	b.n	8004ef6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d012      	beq.n	8004f00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3324      	adds	r3, #36	; 0x24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fd68 	bl	80059b4 <xTaskRemoveFromEventList>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eea:	f000 fe45 	bl	8005b78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dce9      	bgt.n	8004ed2 <prvUnlockQueue+0x16>
 8004efe:	e000      	b.n	8004f02 <prvUnlockQueue+0x46>
					break;
 8004f00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	22ff      	movs	r2, #255	; 0xff
 8004f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f0a:	f001 fc9b 	bl	8006844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f0e:	f001 fc65 	bl	80067dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f1a:	e011      	b.n	8004f40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3310      	adds	r3, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fd43 	bl	80059b4 <xTaskRemoveFromEventList>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f34:	f000 fe20 	bl	8005b78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dce9      	bgt.n	8004f1c <prvUnlockQueue+0x60>
 8004f48:	e000      	b.n	8004f4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	22ff      	movs	r2, #255	; 0xff
 8004f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f54:	f001 fc76 	bl	8006844 <vPortExitCritical>
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f68:	f001 fc38 	bl	80067dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e001      	b.n	8004f7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7e:	f001 fc61 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8004f82:	68fb      	ldr	r3, [r7, #12]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f94:	f001 fc22 	bl	80067dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d102      	bne.n	8004faa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e001      	b.n	8004fae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fae:	f001 fc49 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e014      	b.n	8004ff6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	; (800500c <vQueueAddToRegistry+0x50>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fd8:	490c      	ldr	r1, [pc, #48]	; (800500c <vQueueAddToRegistry+0x50>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	; (800500c <vQueueAddToRegistry+0x50>)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fee:	e006      	b.n	8004ffe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b07      	cmp	r3, #7
 8004ffa:	d9e7      	bls.n	8004fcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	200008b4 	.word	0x200008b4

08005010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005020:	f001 fbdc 	bl	80067dc <vPortEnterCritical>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800502a:	b25b      	sxtb	r3, r3
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d103      	bne.n	800503a <vQueueWaitForMessageRestricted+0x2a>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005040:	b25b      	sxtb	r3, r3
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d103      	bne.n	8005050 <vQueueWaitForMessageRestricted+0x40>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005050:	f001 fbf8 	bl	8006844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3324      	adds	r3, #36	; 0x24
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fc77 	bl	8005958 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff ff26 	bl	8004ebc <prvUnlockQueue>
	}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	; 0x38
 800507c:	af04      	add	r7, sp, #16
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10c      	bne.n	80050a6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	b672      	cpsid	i
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	b662      	cpsie	i
 80050a0:	623b      	str	r3, [r7, #32]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10c      	bne.n	80050c6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	b672      	cpsid	i
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	b662      	cpsie	i
 80050c0:	61fb      	str	r3, [r7, #28]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050c6:	23a8      	movs	r3, #168	; 0xa8
 80050c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2ba8      	cmp	r3, #168	; 0xa8
 80050ce:	d00c      	beq.n	80050ea <xTaskCreateStatic+0x72>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	b672      	cpsid	i
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	b662      	cpsie	i
 80050e4:	61bb      	str	r3, [r7, #24]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01e      	beq.n	8005130 <xTaskCreateStatic+0xb8>
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005100:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2202      	movs	r2, #2
 8005106:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800510a:	2300      	movs	r3, #0
 800510c:	9303      	str	r3, [sp, #12]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	9302      	str	r3, [sp, #8]
 8005112:	f107 0314 	add.w	r3, r7, #20
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f850 	bl	80051c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800512a:	f000 f8f5 	bl	8005318 <prvAddNewTaskToReadyList>
 800512e:	e001      	b.n	8005134 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005134:	697b      	ldr	r3, [r7, #20]
	}
 8005136:	4618      	mov	r0, r3
 8005138:	3728      	adds	r7, #40	; 0x28
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800513e:	b580      	push	{r7, lr}
 8005140:	b08c      	sub	sp, #48	; 0x30
 8005142:	af04      	add	r7, sp, #16
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4618      	mov	r0, r3
 8005154:	f001 fc6e 	bl	8006a34 <pvPortMalloc>
 8005158:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00e      	beq.n	800517e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005160:	20a8      	movs	r0, #168	; 0xa8
 8005162:	f001 fc67 	bl	8006a34 <pvPortMalloc>
 8005166:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
 8005174:	e005      	b.n	8005182 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f001 fd26 	bl	8006bc8 <vPortFree>
 800517c:	e001      	b.n	8005182 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d017      	beq.n	80051b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	2300      	movs	r3, #0
 8005194:	9303      	str	r3, [sp, #12]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f80e 	bl	80051c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ac:	69f8      	ldr	r0, [r7, #28]
 80051ae:	f000 f8b3 	bl	8005318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e002      	b.n	80051be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051be:	69bb      	ldr	r3, [r7, #24]
	}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	461a      	mov	r2, r3
 80051e0:	21a5      	movs	r1, #165	; 0xa5
 80051e2:	f001 fe0b 	bl	8006dfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80051f0:	440b      	add	r3, r1
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00c      	beq.n	8005224 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	b672      	cpsid	i
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	b662      	cpsie	i
 800521e:	617b      	str	r3, [r7, #20]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01f      	beq.n	800526a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	e012      	b.n	8005256 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	7819      	ldrb	r1, [r3, #0]
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	3334      	adds	r3, #52	; 0x34
 8005240:	460a      	mov	r2, r1
 8005242:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d006      	beq.n	800525e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d9e9      	bls.n	8005230 <prvInitialiseNewTask+0x68>
 800525c:	e000      	b.n	8005260 <prvInitialiseNewTask+0x98>
			{
				break;
 800525e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005268:	e003      	b.n	8005272 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	2b37      	cmp	r3, #55	; 0x37
 8005276:	d901      	bls.n	800527c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005278:	2337      	movs	r3, #55	; 0x37
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005280:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2200      	movs	r2, #0
 800528c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	3304      	adds	r3, #4
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff f952 	bl	800453c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	3318      	adds	r3, #24
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff f94d 	bl	800453c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	3354      	adds	r3, #84	; 0x54
 80052cc:	224c      	movs	r2, #76	; 0x4c
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 fd93 	bl	8006dfc <memset>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	4a0c      	ldr	r2, [pc, #48]	; (800530c <prvInitialiseNewTask+0x144>)
 80052da:	659a      	str	r2, [r3, #88]	; 0x58
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	4a0c      	ldr	r2, [pc, #48]	; (8005310 <prvInitialiseNewTask+0x148>)
 80052e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <prvInitialiseNewTask+0x14c>)
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	69b8      	ldr	r0, [r7, #24]
 80052ee:	f001 f96b 	bl	80065c8 <pxPortInitialiseStack>
 80052f2:	4602      	mov	r2, r0
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005302:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005304:	bf00      	nop
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20004b40 	.word	0x20004b40
 8005310:	20004ba8 	.word	0x20004ba8
 8005314:	20004c10 	.word	0x20004c10

08005318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005320:	f001 fa5c 	bl	80067dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005324:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <prvAddNewTaskToReadyList+0xc4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	4a2c      	ldr	r2, [pc, #176]	; (80053dc <prvAddNewTaskToReadyList+0xc4>)
 800532c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800532e:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <prvAddNewTaskToReadyList+0xc8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005336:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <prvAddNewTaskToReadyList+0xc8>)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800533c:	4b27      	ldr	r3, [pc, #156]	; (80053dc <prvAddNewTaskToReadyList+0xc4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d110      	bne.n	8005366 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005344:	f000 fc3c 	bl	8005bc0 <prvInitialiseTaskLists>
 8005348:	e00d      	b.n	8005366 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800534a:	4b26      	ldr	r3, [pc, #152]	; (80053e4 <prvAddNewTaskToReadyList+0xcc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005352:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <prvAddNewTaskToReadyList+0xc8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	429a      	cmp	r2, r3
 800535e:	d802      	bhi.n	8005366 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <prvAddNewTaskToReadyList+0xc8>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <prvAddNewTaskToReadyList+0xd0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3301      	adds	r3, #1
 800536c:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <prvAddNewTaskToReadyList+0xd0>)
 800536e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005370:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <prvAddNewTaskToReadyList+0xd0>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <prvAddNewTaskToReadyList+0xd4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d903      	bls.n	800538c <prvAddNewTaskToReadyList+0x74>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	4a18      	ldr	r2, [pc, #96]	; (80053ec <prvAddNewTaskToReadyList+0xd4>)
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <prvAddNewTaskToReadyList+0xd8>)
 800539a:	441a      	add	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f7ff f8d7 	bl	8004556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053a8:	f001 fa4c 	bl	8006844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053ac:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <prvAddNewTaskToReadyList+0xcc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00e      	beq.n	80053d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <prvAddNewTaskToReadyList+0xc8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	429a      	cmp	r2, r3
 80053c0:	d207      	bcs.n	80053d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <prvAddNewTaskToReadyList+0xdc>)
 80053c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000dc8 	.word	0x20000dc8
 80053e0:	200008f4 	.word	0x200008f4
 80053e4:	20000dd4 	.word	0x20000dd4
 80053e8:	20000de4 	.word	0x20000de4
 80053ec:	20000dd0 	.word	0x20000dd0
 80053f0:	200008f8 	.word	0x200008f8
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d019      	beq.n	800543e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800540a:	4b14      	ldr	r3, [pc, #80]	; (800545c <vTaskDelay+0x64>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <vTaskDelay+0x34>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	b672      	cpsid	i
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	b662      	cpsie	i
 8005426:	60bb      	str	r3, [r7, #8]
}
 8005428:	bf00      	nop
 800542a:	e7fe      	b.n	800542a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800542c:	f000 f88e 	bl	800554c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005430:	2100      	movs	r1, #0
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fd18 	bl	8005e68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005438:	f000 f896 	bl	8005568 <xTaskResumeAll>
 800543c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d107      	bne.n	8005454 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <vTaskDelay+0x68>)
 8005446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000df0 	.word	0x20000df0
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005472:	463a      	mov	r2, r7
 8005474:	1d39      	adds	r1, r7, #4
 8005476:	f107 0308 	add.w	r3, r7, #8
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff f80a 	bl	8004494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	9202      	str	r2, [sp, #8]
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	2300      	movs	r3, #0
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	460a      	mov	r2, r1
 8005492:	4926      	ldr	r1, [pc, #152]	; (800552c <vTaskStartScheduler+0xc8>)
 8005494:	4826      	ldr	r0, [pc, #152]	; (8005530 <vTaskStartScheduler+0xcc>)
 8005496:	f7ff fdef 	bl	8005078 <xTaskCreateStatic>
 800549a:	4603      	mov	r3, r0
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <vTaskStartScheduler+0xd0>)
 800549e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <vTaskStartScheduler+0xd0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054a8:	2301      	movs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e001      	b.n	80054b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d102      	bne.n	80054be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054b8:	f000 fd2a 	bl	8005f10 <xTimerCreateTimerTask>
 80054bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d11d      	bne.n	8005500 <vTaskStartScheduler+0x9c>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	b672      	cpsid	i
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	b662      	cpsie	i
 80054d8:	613b      	str	r3, [r7, #16]
}
 80054da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054dc:	4b16      	ldr	r3, [pc, #88]	; (8005538 <vTaskStartScheduler+0xd4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3354      	adds	r3, #84	; 0x54
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <vTaskStartScheduler+0xd8>)
 80054e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <vTaskStartScheduler+0xdc>)
 80054e8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054ee:	4b15      	ldr	r3, [pc, #84]	; (8005544 <vTaskStartScheduler+0xe0>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <vTaskStartScheduler+0xe4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054fa:	f001 f8f1 	bl	80066e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054fe:	e010      	b.n	8005522 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d10c      	bne.n	8005522 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	b672      	cpsid	i
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	b662      	cpsie	i
 800551c:	60fb      	str	r3, [r7, #12]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <vTaskStartScheduler+0xbc>
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	08006ff4 	.word	0x08006ff4
 8005530:	08005b91 	.word	0x08005b91
 8005534:	20000dec 	.word	0x20000dec
 8005538:	200008f4 	.word	0x200008f4
 800553c:	2000005c 	.word	0x2000005c
 8005540:	20000de8 	.word	0x20000de8
 8005544:	20000dd4 	.word	0x20000dd4
 8005548:	20000dcc 	.word	0x20000dcc

0800554c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <vTaskSuspendAll+0x18>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a03      	ldr	r2, [pc, #12]	; (8005564 <vTaskSuspendAll+0x18>)
 8005558:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	20000df0 	.word	0x20000df0

08005568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005576:	4b43      	ldr	r3, [pc, #268]	; (8005684 <xTaskResumeAll+0x11c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10c      	bne.n	8005598 <xTaskResumeAll+0x30>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	b672      	cpsid	i
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	b662      	cpsie	i
 8005592:	603b      	str	r3, [r7, #0]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005598:	f001 f920 	bl	80067dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800559c:	4b39      	ldr	r3, [pc, #228]	; (8005684 <xTaskResumeAll+0x11c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	4a38      	ldr	r2, [pc, #224]	; (8005684 <xTaskResumeAll+0x11c>)
 80055a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a6:	4b37      	ldr	r3, [pc, #220]	; (8005684 <xTaskResumeAll+0x11c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d162      	bne.n	8005674 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055ae:	4b36      	ldr	r3, [pc, #216]	; (8005688 <xTaskResumeAll+0x120>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d05e      	beq.n	8005674 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055b6:	e02f      	b.n	8005618 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b8:	4b34      	ldr	r3, [pc, #208]	; (800568c <xTaskResumeAll+0x124>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3318      	adds	r3, #24
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff f823 	bl	8004610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff f81e 	bl	8004610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <xTaskResumeAll+0x128>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d903      	bls.n	80055e8 <xTaskResumeAll+0x80>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <xTaskResumeAll+0x128>)
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4a27      	ldr	r2, [pc, #156]	; (8005694 <xTaskResumeAll+0x12c>)
 80055f6:	441a      	add	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7fe ffa9 	bl	8004556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4b23      	ldr	r3, [pc, #140]	; (8005698 <xTaskResumeAll+0x130>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005612:	4b22      	ldr	r3, [pc, #136]	; (800569c <xTaskResumeAll+0x134>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005618:	4b1c      	ldr	r3, [pc, #112]	; (800568c <xTaskResumeAll+0x124>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1cb      	bne.n	80055b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005626:	f000 fb6f 	bl	8005d08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800562a:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <xTaskResumeAll+0x138>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d010      	beq.n	8005658 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005636:	f000 f847 	bl	80056c8 <xTaskIncrementTick>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <xTaskResumeAll+0x134>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3b01      	subs	r3, #1
 800564a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f1      	bne.n	8005636 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <xTaskResumeAll+0x138>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005658:	4b10      	ldr	r3, [pc, #64]	; (800569c <xTaskResumeAll+0x134>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <xTaskResumeAll+0x13c>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005674:	f001 f8e6 	bl	8006844 <vPortExitCritical>

	return xAlreadyYielded;
 8005678:	68bb      	ldr	r3, [r7, #8]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000df0 	.word	0x20000df0
 8005688:	20000dc8 	.word	0x20000dc8
 800568c:	20000d88 	.word	0x20000d88
 8005690:	20000dd0 	.word	0x20000dd0
 8005694:	200008f8 	.word	0x200008f8
 8005698:	200008f4 	.word	0x200008f4
 800569c:	20000ddc 	.word	0x20000ddc
 80056a0:	20000dd8 	.word	0x20000dd8
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <xTaskGetTickCount+0x1c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056b4:	687b      	ldr	r3, [r7, #4]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000dcc 	.word	0x20000dcc

080056c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d2:	4b50      	ldr	r3, [pc, #320]	; (8005814 <xTaskIncrementTick+0x14c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 808b 	bne.w	80057f2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056dc:	4b4e      	ldr	r3, [pc, #312]	; (8005818 <xTaskIncrementTick+0x150>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056e4:	4a4c      	ldr	r2, [pc, #304]	; (8005818 <xTaskIncrementTick+0x150>)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d122      	bne.n	8005736 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80056f0:	4b4a      	ldr	r3, [pc, #296]	; (800581c <xTaskIncrementTick+0x154>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <xTaskIncrementTick+0x4c>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	b672      	cpsid	i
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	b662      	cpsie	i
 800570e:	603b      	str	r3, [r7, #0]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <xTaskIncrementTick+0x4a>
 8005714:	4b41      	ldr	r3, [pc, #260]	; (800581c <xTaskIncrementTick+0x154>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	4b41      	ldr	r3, [pc, #260]	; (8005820 <xTaskIncrementTick+0x158>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a3f      	ldr	r2, [pc, #252]	; (800581c <xTaskIncrementTick+0x154>)
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4a3f      	ldr	r2, [pc, #252]	; (8005820 <xTaskIncrementTick+0x158>)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <xTaskIncrementTick+0x15c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	4a3d      	ldr	r2, [pc, #244]	; (8005824 <xTaskIncrementTick+0x15c>)
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	f000 fae9 	bl	8005d08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005736:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <xTaskIncrementTick+0x160>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d349      	bcc.n	80057d4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005740:	4b36      	ldr	r3, [pc, #216]	; (800581c <xTaskIncrementTick+0x154>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574a:	4b37      	ldr	r3, [pc, #220]	; (8005828 <xTaskIncrementTick+0x160>)
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	601a      	str	r2, [r3, #0]
					break;
 8005752:	e03f      	b.n	80057d4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005754:	4b31      	ldr	r3, [pc, #196]	; (800581c <xTaskIncrementTick+0x154>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d203      	bcs.n	8005774 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800576c:	4a2e      	ldr	r2, [pc, #184]	; (8005828 <xTaskIncrementTick+0x160>)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005772:	e02f      	b.n	80057d4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe ff49 	bl	8004610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3318      	adds	r3, #24
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe ff40 	bl	8004610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	4b25      	ldr	r3, [pc, #148]	; (800582c <xTaskIncrementTick+0x164>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d903      	bls.n	80057a4 <xTaskIncrementTick+0xdc>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a22      	ldr	r2, [pc, #136]	; (800582c <xTaskIncrementTick+0x164>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <xTaskIncrementTick+0x168>)
 80057b2:	441a      	add	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fe fecb 	bl	8004556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <xTaskIncrementTick+0x16c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d3b8      	bcc.n	8005740 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d2:	e7b5      	b.n	8005740 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057d4:	4b17      	ldr	r3, [pc, #92]	; (8005834 <xTaskIncrementTick+0x16c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	4915      	ldr	r1, [pc, #84]	; (8005830 <xTaskIncrementTick+0x168>)
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d907      	bls.n	80057fc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80057ec:	2301      	movs	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	e004      	b.n	80057fc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <xTaskIncrementTick+0x170>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <xTaskIncrementTick+0x170>)
 80057fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <xTaskIncrementTick+0x174>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005808:	697b      	ldr	r3, [r7, #20]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000df0 	.word	0x20000df0
 8005818:	20000dcc 	.word	0x20000dcc
 800581c:	20000d80 	.word	0x20000d80
 8005820:	20000d84 	.word	0x20000d84
 8005824:	20000de0 	.word	0x20000de0
 8005828:	20000de8 	.word	0x20000de8
 800582c:	20000dd0 	.word	0x20000dd0
 8005830:	200008f8 	.word	0x200008f8
 8005834:	200008f4 	.word	0x200008f4
 8005838:	20000dd8 	.word	0x20000dd8
 800583c:	20000ddc 	.word	0x20000ddc

08005840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <vTaskSwitchContext+0xb4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800584e:	4b2a      	ldr	r3, [pc, #168]	; (80058f8 <vTaskSwitchContext+0xb8>)
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005854:	e048      	b.n	80058e8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005856:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <vTaskSwitchContext+0xb8>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585c:	4b27      	ldr	r3, [pc, #156]	; (80058fc <vTaskSwitchContext+0xbc>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	e012      	b.n	800588a <vTaskSwitchContext+0x4a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <vTaskSwitchContext+0x44>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	b672      	cpsid	i
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	b662      	cpsie	i
 800587e:	607b      	str	r3, [r7, #4]
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <vTaskSwitchContext+0x42>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3b01      	subs	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	491d      	ldr	r1, [pc, #116]	; (8005900 <vTaskSwitchContext+0xc0>)
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0e2      	beq.n	8005864 <vTaskSwitchContext+0x24>
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <vTaskSwitchContext+0xc0>)
 80058aa:	4413      	add	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	3308      	adds	r3, #8
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d104      	bne.n	80058ce <vTaskSwitchContext+0x8e>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <vTaskSwitchContext+0xc4>)
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	4a08      	ldr	r2, [pc, #32]	; (80058fc <vTaskSwitchContext+0xbc>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <vTaskSwitchContext+0xc4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3354      	adds	r3, #84	; 0x54
 80058e4:	4a08      	ldr	r2, [pc, #32]	; (8005908 <vTaskSwitchContext+0xc8>)
 80058e6:	6013      	str	r3, [r2, #0]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20000df0 	.word	0x20000df0
 80058f8:	20000ddc 	.word	0x20000ddc
 80058fc:	20000dd0 	.word	0x20000dd0
 8005900:	200008f8 	.word	0x200008f8
 8005904:	200008f4 	.word	0x200008f4
 8005908:	2000005c 	.word	0x2000005c

0800590c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10c      	bne.n	8005936 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	b672      	cpsid	i
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	b662      	cpsie	i
 8005930:	60fb      	str	r3, [r7, #12]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005936:	4b07      	ldr	r3, [pc, #28]	; (8005954 <vTaskPlaceOnEventList+0x48>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3318      	adds	r3, #24
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fe fe2d 	bl	800459e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005944:	2101      	movs	r1, #1
 8005946:	6838      	ldr	r0, [r7, #0]
 8005948:	f000 fa8e 	bl	8005e68 <prvAddCurrentTaskToDelayedList>
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	200008f4 	.word	0x200008f4

08005958 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10c      	bne.n	8005984 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	b672      	cpsid	i
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	b662      	cpsie	i
 800597e:	617b      	str	r3, [r7, #20]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3318      	adds	r3, #24
 800598a:	4619      	mov	r1, r3
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f7fe fde2 	bl	8004556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005998:	f04f 33ff 	mov.w	r3, #4294967295
 800599c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	68b8      	ldr	r0, [r7, #8]
 80059a2:	f000 fa61 	bl	8005e68 <prvAddCurrentTaskToDelayedList>
	}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200008f4 	.word	0x200008f4

080059b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10c      	bne.n	80059e4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	b672      	cpsid	i
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	b662      	cpsie	i
 80059de:	60fb      	str	r3, [r7, #12]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	3318      	adds	r3, #24
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe fe11 	bl	8004610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ee:	4b1e      	ldr	r3, [pc, #120]	; (8005a68 <xTaskRemoveFromEventList+0xb4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d11d      	bne.n	8005a32 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fe08 	bl	8004610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <xTaskRemoveFromEventList+0xb8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d903      	bls.n	8005a14 <xTaskRemoveFromEventList+0x60>
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <xTaskRemoveFromEventList+0xb8>)
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <xTaskRemoveFromEventList+0xbc>)
 8005a22:	441a      	add	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe fd93 	bl	8004556 <vListInsertEnd>
 8005a30:	e005      	b.n	8005a3e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	3318      	adds	r3, #24
 8005a36:	4619      	mov	r1, r3
 8005a38:	480e      	ldr	r0, [pc, #56]	; (8005a74 <xTaskRemoveFromEventList+0xc0>)
 8005a3a:	f7fe fd8c 	bl	8004556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <xTaskRemoveFromEventList+0xc4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d905      	bls.n	8005a58 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <xTaskRemoveFromEventList+0xc8>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	e001      	b.n	8005a5c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a5c:	697b      	ldr	r3, [r7, #20]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000df0 	.word	0x20000df0
 8005a6c:	20000dd0 	.word	0x20000dd0
 8005a70:	200008f8 	.word	0x200008f8
 8005a74:	20000d88 	.word	0x20000d88
 8005a78:	200008f4 	.word	0x200008f4
 8005a7c:	20000ddc 	.word	0x20000ddc

08005a80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <vTaskInternalSetTimeOutState+0x24>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <vTaskInternalSetTimeOutState+0x28>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	605a      	str	r2, [r3, #4]
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	20000de0 	.word	0x20000de0
 8005aa8:	20000dcc 	.word	0x20000dcc

08005aac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10c      	bne.n	8005ad6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	b672      	cpsid	i
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	b662      	cpsie	i
 8005ad0:	613b      	str	r3, [r7, #16]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10c      	bne.n	8005af6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae0:	b672      	cpsid	i
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	b662      	cpsie	i
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005af6:	f000 fe71 	bl	80067dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005afa:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <xTaskCheckForTimeOut+0xc4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d102      	bne.n	8005b1a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	e023      	b.n	8005b62 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <xTaskCheckForTimeOut+0xc8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d007      	beq.n	8005b36 <xTaskCheckForTimeOut+0x8a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	e015      	b.n	8005b62 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d20b      	bcs.n	8005b58 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ff97 	bl	8005a80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	e004      	b.n	8005b62 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b62:	f000 fe6f 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8005b66:	69fb      	ldr	r3, [r7, #28]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000dcc 	.word	0x20000dcc
 8005b74:	20000de0 	.word	0x20000de0

08005b78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b7c:	4b03      	ldr	r3, [pc, #12]	; (8005b8c <vTaskMissedYield+0x14>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000ddc 	.word	0x20000ddc

08005b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b98:	f000 f852 	bl	8005c40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <prvIdleTask+0x28>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d9f9      	bls.n	8005b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <prvIdleTask+0x2c>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bb4:	e7f0      	b.n	8005b98 <prvIdleTask+0x8>
 8005bb6:	bf00      	nop
 8005bb8:	200008f8 	.word	0x200008f8
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	607b      	str	r3, [r7, #4]
 8005bca:	e00c      	b.n	8005be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4a12      	ldr	r2, [pc, #72]	; (8005c20 <prvInitialiseTaskLists+0x60>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fc8e 	bl	80044fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3301      	adds	r3, #1
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b37      	cmp	r3, #55	; 0x37
 8005bea:	d9ef      	bls.n	8005bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bec:	480d      	ldr	r0, [pc, #52]	; (8005c24 <prvInitialiseTaskLists+0x64>)
 8005bee:	f7fe fc85 	bl	80044fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bf2:	480d      	ldr	r0, [pc, #52]	; (8005c28 <prvInitialiseTaskLists+0x68>)
 8005bf4:	f7fe fc82 	bl	80044fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bf8:	480c      	ldr	r0, [pc, #48]	; (8005c2c <prvInitialiseTaskLists+0x6c>)
 8005bfa:	f7fe fc7f 	bl	80044fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bfe:	480c      	ldr	r0, [pc, #48]	; (8005c30 <prvInitialiseTaskLists+0x70>)
 8005c00:	f7fe fc7c 	bl	80044fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c04:	480b      	ldr	r0, [pc, #44]	; (8005c34 <prvInitialiseTaskLists+0x74>)
 8005c06:	f7fe fc79 	bl	80044fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <prvInitialiseTaskLists+0x78>)
 8005c0c:	4a05      	ldr	r2, [pc, #20]	; (8005c24 <prvInitialiseTaskLists+0x64>)
 8005c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <prvInitialiseTaskLists+0x7c>)
 8005c12:	4a05      	ldr	r2, [pc, #20]	; (8005c28 <prvInitialiseTaskLists+0x68>)
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200008f8 	.word	0x200008f8
 8005c24:	20000d58 	.word	0x20000d58
 8005c28:	20000d6c 	.word	0x20000d6c
 8005c2c:	20000d88 	.word	0x20000d88
 8005c30:	20000d9c 	.word	0x20000d9c
 8005c34:	20000db4 	.word	0x20000db4
 8005c38:	20000d80 	.word	0x20000d80
 8005c3c:	20000d84 	.word	0x20000d84

08005c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c46:	e019      	b.n	8005c7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c48:	f000 fdc8 	bl	80067dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4c:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <prvCheckTasksWaitingTermination+0x50>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe fcd9 	bl	8004610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <prvCheckTasksWaitingTermination+0x54>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	4a0b      	ldr	r2, [pc, #44]	; (8005c94 <prvCheckTasksWaitingTermination+0x54>)
 8005c66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <prvCheckTasksWaitingTermination+0x58>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <prvCheckTasksWaitingTermination+0x58>)
 8005c70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c72:	f000 fde7 	bl	8006844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f810 	bl	8005c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <prvCheckTasksWaitingTermination+0x58>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e1      	bne.n	8005c48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000d9c 	.word	0x20000d9c
 8005c94:	20000dc8 	.word	0x20000dc8
 8005c98:	20000db0 	.word	0x20000db0

08005c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3354      	adds	r3, #84	; 0x54
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 f8af 	bl	8006e0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ff83 	bl	8006bc8 <vPortFree>
				vPortFree( pxTCB );
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 ff80 	bl	8006bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cc8:	e01a      	b.n	8005d00 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d103      	bne.n	8005cdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 ff77 	bl	8006bc8 <vPortFree>
	}
 8005cda:	e011      	b.n	8005d00 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d00c      	beq.n	8005d00 <prvDeleteTCB+0x64>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	b672      	cpsid	i
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	b662      	cpsie	i
 8005cfa:	60fb      	str	r3, [r7, #12]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <prvDeleteTCB+0x62>
	}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <prvResetNextTaskUnblockTime+0x38>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <prvResetNextTaskUnblockTime+0x3c>)
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d20:	e008      	b.n	8005d34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <prvResetNextTaskUnblockTime+0x38>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a04      	ldr	r2, [pc, #16]	; (8005d44 <prvResetNextTaskUnblockTime+0x3c>)
 8005d32:	6013      	str	r3, [r2, #0]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000d80 	.word	0x20000d80
 8005d44:	20000de8 	.word	0x20000de8

08005d48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <xTaskGetSchedulerState+0x34>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d56:	2301      	movs	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	e008      	b.n	8005d6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5c:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <xTaskGetSchedulerState+0x38>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d64:	2302      	movs	r3, #2
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	e001      	b.n	8005d6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d6e:	687b      	ldr	r3, [r7, #4]
	}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000dd4 	.word	0x20000dd4
 8005d80:	20000df0 	.word	0x20000df0

08005d84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d05a      	beq.n	8005e50 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d9a:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <xTaskPriorityDisinherit+0xd8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d00c      	beq.n	8005dbe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	b672      	cpsid	i
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	b662      	cpsie	i
 8005db8:	60fb      	str	r3, [r7, #12]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10c      	bne.n	8005de0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	b672      	cpsid	i
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	b662      	cpsie	i
 8005dda:	60bb      	str	r3, [r7, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d02c      	beq.n	8005e50 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d128      	bne.n	8005e50 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fc04 	bl	8004610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <xTaskPriorityDisinherit+0xdc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d903      	bls.n	8005e30 <xTaskPriorityDisinherit+0xac>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <xTaskPriorityDisinherit+0xdc>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <xTaskPriorityDisinherit+0xe0>)
 8005e3e:	441a      	add	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fe fb85 	bl	8004556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e50:	697b      	ldr	r3, [r7, #20]
	}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200008f4 	.word	0x200008f4
 8005e60:	20000dd0 	.word	0x20000dd0
 8005e64:	200008f8 	.word	0x200008f8

08005e68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e78:	4b20      	ldr	r3, [pc, #128]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fbc6 	bl	8004610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d10a      	bne.n	8005ea2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e92:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4819      	ldr	r0, [pc, #100]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e9c:	f7fe fb5b 	bl	8004556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ea0:	e026      	b.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d209      	bcs.n	8005ece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7fe fb69 	bl	800459e <vListInsert>
}
 8005ecc:	e010      	b.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ece:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7fe fb5f 	bl	800459e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d202      	bcs.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005eea:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6013      	str	r3, [r2, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	20000dcc 	.word	0x20000dcc
 8005efc:	200008f4 	.word	0x200008f4
 8005f00:	20000db4 	.word	0x20000db4
 8005f04:	20000d84 	.word	0x20000d84
 8005f08:	20000d80 	.word	0x20000d80
 8005f0c:	20000de8 	.word	0x20000de8

08005f10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f1a:	f000 fb15 	bl	8006548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <xTimerCreateTimerTask+0x84>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d021      	beq.n	8005f6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f2e:	1d3a      	adds	r2, r7, #4
 8005f30:	f107 0108 	add.w	r1, r7, #8
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fac5 	bl	80044c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	9202      	str	r2, [sp, #8]
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	2302      	movs	r3, #2
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	460a      	mov	r2, r1
 8005f50:	4911      	ldr	r1, [pc, #68]	; (8005f98 <xTimerCreateTimerTask+0x88>)
 8005f52:	4812      	ldr	r0, [pc, #72]	; (8005f9c <xTimerCreateTimerTask+0x8c>)
 8005f54:	f7ff f890 	bl	8005078 <xTaskCreateStatic>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4a11      	ldr	r2, [pc, #68]	; (8005fa0 <xTimerCreateTimerTask+0x90>)
 8005f5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f5e:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <xTimerCreateTimerTask+0x90>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f66:	2301      	movs	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10c      	bne.n	8005f8a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	b672      	cpsid	i
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	b662      	cpsie	i
 8005f84:	613b      	str	r3, [r7, #16]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005f8a:	697b      	ldr	r3, [r7, #20]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000e24 	.word	0x20000e24
 8005f98:	08006ffc 	.word	0x08006ffc
 8005f9c:	080060e1 	.word	0x080060e1
 8005fa0:	20000e28 	.word	0x20000e28

08005fa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10c      	bne.n	8005fd6 <xTimerGenericCommand+0x32>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	b672      	cpsid	i
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	b662      	cpsie	i
 8005fd0:	623b      	str	r3, [r7, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <xTimerGenericCommand+0x9c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02a      	beq.n	8006034 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	dc18      	bgt.n	8006022 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ff0:	f7ff feaa 	bl	8005d48 <xTaskGetSchedulerState>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d109      	bne.n	800600e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ffa:	4b11      	ldr	r3, [pc, #68]	; (8006040 <xTimerGenericCommand+0x9c>)
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f107 0110 	add.w	r1, r7, #16
 8006002:	2300      	movs	r3, #0
 8006004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006006:	f7fe fc3d 	bl	8004884 <xQueueGenericSend>
 800600a:	6278      	str	r0, [r7, #36]	; 0x24
 800600c:	e012      	b.n	8006034 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <xTimerGenericCommand+0x9c>)
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	f107 0110 	add.w	r1, r7, #16
 8006016:	2300      	movs	r3, #0
 8006018:	2200      	movs	r2, #0
 800601a:	f7fe fc33 	bl	8004884 <xQueueGenericSend>
 800601e:	6278      	str	r0, [r7, #36]	; 0x24
 8006020:	e008      	b.n	8006034 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006022:	4b07      	ldr	r3, [pc, #28]	; (8006040 <xTimerGenericCommand+0x9c>)
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	f107 0110 	add.w	r1, r7, #16
 800602a:	2300      	movs	r3, #0
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	f7fe fd2f 	bl	8004a90 <xQueueGenericSendFromISR>
 8006032:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006036:	4618      	mov	r0, r3
 8006038:	3728      	adds	r7, #40	; 0x28
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000e24 	.word	0x20000e24

08006044 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604e:	4b23      	ldr	r3, [pc, #140]	; (80060dc <prvProcessExpiredTimer+0x98>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe fad7 	bl	8004610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d024      	beq.n	80060ba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	18d1      	adds	r1, r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	6978      	ldr	r0, [r7, #20]
 800607e:	f000 f8d3 	bl	8006228 <prvInsertTimerInActiveList>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d021      	beq.n	80060cc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006088:	2300      	movs	r3, #0
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2300      	movs	r3, #0
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	2100      	movs	r1, #0
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff ff86 	bl	8005fa4 <xTimerGenericCommand>
 8006098:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d115      	bne.n	80060cc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	b672      	cpsid	i
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	b662      	cpsie	i
 80060b4:	60fb      	str	r3, [r7, #12]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	6978      	ldr	r0, [r7, #20]
 80060d2:	4798      	blx	r3
}
 80060d4:	bf00      	nop
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000e1c 	.word	0x20000e1c

080060e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060e8:	f107 0308 	add.w	r3, r7, #8
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 f857 	bl	80061a0 <prvGetNextExpireTime>
 80060f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4619      	mov	r1, r3
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f803 	bl	8006104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060fe:	f000 f8d5 	bl	80062ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006102:	e7f1      	b.n	80060e8 <prvTimerTask+0x8>

08006104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800610e:	f7ff fa1d 	bl	800554c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006112:	f107 0308 	add.w	r3, r7, #8
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f866 	bl	80061e8 <prvSampleTimeNow>
 800611c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d130      	bne.n	8006186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <prvProcessTimerOrBlockTask+0x3c>
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	429a      	cmp	r2, r3
 8006130:	d806      	bhi.n	8006140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006132:	f7ff fa19 	bl	8005568 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff83 	bl	8006044 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800613e:	e024      	b.n	800618a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006146:	4b13      	ldr	r3, [pc, #76]	; (8006194 <prvProcessTimerOrBlockTask+0x90>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <prvProcessTimerOrBlockTask+0x50>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <prvProcessTimerOrBlockTask+0x52>
 8006154:	2300      	movs	r3, #0
 8006156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006158:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <prvProcessTimerOrBlockTask+0x94>)
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	4619      	mov	r1, r3
 8006166:	f7fe ff53 	bl	8005010 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800616a:	f7ff f9fd 	bl	8005568 <xTaskResumeAll>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <prvProcessTimerOrBlockTask+0x98>)
 8006176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	f3bf 8f6f 	isb	sy
}
 8006184:	e001      	b.n	800618a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006186:	f7ff f9ef 	bl	8005568 <xTaskResumeAll>
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000e20 	.word	0x20000e20
 8006198:	20000e24 	.word	0x20000e24
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061a8:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <prvGetNextExpireTime+0x44>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <prvGetNextExpireTime+0x16>
 80061b2:	2201      	movs	r2, #1
 80061b4:	e000      	b.n	80061b8 <prvGetNextExpireTime+0x18>
 80061b6:	2200      	movs	r2, #0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c4:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <prvGetNextExpireTime+0x44>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	e001      	b.n	80061d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061d4:	68fb      	ldr	r3, [r7, #12]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000e1c 	.word	0x20000e1c

080061e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061f0:	f7ff fa5a 	bl	80056a8 <xTaskGetTickCount>
 80061f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <prvSampleTimeNow+0x3c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d205      	bcs.n	800620c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006200:	f000 f93c 	bl	800647c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e002      	b.n	8006212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006212:	4a04      	ldr	r2, [pc, #16]	; (8006224 <prvSampleTimeNow+0x3c>)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006218:	68fb      	ldr	r3, [r7, #12]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000e2c 	.word	0x20000e2c

08006228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d812      	bhi.n	8006274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	429a      	cmp	r2, r3
 800625a:	d302      	bcc.n	8006262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800625c:	2301      	movs	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e01b      	b.n	800629a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <prvInsertTimerInActiveList+0x7c>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fe f996 	bl	800459e <vListInsert>
 8006272:	e012      	b.n	800629a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d206      	bcs.n	800628a <prvInsertTimerInActiveList+0x62>
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e007      	b.n	800629a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <prvInsertTimerInActiveList+0x80>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3304      	adds	r3, #4
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7fe f982 	bl	800459e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800629a:	697b      	ldr	r3, [r7, #20]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000e20 	.word	0x20000e20
 80062a8:	20000e1c 	.word	0x20000e1c

080062ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08e      	sub	sp, #56	; 0x38
 80062b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062b2:	e0d0      	b.n	8006456 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da1a      	bge.n	80062f0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062ba:	1d3b      	adds	r3, r7, #4
 80062bc:	3304      	adds	r3, #4
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10c      	bne.n	80062e0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	b672      	cpsid	i
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	b662      	cpsie	i
 80062da:	61fb      	str	r3, [r7, #28]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e6:	6850      	ldr	r0, [r2, #4]
 80062e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ea:	6892      	ldr	r2, [r2, #8]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f2c0 80af 	blt.w	8006456 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	3304      	adds	r3, #4
 8006308:	4618      	mov	r0, r3
 800630a:	f7fe f981 	bl	8004610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800630e:	463b      	mov	r3, r7
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ff69 	bl	80061e8 <prvSampleTimeNow>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b09      	cmp	r3, #9
 800631c:	f200 809a 	bhi.w	8006454 <prvProcessReceivedCommands+0x1a8>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <prvProcessReceivedCommands+0x7c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006351 	.word	0x08006351
 800632c:	08006351 	.word	0x08006351
 8006330:	08006351 	.word	0x08006351
 8006334:	080063c9 	.word	0x080063c9
 8006338:	080063dd 	.word	0x080063dd
 800633c:	0800642b 	.word	0x0800642b
 8006340:	08006351 	.word	0x08006351
 8006344:	08006351 	.word	0x08006351
 8006348:	080063c9 	.word	0x080063c9
 800634c:	080063dd 	.word	0x080063dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	b2da      	uxtb	r2, r3
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	18d1      	adds	r1, r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006370:	f7ff ff5a 	bl	8006228 <prvInsertTimerInActiveList>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d06d      	beq.n	8006456 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006380:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d062      	beq.n	8006456 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	441a      	add	r2, r3
 8006398:	2300      	movs	r3, #0
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	2300      	movs	r3, #0
 800639e:	2100      	movs	r1, #0
 80063a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a2:	f7ff fdff 	bl	8005fa4 <xTimerGenericCommand>
 80063a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d153      	bne.n	8006456 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	b672      	cpsid	i
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	b662      	cpsie	i
 80063c2:	61bb      	str	r3, [r7, #24]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063da:	e03c      	b.n	8006456 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10c      	bne.n	8006416 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	b672      	cpsid	i
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	b662      	cpsie	i
 8006410:	617b      	str	r3, [r7, #20]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	18d1      	adds	r1, r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006424:	f7ff ff00 	bl	8006228 <prvInsertTimerInActiveList>
					break;
 8006428:	e015      	b.n	8006456 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800643a:	f000 fbc5 	bl	8006bc8 <vPortFree>
 800643e:	e00a      	b.n	8006456 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006452:	e000      	b.n	8006456 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8006454:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006456:	4b08      	ldr	r3, [pc, #32]	; (8006478 <prvProcessReceivedCommands+0x1cc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	1d39      	adds	r1, r7, #4
 800645c:	2200      	movs	r2, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe fbb6 	bl	8004bd0 <xQueueReceive>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	f47f af24 	bne.w	80062b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	3730      	adds	r7, #48	; 0x30
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000e24 	.word	0x20000e24

0800647c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006482:	e04a      	b.n	800651a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006484:	4b2e      	ldr	r3, [pc, #184]	; (8006540 <prvSwitchTimerLists+0xc4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800648e:	4b2c      	ldr	r3, [pc, #176]	; (8006540 <prvSwitchTimerLists+0xc4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3304      	adds	r3, #4
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe f8b7 	bl	8004610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d030      	beq.n	800651a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4413      	add	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d90e      	bls.n	80064e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <prvSwitchTimerLists+0xc4>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3304      	adds	r3, #4
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7fe f85c 	bl	800459e <vListInsert>
 80064e6:	e018      	b.n	800651a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064e8:	2300      	movs	r3, #0
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2300      	movs	r3, #0
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	2100      	movs	r1, #0
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff fd56 	bl	8005fa4 <xTimerGenericCommand>
 80064f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	b672      	cpsid	i
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	b662      	cpsie	i
 8006514:	603b      	str	r3, [r7, #0]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <prvSwitchTimerLists+0xc4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1af      	bne.n	8006484 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <prvSwitchTimerLists+0xc4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <prvSwitchTimerLists+0xc8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a04      	ldr	r2, [pc, #16]	; (8006540 <prvSwitchTimerLists+0xc4>)
 8006530:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006532:	4a04      	ldr	r2, [pc, #16]	; (8006544 <prvSwitchTimerLists+0xc8>)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000e1c 	.word	0x20000e1c
 8006544:	20000e20 	.word	0x20000e20

08006548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800654e:	f000 f945 	bl	80067dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d120      	bne.n	800659c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800655a:	4814      	ldr	r0, [pc, #80]	; (80065ac <prvCheckForValidListAndQueue+0x64>)
 800655c:	f7fd ffce 	bl	80044fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006560:	4813      	ldr	r0, [pc, #76]	; (80065b0 <prvCheckForValidListAndQueue+0x68>)
 8006562:	f7fd ffcb 	bl	80044fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006566:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <prvCheckForValidListAndQueue+0x6c>)
 8006568:	4a10      	ldr	r2, [pc, #64]	; (80065ac <prvCheckForValidListAndQueue+0x64>)
 800656a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <prvCheckForValidListAndQueue+0x70>)
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <prvCheckForValidListAndQueue+0x68>)
 8006570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006572:	2300      	movs	r3, #0
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <prvCheckForValidListAndQueue+0x74>)
 8006578:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <prvCheckForValidListAndQueue+0x78>)
 800657a:	2110      	movs	r1, #16
 800657c:	200a      	movs	r0, #10
 800657e:	f7fe f8db 	bl	8004738 <xQueueGenericCreateStatic>
 8006582:	4603      	mov	r3, r0
 8006584:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 8006586:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	490b      	ldr	r1, [pc, #44]	; (80065c4 <prvCheckForValidListAndQueue+0x7c>)
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fd10 	bl	8004fbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800659c:	f000 f952 	bl	8006844 <vPortExitCritical>
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000e24 	.word	0x20000e24
 80065ac:	20000df4 	.word	0x20000df4
 80065b0:	20000e08 	.word	0x20000e08
 80065b4:	20000e1c 	.word	0x20000e1c
 80065b8:	20000e20 	.word	0x20000e20
 80065bc:	20000ed0 	.word	0x20000ed0
 80065c0:	20000e30 	.word	0x20000e30
 80065c4:	08007004 	.word	0x08007004

080065c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3b04      	subs	r3, #4
 80065d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3b04      	subs	r3, #4
 80065e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f023 0201 	bic.w	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b04      	subs	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065f8:	4a0c      	ldr	r2, [pc, #48]	; (800662c <pxPortInitialiseStack+0x64>)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b14      	subs	r3, #20
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3b04      	subs	r3, #4
 800660e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f06f 0202 	mvn.w	r2, #2
 8006616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b20      	subs	r3, #32
 800661c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800661e:	68fb      	ldr	r3, [r7, #12]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	08006631 	.word	0x08006631

08006630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <prvTaskExitError+0x5c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d00c      	beq.n	800665e <prvTaskExitError+0x2e>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	b672      	cpsid	i
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	b662      	cpsie	i
 8006658:	60fb      	str	r3, [r7, #12]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <prvTaskExitError+0x2c>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	b672      	cpsid	i
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	b662      	cpsie	i
 8006672:	60bb      	str	r3, [r7, #8]
}
 8006674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006676:	bf00      	nop
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0fc      	beq.n	8006678 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	2000000c 	.word	0x2000000c

08006690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006690:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <pxCurrentTCBConst2>)
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	6808      	ldr	r0, [r1, #0]
 8006696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	f380 8809 	msr	PSP, r0
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	4770      	bx	lr
 80066ac:	f3af 8000 	nop.w

080066b0 <pxCurrentTCBConst2>:
 80066b0:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066b8:	4808      	ldr	r0, [pc, #32]	; (80066dc <prvPortStartFirstTask+0x24>)
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	6800      	ldr	r0, [r0, #0]
 80066be:	f380 8808 	msr	MSP, r0
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8814 	msr	CONTROL, r0
 80066ca:	b662      	cpsie	i
 80066cc:	b661      	cpsie	f
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	df00      	svc	0
 80066d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066da:	bf00      	nop
 80066dc:	e000ed08 	.word	0xe000ed08

080066e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066e6:	4b37      	ldr	r3, [pc, #220]	; (80067c4 <xPortStartScheduler+0xe4>)
 80066e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006708:	b2da      	uxtb	r2, r3
 800670a:	4b2f      	ldr	r3, [pc, #188]	; (80067c8 <xPortStartScheduler+0xe8>)
 800670c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800670e:	4b2f      	ldr	r3, [pc, #188]	; (80067cc <xPortStartScheduler+0xec>)
 8006710:	2207      	movs	r2, #7
 8006712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006714:	e009      	b.n	800672a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006716:	4b2d      	ldr	r3, [pc, #180]	; (80067cc <xPortStartScheduler+0xec>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	4a2b      	ldr	r2, [pc, #172]	; (80067cc <xPortStartScheduler+0xec>)
 800671e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b80      	cmp	r3, #128	; 0x80
 8006734:	d0ef      	beq.n	8006716 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006736:	4b25      	ldr	r3, [pc, #148]	; (80067cc <xPortStartScheduler+0xec>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1c3 0307 	rsb	r3, r3, #7
 800673e:	2b04      	cmp	r3, #4
 8006740:	d00c      	beq.n	800675c <xPortStartScheduler+0x7c>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	b672      	cpsid	i
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	b662      	cpsie	i
 8006756:	60bb      	str	r3, [r7, #8]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800675c:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <xPortStartScheduler+0xec>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	4a1a      	ldr	r2, [pc, #104]	; (80067cc <xPortStartScheduler+0xec>)
 8006764:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006766:	4b19      	ldr	r3, [pc, #100]	; (80067cc <xPortStartScheduler+0xec>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800676e:	4a17      	ldr	r2, [pc, #92]	; (80067cc <xPortStartScheduler+0xec>)
 8006770:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <xPortStartScheduler+0xf0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <xPortStartScheduler+0xf0>)
 8006780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006784:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <xPortStartScheduler+0xf0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a11      	ldr	r2, [pc, #68]	; (80067d0 <xPortStartScheduler+0xf0>)
 800678c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006790:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006792:	f000 f8dd 	bl	8006950 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006796:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <xPortStartScheduler+0xf4>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800679c:	f000 f8fc 	bl	8006998 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067a0:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <xPortStartScheduler+0xf8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0c      	ldr	r2, [pc, #48]	; (80067d8 <xPortStartScheduler+0xf8>)
 80067a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067ac:	f7ff ff84 	bl	80066b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067b0:	f7ff f846 	bl	8005840 <vTaskSwitchContext>
	prvTaskExitError();
 80067b4:	f7ff ff3c 	bl	8006630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	e000e400 	.word	0xe000e400
 80067c8:	20000f20 	.word	0x20000f20
 80067cc:	20000f24 	.word	0x20000f24
 80067d0:	e000ed20 	.word	0xe000ed20
 80067d4:	2000000c 	.word	0x2000000c
 80067d8:	e000ef34 	.word	0xe000ef34

080067dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	b672      	cpsid	i
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	b662      	cpsie	i
 80067f6:	607b      	str	r3, [r7, #4]
}
 80067f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067fa:	4b10      	ldr	r3, [pc, #64]	; (800683c <vPortEnterCritical+0x60>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	4a0e      	ldr	r2, [pc, #56]	; (800683c <vPortEnterCritical+0x60>)
 8006802:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <vPortEnterCritical+0x60>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d111      	bne.n	8006830 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800680c:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <vPortEnterCritical+0x64>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00c      	beq.n	8006830 <vPortEnterCritical+0x54>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	b672      	cpsid	i
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	b662      	cpsie	i
 800682a:	603b      	str	r3, [r7, #0]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <vPortEnterCritical+0x52>
	}
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	2000000c 	.word	0x2000000c
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <vPortExitCritical+0x54>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10c      	bne.n	800686c <vPortExitCritical+0x28>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	b672      	cpsid	i
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	b662      	cpsie	i
 8006866:	607b      	str	r3, [r7, #4]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <vPortExitCritical+0x54>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3b01      	subs	r3, #1
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <vPortExitCritical+0x54>)
 8006874:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <vPortExitCritical+0x54>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <vPortExitCritical+0x46>
 800687e:	2300      	movs	r3, #0
 8006880:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f383 8811 	msr	BASEPRI, r3
}
 8006888:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	2000000c 	.word	0x2000000c
 800689c:	00000000 	.word	0x00000000

080068a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068a0:	f3ef 8009 	mrs	r0, PSP
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4b15      	ldr	r3, [pc, #84]	; (8006900 <pxCurrentTCBConst>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	f01e 0f10 	tst.w	lr, #16
 80068b0:	bf08      	it	eq
 80068b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	6010      	str	r0, [r2, #0]
 80068bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068c4:	b672      	cpsid	i
 80068c6:	f380 8811 	msr	BASEPRI, r0
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	b662      	cpsie	i
 80068d4:	f7fe ffb4 	bl	8005840 <vTaskSwitchContext>
 80068d8:	f04f 0000 	mov.w	r0, #0
 80068dc:	f380 8811 	msr	BASEPRI, r0
 80068e0:	bc09      	pop	{r0, r3}
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	6808      	ldr	r0, [r1, #0]
 80068e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	f01e 0f10 	tst.w	lr, #16
 80068ee:	bf08      	it	eq
 80068f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068f4:	f380 8809 	msr	PSP, r0
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <pxCurrentTCBConst>:
 8006900:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	b672      	cpsid	i
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	b662      	cpsie	i
 8006922:	607b      	str	r3, [r7, #4]
}
 8006924:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006926:	f7fe fecf 	bl	80056c8 <xTaskIncrementTick>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <SysTick_Handler+0x44>)
 8006932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	2300      	movs	r3, #0
 800693a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f383 8811 	msr	BASEPRI, r3
}
 8006942:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006954:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <vPortSetupTimerInterrupt+0x34>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <vPortSetupTimerInterrupt+0x38>)
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <vPortSetupTimerInterrupt+0x3c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a0a      	ldr	r2, [pc, #40]	; (8006990 <vPortSetupTimerInterrupt+0x40>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	099b      	lsrs	r3, r3, #6
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <vPortSetupTimerInterrupt+0x44>)
 800696e:	3b01      	subs	r3, #1
 8006970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006972:	4b04      	ldr	r3, [pc, #16]	; (8006984 <vPortSetupTimerInterrupt+0x34>)
 8006974:	2207      	movs	r2, #7
 8006976:	601a      	str	r2, [r3, #0]
}
 8006978:	bf00      	nop
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	e000e010 	.word	0xe000e010
 8006988:	e000e018 	.word	0xe000e018
 800698c:	20000000 	.word	0x20000000
 8006990:	10624dd3 	.word	0x10624dd3
 8006994:	e000e014 	.word	0xe000e014

08006998 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006998:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069a8 <vPortEnableVFP+0x10>
 800699c:	6801      	ldr	r1, [r0, #0]
 800699e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069a2:	6001      	str	r1, [r0, #0]
 80069a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069a6:	bf00      	nop
 80069a8:	e000ed88 	.word	0xe000ed88

080069ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069b2:	f3ef 8305 	mrs	r3, IPSR
 80069b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b0f      	cmp	r3, #15
 80069bc:	d916      	bls.n	80069ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069be:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <vPortValidateInterruptPriority+0x78>)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <vPortValidateInterruptPriority+0x7c>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	7afa      	ldrb	r2, [r7, #11]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d20c      	bcs.n	80069ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	b672      	cpsid	i
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	b662      	cpsie	i
 80069e6:	607b      	str	r3, [r7, #4]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069ec:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <vPortValidateInterruptPriority+0x80>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <vPortValidateInterruptPriority+0x84>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d90c      	bls.n	8006a16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	b672      	cpsid	i
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	b662      	cpsie	i
 8006a10:	603b      	str	r3, [r7, #0]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <vPortValidateInterruptPriority+0x68>
	}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	e000e3f0 	.word	0xe000e3f0
 8006a28:	20000f20 	.word	0x20000f20
 8006a2c:	e000ed0c 	.word	0xe000ed0c
 8006a30:	20000f24 	.word	0x20000f24

08006a34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a40:	f7fe fd84 	bl	800554c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a44:	4b5b      	ldr	r3, [pc, #364]	; (8006bb4 <pvPortMalloc+0x180>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a4c:	f000 f91a 	bl	8006c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a50:	4b59      	ldr	r3, [pc, #356]	; (8006bb8 <pvPortMalloc+0x184>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 8092 	bne.w	8006b82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01f      	beq.n	8006aa4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006a64:	2208      	movs	r2, #8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f023 0307 	bic.w	r3, r3, #7
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <pvPortMalloc+0x70>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	b672      	cpsid	i
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	b662      	cpsie	i
 8006a9e:	617b      	str	r3, [r7, #20]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d06b      	beq.n	8006b82 <pvPortMalloc+0x14e>
 8006aaa:	4b44      	ldr	r3, [pc, #272]	; (8006bbc <pvPortMalloc+0x188>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d866      	bhi.n	8006b82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ab4:	4b42      	ldr	r3, [pc, #264]	; (8006bc0 <pvPortMalloc+0x18c>)
 8006ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ab8:	4b41      	ldr	r3, [pc, #260]	; (8006bc0 <pvPortMalloc+0x18c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006abe:	e004      	b.n	8006aca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d903      	bls.n	8006adc <pvPortMalloc+0xa8>
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f1      	bne.n	8006ac0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006adc:	4b35      	ldr	r3, [pc, #212]	; (8006bb4 <pvPortMalloc+0x180>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d04d      	beq.n	8006b82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2208      	movs	r2, #8
 8006aec:	4413      	add	r3, r2
 8006aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	2308      	movs	r3, #8
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d921      	bls.n	8006b4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00c      	beq.n	8006b34 <pvPortMalloc+0x100>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	b672      	cpsid	i
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	b662      	cpsie	i
 8006b2e:	613b      	str	r3, [r7, #16]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b46:	69b8      	ldr	r0, [r7, #24]
 8006b48:	f000 f8fe 	bl	8006d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <pvPortMalloc+0x188>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <pvPortMalloc+0x188>)
 8006b58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b5a:	4b18      	ldr	r3, [pc, #96]	; (8006bbc <pvPortMalloc+0x188>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4b19      	ldr	r3, [pc, #100]	; (8006bc4 <pvPortMalloc+0x190>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d203      	bcs.n	8006b6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b66:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <pvPortMalloc+0x188>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <pvPortMalloc+0x190>)
 8006b6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <pvPortMalloc+0x184>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b82:	f7fe fcf1 	bl	8005568 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <pvPortMalloc+0x176>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	b672      	cpsid	i
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	b662      	cpsie	i
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <pvPortMalloc+0x174>
	return pvReturn;
 8006baa:	69fb      	ldr	r3, [r7, #28]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3728      	adds	r7, #40	; 0x28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20004b30 	.word	0x20004b30
 8006bb8:	20004b3c 	.word	0x20004b3c
 8006bbc:	20004b34 	.word	0x20004b34
 8006bc0:	20004b28 	.word	0x20004b28
 8006bc4:	20004b38 	.word	0x20004b38

08006bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d04c      	beq.n	8006c74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bda:	2308      	movs	r3, #8
 8006bdc:	425b      	negs	r3, r3
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <vPortFree+0xb4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10c      	bne.n	8006c10 <vPortFree+0x48>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	b672      	cpsid	i
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	b662      	cpsie	i
 8006c0a:	60fb      	str	r3, [r7, #12]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <vPortFree+0x6a>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	b672      	cpsid	i
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	b662      	cpsie	i
 8006c2c:	60bb      	str	r3, [r7, #8]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <vPortFree+0xb4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d019      	beq.n	8006c74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d115      	bne.n	8006c74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <vPortFree+0xb4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	43db      	mvns	r3, r3
 8006c52:	401a      	ands	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c58:	f7fe fc78 	bl	800554c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <vPortFree+0xb8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <vPortFree+0xb8>)
 8006c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c6a:	6938      	ldr	r0, [r7, #16]
 8006c6c:	f000 f86c 	bl	8006d48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c70:	f7fe fc7a 	bl	8005568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20004b3c 	.word	0x20004b3c
 8006c80:	20004b34 	.word	0x20004b34

08006c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c90:	4b27      	ldr	r3, [pc, #156]	; (8006d30 <prvHeapInit+0xac>)
 8006c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3307      	adds	r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <prvHeapInit+0xac>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cbc:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <prvHeapInit+0xb0>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cc2:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <prvHeapInit+0xb0>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <prvHeapInit+0xb4>)
 8006ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <prvHeapInit+0xb4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <prvHeapInit+0xb4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <prvHeapInit+0xb4>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <prvHeapInit+0xb8>)
 8006d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <prvHeapInit+0xbc>)
 8006d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <prvHeapInit+0xc0>)
 8006d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20000f28 	.word	0x20000f28
 8006d34:	20004b28 	.word	0x20004b28
 8006d38:	20004b30 	.word	0x20004b30
 8006d3c:	20004b38 	.word	0x20004b38
 8006d40:	20004b34 	.word	0x20004b34
 8006d44:	20004b3c 	.word	0x20004b3c

08006d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d50:	4b28      	ldr	r3, [pc, #160]	; (8006df4 <prvInsertBlockIntoFreeList+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e002      	b.n	8006d5c <prvInsertBlockIntoFreeList+0x14>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d8f7      	bhi.n	8006d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d108      	bne.n	8006d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d118      	bne.n	8006dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d00d      	beq.n	8006dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e008      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e003      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d002      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20004b28 	.word	0x20004b28
 8006df8:	20004b30 	.word	0x20004b30

08006dfc <memset>:
 8006dfc:	4402      	add	r2, r0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d100      	bne.n	8006e06 <memset+0xa>
 8006e04:	4770      	bx	lr
 8006e06:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0a:	e7f9      	b.n	8006e00 <memset+0x4>

08006e0c <_reclaim_reent>:
 8006e0c:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <_reclaim_reent+0xa8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4283      	cmp	r3, r0
 8006e12:	b570      	push	{r4, r5, r6, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	d04b      	beq.n	8006eb0 <_reclaim_reent+0xa4>
 8006e18:	69c3      	ldr	r3, [r0, #28]
 8006e1a:	b143      	cbz	r3, 8006e2e <_reclaim_reent+0x22>
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d144      	bne.n	8006eac <_reclaim_reent+0xa0>
 8006e22:	69e3      	ldr	r3, [r4, #28]
 8006e24:	6819      	ldr	r1, [r3, #0]
 8006e26:	b111      	cbz	r1, 8006e2e <_reclaim_reent+0x22>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 f879 	bl	8006f20 <_free_r>
 8006e2e:	6961      	ldr	r1, [r4, #20]
 8006e30:	b111      	cbz	r1, 8006e38 <_reclaim_reent+0x2c>
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 f874 	bl	8006f20 <_free_r>
 8006e38:	69e1      	ldr	r1, [r4, #28]
 8006e3a:	b111      	cbz	r1, 8006e42 <_reclaim_reent+0x36>
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 f86f 	bl	8006f20 <_free_r>
 8006e42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e44:	b111      	cbz	r1, 8006e4c <_reclaim_reent+0x40>
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 f86a 	bl	8006f20 <_free_r>
 8006e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e4e:	b111      	cbz	r1, 8006e56 <_reclaim_reent+0x4a>
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 f865 	bl	8006f20 <_free_r>
 8006e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e58:	b111      	cbz	r1, 8006e60 <_reclaim_reent+0x54>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f860 	bl	8006f20 <_free_r>
 8006e60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e62:	b111      	cbz	r1, 8006e6a <_reclaim_reent+0x5e>
 8006e64:	4620      	mov	r0, r4
 8006e66:	f000 f85b 	bl	8006f20 <_free_r>
 8006e6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e6c:	b111      	cbz	r1, 8006e74 <_reclaim_reent+0x68>
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 f856 	bl	8006f20 <_free_r>
 8006e74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e76:	b111      	cbz	r1, 8006e7e <_reclaim_reent+0x72>
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 f851 	bl	8006f20 <_free_r>
 8006e7e:	6a23      	ldr	r3, [r4, #32]
 8006e80:	b1b3      	cbz	r3, 8006eb0 <_reclaim_reent+0xa4>
 8006e82:	4620      	mov	r0, r4
 8006e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e88:	4718      	bx	r3
 8006e8a:	5949      	ldr	r1, [r1, r5]
 8006e8c:	b941      	cbnz	r1, 8006ea0 <_reclaim_reent+0x94>
 8006e8e:	3504      	adds	r5, #4
 8006e90:	69e3      	ldr	r3, [r4, #28]
 8006e92:	2d80      	cmp	r5, #128	; 0x80
 8006e94:	68d9      	ldr	r1, [r3, #12]
 8006e96:	d1f8      	bne.n	8006e8a <_reclaim_reent+0x7e>
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 f841 	bl	8006f20 <_free_r>
 8006e9e:	e7c0      	b.n	8006e22 <_reclaim_reent+0x16>
 8006ea0:	680e      	ldr	r6, [r1, #0]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 f83c 	bl	8006f20 <_free_r>
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	e7ef      	b.n	8006e8c <_reclaim_reent+0x80>
 8006eac:	2500      	movs	r5, #0
 8006eae:	e7ef      	b.n	8006e90 <_reclaim_reent+0x84>
 8006eb0:	bd70      	pop	{r4, r5, r6, pc}
 8006eb2:	bf00      	nop
 8006eb4:	2000005c 	.word	0x2000005c

08006eb8 <__libc_init_array>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	4d0d      	ldr	r5, [pc, #52]	; (8006ef0 <__libc_init_array+0x38>)
 8006ebc:	4c0d      	ldr	r4, [pc, #52]	; (8006ef4 <__libc_init_array+0x3c>)
 8006ebe:	1b64      	subs	r4, r4, r5
 8006ec0:	10a4      	asrs	r4, r4, #2
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	42a6      	cmp	r6, r4
 8006ec6:	d109      	bne.n	8006edc <__libc_init_array+0x24>
 8006ec8:	4d0b      	ldr	r5, [pc, #44]	; (8006ef8 <__libc_init_array+0x40>)
 8006eca:	4c0c      	ldr	r4, [pc, #48]	; (8006efc <__libc_init_array+0x44>)
 8006ecc:	f000 f880 	bl	8006fd0 <_init>
 8006ed0:	1b64      	subs	r4, r4, r5
 8006ed2:	10a4      	asrs	r4, r4, #2
 8006ed4:	2600      	movs	r6, #0
 8006ed6:	42a6      	cmp	r6, r4
 8006ed8:	d105      	bne.n	8006ee6 <__libc_init_array+0x2e>
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee0:	4798      	blx	r3
 8006ee2:	3601      	adds	r6, #1
 8006ee4:	e7ee      	b.n	8006ec4 <__libc_init_array+0xc>
 8006ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eea:	4798      	blx	r3
 8006eec:	3601      	adds	r6, #1
 8006eee:	e7f2      	b.n	8006ed6 <__libc_init_array+0x1e>
 8006ef0:	08007050 	.word	0x08007050
 8006ef4:	08007050 	.word	0x08007050
 8006ef8:	08007050 	.word	0x08007050
 8006efc:	08007054 	.word	0x08007054

08006f00 <__retarget_lock_acquire_recursive>:
 8006f00:	4770      	bx	lr

08006f02 <__retarget_lock_release_recursive>:
 8006f02:	4770      	bx	lr

08006f04 <memcpy>:
 8006f04:	440a      	add	r2, r1
 8006f06:	4291      	cmp	r1, r2
 8006f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f0c:	d100      	bne.n	8006f10 <memcpy+0xc>
 8006f0e:	4770      	bx	lr
 8006f10:	b510      	push	{r4, lr}
 8006f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	d1f9      	bne.n	8006f12 <memcpy+0xe>
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <_free_r>:
 8006f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f22:	2900      	cmp	r1, #0
 8006f24:	d044      	beq.n	8006fb0 <_free_r+0x90>
 8006f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2a:	9001      	str	r0, [sp, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f32:	bfb8      	it	lt
 8006f34:	18e4      	addlt	r4, r4, r3
 8006f36:	f000 f83f 	bl	8006fb8 <__malloc_lock>
 8006f3a:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <_free_r+0x94>)
 8006f3c:	9801      	ldr	r0, [sp, #4]
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	b933      	cbnz	r3, 8006f50 <_free_r+0x30>
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	6014      	str	r4, [r2, #0]
 8006f46:	b003      	add	sp, #12
 8006f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f4c:	f000 b83a 	b.w	8006fc4 <__malloc_unlock>
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	d908      	bls.n	8006f66 <_free_r+0x46>
 8006f54:	6825      	ldr	r5, [r4, #0]
 8006f56:	1961      	adds	r1, r4, r5
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	bf01      	itttt	eq
 8006f5c:	6819      	ldreq	r1, [r3, #0]
 8006f5e:	685b      	ldreq	r3, [r3, #4]
 8006f60:	1949      	addeq	r1, r1, r5
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	e7ed      	b.n	8006f42 <_free_r+0x22>
 8006f66:	461a      	mov	r2, r3
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	b10b      	cbz	r3, 8006f70 <_free_r+0x50>
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	d9fa      	bls.n	8006f66 <_free_r+0x46>
 8006f70:	6811      	ldr	r1, [r2, #0]
 8006f72:	1855      	adds	r5, r2, r1
 8006f74:	42a5      	cmp	r5, r4
 8006f76:	d10b      	bne.n	8006f90 <_free_r+0x70>
 8006f78:	6824      	ldr	r4, [r4, #0]
 8006f7a:	4421      	add	r1, r4
 8006f7c:	1854      	adds	r4, r2, r1
 8006f7e:	42a3      	cmp	r3, r4
 8006f80:	6011      	str	r1, [r2, #0]
 8006f82:	d1e0      	bne.n	8006f46 <_free_r+0x26>
 8006f84:	681c      	ldr	r4, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	6053      	str	r3, [r2, #4]
 8006f8a:	440c      	add	r4, r1
 8006f8c:	6014      	str	r4, [r2, #0]
 8006f8e:	e7da      	b.n	8006f46 <_free_r+0x26>
 8006f90:	d902      	bls.n	8006f98 <_free_r+0x78>
 8006f92:	230c      	movs	r3, #12
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	e7d6      	b.n	8006f46 <_free_r+0x26>
 8006f98:	6825      	ldr	r5, [r4, #0]
 8006f9a:	1961      	adds	r1, r4, r5
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf04      	itt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	bf04      	itt	eq
 8006fa8:	1949      	addeq	r1, r1, r5
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	6054      	str	r4, [r2, #4]
 8006fae:	e7ca      	b.n	8006f46 <_free_r+0x26>
 8006fb0:	b003      	add	sp, #12
 8006fb2:	bd30      	pop	{r4, r5, pc}
 8006fb4:	20004c7c 	.word	0x20004c7c

08006fb8 <__malloc_lock>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__malloc_lock+0x8>)
 8006fba:	f7ff bfa1 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	20004c78 	.word	0x20004c78

08006fc4 <__malloc_unlock>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__malloc_unlock+0x8>)
 8006fc6:	f7ff bf9c 	b.w	8006f02 <__retarget_lock_release_recursive>
 8006fca:	bf00      	nop
 8006fcc:	20004c78 	.word	0x20004c78

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
