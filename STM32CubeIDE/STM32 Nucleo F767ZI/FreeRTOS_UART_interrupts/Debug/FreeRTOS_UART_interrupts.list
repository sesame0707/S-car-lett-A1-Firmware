
FreeRTOS_UART_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800775c  0800775c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007764  08007764  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800776c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c3c  20000060  080077cc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c9c  080077cc  00024c9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b873  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ae7  00000000  00000000  0003b944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001097  00000000  00000000  00040980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029fa7  00000000  00000000  00041a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af6e  00000000  00000000  0006b9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001058dc  00000000  00000000  0008692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b6c  00000000  00000000  0018c208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00191d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080075b0 	.word	0x080075b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080075b0 	.word	0x080075b0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000540:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_FREERTOS_Init+0x78>)
 8000542:	2100      	movs	r1, #0
 8000544:	481c      	ldr	r0, [pc, #112]	; (80005b8 <MX_FREERTOS_Init+0x7c>)
 8000546:	f003 ffcb 	bl	80044e0 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <MX_FREERTOS_Init+0x80>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of API_dispatcher */
  API_dispatcherHandle = osThreadNew(StartAPI_dispatcher, NULL, &API_dispatcher_attributes);
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <MX_FREERTOS_Init+0x84>)
 8000552:	2100      	movs	r1, #0
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_FREERTOS_Init+0x88>)
 8000556:	f003 ffc3 	bl	80044e0 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <MX_FREERTOS_Init+0x8c>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of API_START_ENGIN */
  API_START_ENGINHandle = osThreadNew(StartAPI_START_ENGIN, NULL, &API_START_ENGIN_attributes);
 8000560:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <MX_FREERTOS_Init+0x90>)
 8000562:	2100      	movs	r1, #0
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <MX_FREERTOS_Init+0x94>)
 8000566:	f003 ffbb 	bl	80044e0 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <MX_FREERTOS_Init+0x98>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of API_BRAKE */
  API_BRAKEHandle = osThreadNew(StartAPI_BRAKE, NULL, &API_BRAKE_attributes);
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_FREERTOS_Init+0x9c>)
 8000572:	2100      	movs	r1, #0
 8000574:	4819      	ldr	r0, [pc, #100]	; (80005dc <MX_FREERTOS_Init+0xa0>)
 8000576:	f003 ffb3 	bl	80044e0 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <MX_FREERTOS_Init+0xa4>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of API_WITHDRAW */
  API_WITHDRAWHandle = osThreadNew(StartAPI_WITHDRAW, NULL, &API_WITHDRAW_attributes);
 8000580:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <MX_FREERTOS_Init+0xa8>)
 8000582:	2100      	movs	r1, #0
 8000584:	4818      	ldr	r0, [pc, #96]	; (80005e8 <MX_FREERTOS_Init+0xac>)
 8000586:	f003 ffab 	bl	80044e0 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <MX_FREERTOS_Init+0xb0>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of API_TURN_LEFT */
  API_TURN_LEFTHandle = osThreadNew(StartAPI_TURN_LEFT, NULL, &API_TURN_LEFT_attributes);
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <MX_FREERTOS_Init+0xb4>)
 8000592:	2100      	movs	r1, #0
 8000594:	4817      	ldr	r0, [pc, #92]	; (80005f4 <MX_FREERTOS_Init+0xb8>)
 8000596:	f003 ffa3 	bl	80044e0 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <MX_FREERTOS_Init+0xbc>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of API_TURN_RIGHT */
  API_TURN_RIGHTHandle = osThreadNew(StartAPI_TURN_RIGHT, NULL, &API_TURN_RIGHT_attributes);
 80005a0:	4a16      	ldr	r2, [pc, #88]	; (80005fc <MX_FREERTOS_Init+0xc0>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4816      	ldr	r0, [pc, #88]	; (8000600 <MX_FREERTOS_Init+0xc4>)
 80005a6:	f003 ff9b 	bl	80044e0 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_FREERTOS_Init+0xc8>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08007648 	.word	0x08007648
 80005b8:	08000609 	.word	0x08000609
 80005bc:	2000007c 	.word	0x2000007c
 80005c0:	0800766c 	.word	0x0800766c
 80005c4:	08000619 	.word	0x08000619
 80005c8:	20000080 	.word	0x20000080
 80005cc:	08007690 	.word	0x08007690
 80005d0:	080006d9 	.word	0x080006d9
 80005d4:	20000084 	.word	0x20000084
 80005d8:	080076b4 	.word	0x080076b4
 80005dc:	080006f9 	.word	0x080006f9
 80005e0:	20000088 	.word	0x20000088
 80005e4:	080076d8 	.word	0x080076d8
 80005e8:	08000729 	.word	0x08000729
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	080076fc 	.word	0x080076fc
 80005f4:	08000759 	.word	0x08000759
 80005f8:	20000090 	.word	0x20000090
 80005fc:	08007720 	.word	0x08007720
 8000600:	08000791 	.word	0x08000791
 8000604:	20000094 	.word	0x20000094

08000608 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
//	uint8_t data[] = "A\r\n";

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelete(NULL);
 8000610:	2000      	movs	r0, #0
 8000612:	f004 ffeb 	bl	80055ec <vTaskDelete>
 8000616:	e7fb      	b.n	8000610 <StartDefaultTask+0x8>

08000618 <StartAPI_dispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_dispatcher */
void StartAPI_dispatcher(void *argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_dispatcher */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);	// suspend itself
 8000620:	2000      	movs	r0, #0
 8000622:	f005 f88d 	bl	8005740 <vTaskSuspend>
//	  ulTaskNotifyTake(pdTRUE, (TickType_t) portMAX_DELAY);

	  switch(rx_buffer[0]) {
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <StartAPI_dispatcher+0xa4>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3b01      	subs	r3, #1
 800062c:	2b06      	cmp	r3, #6
 800062e:	d8f7      	bhi.n	8000620 <StartAPI_dispatcher+0x8>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <StartAPI_dispatcher+0x20>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000655 	.word	0x08000655
 800063c:	08000661 	.word	0x08000661
 8000640:	0800066d 	.word	0x0800066d
 8000644:	08000679 	.word	0x08000679
 8000648:	08000685 	.word	0x08000685
 800064c:	08000691 	.word	0x08000691
 8000650:	080006a5 	.word	0x080006a5
	  	case 0x1:	// Stop vehicle.
//	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
	  		// NOT IMPLEMENTED YET
	  		vTaskResume(API_BRAKEHandle);
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <StartAPI_dispatcher+0xa8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f005 f91d 	bl	8005898 <vTaskResume>
	  		break;
 800065e:	e02c      	b.n	80006ba <StartAPI_dispatcher+0xa2>
	  	case 0x2:	// Toggle driving lights.
//	  		HAL_GPIO_TogglePin(API_START_ENGIN_LEDs_GPIO_Port, API_START_ENGIN_LEDs_Pin);
	  		vTaskResume(API_START_ENGINHandle);
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <StartAPI_dispatcher+0xac>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f005 f917 	bl	8005898 <vTaskResume>
	  		break;
 800066a:	e026      	b.n	80006ba <StartAPI_dispatcher+0xa2>
	  	case 0x3:	// Toggle RGB stripe.
//	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	  		// NOT IMPLEMENTED YET
	  		vTaskResume(API_WITHDRAWHandle);
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <StartAPI_dispatcher+0xb0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f005 f911 	bl	8005898 <vTaskResume>
	  		break;
 8000676:	e020      	b.n	80006ba <StartAPI_dispatcher+0xa2>
	  	case 0x4:	// Turn left blinker on.
//	  		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
	  		vTaskResume(API_TURN_LEFTHandle);
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <StartAPI_dispatcher+0xb4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f005 f90b 	bl	8005898 <vTaskResume>
	  		break;
 8000682:	e01a      	b.n	80006ba <StartAPI_dispatcher+0xa2>
	  	case 0x5:	// Turn right blinker on.
//	  		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
	  		vTaskResume(API_TURN_RIGHTHandle);
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <StartAPI_dispatcher+0xb8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f005 f905 	bl	8005898 <vTaskResume>
	  		break;
 800068e:	e014      	b.n	80006ba <StartAPI_dispatcher+0xa2>
	  	case 0x6:	// Park to the left.
//	  		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
//	  		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
	  		// NOT IMPLEMENTED YET
	  		vTaskResume(API_TURN_LEFTHandle);
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <StartAPI_dispatcher+0xb4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f005 f8ff 	bl	8005898 <vTaskResume>
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <StartAPI_dispatcher+0xbc>)
 800069e:	f000 ffb2 	bl	8001606 <HAL_GPIO_TogglePin>
	  		break;
 80006a2:	e00a      	b.n	80006ba <StartAPI_dispatcher+0xa2>
	  	case 0x7:	// Park to the right.
//	  		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
//	  		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
	  		// NOT IMPLEMENTED YET
	  		vTaskResume(API_TURN_RIGHTHandle);
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <StartAPI_dispatcher+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 f8f5 	bl	8005898 <vTaskResume>
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80006ae:	2101      	movs	r1, #1
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <StartAPI_dispatcher+0xbc>)
 80006b2:	f000 ffa8 	bl	8001606 <HAL_GPIO_TogglePin>
	  		break;
 80006b6:	bf00      	nop
 80006b8:	e7b2      	b.n	8000620 <StartAPI_dispatcher+0x8>
	  vTaskSuspend(NULL);	// suspend itself
 80006ba:	e7b1      	b.n	8000620 <StartAPI_dispatcher+0x8>
 80006bc:	20000098 	.word	0x20000098
 80006c0:	20000088 	.word	0x20000088
 80006c4:	20000084 	.word	0x20000084
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	20000090 	.word	0x20000090
 80006d0:	20000094 	.word	0x20000094
 80006d4:	40020400 	.word	0x40020400

080006d8 <StartAPI_START_ENGIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_START_ENGIN */
void StartAPI_START_ENGIN(void *argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_START_ENGIN */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f005 f82d 	bl	8005740 <vTaskSuspend>
	  HAL_GPIO_TogglePin(API_START_ENGIN_LEDs_GPIO_Port, API_START_ENGIN_LEDs_Pin);
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	4802      	ldr	r0, [pc, #8]	; (80006f4 <StartAPI_START_ENGIN+0x1c>)
 80006ec:	f000 ff8b 	bl	8001606 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 80006f0:	e7f6      	b.n	80006e0 <StartAPI_START_ENGIN+0x8>
 80006f2:	bf00      	nop
 80006f4:	40020800 	.word	0x40020800

080006f8 <StartAPI_BRAKE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_BRAKE */
void StartAPI_BRAKE(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_BRAKE */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000700:	2000      	movs	r0, #0
 8000702:	f005 f81d 	bl	8005740 <vTaskSuspend>
	  HAL_GPIO_TogglePin(API_BRAKE_LEDs_GPIO_Port, API_BRAKE_LEDs_Pin);
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <StartAPI_BRAKE+0x2c>)
 800070c:	f000 ff7b 	bl	8001606 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000714:	f003 ff8a 	bl	800462c <osDelay>
	  HAL_GPIO_TogglePin(API_BRAKE_LEDs_GPIO_Port, API_BRAKE_LEDs_Pin);
 8000718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071c:	4801      	ldr	r0, [pc, #4]	; (8000724 <StartAPI_BRAKE+0x2c>)
 800071e:	f000 ff72 	bl	8001606 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000722:	e7ed      	b.n	8000700 <StartAPI_BRAKE+0x8>
 8000724:	40020800 	.word	0x40020800

08000728 <StartAPI_WITHDRAW>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_WITHDRAW */
void StartAPI_WITHDRAW(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_WITHDRAW */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000730:	2000      	movs	r0, #0
 8000732:	f005 f805 	bl	8005740 <vTaskSuspend>
	  HAL_GPIO_TogglePin(API_WITHDRAW_LEDs_GPIO_Port, API_WITHDRAW_LEDs_Pin);
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <StartAPI_WITHDRAW+0x2c>)
 800073c:	f000 ff63 	bl	8001606 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000744:	f003 ff72 	bl	800462c <osDelay>
	  HAL_GPIO_TogglePin(API_WITHDRAW_LEDs_GPIO_Port, API_WITHDRAW_LEDs_Pin);
 8000748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074c:	4801      	ldr	r0, [pc, #4]	; (8000754 <StartAPI_WITHDRAW+0x2c>)
 800074e:	f000 ff5a 	bl	8001606 <HAL_GPIO_TogglePin>
	  vTaskSuspend(NULL);
 8000752:	e7ed      	b.n	8000730 <StartAPI_WITHDRAW+0x8>
 8000754:	40020800 	.word	0x40020800

08000758 <StartAPI_TURN_LEFT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_TURN_LEFT */
void StartAPI_TURN_LEFT(void *argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_TURN_LEFT */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000760:	2000      	movs	r0, #0
 8000762:	f004 ffed 	bl	8005740 <vTaskSuspend>
	  for(int i=0; i<6; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e00b      	b.n	8000784 <StartAPI_TURN_LEFT+0x2c>
	  {
		  HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 800076c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000770:	4806      	ldr	r0, [pc, #24]	; (800078c <StartAPI_TURN_LEFT+0x34>)
 8000772:	f000 ff48 	bl	8001606 <HAL_GPIO_TogglePin>
		  osDelay(400);
 8000776:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800077a:	f003 ff57 	bl	800462c <osDelay>
	  for(int i=0; i<6; i++)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b05      	cmp	r3, #5
 8000788:	ddf0      	ble.n	800076c <StartAPI_TURN_LEFT+0x14>
	  vTaskSuspend(NULL);
 800078a:	e7e9      	b.n	8000760 <StartAPI_TURN_LEFT+0x8>
 800078c:	40020800 	.word	0x40020800

08000790 <StartAPI_TURN_RIGHT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_TURN_RIGHT */
void StartAPI_TURN_RIGHT(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_TURN_RIGHT */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8000798:	2000      	movs	r0, #0
 800079a:	f004 ffd1 	bl	8005740 <vTaskSuspend>
	  for(int i=0; i<6; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e00b      	b.n	80007bc <StartAPI_TURN_RIGHT+0x2c>
	  {
		  HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 80007a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <StartAPI_TURN_RIGHT+0x34>)
 80007aa:	f000 ff2c 	bl	8001606 <HAL_GPIO_TogglePin>
		  osDelay(400);
 80007ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80007b2:	f003 ff3b 	bl	800462c <osDelay>
	  for(int i=0; i<6; i++)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	ddf0      	ble.n	80007a4 <StartAPI_TURN_RIGHT+0x14>
	  vTaskSuspend(NULL);
 80007c2:	e7e9      	b.n	8000798 <StartAPI_TURN_RIGHT+0x8>
 80007c4:	40020800 	.word	0x40020800

080007c8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b8a      	ldr	r3, [pc, #552]	; (8000a08 <MX_GPIO_Init+0x240>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a89      	ldr	r2, [pc, #548]	; (8000a08 <MX_GPIO_Init+0x240>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b87      	ldr	r3, [pc, #540]	; (8000a08 <MX_GPIO_Init+0x240>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b84      	ldr	r3, [pc, #528]	; (8000a08 <MX_GPIO_Init+0x240>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a83      	ldr	r2, [pc, #524]	; (8000a08 <MX_GPIO_Init+0x240>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b81      	ldr	r3, [pc, #516]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b7e      	ldr	r3, [pc, #504]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a7d      	ldr	r2, [pc, #500]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b7b      	ldr	r3, [pc, #492]	; (8000a08 <MX_GPIO_Init+0x240>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b78      	ldr	r3, [pc, #480]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a77      	ldr	r2, [pc, #476]	; (8000a08 <MX_GPIO_Init+0x240>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b75      	ldr	r3, [pc, #468]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	4b72      	ldr	r3, [pc, #456]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a71      	ldr	r2, [pc, #452]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b6f      	ldr	r3, [pc, #444]	; (8000a08 <MX_GPIO_Init+0x240>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a6b      	ldr	r2, [pc, #428]	; (8000a08 <MX_GPIO_Init+0x240>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <MX_GPIO_Init+0x240>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0181 	movw	r1, #16513	; 0x4081
 8000874:	4865      	ldr	r0, [pc, #404]	; (8000a0c <MX_GPIO_Init+0x244>)
 8000876:	f000 fead 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4864      	ldr	r0, [pc, #400]	; (8000a10 <MX_GPIO_Init+0x248>)
 8000880:	f000 fea8 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800088a:	4862      	ldr	r0, [pc, #392]	; (8000a14 <MX_GPIO_Init+0x24c>)
 800088c:	f000 fea2 	bl	80015d4 <HAL_GPIO_WritePin>
                          |API_TURN_LEFT_LEDs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	485b      	ldr	r0, [pc, #364]	; (8000a14 <MX_GPIO_Init+0x24c>)
 80008a8:	f000 fce8 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008ac:	2332      	movs	r3, #50	; 0x32
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4853      	ldr	r0, [pc, #332]	; (8000a14 <MX_GPIO_Init+0x24c>)
 80008c8:	f000 fcd8 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008cc:	2386      	movs	r3, #134	; 0x86
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	484c      	ldr	r0, [pc, #304]	; (8000a18 <MX_GPIO_Init+0x250>)
 80008e8:	f000 fcc8 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4841      	ldr	r0, [pc, #260]	; (8000a0c <MX_GPIO_Init+0x244>)
 8000906:	f000 fcb9 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091c:	230b      	movs	r3, #11
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4839      	ldr	r0, [pc, #228]	; (8000a0c <MX_GPIO_Init+0x244>)
 8000928:	f000 fca8 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800092c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800093e:	2307      	movs	r3, #7
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4834      	ldr	r0, [pc, #208]	; (8000a1c <MX_GPIO_Init+0x254>)
 800094a:	f000 fc97 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <MX_GPIO_Init+0x248>)
 8000966:	f000 fc89 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4824      	ldr	r0, [pc, #144]	; (8000a10 <MX_GPIO_Init+0x248>)
 800097e:	f000 fc7d 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 8000982:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000986:	61fb      	str	r3, [r7, #28]
                          |API_TURN_LEFT_LEDs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	481e      	ldr	r0, [pc, #120]	; (8000a14 <MX_GPIO_Init+0x24c>)
 800099c:	f000 fc6e 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b2:	230a      	movs	r3, #10
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4816      	ldr	r0, [pc, #88]	; (8000a18 <MX_GPIO_Init+0x250>)
 80009be:	f000 fc5d 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4810      	ldr	r0, [pc, #64]	; (8000a18 <MX_GPIO_Init+0x250>)
 80009d8:	f000 fc50 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ee:	230b      	movs	r3, #11
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_GPIO_Init+0x248>)
 80009fa:	f000 fc3f 	bl	800127c <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40020c00 	.word	0x40020c00

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 fa89 	bl	8000f3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f814 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f7ff fecc 	bl	80007c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a30:	f000 f9ae 	bl	8000d90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT( &huart1, rx_buffer, 1 );
 8000a34:	2201      	movs	r2, #1
 8000a36:	4905      	ldr	r1, [pc, #20]	; (8000a4c <main+0x2c>)
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <main+0x30>)
 8000a3a:	f002 faa9 	bl	8002f90 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a3e:	f003 fce5 	bl	800440c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a42:	f7ff fd7b 	bl	800053c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a46:	f003 fd15 	bl	8004474 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x2a>
 8000a4c:	20000098 	.word	0x20000098
 8000a50:	200000f0 	.word	0x200000f0

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2234      	movs	r2, #52	; 0x34
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f006 fcba 	bl	80073dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <SystemClock_Config+0xd8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <SystemClock_Config+0xd8>)
 8000a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <SystemClock_Config+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000abc:	2308      	movs	r3, #8
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ac0:	23d8      	movs	r3, #216	; 0xd8
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fe01 	bl	80016dc <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ae0:	f000 f872 	bl	8000bc8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ae4:	f000 fdaa 	bl	800163c <HAL_PWREx_EnableOverDrive>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aee:	f000 f86b 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2107      	movs	r1, #7
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 f891 	bl	8001c38 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b1c:	f000 f854 	bl	8000bc8 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3750      	adds	r7, #80	; 0x50
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart1x ) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	checkIfYieldRequired = xTaskResumeFromISR(API_dispatcherHandle);
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_RxCpltCallback+0x44>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 ff0b 	bl	8005958 <xTaskResumeFromISR>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_UART_RxCpltCallback+0x48>)
 8000b46:	6013      	str	r3, [r2, #0]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_UART_RxCpltCallback+0x48>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d007      	beq.n	8000b60 <HAL_UART_RxCpltCallback+0x30>
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_UART_RxCpltCallback+0x4c>)
 8000b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	f3bf 8f6f 	isb	sy
//	vTaskNotifyGiveFromISR(API_dispatcherHandle, 0);

	HAL_UART_Receive_IT( &huart1, rx_buffer, 1 );	// used for "opening" ST MCU for future interrupts on RX
 8000b60:	2201      	movs	r2, #1
 8000b62:	4907      	ldr	r1, [pc, #28]	; (8000b80 <HAL_UART_RxCpltCallback+0x50>)
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <HAL_UART_RxCpltCallback+0x54>)
 8000b66:	f002 fa13 	bl	8002f90 <HAL_UART_Receive_IT>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000080 	.word	0x20000080
 8000b78:	200000a0 	.word	0x200000a0
 8000b7c:	e000ed04 	.word	0xe000ed04
 8000b80:	20000098 	.word	0x20000098
 8000b84:	200000f0 	.word	0x200000f0

08000b88 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart1 ){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <HAL_UART_TxCpltCallback+0x18>)
 8000b94:	f000 fd37 	bl	8001606 <HAL_GPIO_TogglePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb6:	f000 f9cd 	bl	8000f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	f06f 0001 	mvn.w	r0, #1
 8000c12:	f000 fa77 	bl	8001104 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c34:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <HAL_InitTick+0xe0>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <HAL_InitTick+0xe0>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <HAL_InitTick+0xe0>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c4c:	f107 0210 	add.w	r2, r7, #16
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fa12 	bl	8002080 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c66:	f001 f9e3 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8000c6a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c6e:	f001 f9df 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8000c72:	4603      	mov	r3, r0
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <HAL_InitTick+0xe4>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	0c9b      	lsrs	r3, r3, #18
 8000c82:	3b01      	subs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_InitTick+0xe8>)
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <HAL_InitTick+0xec>)
 8000c8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_InitTick+0xe8>)
 8000c8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <HAL_InitTick+0xe8>)
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_InitTick+0xe8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_InitTick+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_InitTick+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cac:	4817      	ldr	r0, [pc, #92]	; (8000d0c <HAL_InitTick+0xe8>)
 8000cae:	f001 fe41 	bl	8002934 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d11b      	bne.n	8000cf8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <HAL_InitTick+0xe8>)
 8000cc2:	f001 fe99 	bl	80029f8 <HAL_TIM_Base_Start_IT>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d111      	bne.n	8000cf8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f000 fa31 	bl	800113c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d808      	bhi.n	8000cf2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	2036      	movs	r0, #54	; 0x36
 8000ce6:	f000 fa0d 	bl	8001104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_InitTick+0xf0>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e002      	b.n	8000cf8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	200000a4 	.word	0x200000a4
 8000d10:	40001000 	.word	0x40001000
 8000d14:	20000004 	.word	0x20000004

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <USART1_IRQHandler+0x10>)
 8000d4a:	f002 f965 	bl	8003018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000f0 	.word	0x200000f0

08000d58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM6_DAC_IRQHandler+0x10>)
 8000d5e:	f001 fec3 	bl	8002ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000a4 	.word	0x200000a4

08000d6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000d96:	4a15      	ldr	r2, [pc, #84]	; (8000dec <MX_USART1_UART_Init+0x5c>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USART1_UART_Init+0x58>)
 8000dd4:	f002 f88e 	bl	8002ef4 <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dde:	f7ff fef3 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000f0 	.word	0x200000f0
 8000dec:	40011000 	.word	0x40011000

08000df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ae      	sub	sp, #184	; 0xb8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2290      	movs	r2, #144	; 0x90
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f006 fae3 	bl	80073dc <memset>
  if(uartHandle->Instance==USART1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a30      	ldr	r2, [pc, #192]	; (8000edc <HAL_UART_MspInit+0xec>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d158      	bne.n	8000ed2 <HAL_UART_MspInit+0xe2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e20:	2340      	movs	r3, #64	; 0x40
 8000e22:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 f959 	bl	80020e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e38:	f7ff fec6 	bl	8000bc8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_UART_MspInit+0xf0>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <HAL_UART_MspInit+0xf0>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6453      	str	r3, [r2, #68]	; 0x44
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <HAL_UART_MspInit+0xf0>)
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <HAL_UART_MspInit+0xf0>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <HAL_UART_MspInit+0xf0>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_UART_MspInit+0xf0>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e86:	2304      	movs	r3, #4
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0xf4>)
 8000e94:	f000 f9f2 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e98:	2340      	movs	r3, #64	; 0x40
 8000e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <HAL_UART_MspInit+0xf4>)
 8000ebe:	f000 f9dd 	bl	800127c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2025      	movs	r0, #37	; 0x25
 8000ec8:	f000 f91c 	bl	8001104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ecc:	2025      	movs	r0, #37	; 0x25
 8000ece:	f000 f935 	bl	800113c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	37b8      	adds	r7, #184	; 0xb8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ff2b 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f006 fabf 	bl	8007498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fd81 	bl	8000a20 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f2c:	0800776c 	.word	0x0800776c
  ldr r2, =_sbss
 8000f30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f34:	20004c9c 	.word	0x20004c9c

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>

08000f3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f8d5 	bl	80010ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f44:	200f      	movs	r0, #15
 8000f46:	f7ff fe6d 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fe43 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000178 	.word	0x20000178

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000178 	.word	0x20000178

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	05fa0000 	.word	0x05fa0000

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff4c 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001116:	f7ff ff61 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 800111a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	6978      	ldr	r0, [r7, #20]
 8001122:	f7ff ffb1 	bl	8001088 <NVIC_EncodePriority>
 8001126:	4602      	mov	r2, r0
 8001128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff80 	bl	8001034 <__NVIC_SetPriority>
}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff54 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001164:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001166:	f7ff ff09 	bl	8000f7c <HAL_GetTick>
 800116a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d008      	beq.n	800118a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e052      	b.n	8001230 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0216 	bic.w	r2, r2, #22
 8001198:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <HAL_DMA_Abort+0x62>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d007      	beq.n	80011ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0208 	bic.w	r2, r2, #8
 80011c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011da:	e013      	b.n	8001204 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011dc:	f7ff fece 	bl	8000f7c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d90c      	bls.n	8001204 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2220      	movs	r2, #32
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e015      	b.n	8001230 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e4      	bne.n	80011dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	223f      	movs	r2, #63	; 0x3f
 8001218:	409a      	lsls	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d004      	beq.n	8001256 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00c      	b.n	8001270 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2205      	movs	r2, #5
 800125a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e175      	b.n	8001588 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8164 	bne.w	8001582 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d005      	beq.n	80012d2 <HAL_GPIO_Init+0x56>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80be 	beq.w	8001582 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a65      	ldr	r2, [pc, #404]	; (80015a0 <HAL_GPIO_Init+0x324>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800141e:	4a61      	ldr	r2, [pc, #388]	; (80015a4 <HAL_GPIO_Init+0x328>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_GPIO_Init+0x32c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d037      	beq.n	80014ba <HAL_GPIO_Init+0x23e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a57      	ldr	r2, [pc, #348]	; (80015ac <HAL_GPIO_Init+0x330>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d031      	beq.n	80014b6 <HAL_GPIO_Init+0x23a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x236>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a55      	ldr	r2, [pc, #340]	; (80015b4 <HAL_GPIO_Init+0x338>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x232>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a54      	ldr	r2, [pc, #336]	; (80015b8 <HAL_GPIO_Init+0x33c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x22e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a53      	ldr	r2, [pc, #332]	; (80015bc <HAL_GPIO_Init+0x340>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x22a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x344>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x348>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x34c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x350>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x21a>
 8001492:	2309      	movs	r3, #9
 8001494:	e012      	b.n	80014bc <HAL_GPIO_Init+0x240>
 8001496:	230a      	movs	r3, #10
 8001498:	e010      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149a:	2308      	movs	r3, #8
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_GPIO_Init+0x328>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_GPIO_Init+0x354>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fe:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001528:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f ae86 	bls.w	800129c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40021c00 	.word	0x40021c00
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40022400 	.word	0x40022400
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015f0:	e003      	b.n	80015fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001618:	887a      	ldrh	r2, [r7, #2]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	041a      	lsls	r2, r3, #16
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43d9      	mvns	r1, r3
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	400b      	ands	r3, r1
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800166a:	f7ff fc87 	bl	8000f7c <HAL_GetTick>
 800166e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001670:	e009      	b.n	8001686 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001672:	f7ff fc83 	bl	8000f7c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001680:	d901      	bls.n	8001686 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e022      	b.n	80016cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001692:	d1ee      	bne.n	8001672 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff fc6c 	bl	8000f7c <HAL_GetTick>
 80016a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016a6:	e009      	b.n	80016bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016a8:	f7ff fc68 	bl	8000f7c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016b6:	d901      	bls.n	80016bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e007      	b.n	80016cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016c8:	d1ee      	bne.n	80016a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e29b      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b04      	cmp	r3, #4
 800170a:	d00c      	beq.n	8001726 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170c:	4b93      	ldr	r3, [pc, #588]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
 8001718:	4b90      	ldr	r3, [pc, #576]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	4b8d      	ldr	r3, [pc, #564]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06c      	beq.n	800180c <HAL_RCC_OscConfig+0x130>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d168      	bne.n	800180c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e275      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x7a>
 8001748:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a83      	ldr	r2, [pc, #524]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e02e      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x9c>
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7e      	ldr	r2, [pc, #504]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7b      	ldr	r2, [pc, #492]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0xc0>
 8001782:	4b76      	ldr	r3, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a75      	ldr	r2, [pc, #468]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 800179c:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6e      	ldr	r2, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6b      	ldr	r2, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fbde 	bl	8000f7c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fbda 	bl	8000f7c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e229      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b61      	ldr	r3, [pc, #388]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe8>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fbca 	bl	8000f7c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fbc6 	bl	8000f7c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e215      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x110>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d069      	beq.n	80018ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x190>
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x17a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1e9      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	493d      	ldr	r1, [pc, #244]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e040      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fb7c 	bl	8000f7c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff fb78 	bl	8000f7c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1c7      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4929      	ldr	r1, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
 80018ba:	e018      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb58 	bl	8000f7c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fb54 	bl	8000f7c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1a3      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d038      	beq.n	800196c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff fb35 	bl	8000f7c <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fb31 	bl	8000f7c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e180      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x23a>
 8001934:	e01a      	b.n	800196c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fb1b 	bl	8000f7c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fb17 	bl	8000f7c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d903      	bls.n	8001960 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e166      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
 800195c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a4 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a88      	ldr	r2, [pc, #544]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b86      	ldr	r3, [pc, #536]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a2:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019ae:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7f      	ldr	r2, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fadf 	bl	8000f7c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fadb 	bl	8000f7c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e12a      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x31a>
 80019e8:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	e02d      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x33c>
 80019fe:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a67      	ldr	r2, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x35e>
 8001a20:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a61      	ldr	r2, [pc, #388]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a5b      	ldr	r2, [pc, #364]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa8f 	bl	8000f7c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fa8b 	bl	8000f7c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0d8      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x386>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7ff fa79 	bl	8000f7c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fa75 	bl	8000f7c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0c2      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80ae 	beq.w	8001c28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d06d      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d14b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa46 	bl	8000f7c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fa42 	bl	8000f7c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e091      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	019b      	lsls	r3, r3, #6
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	071b      	lsls	r3, r3, #28
 8001b3e:	491b      	ldr	r1, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff fa14 	bl	8000f7c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff fa10 	bl	8000f7c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e05f      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x47c>
 8001b76:	e057      	b.n	8001c28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f9fa 	bl	8000f7c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f9f6 	bl	8000f7c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e045      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4b0>
 8001baa:	e03d      	b.n	8001c28 <HAL_RCC_OscConfig+0x54c>
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_RCC_OscConfig+0x558>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d030      	beq.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d129      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d122      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d119      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10f      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0d0      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d910      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 020f 	bic.w	r2, r3, #15
 8001c66:	4965      	ldr	r1, [pc, #404]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	494d      	ldr	r1, [pc, #308]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d040      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e07f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e073      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06b      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4936      	ldr	r1, [pc, #216]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f926 	bl	8000f7c <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff f922 	bl	8000f7c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e053      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d210      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 020f 	bic.w	r2, r3, #15
 8001d72:	4922      	ldr	r1, [pc, #136]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4916      	ldr	r1, [pc, #88]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490e      	ldr	r1, [pc, #56]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dca:	f000 f821 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	490a      	ldr	r1, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <HAL_RCC_ClockConfig+0x1d0>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1d4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff1a 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08007744 	.word	0x08007744
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b094      	sub	sp, #80	; 0x50
 8001e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e20:	2300      	movs	r3, #0
 8001e22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e28:	4b79      	ldr	r3, [pc, #484]	; (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d00d      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x40>
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	f200 80e1 	bhi.w	8001ffc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x34>
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e42:	e0db      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e48:	e0db      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4a:	4b72      	ldr	r3, [pc, #456]	; (8002014 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e4e:	e0d8      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e50:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e58:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e82:	4622      	mov	r2, r4
 8001e84:	462b      	mov	r3, r5
 8001e86:	f04f 0000 	mov.w	r0, #0
 8001e8a:	f04f 0100 	mov.w	r1, #0
 8001e8e:	0159      	lsls	r1, r3, #5
 8001e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e94:	0150      	lsls	r0, r2, #5
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	1a51      	subs	r1, r2, r1
 8001e9e:	6139      	str	r1, [r7, #16]
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eb4:	4659      	mov	r1, fp
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	4651      	mov	r1, sl
 8001eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ebe:	4651      	mov	r1, sl
 8001ec0:	018a      	lsls	r2, r1, #6
 8001ec2:	4651      	mov	r1, sl
 8001ec4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ec8:	4659      	mov	r1, fp
 8001eca:	eb63 0901 	sbc.w	r9, r3, r1
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	eb18 0303 	adds.w	r3, r8, r3
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	462b      	mov	r3, r5
 8001ef0:	eb49 0303 	adc.w	r3, r9, r3
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f02:	4629      	mov	r1, r5
 8001f04:	028b      	lsls	r3, r1, #10
 8001f06:	4621      	mov	r1, r4
 8001f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	028a      	lsls	r2, r1, #10
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	2200      	movs	r2, #0
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f20:	f7fe f98e 	bl	8000240 <__aeabi_uldivmod>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4613      	mov	r3, r2
 8001f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f2c:	e058      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2e:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	2200      	movs	r2, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	4611      	mov	r1, r2
 8001f3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f3e:	623b      	str	r3, [r7, #32]
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f48:	4642      	mov	r2, r8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	0159      	lsls	r1, r3, #5
 8001f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f5a:	0150      	lsls	r0, r2, #5
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4641      	mov	r1, r8
 8001f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f66:	4649      	mov	r1, r9
 8001f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f80:	ebb2 040a 	subs.w	r4, r2, sl
 8001f84:	eb63 050b 	sbc.w	r5, r3, fp
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	00eb      	lsls	r3, r5, #3
 8001f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f96:	00e2      	lsls	r2, r4, #3
 8001f98:	4614      	mov	r4, r2
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	18e3      	adds	r3, r4, r3
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	eb45 0303 	adc.w	r3, r5, r3
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	028b      	lsls	r3, r1, #10
 8001fba:	4621      	mov	r1, r4
 8001fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	028a      	lsls	r2, r1, #10
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	61fa      	str	r2, [r7, #28]
 8001fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd4:	f7fe f934 	bl	8000240 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4613      	mov	r3, r2
 8001fde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ffe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002004:	4618      	mov	r0, r3
 8002006:	3750      	adds	r7, #80	; 0x50
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	00f42400 	.word	0x00f42400

08002018 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_RCC_GetHCLKFreq+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002034:	f7ff fff0 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0a9b      	lsrs	r3, r3, #10
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	08007754 	.word	0x08007754

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	f7ff ffdc 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0b5b      	lsrs	r3, r3, #13
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	08007754 	.word	0x08007754

08002080 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	220f      	movs	r2, #15
 800208e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_GetClockConfig+0x5c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_RCC_GetClockConfig+0x5c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_RCC_GetClockConfig+0x5c>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_GetClockConfig+0x5c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_RCC_GetClockConfig+0x60>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 020f 	and.w	r2, r3, #15
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	601a      	str	r2, [r3, #0]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d012      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800210c:	4b69      	ldr	r3, [pc, #420]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a68      	ldr	r2, [pc, #416]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002116:	6093      	str	r3, [r2, #8]
 8002118:	4b66      	ldr	r3, [pc, #408]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	4964      	ldr	r1, [pc, #400]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800212e:	2301      	movs	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d017      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002144:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	4959      	ldr	r1, [pc, #356]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d017      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800217a:	4b4e      	ldr	r3, [pc, #312]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002180:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	494a      	ldr	r1, [pc, #296]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002198:	d101      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 808b 	beq.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6413      	str	r3, [r2, #64]	; 0x40
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ec:	f7fe fec6 	bl	8000f7c <HAL_GetTick>
 80021f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7fe fec2 	bl	8000f7c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e38f      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002206:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d035      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d02e      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002250:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d114      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fe8a 	bl	8000f7c <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7fe fe86 	bl	8000f7c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e351      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ee      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800229a:	d111      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022aa:	400b      	ands	r3, r1
 80022ac:	4901      	ldr	r1, [pc, #4]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
 80022b2:	e00b      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000
 80022bc:	0ffffcff 	.word	0x0ffffcff
 80022c0:	4bac      	ldr	r3, [pc, #688]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4aab      	ldr	r2, [pc, #684]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022ca:	6093      	str	r3, [r2, #8]
 80022cc:	4ba9      	ldr	r3, [pc, #676]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	49a6      	ldr	r1, [pc, #664]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ea:	4ba2      	ldr	r3, [pc, #648]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f0:	4aa0      	ldr	r2, [pc, #640]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022fa:	4b9e      	ldr	r3, [pc, #632]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	499b      	ldr	r1, [pc, #620]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002318:	4b96      	ldr	r3, [pc, #600]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002326:	4993      	ldr	r1, [pc, #588]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233a:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002348:	498a      	ldr	r1, [pc, #552]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800235c:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236a:	4982      	ldr	r1, [pc, #520]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800237e:	4b7d      	ldr	r3, [pc, #500]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4979      	ldr	r1, [pc, #484]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a0:	4b74      	ldr	r3, [pc, #464]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4971      	ldr	r1, [pc, #452]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c2:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f023 020c 	bic.w	r2, r3, #12
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	4968      	ldr	r1, [pc, #416]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e4:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4960      	ldr	r1, [pc, #384]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002406:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002414:	4957      	ldr	r1, [pc, #348]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002428:	4b52      	ldr	r3, [pc, #328]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	494f      	ldr	r1, [pc, #316]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800244a:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4946      	ldr	r1, [pc, #280]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	493e      	ldr	r1, [pc, #248]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800248e:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	4935      	ldr	r1, [pc, #212]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024be:	492d      	ldr	r1, [pc, #180]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d011      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024d2:	4b28      	ldr	r3, [pc, #160]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e0:	4924      	ldr	r1, [pc, #144]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f0:	d101      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002502:	2301      	movs	r3, #1
 8002504:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	4914      	ldr	r1, [pc, #80]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00b      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002544:	490b      	ldr	r1, [pc, #44]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00f      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002568:	4902      	ldr	r1, [pc, #8]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002570:	e002      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002584:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800258a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	4986      	ldr	r1, [pc, #536]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025a8:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b8:	497d      	ldr	r1, [pc, #500]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d006      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80d6 	beq.w	8002780 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025d4:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a75      	ldr	r2, [pc, #468]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e0:	f7fe fccc 	bl	8000f7c <HAL_GetTick>
 80025e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025e8:	f7fe fcc8 	bl	8000f7c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e195      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d021      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11d      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002628:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262e:	0e1b      	lsrs	r3, r3, #24
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	019a      	lsls	r2, r3, #6
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	041b      	lsls	r3, r3, #16
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	071b      	lsls	r3, r3, #28
 800264e:	4958      	ldr	r1, [pc, #352]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02e      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002680:	d129      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002682:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002690:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	0f1b      	lsrs	r3, r3, #28
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	019a      	lsls	r2, r3, #6
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	493e      	ldr	r1, [pc, #248]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026be:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c4:	f023 021f 	bic.w	r2, r3, #31
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	3b01      	subs	r3, #1
 80026ce:	4938      	ldr	r1, [pc, #224]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01d      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e8:	0e1b      	lsrs	r3, r3, #24
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026f0:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f6:	0f1b      	lsrs	r3, r3, #28
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	019a      	lsls	r2, r3, #6
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	071b      	lsls	r3, r3, #28
 8002716:	4926      	ldr	r1, [pc, #152]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	019a      	lsls	r2, r3, #6
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	071b      	lsls	r3, r3, #28
 8002746:	491a      	ldr	r1, [pc, #104]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275a:	f7fe fc0f 	bl	8000f7c <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002762:	f7fe fc0b 	bl	8000f7c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0d8      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	f040 80ce 	bne.w	8002924 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002794:	f7fe fbf2 	bl	8000f7c <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800279a:	e00b      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800279c:	f7fe fbee 	bl	8000f7c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d904      	bls.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0bb      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027b4:	4b5e      	ldr	r3, [pc, #376]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c0:	d0ec      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02e      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d12a      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	0f1b      	lsrs	r3, r3, #28
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	019a      	lsls	r2, r3, #6
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	071b      	lsls	r3, r3, #28
 800281e:	4944      	ldr	r1, [pc, #272]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002826:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	493d      	ldr	r1, [pc, #244]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d022      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002854:	d11d      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	0e1b      	lsrs	r3, r3, #24
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	0f1b      	lsrs	r3, r3, #28
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	019a      	lsls	r2, r3, #6
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	071b      	lsls	r3, r3, #28
 800288a:	4929      	ldr	r1, [pc, #164]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d028      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	0e1b      	lsrs	r3, r3, #24
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	019a      	lsls	r2, r3, #6
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	431a      	orrs	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	071b      	lsls	r3, r3, #28
 80028d2:	4917      	ldr	r1, [pc, #92]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	4911      	ldr	r1, [pc, #68]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe fb3e 	bl	8000f7c <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002904:	f7fe fb3a 	bl	8000f7c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e007      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800291e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002922:	d1ef      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e049      	b.n	80029da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f841 	bl	80029e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f000 fa00 	bl	8002d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d001      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e054      	b.n	8002aba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d022      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3a:	d01d      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d018      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d013      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00e      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d009      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <HAL_TIM_Base_Start_IT+0xe4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0x80>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d115      	bne.n	8002aa4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xec>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d015      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0xbe>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d011      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	e008      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e000      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40010400 	.word	0x40010400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40001800 	.word	0x40001800
 8002ae4:	00010007 	.word	0x00010007

08002ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0202 	mvn.w	r2, #2
 8002b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f905 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8f7 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f908 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0204 	mvn.w	r2, #4
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8db 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8cd 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8de 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0208 	mvn.w	r2, #8
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8b1 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8a3 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8b4 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0210 	mvn.w	r2, #16
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2208      	movs	r2, #8
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f887 	bl	8002d3a <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f879 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f88a 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0201 	mvn.w	r2, #1
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd ff9c 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b80      	cmp	r3, #128	; 0x80
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f91a 	bl	8002ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b80      	cmp	r3, #128	; 0x80
 8002cb4:	d107      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f90d 	bl	8002ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d107      	bne.n	8002cf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f838 	bl	8002d62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d10e      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d107      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f06f 0220 	mvn.w	r2, #32
 8002d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f8cd 	bl	8002eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d00f      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3d      	ldr	r2, [pc, #244]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3c      	ldr	r2, [pc, #240]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d108      	bne.n	8002dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd8:	d027      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d023      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01f      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d017      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_Base_SetConfig+0x128>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <TIM_Base_SetConfig+0x12c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00f      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <TIM_Base_SetConfig+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <TIM_Base_SetConfig+0x134>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <TIM_Base_SetConfig+0x138>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <TIM_Base_SetConfig+0x13c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0xf8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d103      	bne.n	8002e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	615a      	str	r2, [r3, #20]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40010400 	.word	0x40010400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800
 8002eac:	40001800 	.word	0x40001800
 8002eb0:	40001c00 	.word	0x40001c00
 8002eb4:	40002000 	.word	0x40002000

08002eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e040      	b.n	8002f88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd ff6a 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fb78 	bl	8003628 <UART_SetConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e022      	b.n	8002f88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fdd0 	bl	8003af0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fe57 	bl	8003c34 <UART_CheckIdleState>
 8002f86:	4603      	mov	r3, r0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d132      	bne.n	800300e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_UART_Receive_IT+0x24>
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e02b      	b.n	8003010 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d018      	beq.n	8002ffe <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	69f9      	ldr	r1, [r7, #28]
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e6      	bne.n	8002fcc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	461a      	mov	r2, r3
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 ff29 	bl	8003e5c <UART_Start_Receive_IT>
 800300a:	4603      	mov	r3, r0
 800300c:	e000      	b.n	8003010 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ba      	sub	sp, #232	; 0xe8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800303e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003042:	f640 030f 	movw	r3, #2063	; 0x80f
 8003046:	4013      	ands	r3, r2
 8003048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800304c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d115      	bne.n	8003080 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 82ac 	beq.w	80035ce <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
      }
      return;
 800307e:	e2a6      	b.n	80035ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8117 	beq.w	80032b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800308a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800309a:	4b85      	ldr	r3, [pc, #532]	; (80032b0 <HAL_UART_IRQHandler+0x298>)
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 810a 	beq.w	80032b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d011      	beq.n	80030d4 <HAL_UART_IRQHandler+0xbc>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <HAL_UART_IRQHandler+0xec>
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2202      	movs	r2, #2
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_UART_IRQHandler+0x11c>
 8003110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800314c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2208      	movs	r2, #8
 800315e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003166:	f043 0208 	orr.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <HAL_UART_IRQHandler+0x18a>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8212 	beq.w	80035d2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d04f      	beq.n	800329a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fef4 	bl	8003fe8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d141      	bne.n	8003292 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800323a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800323e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1d9      	bne.n	800320e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	2b00      	cmp	r3, #0
 8003260:	d013      	beq.n	800328a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <HAL_UART_IRQHandler+0x29c>)
 8003268:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd ffe2 	bl	8001238 <HAL_DMA_Abort_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003284:	4610      	mov	r0, r2
 8003286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	e00f      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9ac 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	e00b      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9a8 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e007      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f9a4 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80032a8:	e193      	b.n	80035d2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032aa:	bf00      	nop
    return;
 80032ac:	e191      	b.n	80035d2 <HAL_UART_IRQHandler+0x5ba>
 80032ae:	bf00      	nop
 80032b0:	04000120 	.word	0x04000120
 80032b4:	080040b1 	.word	0x080040b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 814c 	bne.w	800355a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8145 	beq.w	800355a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 813e 	beq.w	800355a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	f040 80b6 	bne.w	8003462 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003302:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8165 	beq.w	80035d6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003316:	429a      	cmp	r2, r3
 8003318:	f080 815d 	bcs.w	80035d6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003330:	f000 8086 	beq.w	8003440 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800335e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003362:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800336a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1da      	bne.n	8003334 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800338e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e1      	bne.n	800337e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e3      	bne.n	80033ba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	f023 0310 	bic.w	r3, r3, #16
 8003414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003422:	65bb      	str	r3, [r7, #88]	; 0x58
 8003424:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e4      	bne.n	8003400 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fe8c 	bl	8001158 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003452:	b29b      	uxth	r3, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	4619      	mov	r1, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8ce 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003460:	e0b9      	b.n	80035d6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800346e:	b29b      	uxth	r3, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80ab 	beq.w	80035da <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a6 	beq.w	80035da <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
 80034b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e4      	bne.n	800348e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	623b      	str	r3, [r7, #32]
   return(result);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034e8:	633a      	str	r2, [r7, #48]	; 0x30
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e3      	bne.n	80034c4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	60fb      	str	r3, [r7, #12]
   return(result);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f023 0310 	bic.w	r3, r3, #16
 8003524:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	617b      	str	r3, [r7, #20]
   return(result);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e4      	bne.n	8003510 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800354c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f852 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003558:	e03f      	b.n	80035da <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800355a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00e      	beq.n	8003584 <HAL_UART_IRQHandler+0x56c>
 8003566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800357a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f849 	bl	8003614 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003582:	e02d      	b.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01c      	beq.n	80035de <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
    }
    return;
 80035ac:	e017      	b.n	80035de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00c      	beq.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fd88 	bl	80040dc <UART_EndTransmit_IT>
    return;
 80035cc:	e008      	b.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80035ce:	bf00      	nop
 80035d0:	e006      	b.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80035d2:	bf00      	nop
 80035d4:	e004      	b.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80035d6:	bf00      	nop
 80035d8:	e002      	b.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80035de:	bf00      	nop
  }

}
 80035e0:	37e8      	adds	r7, #232	; 0xe8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4ba6      	ldr	r3, [pc, #664]	; (80038ec <UART_SetConfig+0x2c4>)
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	6979      	ldr	r1, [r7, #20]
 800365c:	430b      	orrs	r3, r1
 800365e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	430a      	orrs	r2, r1
 8003698:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a94      	ldr	r2, [pc, #592]	; (80038f0 <UART_SetConfig+0x2c8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d120      	bne.n	80036e6 <UART_SetConfig+0xbe>
 80036a4:	4b93      	ldr	r3, [pc, #588]	; (80038f4 <UART_SetConfig+0x2cc>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d816      	bhi.n	80036e0 <UART_SetConfig+0xb8>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0x90>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036c9 	.word	0x080036c9
 80036bc:	080036d5 	.word	0x080036d5
 80036c0:	080036cf 	.word	0x080036cf
 80036c4:	080036db 	.word	0x080036db
 80036c8:	2301      	movs	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e150      	b.n	8003970 <UART_SetConfig+0x348>
 80036ce:	2302      	movs	r3, #2
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e14d      	b.n	8003970 <UART_SetConfig+0x348>
 80036d4:	2304      	movs	r3, #4
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e14a      	b.n	8003970 <UART_SetConfig+0x348>
 80036da:	2308      	movs	r3, #8
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e147      	b.n	8003970 <UART_SetConfig+0x348>
 80036e0:	2310      	movs	r3, #16
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e144      	b.n	8003970 <UART_SetConfig+0x348>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a83      	ldr	r2, [pc, #524]	; (80038f8 <UART_SetConfig+0x2d0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d132      	bne.n	8003756 <UART_SetConfig+0x12e>
 80036f0:	4b80      	ldr	r3, [pc, #512]	; (80038f4 <UART_SetConfig+0x2cc>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d828      	bhi.n	8003750 <UART_SetConfig+0x128>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0xdc>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003739 	.word	0x08003739
 8003708:	08003751 	.word	0x08003751
 800370c:	08003751 	.word	0x08003751
 8003710:	08003751 	.word	0x08003751
 8003714:	08003745 	.word	0x08003745
 8003718:	08003751 	.word	0x08003751
 800371c:	08003751 	.word	0x08003751
 8003720:	08003751 	.word	0x08003751
 8003724:	0800373f 	.word	0x0800373f
 8003728:	08003751 	.word	0x08003751
 800372c:	08003751 	.word	0x08003751
 8003730:	08003751 	.word	0x08003751
 8003734:	0800374b 	.word	0x0800374b
 8003738:	2300      	movs	r3, #0
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e118      	b.n	8003970 <UART_SetConfig+0x348>
 800373e:	2302      	movs	r3, #2
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e115      	b.n	8003970 <UART_SetConfig+0x348>
 8003744:	2304      	movs	r3, #4
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e112      	b.n	8003970 <UART_SetConfig+0x348>
 800374a:	2308      	movs	r3, #8
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e10f      	b.n	8003970 <UART_SetConfig+0x348>
 8003750:	2310      	movs	r3, #16
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e10c      	b.n	8003970 <UART_SetConfig+0x348>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a68      	ldr	r2, [pc, #416]	; (80038fc <UART_SetConfig+0x2d4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d120      	bne.n	80037a2 <UART_SetConfig+0x17a>
 8003760:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <UART_SetConfig+0x2cc>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800376a:	2b30      	cmp	r3, #48	; 0x30
 800376c:	d013      	beq.n	8003796 <UART_SetConfig+0x16e>
 800376e:	2b30      	cmp	r3, #48	; 0x30
 8003770:	d814      	bhi.n	800379c <UART_SetConfig+0x174>
 8003772:	2b20      	cmp	r3, #32
 8003774:	d009      	beq.n	800378a <UART_SetConfig+0x162>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d810      	bhi.n	800379c <UART_SetConfig+0x174>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <UART_SetConfig+0x15c>
 800377e:	2b10      	cmp	r3, #16
 8003780:	d006      	beq.n	8003790 <UART_SetConfig+0x168>
 8003782:	e00b      	b.n	800379c <UART_SetConfig+0x174>
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e0f2      	b.n	8003970 <UART_SetConfig+0x348>
 800378a:	2302      	movs	r3, #2
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e0ef      	b.n	8003970 <UART_SetConfig+0x348>
 8003790:	2304      	movs	r3, #4
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e0ec      	b.n	8003970 <UART_SetConfig+0x348>
 8003796:	2308      	movs	r3, #8
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e0e9      	b.n	8003970 <UART_SetConfig+0x348>
 800379c:	2310      	movs	r3, #16
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e0e6      	b.n	8003970 <UART_SetConfig+0x348>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a56      	ldr	r2, [pc, #344]	; (8003900 <UART_SetConfig+0x2d8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d120      	bne.n	80037ee <UART_SetConfig+0x1c6>
 80037ac:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <UART_SetConfig+0x2cc>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037b6:	2bc0      	cmp	r3, #192	; 0xc0
 80037b8:	d013      	beq.n	80037e2 <UART_SetConfig+0x1ba>
 80037ba:	2bc0      	cmp	r3, #192	; 0xc0
 80037bc:	d814      	bhi.n	80037e8 <UART_SetConfig+0x1c0>
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d009      	beq.n	80037d6 <UART_SetConfig+0x1ae>
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d810      	bhi.n	80037e8 <UART_SetConfig+0x1c0>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <UART_SetConfig+0x1a8>
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d006      	beq.n	80037dc <UART_SetConfig+0x1b4>
 80037ce:	e00b      	b.n	80037e8 <UART_SetConfig+0x1c0>
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e0cc      	b.n	8003970 <UART_SetConfig+0x348>
 80037d6:	2302      	movs	r3, #2
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e0c9      	b.n	8003970 <UART_SetConfig+0x348>
 80037dc:	2304      	movs	r3, #4
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e0c6      	b.n	8003970 <UART_SetConfig+0x348>
 80037e2:	2308      	movs	r3, #8
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e0c3      	b.n	8003970 <UART_SetConfig+0x348>
 80037e8:	2310      	movs	r3, #16
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e0c0      	b.n	8003970 <UART_SetConfig+0x348>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a44      	ldr	r2, [pc, #272]	; (8003904 <UART_SetConfig+0x2dc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d125      	bne.n	8003844 <UART_SetConfig+0x21c>
 80037f8:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <UART_SetConfig+0x2cc>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d017      	beq.n	8003838 <UART_SetConfig+0x210>
 8003808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380c:	d817      	bhi.n	800383e <UART_SetConfig+0x216>
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d00b      	beq.n	800382c <UART_SetConfig+0x204>
 8003814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003818:	d811      	bhi.n	800383e <UART_SetConfig+0x216>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <UART_SetConfig+0x1fe>
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d006      	beq.n	8003832 <UART_SetConfig+0x20a>
 8003824:	e00b      	b.n	800383e <UART_SetConfig+0x216>
 8003826:	2300      	movs	r3, #0
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0a1      	b.n	8003970 <UART_SetConfig+0x348>
 800382c:	2302      	movs	r3, #2
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e09e      	b.n	8003970 <UART_SetConfig+0x348>
 8003832:	2304      	movs	r3, #4
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e09b      	b.n	8003970 <UART_SetConfig+0x348>
 8003838:	2308      	movs	r3, #8
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e098      	b.n	8003970 <UART_SetConfig+0x348>
 800383e:	2310      	movs	r3, #16
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e095      	b.n	8003970 <UART_SetConfig+0x348>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <UART_SetConfig+0x2e0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d125      	bne.n	800389a <UART_SetConfig+0x272>
 800384e:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <UART_SetConfig+0x2cc>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800385c:	d017      	beq.n	800388e <UART_SetConfig+0x266>
 800385e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003862:	d817      	bhi.n	8003894 <UART_SetConfig+0x26c>
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003868:	d00b      	beq.n	8003882 <UART_SetConfig+0x25a>
 800386a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386e:	d811      	bhi.n	8003894 <UART_SetConfig+0x26c>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <UART_SetConfig+0x254>
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d006      	beq.n	8003888 <UART_SetConfig+0x260>
 800387a:	e00b      	b.n	8003894 <UART_SetConfig+0x26c>
 800387c:	2301      	movs	r3, #1
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e076      	b.n	8003970 <UART_SetConfig+0x348>
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e073      	b.n	8003970 <UART_SetConfig+0x348>
 8003888:	2304      	movs	r3, #4
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e070      	b.n	8003970 <UART_SetConfig+0x348>
 800388e:	2308      	movs	r3, #8
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e06d      	b.n	8003970 <UART_SetConfig+0x348>
 8003894:	2310      	movs	r3, #16
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e06a      	b.n	8003970 <UART_SetConfig+0x348>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1b      	ldr	r2, [pc, #108]	; (800390c <UART_SetConfig+0x2e4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d138      	bne.n	8003916 <UART_SetConfig+0x2ee>
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <UART_SetConfig+0x2cc>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038b2:	d017      	beq.n	80038e4 <UART_SetConfig+0x2bc>
 80038b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038b8:	d82a      	bhi.n	8003910 <UART_SetConfig+0x2e8>
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	d00b      	beq.n	80038d8 <UART_SetConfig+0x2b0>
 80038c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c4:	d824      	bhi.n	8003910 <UART_SetConfig+0x2e8>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <UART_SetConfig+0x2aa>
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	d006      	beq.n	80038de <UART_SetConfig+0x2b6>
 80038d0:	e01e      	b.n	8003910 <UART_SetConfig+0x2e8>
 80038d2:	2300      	movs	r3, #0
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e04b      	b.n	8003970 <UART_SetConfig+0x348>
 80038d8:	2302      	movs	r3, #2
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e048      	b.n	8003970 <UART_SetConfig+0x348>
 80038de:	2304      	movs	r3, #4
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e045      	b.n	8003970 <UART_SetConfig+0x348>
 80038e4:	2308      	movs	r3, #8
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e042      	b.n	8003970 <UART_SetConfig+0x348>
 80038ea:	bf00      	nop
 80038ec:	efff69f3 	.word	0xefff69f3
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40004400 	.word	0x40004400
 80038fc:	40004800 	.word	0x40004800
 8003900:	40004c00 	.word	0x40004c00
 8003904:	40005000 	.word	0x40005000
 8003908:	40011400 	.word	0x40011400
 800390c:	40007800 	.word	0x40007800
 8003910:	2310      	movs	r3, #16
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e02c      	b.n	8003970 <UART_SetConfig+0x348>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <UART_SetConfig+0x4bc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d125      	bne.n	800396c <UART_SetConfig+0x344>
 8003920:	4b71      	ldr	r3, [pc, #452]	; (8003ae8 <UART_SetConfig+0x4c0>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800392a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800392e:	d017      	beq.n	8003960 <UART_SetConfig+0x338>
 8003930:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003934:	d817      	bhi.n	8003966 <UART_SetConfig+0x33e>
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393a:	d00b      	beq.n	8003954 <UART_SetConfig+0x32c>
 800393c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003940:	d811      	bhi.n	8003966 <UART_SetConfig+0x33e>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <UART_SetConfig+0x326>
 8003946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394a:	d006      	beq.n	800395a <UART_SetConfig+0x332>
 800394c:	e00b      	b.n	8003966 <UART_SetConfig+0x33e>
 800394e:	2300      	movs	r3, #0
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e00d      	b.n	8003970 <UART_SetConfig+0x348>
 8003954:	2302      	movs	r3, #2
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e00a      	b.n	8003970 <UART_SetConfig+0x348>
 800395a:	2304      	movs	r3, #4
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	e007      	b.n	8003970 <UART_SetConfig+0x348>
 8003960:	2308      	movs	r3, #8
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e004      	b.n	8003970 <UART_SetConfig+0x348>
 8003966:	2310      	movs	r3, #16
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e001      	b.n	8003970 <UART_SetConfig+0x348>
 800396c:	2310      	movs	r3, #16
 800396e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003978:	d15b      	bne.n	8003a32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800397a:	7ffb      	ldrb	r3, [r7, #31]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d828      	bhi.n	80039d2 <UART_SetConfig+0x3aa>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <UART_SetConfig+0x360>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039ad 	.word	0x080039ad
 800398c:	080039b5 	.word	0x080039b5
 8003990:	080039bd 	.word	0x080039bd
 8003994:	080039d3 	.word	0x080039d3
 8003998:	080039c3 	.word	0x080039c3
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039d3 	.word	0x080039d3
 80039a4:	080039d3 	.word	0x080039d3
 80039a8:	080039cb 	.word	0x080039cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7fe fb40 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80039b0:	61b8      	str	r0, [r7, #24]
        break;
 80039b2:	e013      	b.n	80039dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b4:	f7fe fb50 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80039b8:	61b8      	str	r0, [r7, #24]
        break;
 80039ba:	e00f      	b.n	80039dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039bc:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <UART_SetConfig+0x4c4>)
 80039be:	61bb      	str	r3, [r7, #24]
        break;
 80039c0:	e00c      	b.n	80039dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c2:	f7fe fa25 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 80039c6:	61b8      	str	r0, [r7, #24]
        break;
 80039c8:	e008      	b.n	80039dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ce:	61bb      	str	r3, [r7, #24]
        break;
 80039d0:	e004      	b.n	80039dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	77bb      	strb	r3, [r7, #30]
        break;
 80039da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d074      	beq.n	8003acc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	005a      	lsls	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b0f      	cmp	r3, #15
 80039fc:	d916      	bls.n	8003a2c <UART_SetConfig+0x404>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d212      	bcs.n	8003a2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f023 030f 	bic.w	r3, r3, #15
 8003a0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	89fb      	ldrh	r3, [r7, #14]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	89fa      	ldrh	r2, [r7, #14]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	e04f      	b.n	8003acc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77bb      	strb	r3, [r7, #30]
 8003a30:	e04c      	b.n	8003acc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d828      	bhi.n	8003a8a <UART_SetConfig+0x462>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <UART_SetConfig+0x418>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a8b 	.word	0x08003a8b
 8003a50:	08003a7b 	.word	0x08003a7b
 8003a54:	08003a8b 	.word	0x08003a8b
 8003a58:	08003a8b 	.word	0x08003a8b
 8003a5c:	08003a8b 	.word	0x08003a8b
 8003a60:	08003a83 	.word	0x08003a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a64:	f7fe fae4 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8003a68:	61b8      	str	r0, [r7, #24]
        break;
 8003a6a:	e013      	b.n	8003a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7fe faf4 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8003a70:	61b8      	str	r0, [r7, #24]
        break;
 8003a72:	e00f      	b.n	8003a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <UART_SetConfig+0x4c4>)
 8003a76:	61bb      	str	r3, [r7, #24]
        break;
 8003a78:	e00c      	b.n	8003a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7a:	f7fe f9c9 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8003a7e:	61b8      	str	r0, [r7, #24]
        break;
 8003a80:	e008      	b.n	8003a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a86:	61bb      	str	r3, [r7, #24]
        break;
 8003a88:	e004      	b.n	8003a94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	77bb      	strb	r3, [r7, #30]
        break;
 8003a92:	bf00      	nop
    }

    if (pclk != 0U)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d018      	beq.n	8003acc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	085a      	lsrs	r2, r3, #1
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d909      	bls.n	8003ac8 <UART_SetConfig+0x4a0>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aba:	d205      	bcs.n	8003ac8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	e001      	b.n	8003acc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ad8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40007c00 	.word	0x40007c00
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	00f42400 	.word	0x00f42400

08003af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01a      	beq.n	8003c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bee:	d10a      	bne.n	8003c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c44:	f7fd f99a 	bl	8000f7c <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d10e      	bne.n	8003c76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f831 	bl	8003cce <UART_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e027      	b.n	8003cc6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d10e      	bne.n	8003ca2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f81b 	bl	8003cce <UART_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e011      	b.n	8003cc6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b09c      	sub	sp, #112	; 0x70
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	603b      	str	r3, [r7, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	e0a7      	b.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	f000 80a3 	beq.w	8003e30 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fd f947 	bl	8000f7c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d13f      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d14:	667b      	str	r3, [r7, #100]	; 0x64
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	663b      	str	r3, [r7, #96]	; 0x60
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e068      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d050      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9c:	d148      	bne.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e6      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3308      	adds	r3, #8
 8003de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dfa:	623a      	str	r2, [r7, #32]
 8003dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	69f9      	ldr	r1, [r7, #28]
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e010      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	f43f af48 	beq.w	8003ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3770      	adds	r7, #112	; 0x70
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b097      	sub	sp, #92	; 0x5c
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	d10e      	bne.n	8003eae <UART_Start_Receive_IT+0x52>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <UART_Start_Receive_IT+0x48>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ea2:	e02d      	b.n	8003f00 <UART_Start_Receive_IT+0xa4>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eac:	e028      	b.n	8003f00 <UART_Start_Receive_IT+0xa4>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <UART_Start_Receive_IT+0x76>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <UART_Start_Receive_IT+0x6c>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	22ff      	movs	r2, #255	; 0xff
 8003ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec6:	e01b      	b.n	8003f00 <UART_Start_Receive_IT+0xa4>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	227f      	movs	r2, #127	; 0x7f
 8003ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ed0:	e016      	b.n	8003f00 <UART_Start_Receive_IT+0xa4>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eda:	d10d      	bne.n	8003ef8 <UART_Start_Receive_IT+0x9c>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <UART_Start_Receive_IT+0x92>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	227f      	movs	r2, #127	; 0x7f
 8003ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eec:	e008      	b.n	8003f00 <UART_Start_Receive_IT+0xa4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	223f      	movs	r2, #63	; 0x3f
 8003ef2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ef6:	e003      	b.n	8003f00 <UART_Start_Receive_IT+0xa4>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2222      	movs	r2, #34	; 0x22
 8003f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	657b      	str	r3, [r7, #84]	; 0x54
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f30:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e5      	bne.n	8003f10 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d107      	bne.n	8003f5e <UART_Start_Receive_IT+0x102>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <UART_Start_Receive_IT+0x184>)
 8003f5a:	669a      	str	r2, [r3, #104]	; 0x68
 8003f5c:	e002      	b.n	8003f64 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <UART_Start_Receive_IT+0x188>)
 8003f62:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d019      	beq.n	8003fa0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e6      	bne.n	8003f6c <UART_Start_Receive_IT+0x110>
 8003f9e:	e018      	b.n	8003fd2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	613b      	str	r3, [r7, #16]
   return(result);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f043 0320 	orr.w	r3, r3, #32
 8003fb4:	653b      	str	r3, [r7, #80]	; 0x50
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	69f9      	ldr	r1, [r7, #28]
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e6      	bne.n	8003fa0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	375c      	adds	r7, #92	; 0x5c
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	08004297 	.word	0x08004297
 8003fe4:	08004131 	.word	0x08004131

08003fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b095      	sub	sp, #84	; 0x54
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400e:	643b      	str	r3, [r7, #64]	; 0x40
 8004010:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	61fb      	str	r3, [r7, #28]
   return(result);
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	2b01      	cmp	r3, #1
 800405c:	d118      	bne.n	8004090 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60bb      	str	r3, [r7, #8]
   return(result);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f023 0310 	bic.w	r3, r3, #16
 8004072:	647b      	str	r3, [r7, #68]	; 0x44
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	613b      	str	r3, [r7, #16]
   return(result);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e6      	bne.n	800405e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040a4:	bf00      	nop
 80040a6:	3754      	adds	r7, #84	; 0x54
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff fa8a 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6979      	ldr	r1, [r7, #20]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	613b      	str	r3, [r7, #16]
   return(result);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e6      	bne.n	80040e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fc fd30 	bl	8000b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004128:	bf00      	nop
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b096      	sub	sp, #88	; 0x58
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800413e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004148:	2b22      	cmp	r3, #34	; 0x22
 800414a:	f040 8098 	bne.w	800427e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004158:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800415c:	b2d9      	uxtb	r1, r3
 800415e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004162:	b2da      	uxtb	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	400a      	ands	r2, r1
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d17b      	bne.n	800428e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041aa:	653b      	str	r3, [r7, #80]	; 0x50
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
 80041b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	623b      	str	r3, [r7, #32]
   return(result);
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e8:	633a      	str	r2, [r7, #48]	; 0x30
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	2b01      	cmp	r3, #1
 8004216:	d12e      	bne.n	8004276 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60fb      	str	r3, [r7, #12]
   return(result);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0310 	bic.w	r3, r3, #16
 8004232:	64bb      	str	r3, [r7, #72]	; 0x48
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	69b9      	ldr	r1, [r7, #24]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	617b      	str	r3, [r7, #20]
   return(result);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e6      	bne.n	800421e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b10      	cmp	r3, #16
 800425c:	d103      	bne.n	8004266 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2210      	movs	r2, #16
 8004264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff f9c4 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004274:	e00b      	b.n	800428e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc fc5a 	bl	8000b30 <HAL_UART_RxCpltCallback>
}
 800427c:	e007      	b.n	800428e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0208 	orr.w	r2, r2, #8
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	3758      	adds	r7, #88	; 0x58
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b096      	sub	sp, #88	; 0x58
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ae:	2b22      	cmp	r3, #34	; 0x22
 80042b0:	f040 8098 	bne.w	80043e4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80042c4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80042c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042cc:	4013      	ands	r3, r2
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d17b      	bne.n	80043f4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	643b      	str	r3, [r7, #64]	; 0x40
 800431c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e6      	bne.n	80042fc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	61fb      	str	r3, [r7, #28]
   return(result);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	64bb      	str	r3, [r7, #72]	; 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437a:	2b01      	cmp	r3, #1
 800437c:	d12e      	bne.n	80043dc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60bb      	str	r3, [r7, #8]
   return(result);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	647b      	str	r3, [r7, #68]	; 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6979      	ldr	r1, [r7, #20]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	613b      	str	r3, [r7, #16]
   return(result);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d103      	bne.n	80043cc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2210      	movs	r2, #16
 80043ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff f911 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043da:	e00b      	b.n	80043f4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7fc fba7 	bl	8000b30 <HAL_UART_RxCpltCallback>
}
 80043e2:	e007      	b.n	80043f4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0208 	orr.w	r2, r2, #8
 80043f2:	619a      	str	r2, [r3, #24]
}
 80043f4:	bf00      	nop
 80043f6:	3758      	adds	r7, #88	; 0x58
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004412:	f3ef 8305 	mrs	r3, IPSR
 8004416:	60bb      	str	r3, [r7, #8]
  return(result);
 8004418:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441e:	f3ef 8310 	mrs	r3, PRIMASK
 8004422:	607b      	str	r3, [r7, #4]
  return(result);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800442a:	f3ef 8311 	mrs	r3, BASEPRI
 800442e:	603b      	str	r3, [r7, #0]
  return(result);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <osKernelInitialize+0x3a>
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <osKernelInitialize+0x64>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d103      	bne.n	8004446 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800443e:	f06f 0305 	mvn.w	r3, #5
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e00c      	b.n	8004460 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <osKernelInitialize+0x64>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800444e:	4b08      	ldr	r3, [pc, #32]	; (8004470 <osKernelInitialize+0x64>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e002      	b.n	8004460 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004460:	68fb      	ldr	r3, [r7, #12]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	2000017c 	.word	0x2000017c

08004474 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447a:	f3ef 8305 	mrs	r3, IPSR
 800447e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004480:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004486:	f3ef 8310 	mrs	r3, PRIMASK
 800448a:	607b      	str	r3, [r7, #4]
  return(result);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004492:	f3ef 8311 	mrs	r3, BASEPRI
 8004496:	603b      	str	r3, [r7, #0]
  return(result);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <osKernelStart+0x3a>
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <osKernelStart+0x68>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d103      	bne.n	80044ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80044a6:	f06f 0305 	mvn.w	r3, #5
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e010      	b.n	80044d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <osKernelStart+0x68>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d109      	bne.n	80044ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044b6:	f7ff ffa1 	bl	80043fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <osKernelStart+0x68>)
 80044bc:	2202      	movs	r2, #2
 80044be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044c0:	f001 fac0 	bl	8005a44 <vTaskStartScheduler>
      stat = osOK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e002      	b.n	80044d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295
 80044ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2000017c 	.word	0x2000017c

080044e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b090      	sub	sp, #64	; 0x40
 80044e4:	af04      	add	r7, sp, #16
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f0:	f3ef 8305 	mrs	r3, IPSR
 80044f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80044f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 808f 	bne.w	800461c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004502:	61bb      	str	r3, [r7, #24]
  return(result);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800450a:	f3ef 8311 	mrs	r3, BASEPRI
 800450e:	617b      	str	r3, [r7, #20]
  return(result);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <osThreadNew+0x3e>
 8004516:	4b44      	ldr	r3, [pc, #272]	; (8004628 <osThreadNew+0x148>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d07e      	beq.n	800461c <osThreadNew+0x13c>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d07b      	beq.n	800461c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004528:	2318      	movs	r3, #24
 800452a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004530:	f04f 33ff 	mov.w	r3, #4294967295
 8004534:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d045      	beq.n	80045c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <osThreadNew+0x6a>
        name = attr->name;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <osThreadNew+0x90>
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	2b38      	cmp	r3, #56	; 0x38
 8004562:	d805      	bhi.n	8004570 <osThreadNew+0x90>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <osThreadNew+0x94>
        return (NULL);
 8004570:	2300      	movs	r3, #0
 8004572:	e054      	b.n	800461e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00e      	beq.n	80045aa <osThreadNew+0xca>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	2ba7      	cmp	r3, #167	; 0xa7
 8004592:	d90a      	bls.n	80045aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <osThreadNew+0xca>
        mem = 1;
 80045a4:	2301      	movs	r3, #1
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	e010      	b.n	80045cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <osThreadNew+0xec>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d108      	bne.n	80045cc <osThreadNew+0xec>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <osThreadNew+0xec>
          mem = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
 80045c6:	e001      	b.n	80045cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d110      	bne.n	80045f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045da:	9202      	str	r2, [sp, #8]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fe3f 	bl	800526c <xTaskCreateStatic>
 80045ee:	4603      	mov	r3, r0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	e013      	b.n	800461c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d110      	bne.n	800461c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	f107 0310 	add.w	r3, r7, #16
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fe90 	bl	8005332 <xTaskCreate>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <osThreadNew+0x13c>
          hTask = NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800461c:	693b      	ldr	r3, [r7, #16]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3730      	adds	r7, #48	; 0x30
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	2000017c 	.word	0x2000017c

0800462c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004634:	f3ef 8305 	mrs	r3, IPSR
 8004638:	613b      	str	r3, [r7, #16]
  return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10f      	bne.n	8004660 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004640:	f3ef 8310 	mrs	r3, PRIMASK
 8004644:	60fb      	str	r3, [r7, #12]
  return(result);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d105      	bne.n	8004658 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800464c:	f3ef 8311 	mrs	r3, BASEPRI
 8004650:	60bb      	str	r3, [r7, #8]
  return(result);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <osDelay+0x3c>
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <osDelay+0x58>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d103      	bne.n	8004668 <osDelay+0x3c>
    stat = osErrorISR;
 8004660:	f06f 0305 	mvn.w	r3, #5
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e007      	b.n	8004678 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 f82e 	bl	80056d4 <vTaskDelay>
    }
  }

  return (stat);
 8004678:	697b      	ldr	r3, [r7, #20]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2000017c 	.word	0x2000017c

08004688 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4a06      	ldr	r2, [pc, #24]	; (80046b8 <vApplicationGetIdleTaskMemory+0x30>)
 800469e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000180 	.word	0x20000180
 80046b8:	20000228 	.word	0x20000228

080046bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80046cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4a06      	ldr	r2, [pc, #24]	; (80046ec <vApplicationGetTimerTaskMemory+0x30>)
 80046d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046da:	601a      	str	r2, [r3, #0]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	20000428 	.word	0x20000428
 80046ec:	200004d0 	.word	0x200004d0

080046f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f103 0208 	add.w	r2, r3, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f103 0208 	add.w	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f103 0208 	add.w	r2, r3, #8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d103      	bne.n	80047b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e00c      	b.n	80047cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3308      	adds	r3, #8
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e002      	b.n	80047c0 <vListInsert+0x2e>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d2f6      	bcs.n	80047ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6892      	ldr	r2, [r2, #8]
 800481a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6852      	ldr	r2, [r2, #4]
 8004824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d103      	bne.n	8004838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	1e5a      	subs	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10c      	bne.n	8004886 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	b672      	cpsid	i
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	b662      	cpsie	i
 8004880:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004886:	f002 fa99 	bl	8006dbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	441a      	add	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	3b01      	subs	r3, #1
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	22ff      	movs	r2, #255	; 0xff
 80048d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d114      	bne.n	8004906 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01a      	beq.n	800491a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3310      	adds	r3, #16
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 fb53 	bl	8005f94 <xTaskRemoveFromEventList>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d012      	beq.n	800491a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <xQueueGenericReset+0xd0>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	e009      	b.n	800491a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3310      	adds	r3, #16
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fef0 	bl	80046f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3324      	adds	r3, #36	; 0x24
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff feeb 	bl	80046f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f002 fa83 	bl	8006e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800491e:	2301      	movs	r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08e      	sub	sp, #56	; 0x38
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	b672      	cpsid	i
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	b662      	cpsie	i
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10c      	bne.n	800497a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	b672      	cpsid	i
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	b662      	cpsie	i
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <xQueueGenericCreateStatic+0x5a>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <xQueueGenericCreateStatic+0x5e>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueGenericCreateStatic+0x60>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10c      	bne.n	80049aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	b672      	cpsid	i
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	b662      	cpsie	i
 80049a4:	623b      	str	r3, [r7, #32]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <xQueueGenericCreateStatic+0x8a>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <xQueueGenericCreateStatic+0x8e>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <xQueueGenericCreateStatic+0x90>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10c      	bne.n	80049da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	b672      	cpsid	i
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	b662      	cpsie	i
 80049d4:	61fb      	str	r3, [r7, #28]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049da:	2350      	movs	r3, #80	; 0x50
 80049dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d00c      	beq.n	80049fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	b672      	cpsid	i
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	b662      	cpsie	i
 80049f8:	61bb      	str	r3, [r7, #24]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00d      	beq.n	8004a26 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f805 	bl	8004a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3730      	adds	r7, #48	; 0x30
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d103      	bne.n	8004a4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a5e:	2101      	movs	r1, #1
 8004a60:	69b8      	ldr	r0, [r7, #24]
 8004a62:	f7ff fef9 	bl	8004858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10c      	bne.n	8004aae <xQueueGenericSend+0x36>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	b672      	cpsid	i
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	b662      	cpsie	i
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d103      	bne.n	8004abc <xQueueGenericSend+0x44>
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <xQueueGenericSend+0x48>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <xQueueGenericSend+0x4a>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <xQueueGenericSend+0x68>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	b672      	cpsid	i
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	b662      	cpsie	i
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d103      	bne.n	8004aee <xQueueGenericSend+0x76>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <xQueueGenericSend+0x7a>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueGenericSend+0x7c>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10c      	bne.n	8004b12 <xQueueGenericSend+0x9a>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	b672      	cpsid	i
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	b662      	cpsie	i
 8004b0c:	623b      	str	r3, [r7, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b12:	f001 fc09 	bl	8006328 <xTaskGetSchedulerState>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <xQueueGenericSend+0xaa>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <xQueueGenericSend+0xae>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <xQueueGenericSend+0xb0>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10c      	bne.n	8004b46 <xQueueGenericSend+0xce>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	b672      	cpsid	i
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	b662      	cpsie	i
 8004b40:	61fb      	str	r3, [r7, #28]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b46:	f002 f939 	bl	8006dbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <xQueueGenericSend+0xe4>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d129      	bne.n	8004bb0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b62:	f000 fa15 	bl	8004f90 <prvCopyDataToQueue>
 8004b66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d010      	beq.n	8004b92 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	3324      	adds	r3, #36	; 0x24
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 fa0d 	bl	8005f94 <xTaskRemoveFromEventList>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b80:	4b3f      	ldr	r3, [pc, #252]	; (8004c80 <xQueueGenericSend+0x208>)
 8004b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	e00a      	b.n	8004ba8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b98:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <xQueueGenericSend+0x208>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ba8:	f002 f93c 	bl	8006e24 <vPortExitCritical>
				return pdPASS;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e063      	b.n	8004c78 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bb6:	f002 f935 	bl	8006e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e05c      	b.n	8004c78 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d106      	bne.n	8004bd2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc4:	f107 0314 	add.w	r3, r7, #20
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fa49 	bl	8006060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bd2:	f002 f927 	bl	8006e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bd6:	f000 ffa9 	bl	8005b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bda:	f002 f8ef 	bl	8006dbc <vPortEnterCritical>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004be4:	b25b      	sxtb	r3, r3
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d103      	bne.n	8004bf4 <xQueueGenericSend+0x17c>
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d103      	bne.n	8004c0a <xQueueGenericSend+0x192>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c0a:	f002 f90b 	bl	8006e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c0e:	1d3a      	adds	r2, r7, #4
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fa38 	bl	800608c <xTaskCheckForTimeOut>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d124      	bne.n	8004c6c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c24:	f000 faac 	bl	8005180 <prvIsQueueFull>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d018      	beq.n	8004c60 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	3310      	adds	r3, #16
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 f958 	bl	8005eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c3e:	f000 fa37 	bl	80050b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c42:	f000 ff81 	bl	8005b48 <xTaskResumeAll>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f47f af7c 	bne.w	8004b46 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <xQueueGenericSend+0x208>)
 8004c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	e772      	b.n	8004b46 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c62:	f000 fa25 	bl	80050b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c66:	f000 ff6f 	bl	8005b48 <xTaskResumeAll>
 8004c6a:	e76c      	b.n	8004b46 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6e:	f000 fa1f 	bl	80050b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c72:	f000 ff69 	bl	8005b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3738      	adds	r7, #56	; 0x38
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	; 0x38
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10c      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	b672      	cpsid	i
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	b662      	cpsie	i
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <xQueueGenericSendFromISR+0x40>
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <xQueueGenericSendFromISR+0x44>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <xQueueGenericSendFromISR+0x46>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10c      	bne.n	8004ce8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	b672      	cpsid	i
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	b662      	cpsie	i
 8004ce2:	623b      	str	r3, [r7, #32]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSendFromISR+0x72>
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <xQueueGenericSendFromISR+0x76>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <xQueueGenericSendFromISR+0x78>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10c      	bne.n	8004d1a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	b672      	cpsid	i
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	b662      	cpsie	i
 8004d14:	61fb      	str	r3, [r7, #28]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d1a:	f002 f937 	bl	8006f8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	b672      	cpsid	i
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	b662      	cpsie	i
 8004d36:	61ba      	str	r2, [r7, #24]
 8004d38:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <xQueueGenericSendFromISR+0xcc>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d12c      	bne.n	8004daa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d60:	f000 f916 	bl	8004f90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d112      	bne.n	8004d94 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	3324      	adds	r3, #36	; 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f90a 	bl	8005f94 <xTaskRemoveFromEventList>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00e      	beq.n	8004da4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e007      	b.n	8004da4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d98:	3301      	adds	r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	b25a      	sxtb	r2, r3
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004da4:	2301      	movs	r3, #1
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004da8:	e001      	b.n	8004dae <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004db8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3738      	adds	r7, #56	; 0x38
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10c      	bne.n	8004df8 <xQueueReceive+0x34>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	b672      	cpsid	i
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	b662      	cpsie	i
 8004df2:	623b      	str	r3, [r7, #32]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <xQueueReceive+0x42>
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <xQueueReceive+0x46>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <xQueueReceive+0x48>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10c      	bne.n	8004e2a <xQueueReceive+0x66>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	b672      	cpsid	i
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	b662      	cpsie	i
 8004e24:	61fb      	str	r3, [r7, #28]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e2a:	f001 fa7d 	bl	8006328 <xTaskGetSchedulerState>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <xQueueReceive+0x76>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <xQueueReceive+0x7a>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueReceive+0x7c>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10c      	bne.n	8004e5e <xQueueReceive+0x9a>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	b672      	cpsid	i
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	b662      	cpsie	i
 8004e58:	61bb      	str	r3, [r7, #24]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e5e:	f001 ffad 	bl	8006dbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01f      	beq.n	8004eae <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e72:	f000 f8f7 	bl	8005064 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	1e5a      	subs	r2, r3, #1
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00f      	beq.n	8004ea6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	3310      	adds	r3, #16
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 f882 	bl	8005f94 <xTaskRemoveFromEventList>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e96:	4b3d      	ldr	r3, [pc, #244]	; (8004f8c <xQueueReceive+0x1c8>)
 8004e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ea6:	f001 ffbd 	bl	8006e24 <vPortExitCritical>
				return pdPASS;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e069      	b.n	8004f82 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d103      	bne.n	8004ebc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eb4:	f001 ffb6 	bl	8006e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e062      	b.n	8004f82 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ec2:	f107 0310 	add.w	r3, r7, #16
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 f8ca 	bl	8006060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ed0:	f001 ffa8 	bl	8006e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ed4:	f000 fe2a 	bl	8005b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ed8:	f001 ff70 	bl	8006dbc <vPortEnterCritical>
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee2:	b25b      	sxtb	r3, r3
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d103      	bne.n	8004ef2 <xQueueReceive+0x12e>
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d103      	bne.n	8004f08 <xQueueReceive+0x144>
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f08:	f001 ff8c 	bl	8006e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f0c:	1d3a      	adds	r2, r7, #4
 8004f0e:	f107 0310 	add.w	r3, r7, #16
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 f8b9 	bl	800608c <xTaskCheckForTimeOut>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d123      	bne.n	8004f68 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f22:	f000 f917 	bl	8005154 <prvIsQueueEmpty>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	3324      	adds	r3, #36	; 0x24
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 ffd9 	bl	8005eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f3c:	f000 f8b8 	bl	80050b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f40:	f000 fe02 	bl	8005b48 <xTaskResumeAll>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d189      	bne.n	8004e5e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <xQueueReceive+0x1c8>)
 8004f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	e780      	b.n	8004e5e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5e:	f000 f8a7 	bl	80050b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f62:	f000 fdf1 	bl	8005b48 <xTaskResumeAll>
 8004f66:	e77a      	b.n	8004e5e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f6a:	f000 f8a1 	bl	80050b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f6e:	f000 fdeb 	bl	8005b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f74:	f000 f8ee 	bl	8005154 <prvIsQueueEmpty>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f43f af6f 	beq.w	8004e5e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3730      	adds	r7, #48	; 0x30
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d14d      	bne.n	8005052 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f9d2 	bl	8006364 <xTaskPriorityDisinherit>
 8004fc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	e043      	b.n	8005052 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d119      	bne.n	8005004 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6858      	ldr	r0, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	f002 fa82 	bl	80074e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d32b      	bcc.n	8005052 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	e026      	b.n	8005052 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68d8      	ldr	r0, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	f002 fa68 	bl	80074e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	425b      	negs	r3, r3
 800501e:	441a      	add	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d207      	bcs.n	8005040 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	425b      	negs	r3, r3
 800503a:	441a      	add	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d105      	bne.n	8005052 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	3b01      	subs	r3, #1
 8005050:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d018      	beq.n	80050a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	441a      	add	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	d303      	bcc.n	8005098 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68d9      	ldr	r1, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	461a      	mov	r2, r3
 80050a2:	6838      	ldr	r0, [r7, #0]
 80050a4:	f002 fa1e 	bl	80074e4 <memcpy>
	}
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050b8:	f001 fe80 	bl	8006dbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c4:	e011      	b.n	80050ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d012      	beq.n	80050f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3324      	adds	r3, #36	; 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 ff5e 	bl	8005f94 <xTaskRemoveFromEventList>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050de:	f001 f83b 	bl	8006158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dce9      	bgt.n	80050c6 <prvUnlockQueue+0x16>
 80050f2:	e000      	b.n	80050f6 <prvUnlockQueue+0x46>
					break;
 80050f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	22ff      	movs	r2, #255	; 0xff
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050fe:	f001 fe91 	bl	8006e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005102:	f001 fe5b 	bl	8006dbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800510c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800510e:	e011      	b.n	8005134 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d012      	beq.n	800513e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3310      	adds	r3, #16
 800511c:	4618      	mov	r0, r3
 800511e:	f000 ff39 	bl	8005f94 <xTaskRemoveFromEventList>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005128:	f001 f816 	bl	8006158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	3b01      	subs	r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005138:	2b00      	cmp	r3, #0
 800513a:	dce9      	bgt.n	8005110 <prvUnlockQueue+0x60>
 800513c:	e000      	b.n	8005140 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800513e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	22ff      	movs	r2, #255	; 0xff
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005148:	f001 fe6c 	bl	8006e24 <vPortExitCritical>
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800515c:	f001 fe2e 	bl	8006dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e001      	b.n	8005172 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005172:	f001 fe57 	bl	8006e24 <vPortExitCritical>

	return xReturn;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005188:	f001 fe18 	bl	8006dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	429a      	cmp	r2, r3
 8005196:	d102      	bne.n	800519e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005198:	2301      	movs	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e001      	b.n	80051a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a2:	f001 fe3f 	bl	8006e24 <vPortExitCritical>

	return xReturn;
 80051a6:	68fb      	ldr	r3, [r7, #12]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e014      	b.n	80051ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051c0:	4a0f      	ldr	r2, [pc, #60]	; (8005200 <vQueueAddToRegistry+0x50>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051cc:	490c      	ldr	r1, [pc, #48]	; (8005200 <vQueueAddToRegistry+0x50>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <vQueueAddToRegistry+0x50>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051e2:	e006      	b.n	80051f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b07      	cmp	r3, #7
 80051ee:	d9e7      	bls.n	80051c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	200008d0 	.word	0x200008d0

08005204 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005214:	f001 fdd2 	bl	8006dbc <vPortEnterCritical>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800521e:	b25b      	sxtb	r3, r3
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d103      	bne.n	800522e <vQueueWaitForMessageRestricted+0x2a>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005234:	b25b      	sxtb	r3, r3
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d103      	bne.n	8005244 <vQueueWaitForMessageRestricted+0x40>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005244:	f001 fdee 	bl	8006e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3324      	adds	r3, #36	; 0x24
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fe6d 	bl	8005f38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800525e:	6978      	ldr	r0, [r7, #20]
 8005260:	f7ff ff26 	bl	80050b0 <prvUnlockQueue>
	}
 8005264:	bf00      	nop
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08e      	sub	sp, #56	; 0x38
 8005270:	af04      	add	r7, sp, #16
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10c      	bne.n	800529a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	b672      	cpsid	i
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	b662      	cpsie	i
 8005294:	623b      	str	r3, [r7, #32]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10c      	bne.n	80052ba <xTaskCreateStatic+0x4e>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	b672      	cpsid	i
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	b662      	cpsie	i
 80052b4:	61fb      	str	r3, [r7, #28]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ba:	23a8      	movs	r3, #168	; 0xa8
 80052bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2ba8      	cmp	r3, #168	; 0xa8
 80052c2:	d00c      	beq.n	80052de <xTaskCreateStatic+0x72>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	b672      	cpsid	i
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	b662      	cpsie	i
 80052d8:	61bb      	str	r3, [r7, #24]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01e      	beq.n	8005324 <xTaskCreateStatic+0xb8>
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052fe:	2300      	movs	r3, #0
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	9302      	str	r3, [sp, #8]
 8005306:	f107 0314 	add.w	r3, r7, #20
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f850 	bl	80053bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800531c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800531e:	f000 f8f5 	bl	800550c <prvAddNewTaskToReadyList>
 8005322:	e001      	b.n	8005328 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005328:	697b      	ldr	r3, [r7, #20]
	}
 800532a:	4618      	mov	r0, r3
 800532c:	3728      	adds	r7, #40	; 0x28
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005332:	b580      	push	{r7, lr}
 8005334:	b08c      	sub	sp, #48	; 0x30
 8005336:	af04      	add	r7, sp, #16
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fe64 	bl	8007014 <pvPortMalloc>
 800534c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005354:	20a8      	movs	r0, #168	; 0xa8
 8005356:	f001 fe5d 	bl	8007014 <pvPortMalloc>
 800535a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
 8005368:	e005      	b.n	8005376 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800536a:	6978      	ldr	r0, [r7, #20]
 800536c:	f001 ff1c 	bl	80071a8 <vPortFree>
 8005370:	e001      	b.n	8005376 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d017      	beq.n	80053ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005384:	88fa      	ldrh	r2, [r7, #6]
 8005386:	2300      	movs	r3, #0
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f80e 	bl	80053bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053a0:	69f8      	ldr	r0, [r7, #28]
 80053a2:	f000 f8b3 	bl	800550c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053a6:	2301      	movs	r3, #1
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e002      	b.n	80053b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053b2:	69bb      	ldr	r3, [r7, #24]
	}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	461a      	mov	r2, r3
 80053d4:	21a5      	movs	r1, #165	; 0xa5
 80053d6:	f002 f801 	bl	80073dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80053e4:	440b      	add	r3, r1
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f023 0307 	bic.w	r3, r3, #7
 80053f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	b672      	cpsid	i
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	b662      	cpsie	i
 8005412:	617b      	str	r3, [r7, #20]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01f      	beq.n	800545e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e012      	b.n	800544a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	7819      	ldrb	r1, [r3, #0]
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	3334      	adds	r3, #52	; 0x34
 8005434:	460a      	mov	r2, r1
 8005436:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d9e9      	bls.n	8005424 <prvInitialiseNewTask+0x68>
 8005450:	e000      	b.n	8005454 <prvInitialiseNewTask+0x98>
			{
				break;
 8005452:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800545c:	e003      	b.n	8005466 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	2b37      	cmp	r3, #55	; 0x37
 800546a:	d901      	bls.n	8005470 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800546c:	2337      	movs	r3, #55	; 0x37
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	2200      	movs	r2, #0
 8005480:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	3304      	adds	r3, #4
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff f952 	bl	8004730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	3318      	adds	r3, #24
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff f94d 	bl	8004730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	3354      	adds	r3, #84	; 0x54
 80054c0:	224c      	movs	r2, #76	; 0x4c
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 ff89 	bl	80073dc <memset>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <prvInitialiseNewTask+0x144>)
 80054ce:	659a      	str	r2, [r3, #88]	; 0x58
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	4a0c      	ldr	r2, [pc, #48]	; (8005504 <prvInitialiseNewTask+0x148>)
 80054d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	4a0b      	ldr	r2, [pc, #44]	; (8005508 <prvInitialiseNewTask+0x14c>)
 80054da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	69b8      	ldr	r0, [r7, #24]
 80054e2:	f001 fb61 	bl	8006ba8 <pxPortInitialiseStack>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f8:	bf00      	nop
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20004b5c 	.word	0x20004b5c
 8005504:	20004bc4 	.word	0x20004bc4
 8005508:	20004c2c 	.word	0x20004c2c

0800550c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005514:	f001 fc52 	bl	8006dbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005518:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005522:	4b2c      	ldr	r3, [pc, #176]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800552a:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005530:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d110      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005538:	f000 fe32 	bl	80061a0 <prvInitialiseTaskLists>
 800553c:	e00d      	b.n	800555a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800553e:	4b26      	ldr	r3, [pc, #152]	; (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	429a      	cmp	r2, r3
 8005552:	d802      	bhi.n	800555a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d903      	bls.n	8005580 <prvAddNewTaskToReadyList+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <prvAddNewTaskToReadyList+0xd8>)
 800558e:	441a      	add	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7ff f8d7 	bl	800474a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800559c:	f001 fc42 	bl	8006e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d207      	bcs.n	80055c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <prvAddNewTaskToReadyList+0xdc>)
 80055b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000de4 	.word	0x20000de4
 80055d4:	20000910 	.word	0x20000910
 80055d8:	20000df0 	.word	0x20000df0
 80055dc:	20000e00 	.word	0x20000e00
 80055e0:	20000dec 	.word	0x20000dec
 80055e4:	20000914 	.word	0x20000914
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80055f4:	f001 fbe2 	bl	8006dbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <vTaskDelete+0x18>
 80055fe:	4b2d      	ldr	r3, [pc, #180]	; (80056b4 <vTaskDelete+0xc8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	e000      	b.n	8005606 <vTaskDelete+0x1a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff f8f9 	bl	8004804 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3318      	adds	r3, #24
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff f8f0 	bl	8004804 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <vTaskDelete+0xcc>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a23      	ldr	r2, [pc, #140]	; (80056b8 <vTaskDelete+0xcc>)
 800562c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800562e:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <vTaskDelete+0xc8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	429a      	cmp	r2, r3
 8005636:	d10b      	bne.n	8005650 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	481f      	ldr	r0, [pc, #124]	; (80056bc <vTaskDelete+0xd0>)
 8005640:	f7ff f883 	bl	800474a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005644:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <vTaskDelete+0xd4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3301      	adds	r3, #1
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <vTaskDelete+0xd4>)
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e009      	b.n	8005664 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005650:	4b1c      	ldr	r3, [pc, #112]	; (80056c4 <vTaskDelete+0xd8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3b01      	subs	r3, #1
 8005656:	4a1b      	ldr	r2, [pc, #108]	; (80056c4 <vTaskDelete+0xd8>)
 8005658:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fe0e 	bl	800627c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005660:	f000 fe42 	bl	80062e8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005664:	f001 fbde 	bl	8006e24 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <vTaskDelete+0xdc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01d      	beq.n	80056ac <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8005670:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <vTaskDelete+0xc8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	429a      	cmp	r2, r3
 8005678:	d118      	bne.n	80056ac <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800567a:	4b14      	ldr	r3, [pc, #80]	; (80056cc <vTaskDelete+0xe0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <vTaskDelete+0xb0>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	b672      	cpsid	i
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	b662      	cpsie	i
 8005696:	60bb      	str	r3, [r7, #8]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800569c:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <vTaskDelete+0xe4>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000910 	.word	0x20000910
 80056b8:	20000e00 	.word	0x20000e00
 80056bc:	20000db8 	.word	0x20000db8
 80056c0:	20000dcc 	.word	0x20000dcc
 80056c4:	20000de4 	.word	0x20000de4
 80056c8:	20000df0 	.word	0x20000df0
 80056cc:	20000e0c 	.word	0x20000e0c
 80056d0:	e000ed04 	.word	0xe000ed04

080056d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <vTaskDelay+0x64>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <vTaskDelay+0x34>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	b672      	cpsid	i
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	b662      	cpsie	i
 8005702:	60bb      	str	r3, [r7, #8]
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005708:	f000 fa10 	bl	8005b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800570c:	2100      	movs	r1, #0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fe9a 	bl	8006448 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005714:	f000 fa18 	bl	8005b48 <xTaskResumeAll>
 8005718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <vTaskDelay+0x68>)
 8005722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000e0c 	.word	0x20000e0c
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005748:	f001 fb38 	bl	8006dbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <vTaskSuspend+0x18>
 8005752:	4b31      	ldr	r3, [pc, #196]	; (8005818 <vTaskSuspend+0xd8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	e000      	b.n	800575a <vTaskSuspend+0x1a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3304      	adds	r3, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff f84f 	bl	8004804 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3318      	adds	r3, #24
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff f846 	bl	8004804 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4827      	ldr	r0, [pc, #156]	; (800581c <vTaskSuspend+0xdc>)
 8005780:	f7fe ffe3 	bl	800474a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d103      	bne.n	8005798 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005798:	f001 fb44 	bl	8006e24 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800579c:	4b20      	ldr	r3, [pc, #128]	; (8005820 <vTaskSuspend+0xe0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80057a4:	f001 fb0a 	bl	8006dbc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80057a8:	f000 fd9e 	bl	80062e8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80057ac:	f001 fb3a 	bl	8006e24 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <vTaskSuspend+0xd8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d129      	bne.n	800580e <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 80057ba:	4b19      	ldr	r3, [pc, #100]	; (8005820 <vTaskSuspend+0xe0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d019      	beq.n	80057f6 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80057c2:	4b18      	ldr	r3, [pc, #96]	; (8005824 <vTaskSuspend+0xe4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <vTaskSuspend+0xa4>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	b672      	cpsid	i
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	b662      	cpsie	i
 80057de:	60bb      	str	r3, [r7, #8]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 80057e4:	4b10      	ldr	r3, [pc, #64]	; (8005828 <vTaskSuspend+0xe8>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057f4:	e00b      	b.n	800580e <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <vTaskSuspend+0xdc>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <vTaskSuspend+0xec>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d103      	bne.n	800580a <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <vTaskSuspend+0xd8>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
	}
 8005808:	e001      	b.n	800580e <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800580a:	f000 fb09 	bl	8005e20 <vTaskSwitchContext>
	}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000910 	.word	0x20000910
 800581c:	20000dd0 	.word	0x20000dd0
 8005820:	20000df0 	.word	0x20000df0
 8005824:	20000e0c 	.word	0x20000e0c
 8005828:	e000ed04 	.word	0xe000ed04
 800582c:	20000de4 	.word	0x20000de4

08005830 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10c      	bne.n	8005860 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	b672      	cpsid	i
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	b662      	cpsie	i
 800585a:	60fb      	str	r3, [r7, #12]
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <prvTaskIsTaskSuspended+0x60>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d10a      	bne.n	8005880 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <prvTaskIsTaskSuspended+0x64>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d005      	beq.n	8005880 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005880:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000dd0 	.word	0x20000dd0
 8005894:	20000da4 	.word	0x20000da4

08005898 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10c      	bne.n	80058c4 <vTaskResume+0x2c>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	b672      	cpsid	i
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	b662      	cpsie	i
 80058be:	60bb      	str	r3, [r7, #8]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80058c4:	4b20      	ldr	r3, [pc, #128]	; (8005948 <vTaskResume+0xb0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d038      	beq.n	8005940 <vTaskResume+0xa8>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d035      	beq.n	8005940 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 80058d4:	f001 fa72 	bl	8006dbc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff ffa9 	bl	8005830 <prvTaskIsTaskSuspended>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02b      	beq.n	800593c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe ff8b 	bl	8004804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	4b16      	ldr	r3, [pc, #88]	; (800594c <vTaskResume+0xb4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d903      	bls.n	8005902 <vTaskResume+0x6a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a13      	ldr	r2, [pc, #76]	; (800594c <vTaskResume+0xb4>)
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4a10      	ldr	r2, [pc, #64]	; (8005950 <vTaskResume+0xb8>)
 8005910:	441a      	add	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7fe ff16 	bl	800474a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <vTaskResume+0xb0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	429a      	cmp	r2, r3
 800592a:	d307      	bcc.n	800593c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <vTaskResume+0xbc>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800593c:	f001 fa72 	bl	8006e24 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000910 	.word	0x20000910
 800594c:	20000dec 	.word	0x20000dec
 8005950:	20000914 	.word	0x20000914
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	; 0x28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10c      	bne.n	8005988 <xTaskResumeFromISR+0x30>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	b672      	cpsid	i
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	b662      	cpsie	i
 8005982:	61bb      	str	r3, [r7, #24]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005988:	f001 fb00 	bl	8006f8c <vPortValidateInterruptPriority>
	__asm volatile
 800598c:	f3ef 8211 	mrs	r2, BASEPRI
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	b672      	cpsid	i
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	b662      	cpsie	i
 80059a4:	617a      	str	r2, [r7, #20]
 80059a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80059a8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059aa:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80059ac:	6a38      	ldr	r0, [r7, #32]
 80059ae:	f7ff ff3f 	bl	8005830 <prvTaskIsTaskSuspended>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d030      	beq.n	8005a1a <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <xTaskResumeFromISR+0xd8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d126      	bne.n	8005a0e <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <xTaskResumeFromISR+0xdc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d301      	bcc.n	80059d2 <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe ff14 	bl	8004804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <xTaskResumeFromISR+0xe0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d903      	bls.n	80059f0 <xTaskResumeFromISR+0x98>
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <xTaskResumeFromISR+0xe0>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <xTaskResumeFromISR+0xe4>)
 80059fe:	441a      	add	r2, r3
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7fe fe9f 	bl	800474a <vListInsertEnd>
 8005a0c:	e005      	b.n	8005a1a <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4619      	mov	r1, r3
 8005a14:	480a      	ldr	r0, [pc, #40]	; (8005a40 <xTaskResumeFromISR+0xe8>)
 8005a16:	f7fe fe98 	bl	800474a <vListInsertEnd>
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f383 8811 	msr	BASEPRI, r3
}
 8005a24:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	; 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000e0c 	.word	0x20000e0c
 8005a34:	20000910 	.word	0x20000910
 8005a38:	20000dec 	.word	0x20000dec
 8005a3c:	20000914 	.word	0x20000914
 8005a40:	20000da4 	.word	0x20000da4

08005a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a52:	463a      	mov	r2, r7
 8005a54:	1d39      	adds	r1, r7, #4
 8005a56:	f107 0308 	add.w	r3, r7, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fe14 	bl	8004688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	9202      	str	r2, [sp, #8]
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	460a      	mov	r2, r1
 8005a72:	4926      	ldr	r1, [pc, #152]	; (8005b0c <vTaskStartScheduler+0xc8>)
 8005a74:	4826      	ldr	r0, [pc, #152]	; (8005b10 <vTaskStartScheduler+0xcc>)
 8005a76:	f7ff fbf9 	bl	800526c <xTaskCreateStatic>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <vTaskStartScheduler+0xd0>)
 8005a7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a80:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <vTaskStartScheduler+0xd0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e001      	b.n	8005a92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d102      	bne.n	8005a9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a98:	f000 fd2a 	bl	80064f0 <xTimerCreateTimerTask>
 8005a9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d11d      	bne.n	8005ae0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	b672      	cpsid	i
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	b662      	cpsie	i
 8005ab8:	613b      	str	r3, [r7, #16]
}
 8005aba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <vTaskStartScheduler+0xd4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3354      	adds	r3, #84	; 0x54
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <vTaskStartScheduler+0xd8>)
 8005ac4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <vTaskStartScheduler+0xdc>)
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8005acc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <vTaskStartScheduler+0xe0>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ad4:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <vTaskStartScheduler+0xe4>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ada:	f001 f8f1 	bl	8006cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ade:	e010      	b.n	8005b02 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d10c      	bne.n	8005b02 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	b672      	cpsid	i
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	b662      	cpsie	i
 8005afc:	60fb      	str	r3, [r7, #12]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <vTaskStartScheduler+0xbc>
}
 8005b02:	bf00      	nop
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08007630 	.word	0x08007630
 8005b10:	08006171 	.word	0x08006171
 8005b14:	20000e08 	.word	0x20000e08
 8005b18:	20000910 	.word	0x20000910
 8005b1c:	2000005c 	.word	0x2000005c
 8005b20:	20000e04 	.word	0x20000e04
 8005b24:	20000df0 	.word	0x20000df0
 8005b28:	20000de8 	.word	0x20000de8

08005b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	20000e0c 	.word	0x20000e0c

08005b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b56:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10c      	bne.n	8005b78 <xTaskResumeAll+0x30>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	b672      	cpsid	i
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	b662      	cpsie	i
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b78:	f001 f920 	bl	8006dbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005b84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <xTaskResumeAll+0x11c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d162      	bne.n	8005c54 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <xTaskResumeAll+0x120>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05e      	beq.n	8005c54 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b96:	e02f      	b.n	8005bf8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <xTaskResumeAll+0x124>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fe2d 	bl	8004804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fe28 	bl	8004804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <xTaskResumeAll+0x128>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d903      	bls.n	8005bc8 <xTaskResumeAll+0x80>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <xTaskResumeAll+0x128>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <xTaskResumeAll+0x12c>)
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe fdb3 	bl	800474a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <xTaskResumeAll+0x130>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <xTaskResumeAll+0x134>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <xTaskResumeAll+0x124>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1cb      	bne.n	8005b98 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c06:	f000 fb6f 	bl	80062e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <xTaskResumeAll+0x138>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c16:	f000 f847 	bl	8005ca8 <xTaskIncrementTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <xTaskResumeAll+0x134>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f1      	bne.n	8005c16 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <xTaskResumeAll+0x138>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <xTaskResumeAll+0x134>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <xTaskResumeAll+0x13c>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c54:	f001 f8e6 	bl	8006e24 <vPortExitCritical>

	return xAlreadyYielded;
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000e0c 	.word	0x20000e0c
 8005c68:	20000de4 	.word	0x20000de4
 8005c6c:	20000da4 	.word	0x20000da4
 8005c70:	20000dec 	.word	0x20000dec
 8005c74:	20000914 	.word	0x20000914
 8005c78:	20000910 	.word	0x20000910
 8005c7c:	20000df8 	.word	0x20000df8
 8005c80:	20000df4 	.word	0x20000df4
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <xTaskGetTickCount+0x1c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c94:	687b      	ldr	r3, [r7, #4]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000de8 	.word	0x20000de8

08005ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb2:	4b50      	ldr	r3, [pc, #320]	; (8005df4 <xTaskIncrementTick+0x14c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 808b 	bne.w	8005dd2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cbc:	4b4e      	ldr	r3, [pc, #312]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cc4:	4a4c      	ldr	r2, [pc, #304]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d122      	bne.n	8005d16 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cd0:	4b4a      	ldr	r3, [pc, #296]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00c      	beq.n	8005cf4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	b672      	cpsid	i
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	b662      	cpsie	i
 8005cee:	603b      	str	r3, [r7, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <xTaskIncrementTick+0x4a>
 8005cf4:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4b41      	ldr	r3, [pc, #260]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4a3f      	ldr	r2, [pc, #252]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4b3e      	ldr	r3, [pc, #248]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	4a3d      	ldr	r2, [pc, #244]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	f000 fae9 	bl	80062e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d16:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d349      	bcc.n	8005db4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d20:	4b36      	ldr	r3, [pc, #216]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2a:	4b37      	ldr	r3, [pc, #220]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	601a      	str	r2, [r3, #0]
					break;
 8005d32:	e03f      	b.n	8005db4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d34:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d203      	bcs.n	8005d54 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d4c:	4a2e      	ldr	r2, [pc, #184]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d52:	e02f      	b.n	8005db4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe fd53 	bl	8004804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	3318      	adds	r3, #24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fd4a 	bl	8004804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d74:	4b25      	ldr	r3, [pc, #148]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d903      	bls.n	8005d84 <xTaskIncrementTick+0xdc>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005d92:	441a      	add	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fe fcd5 	bl	800474a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <xTaskIncrementTick+0x16c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d3b8      	bcc.n	8005d20 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005db2:	e7b5      	b.n	8005d20 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005db4:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <xTaskIncrementTick+0x16c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	4915      	ldr	r1, [pc, #84]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d907      	bls.n	8005ddc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e004      	b.n	8005ddc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dd2:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	4a0f      	ldr	r2, [pc, #60]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005dda:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <xTaskIncrementTick+0x174>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005de8:	697b      	ldr	r3, [r7, #20]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000e0c 	.word	0x20000e0c
 8005df8:	20000de8 	.word	0x20000de8
 8005dfc:	20000d9c 	.word	0x20000d9c
 8005e00:	20000da0 	.word	0x20000da0
 8005e04:	20000dfc 	.word	0x20000dfc
 8005e08:	20000e04 	.word	0x20000e04
 8005e0c:	20000dec 	.word	0x20000dec
 8005e10:	20000914 	.word	0x20000914
 8005e14:	20000910 	.word	0x20000910
 8005e18:	20000df4 	.word	0x20000df4
 8005e1c:	20000df8 	.word	0x20000df8

08005e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <vTaskSwitchContext+0xb4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <vTaskSwitchContext+0xb8>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e34:	e048      	b.n	8005ec8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005e36:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <vTaskSwitchContext+0xb8>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e3c:	4b27      	ldr	r3, [pc, #156]	; (8005edc <vTaskSwitchContext+0xbc>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	e012      	b.n	8005e6a <vTaskSwitchContext+0x4a>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10c      	bne.n	8005e64 <vTaskSwitchContext+0x44>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	b672      	cpsid	i
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	b662      	cpsie	i
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <vTaskSwitchContext+0x42>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	491d      	ldr	r1, [pc, #116]	; (8005ee0 <vTaskSwitchContext+0xc0>)
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0e2      	beq.n	8005e44 <vTaskSwitchContext+0x24>
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <vTaskSwitchContext+0xc0>)
 8005e8a:	4413      	add	r3, r2
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d104      	bne.n	8005eae <vTaskSwitchContext+0x8e>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <vTaskSwitchContext+0xc4>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	4a08      	ldr	r2, [pc, #32]	; (8005edc <vTaskSwitchContext+0xbc>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <vTaskSwitchContext+0xc4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3354      	adds	r3, #84	; 0x54
 8005ec4:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <vTaskSwitchContext+0xc8>)
 8005ec6:	6013      	str	r3, [r2, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000e0c 	.word	0x20000e0c
 8005ed8:	20000df8 	.word	0x20000df8
 8005edc:	20000dec 	.word	0x20000dec
 8005ee0:	20000914 	.word	0x20000914
 8005ee4:	20000910 	.word	0x20000910
 8005ee8:	2000005c 	.word	0x2000005c

08005eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10c      	bne.n	8005f16 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	b672      	cpsid	i
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	b662      	cpsie	i
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <vTaskPlaceOnEventList+0x48>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fe fc37 	bl	8004792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f24:	2101      	movs	r1, #1
 8005f26:	6838      	ldr	r0, [r7, #0]
 8005f28:	f000 fa8e 	bl	8006448 <prvAddCurrentTaskToDelayedList>
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000910 	.word	0x20000910

08005f38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10c      	bne.n	8005f64 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	b672      	cpsid	i
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	b662      	cpsie	i
 8005f5e:	617b      	str	r3, [r7, #20]
}
 8005f60:	bf00      	nop
 8005f62:	e7fe      	b.n	8005f62 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <vTaskPlaceOnEventListRestricted+0x58>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3318      	adds	r3, #24
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7fe fbec 	bl	800474a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	68b8      	ldr	r0, [r7, #8]
 8005f82:	f000 fa61 	bl	8006448 <prvAddCurrentTaskToDelayedList>
	}
 8005f86:	bf00      	nop
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000910 	.word	0x20000910

08005f94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10c      	bne.n	8005fc4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	b672      	cpsid	i
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	b662      	cpsie	i
 8005fbe:	60fb      	str	r3, [r7, #12]
}
 8005fc0:	bf00      	nop
 8005fc2:	e7fe      	b.n	8005fc2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fc1b 	bl	8004804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fce:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <xTaskRemoveFromEventList+0xb4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11d      	bne.n	8006012 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fc12 	bl	8004804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <xTaskRemoveFromEventList+0xb8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d903      	bls.n	8005ff4 <xTaskRemoveFromEventList+0x60>
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	4a16      	ldr	r2, [pc, #88]	; (800604c <xTaskRemoveFromEventList+0xb8>)
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <xTaskRemoveFromEventList+0xbc>)
 8006002:	441a      	add	r2, r3
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4610      	mov	r0, r2
 800600c:	f7fe fb9d 	bl	800474a <vListInsertEnd>
 8006010:	e005      	b.n	800601e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3318      	adds	r3, #24
 8006016:	4619      	mov	r1, r3
 8006018:	480e      	ldr	r0, [pc, #56]	; (8006054 <xTaskRemoveFromEventList+0xc0>)
 800601a:	f7fe fb96 	bl	800474a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006022:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <xTaskRemoveFromEventList+0xc4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	429a      	cmp	r2, r3
 800602a:	d905      	bls.n	8006038 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800602c:	2301      	movs	r3, #1
 800602e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <xTaskRemoveFromEventList+0xc8>)
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e001      	b.n	800603c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800603c:	697b      	ldr	r3, [r7, #20]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000e0c 	.word	0x20000e0c
 800604c:	20000dec 	.word	0x20000dec
 8006050:	20000914 	.word	0x20000914
 8006054:	20000da4 	.word	0x20000da4
 8006058:	20000910 	.word	0x20000910
 800605c:	20000df8 	.word	0x20000df8

08006060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <vTaskInternalSetTimeOutState+0x24>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <vTaskInternalSetTimeOutState+0x28>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	605a      	str	r2, [r3, #4]
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	20000dfc 	.word	0x20000dfc
 8006088:	20000de8 	.word	0x20000de8

0800608c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10c      	bne.n	80060b6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	b672      	cpsid	i
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	b662      	cpsie	i
 80060b0:	613b      	str	r3, [r7, #16]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10c      	bne.n	80060d6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	b672      	cpsid	i
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	b662      	cpsie	i
 80060d0:	60fb      	str	r3, [r7, #12]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80060d6:	f000 fe71 	bl	8006dbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <xTaskCheckForTimeOut+0xc4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d102      	bne.n	80060fa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e023      	b.n	8006142 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <xTaskCheckForTimeOut+0xc8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d007      	beq.n	8006116 <xTaskCheckForTimeOut+0x8a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e015      	b.n	8006142 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d20b      	bcs.n	8006138 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad2      	subs	r2, r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff97 	bl	8006060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	e004      	b.n	8006142 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800613e:	2301      	movs	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006142:	f000 fe6f 	bl	8006e24 <vPortExitCritical>

	return xReturn;
 8006146:	69fb      	ldr	r3, [r7, #28]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000de8 	.word	0x20000de8
 8006154:	20000dfc 	.word	0x20000dfc

08006158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <vTaskMissedYield+0x14>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	20000df8 	.word	0x20000df8

08006170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006178:	f000 f852 	bl	8006220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <prvIdleTask+0x28>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d9f9      	bls.n	8006178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <prvIdleTask+0x2c>)
 8006186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006194:	e7f0      	b.n	8006178 <prvIdleTask+0x8>
 8006196:	bf00      	nop
 8006198:	20000914 	.word	0x20000914
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	e00c      	b.n	80061c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4a12      	ldr	r2, [pc, #72]	; (8006200 <prvInitialiseTaskLists+0x60>)
 80061b8:	4413      	add	r3, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe fa98 	bl	80046f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3301      	adds	r3, #1
 80061c4:	607b      	str	r3, [r7, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b37      	cmp	r3, #55	; 0x37
 80061ca:	d9ef      	bls.n	80061ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061cc:	480d      	ldr	r0, [pc, #52]	; (8006204 <prvInitialiseTaskLists+0x64>)
 80061ce:	f7fe fa8f 	bl	80046f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061d2:	480d      	ldr	r0, [pc, #52]	; (8006208 <prvInitialiseTaskLists+0x68>)
 80061d4:	f7fe fa8c 	bl	80046f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061d8:	480c      	ldr	r0, [pc, #48]	; (800620c <prvInitialiseTaskLists+0x6c>)
 80061da:	f7fe fa89 	bl	80046f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061de:	480c      	ldr	r0, [pc, #48]	; (8006210 <prvInitialiseTaskLists+0x70>)
 80061e0:	f7fe fa86 	bl	80046f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061e4:	480b      	ldr	r0, [pc, #44]	; (8006214 <prvInitialiseTaskLists+0x74>)
 80061e6:	f7fe fa83 	bl	80046f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ea:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <prvInitialiseTaskLists+0x78>)
 80061ec:	4a05      	ldr	r2, [pc, #20]	; (8006204 <prvInitialiseTaskLists+0x64>)
 80061ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <prvInitialiseTaskLists+0x7c>)
 80061f2:	4a05      	ldr	r2, [pc, #20]	; (8006208 <prvInitialiseTaskLists+0x68>)
 80061f4:	601a      	str	r2, [r3, #0]
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000914 	.word	0x20000914
 8006204:	20000d74 	.word	0x20000d74
 8006208:	20000d88 	.word	0x20000d88
 800620c:	20000da4 	.word	0x20000da4
 8006210:	20000db8 	.word	0x20000db8
 8006214:	20000dd0 	.word	0x20000dd0
 8006218:	20000d9c 	.word	0x20000d9c
 800621c:	20000da0 	.word	0x20000da0

08006220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006226:	e019      	b.n	800625c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006228:	f000 fdc8 	bl	8006dbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622c:	4b10      	ldr	r3, [pc, #64]	; (8006270 <prvCheckTasksWaitingTermination+0x50>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fae3 	bl	8004804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <prvCheckTasksWaitingTermination+0x54>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	4a0b      	ldr	r2, [pc, #44]	; (8006274 <prvCheckTasksWaitingTermination+0x54>)
 8006246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <prvCheckTasksWaitingTermination+0x58>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	4a0a      	ldr	r2, [pc, #40]	; (8006278 <prvCheckTasksWaitingTermination+0x58>)
 8006250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006252:	f000 fde7 	bl	8006e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f810 	bl	800627c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <prvCheckTasksWaitingTermination+0x58>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e1      	bne.n	8006228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000db8 	.word	0x20000db8
 8006274:	20000de4 	.word	0x20000de4
 8006278:	20000dcc 	.word	0x20000dcc

0800627c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3354      	adds	r3, #84	; 0x54
 8006288:	4618      	mov	r0, r3
 800628a:	f001 f8af 	bl	80073ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006294:	2b00      	cmp	r3, #0
 8006296:	d108      	bne.n	80062aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	4618      	mov	r0, r3
 800629e:	f000 ff83 	bl	80071a8 <vPortFree>
				vPortFree( pxTCB );
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 ff80 	bl	80071a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062a8:	e01a      	b.n	80062e0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d103      	bne.n	80062bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 ff77 	bl	80071a8 <vPortFree>
	}
 80062ba:	e011      	b.n	80062e0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d00c      	beq.n	80062e0 <prvDeleteTCB+0x64>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	b672      	cpsid	i
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	b662      	cpsie	i
 80062da:	60fb      	str	r3, [r7, #12]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <prvDeleteTCB+0x62>
	}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <prvResetNextTaskUnblockTime+0x38>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <prvResetNextTaskUnblockTime+0x3c>)
 80062fa:	f04f 32ff 	mov.w	r2, #4294967295
 80062fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006300:	e008      	b.n	8006314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <prvResetNextTaskUnblockTime+0x38>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4a04      	ldr	r2, [pc, #16]	; (8006324 <prvResetNextTaskUnblockTime+0x3c>)
 8006312:	6013      	str	r3, [r2, #0]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000d9c 	.word	0x20000d9c
 8006324:	20000e04 	.word	0x20000e04

08006328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <xTaskGetSchedulerState+0x34>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006336:	2301      	movs	r3, #1
 8006338:	607b      	str	r3, [r7, #4]
 800633a:	e008      	b.n	800634e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633c:	4b08      	ldr	r3, [pc, #32]	; (8006360 <xTaskGetSchedulerState+0x38>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006344:	2302      	movs	r3, #2
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	e001      	b.n	800634e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800634a:	2300      	movs	r3, #0
 800634c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800634e:	687b      	ldr	r3, [r7, #4]
	}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	20000df0 	.word	0x20000df0
 8006360:	20000e0c 	.word	0x20000e0c

08006364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d05a      	beq.n	8006430 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800637a:	4b30      	ldr	r3, [pc, #192]	; (800643c <xTaskPriorityDisinherit+0xd8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	429a      	cmp	r2, r3
 8006382:	d00c      	beq.n	800639e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	b672      	cpsid	i
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	b662      	cpsie	i
 8006398:	60fb      	str	r3, [r7, #12]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10c      	bne.n	80063c0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	b672      	cpsid	i
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	b662      	cpsie	i
 80063ba:	60bb      	str	r3, [r7, #8]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	1e5a      	subs	r2, r3, #1
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d02c      	beq.n	8006430 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d128      	bne.n	8006430 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fa0e 	bl	8004804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <xTaskPriorityDisinherit+0xdc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d903      	bls.n	8006410 <xTaskPriorityDisinherit+0xac>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4a0c      	ldr	r2, [pc, #48]	; (8006440 <xTaskPriorityDisinherit+0xdc>)
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4a09      	ldr	r2, [pc, #36]	; (8006444 <xTaskPriorityDisinherit+0xe0>)
 800641e:	441a      	add	r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7fe f98f 	bl	800474a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006430:	697b      	ldr	r3, [r7, #20]
	}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000910 	.word	0x20000910
 8006440:	20000dec 	.word	0x20000dec
 8006444:	20000914 	.word	0x20000914

08006448 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006452:	4b21      	ldr	r3, [pc, #132]	; (80064d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006458:	4b20      	ldr	r3, [pc, #128]	; (80064dc <prvAddCurrentTaskToDelayedList+0x94>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3304      	adds	r3, #4
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe f9d0 	bl	8004804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d10a      	bne.n	8006482 <prvAddCurrentTaskToDelayedList+0x3a>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006472:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3304      	adds	r3, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4819      	ldr	r0, [pc, #100]	; (80064e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800647c:	f7fe f965 	bl	800474a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006480:	e026      	b.n	80064d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <prvAddCurrentTaskToDelayedList+0x94>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	429a      	cmp	r2, r3
 8006498:	d209      	bcs.n	80064ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <prvAddCurrentTaskToDelayedList+0x94>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f7fe f973 	bl	8004792 <vListInsert>
}
 80064ac:	e010      	b.n	80064d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ae:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <prvAddCurrentTaskToDelayedList+0x94>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7fe f969 	bl	8004792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d202      	bcs.n	80064d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064ca:	4a08      	ldr	r2, [pc, #32]	; (80064ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6013      	str	r3, [r2, #0]
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000de8 	.word	0x20000de8
 80064dc:	20000910 	.word	0x20000910
 80064e0:	20000dd0 	.word	0x20000dd0
 80064e4:	20000da0 	.word	0x20000da0
 80064e8:	20000d9c 	.word	0x20000d9c
 80064ec:	20000e04 	.word	0x20000e04

080064f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064fa:	f000 fb15 	bl	8006b28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064fe:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <xTimerCreateTimerTask+0x84>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d021      	beq.n	800654a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800650e:	1d3a      	adds	r2, r7, #4
 8006510:	f107 0108 	add.w	r1, r7, #8
 8006514:	f107 030c 	add.w	r3, r7, #12
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe f8cf 	bl	80046bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	9202      	str	r2, [sp, #8]
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	2302      	movs	r3, #2
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	2300      	movs	r3, #0
 800652e:	460a      	mov	r2, r1
 8006530:	4911      	ldr	r1, [pc, #68]	; (8006578 <xTimerCreateTimerTask+0x88>)
 8006532:	4812      	ldr	r0, [pc, #72]	; (800657c <xTimerCreateTimerTask+0x8c>)
 8006534:	f7fe fe9a 	bl	800526c <xTaskCreateStatic>
 8006538:	4603      	mov	r3, r0
 800653a:	4a11      	ldr	r2, [pc, #68]	; (8006580 <xTimerCreateTimerTask+0x90>)
 800653c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <xTimerCreateTimerTask+0x90>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006546:	2301      	movs	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10c      	bne.n	800656a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	b672      	cpsid	i
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	b662      	cpsie	i
 8006564:	613b      	str	r3, [r7, #16]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800656a:	697b      	ldr	r3, [r7, #20]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20000e40 	.word	0x20000e40
 8006578:	08007638 	.word	0x08007638
 800657c:	080066c1 	.word	0x080066c1
 8006580:	20000e44 	.word	0x20000e44

08006584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006592:	2300      	movs	r3, #0
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10c      	bne.n	80065b6 <xTimerGenericCommand+0x32>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	b672      	cpsid	i
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	b662      	cpsie	i
 80065b0:	623b      	str	r3, [r7, #32]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065b6:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <xTimerGenericCommand+0x9c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d02a      	beq.n	8006614 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b05      	cmp	r3, #5
 80065ce:	dc18      	bgt.n	8006602 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065d0:	f7ff feaa 	bl	8006328 <xTaskGetSchedulerState>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d109      	bne.n	80065ee <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <xTimerGenericCommand+0x9c>)
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f107 0110 	add.w	r1, r7, #16
 80065e2:	2300      	movs	r3, #0
 80065e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e6:	f7fe fa47 	bl	8004a78 <xQueueGenericSend>
 80065ea:	6278      	str	r0, [r7, #36]	; 0x24
 80065ec:	e012      	b.n	8006614 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065ee:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <xTimerGenericCommand+0x9c>)
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	f107 0110 	add.w	r1, r7, #16
 80065f6:	2300      	movs	r3, #0
 80065f8:	2200      	movs	r2, #0
 80065fa:	f7fe fa3d 	bl	8004a78 <xQueueGenericSend>
 80065fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006600:	e008      	b.n	8006614 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <xTimerGenericCommand+0x9c>)
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f107 0110 	add.w	r1, r7, #16
 800660a:	2300      	movs	r3, #0
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	f7fe fb39 	bl	8004c84 <xQueueGenericSendFromISR>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006616:	4618      	mov	r0, r3
 8006618:	3728      	adds	r7, #40	; 0x28
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000e40 	.word	0x20000e40

08006624 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af02      	add	r7, sp, #8
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662e:	4b23      	ldr	r3, [pc, #140]	; (80066bc <prvProcessExpiredTimer+0x98>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3304      	adds	r3, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe f8e1 	bl	8004804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d024      	beq.n	800669a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	699a      	ldr	r2, [r3, #24]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	18d1      	adds	r1, r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f000 f8d3 	bl	8006808 <prvInsertTimerInActiveList>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d021      	beq.n	80066ac <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	2100      	movs	r1, #0
 8006672:	6978      	ldr	r0, [r7, #20]
 8006674:	f7ff ff86 	bl	8006584 <xTimerGenericCommand>
 8006678:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d115      	bne.n	80066ac <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	b672      	cpsid	i
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	b662      	cpsie	i
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	6978      	ldr	r0, [r7, #20]
 80066b2:	4798      	blx	r3
}
 80066b4:	bf00      	nop
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000e38 	.word	0x20000e38

080066c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f857 	bl	8006780 <prvGetNextExpireTime>
 80066d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4619      	mov	r1, r3
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f803 	bl	80066e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066de:	f000 f8d5 	bl	800688c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066e2:	e7f1      	b.n	80066c8 <prvTimerTask+0x8>

080066e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066ee:	f7ff fa1d 	bl	8005b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066f2:	f107 0308 	add.w	r3, r7, #8
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f866 	bl	80067c8 <prvSampleTimeNow>
 80066fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d130      	bne.n	8006766 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <prvProcessTimerOrBlockTask+0x3c>
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	429a      	cmp	r2, r3
 8006710:	d806      	bhi.n	8006720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006712:	f7ff fa19 	bl	8005b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ff83 	bl	8006624 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800671e:	e024      	b.n	800676a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d008      	beq.n	8006738 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006726:	4b13      	ldr	r3, [pc, #76]	; (8006774 <prvProcessTimerOrBlockTask+0x90>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <prvProcessTimerOrBlockTask+0x50>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <prvProcessTimerOrBlockTask+0x52>
 8006734:	2300      	movs	r3, #0
 8006736:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006738:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <prvProcessTimerOrBlockTask+0x94>)
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	f7fe fd5d 	bl	8005204 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800674a:	f7ff f9fd 	bl	8005b48 <xTaskResumeAll>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006754:	4b09      	ldr	r3, [pc, #36]	; (800677c <prvProcessTimerOrBlockTask+0x98>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
}
 8006764:	e001      	b.n	800676a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006766:	f7ff f9ef 	bl	8005b48 <xTaskResumeAll>
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000e3c 	.word	0x20000e3c
 8006778:	20000e40 	.word	0x20000e40
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006788:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <prvGetNextExpireTime+0x44>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <prvGetNextExpireTime+0x16>
 8006792:	2201      	movs	r2, #1
 8006794:	e000      	b.n	8006798 <prvGetNextExpireTime+0x18>
 8006796:	2200      	movs	r2, #0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067a4:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <prvGetNextExpireTime+0x44>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e001      	b.n	80067b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000e38 	.word	0x20000e38

080067c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067d0:	f7ff fa5a 	bl	8005c88 <xTaskGetTickCount>
 80067d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067d6:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <prvSampleTimeNow+0x3c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d205      	bcs.n	80067ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067e0:	f000 f93c 	bl	8006a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e002      	b.n	80067f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067f2:	4a04      	ldr	r2, [pc, #16]	; (8006804 <prvSampleTimeNow+0x3c>)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067f8:	68fb      	ldr	r3, [r7, #12]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000e48 	.word	0x20000e48

08006808 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	429a      	cmp	r2, r3
 800682c:	d812      	bhi.n	8006854 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	1ad2      	subs	r2, r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	429a      	cmp	r2, r3
 800683a:	d302      	bcc.n	8006842 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	e01b      	b.n	800687a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <prvInsertTimerInActiveList+0x7c>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3304      	adds	r3, #4
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f7fd ffa0 	bl	8004792 <vListInsert>
 8006852:	e012      	b.n	800687a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d206      	bcs.n	800686a <prvInsertTimerInActiveList+0x62>
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d302      	bcc.n	800686a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e007      	b.n	800687a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <prvInsertTimerInActiveList+0x80>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7fd ff8c 	bl	8004792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800687a:	697b      	ldr	r3, [r7, #20]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000e3c 	.word	0x20000e3c
 8006888:	20000e38 	.word	0x20000e38

0800688c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006892:	e0d0      	b.n	8006a36 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	da1a      	bge.n	80068d0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	3304      	adds	r3, #4
 800689e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	b672      	cpsid	i
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	b662      	cpsie	i
 80068ba:	61fb      	str	r3, [r7, #28]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c6:	6850      	ldr	r0, [r2, #4]
 80068c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ca:	6892      	ldr	r2, [r2, #8]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f2c0 80af 	blt.w	8006a36 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	3304      	adds	r3, #4
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fd ff8b 	bl	8004804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068ee:	463b      	mov	r3, r7
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff ff69 	bl	80067c8 <prvSampleTimeNow>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b09      	cmp	r3, #9
 80068fc:	f200 809a 	bhi.w	8006a34 <prvProcessReceivedCommands+0x1a8>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <prvProcessReceivedCommands+0x7c>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	08006931 	.word	0x08006931
 800690c:	08006931 	.word	0x08006931
 8006910:	08006931 	.word	0x08006931
 8006914:	080069a9 	.word	0x080069a9
 8006918:	080069bd 	.word	0x080069bd
 800691c:	08006a0b 	.word	0x08006a0b
 8006920:	08006931 	.word	0x08006931
 8006924:	08006931 	.word	0x08006931
 8006928:	080069a9 	.word	0x080069a9
 800692c:	080069bd 	.word	0x080069bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	18d1      	adds	r1, r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006950:	f7ff ff5a 	bl	8006808 <prvInsertTimerInActiveList>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d06d      	beq.n	8006a36 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d062      	beq.n	8006a36 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	441a      	add	r2, r3
 8006978:	2300      	movs	r3, #0
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	2300      	movs	r3, #0
 800697e:	2100      	movs	r1, #0
 8006980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006982:	f7ff fdff 	bl	8006584 <xTimerGenericCommand>
 8006986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d153      	bne.n	8006a36 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	b672      	cpsid	i
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	b662      	cpsie	i
 80069a2:	61bb      	str	r3, [r7, #24]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80069ba:	e03c      	b.n	8006a36 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	b672      	cpsid	i
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	b662      	cpsie	i
 80069f0:	617b      	str	r3, [r7, #20]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	18d1      	adds	r1, r2, r3
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a04:	f7ff ff00 	bl	8006808 <prvInsertTimerInActiveList>
					break;
 8006a08:	e015      	b.n	8006a36 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d103      	bne.n	8006a20 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1a:	f000 fbc5 	bl	80071a8 <vPortFree>
 8006a1e:	e00a      	b.n	8006a36 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a32:	e000      	b.n	8006a36 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8006a34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <prvProcessReceivedCommands+0x1cc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	1d39      	adds	r1, r7, #4
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe f9c0 	bl	8004dc4 <xQueueReceive>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f47f af24 	bne.w	8006894 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	3730      	adds	r7, #48	; 0x30
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000e40 	.word	0x20000e40

08006a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a62:	e04a      	b.n	8006afa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a64:	4b2e      	ldr	r3, [pc, #184]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6e:	4b2c      	ldr	r3, [pc, #176]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fd fec1 	bl	8004804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d030      	beq.n	8006afa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d90e      	bls.n	8006ac8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	f7fd fe66 	bl	8004792 <vListInsert>
 8006ac6:	e018      	b.n	8006afa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2300      	movs	r3, #0
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fd56 	bl	8006584 <xTimerGenericCommand>
 8006ad8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10c      	bne.n	8006afa <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	b672      	cpsid	i
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	b662      	cpsie	i
 8006af4:	603b      	str	r3, [r7, #0]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1af      	bne.n	8006a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <prvSwitchTimerLists+0xc8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006b10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b12:	4a04      	ldr	r2, [pc, #16]	; (8006b24 <prvSwitchTimerLists+0xc8>)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000e38 	.word	0x20000e38
 8006b24:	20000e3c 	.word	0x20000e3c

08006b28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b2e:	f000 f945 	bl	8006dbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d120      	bne.n	8006b7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b3a:	4814      	ldr	r0, [pc, #80]	; (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b3c:	f7fd fdd8 	bl	80046f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b40:	4813      	ldr	r0, [pc, #76]	; (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b42:	f7fd fdd5 	bl	80046f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <prvCheckForValidListAndQueue+0x6c>)
 8006b48:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b4c:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <prvCheckForValidListAndQueue+0x70>)
 8006b4e:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b52:	2300      	movs	r3, #0
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <prvCheckForValidListAndQueue+0x74>)
 8006b58:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <prvCheckForValidListAndQueue+0x78>)
 8006b5a:	2110      	movs	r1, #16
 8006b5c:	200a      	movs	r0, #10
 8006b5e:	f7fd fee5 	bl	800492c <xQueueGenericCreateStatic>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b68:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	490b      	ldr	r1, [pc, #44]	; (8006ba4 <prvCheckForValidListAndQueue+0x7c>)
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fb1a 	bl	80051b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b7c:	f000 f952 	bl	8006e24 <vPortExitCritical>
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000e40 	.word	0x20000e40
 8006b8c:	20000e10 	.word	0x20000e10
 8006b90:	20000e24 	.word	0x20000e24
 8006b94:	20000e38 	.word	0x20000e38
 8006b98:	20000e3c 	.word	0x20000e3c
 8006b9c:	20000eec 	.word	0x20000eec
 8006ba0:	20000e4c 	.word	0x20000e4c
 8006ba4:	08007640 	.word	0x08007640

08006ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bd8:	4a0c      	ldr	r2, [pc, #48]	; (8006c0c <pxPortInitialiseStack+0x64>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b14      	subs	r3, #20
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b04      	subs	r3, #4
 8006bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f06f 0202 	mvn.w	r2, #2
 8006bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3b20      	subs	r3, #32
 8006bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	08006c11 	.word	0x08006c11

08006c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c1a:	4b14      	ldr	r3, [pc, #80]	; (8006c6c <prvTaskExitError+0x5c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d00c      	beq.n	8006c3e <prvTaskExitError+0x2e>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	b672      	cpsid	i
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	b662      	cpsie	i
 8006c38:	60fb      	str	r3, [r7, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <prvTaskExitError+0x2c>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	b672      	cpsid	i
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	b662      	cpsie	i
 8006c52:	60bb      	str	r3, [r7, #8]
}
 8006c54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c56:	bf00      	nop
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0fc      	beq.n	8006c58 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	2000000c 	.word	0x2000000c

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	4770      	bx	lr
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst2>:
 8006c90:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c98:	4808      	ldr	r0, [pc, #32]	; (8006cbc <prvPortStartFirstTask+0x24>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8814 	msr	CONTROL, r0
 8006caa:	b662      	cpsie	i
 8006cac:	b661      	cpsie	f
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	df00      	svc	0
 8006cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cba:	bf00      	nop
 8006cbc:	e000ed08 	.word	0xe000ed08

08006cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cc6:	4b37      	ldr	r3, [pc, #220]	; (8006da4 <xPortStartScheduler+0xe4>)
 8006cc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	4b2f      	ldr	r3, [pc, #188]	; (8006da8 <xPortStartScheduler+0xe8>)
 8006cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cee:	4b2f      	ldr	r3, [pc, #188]	; (8006dac <xPortStartScheduler+0xec>)
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cf4:	e009      	b.n	8006d0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cf6:	4b2d      	ldr	r3, [pc, #180]	; (8006dac <xPortStartScheduler+0xec>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	4a2b      	ldr	r2, [pc, #172]	; (8006dac <xPortStartScheduler+0xec>)
 8006cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d0ef      	beq.n	8006cf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d16:	4b25      	ldr	r3, [pc, #148]	; (8006dac <xPortStartScheduler+0xec>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1c3 0307 	rsb	r3, r3, #7
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d00c      	beq.n	8006d3c <xPortStartScheduler+0x7c>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	b672      	cpsid	i
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	b662      	cpsie	i
 8006d36:	60bb      	str	r3, [r7, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d3c:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <xPortStartScheduler+0xec>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	4a1a      	ldr	r2, [pc, #104]	; (8006dac <xPortStartScheduler+0xec>)
 8006d44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d46:	4b19      	ldr	r3, [pc, #100]	; (8006dac <xPortStartScheduler+0xec>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d4e:	4a17      	ldr	r2, [pc, #92]	; (8006dac <xPortStartScheduler+0xec>)
 8006d50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <xPortStartScheduler+0xf0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a14      	ldr	r2, [pc, #80]	; (8006db0 <xPortStartScheduler+0xf0>)
 8006d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d66:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <xPortStartScheduler+0xf0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a11      	ldr	r2, [pc, #68]	; (8006db0 <xPortStartScheduler+0xf0>)
 8006d6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d72:	f000 f8dd 	bl	8006f30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d76:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <xPortStartScheduler+0xf4>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d7c:	f000 f8fc 	bl	8006f78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d80:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <xPortStartScheduler+0xf8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a0c      	ldr	r2, [pc, #48]	; (8006db8 <xPortStartScheduler+0xf8>)
 8006d86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d8c:	f7ff ff84 	bl	8006c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d90:	f7ff f846 	bl	8005e20 <vTaskSwitchContext>
	prvTaskExitError();
 8006d94:	f7ff ff3c 	bl	8006c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	e000e400 	.word	0xe000e400
 8006da8:	20000f3c 	.word	0x20000f3c
 8006dac:	20000f40 	.word	0x20000f40
 8006db0:	e000ed20 	.word	0xe000ed20
 8006db4:	2000000c 	.word	0x2000000c
 8006db8:	e000ef34 	.word	0xe000ef34

08006dbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	b672      	cpsid	i
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	b662      	cpsie	i
 8006dd6:	607b      	str	r3, [r7, #4]
}
 8006dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <vPortEnterCritical+0x60>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3301      	adds	r3, #1
 8006de0:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <vPortEnterCritical+0x60>)
 8006de2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006de4:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <vPortEnterCritical+0x60>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d111      	bne.n	8006e10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dec:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <vPortEnterCritical+0x64>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <vPortEnterCritical+0x54>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	b672      	cpsid	i
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	b662      	cpsie	i
 8006e0a:	603b      	str	r3, [r7, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vPortEnterCritical+0x52>
	}
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	2000000c 	.word	0x2000000c
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e2a:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <vPortExitCritical+0x54>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10c      	bne.n	8006e4c <vPortExitCritical+0x28>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	b672      	cpsid	i
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	b662      	cpsie	i
 8006e46:	607b      	str	r3, [r7, #4]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <vPortExitCritical+0x54>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <vPortExitCritical+0x54>)
 8006e54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e56:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <vPortExitCritical+0x54>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <vPortExitCritical+0x46>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	f383 8811 	msr	BASEPRI, r3
}
 8006e68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	2000000c 	.word	0x2000000c
 8006e7c:	00000000 	.word	0x00000000

08006e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f01e 0f10 	tst.w	lr, #16
 8006e90:	bf08      	it	eq
 8006e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	6010      	str	r0, [r2, #0]
 8006e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ea4:	b672      	cpsid	i
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	f7fe ffb4 	bl	8005e20 <vTaskSwitchContext>
 8006eb8:	f04f 0000 	mov.w	r0, #0
 8006ebc:	f380 8811 	msr	BASEPRI, r0
 8006ec0:	bc09      	pop	{r0, r3}
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	6808      	ldr	r0, [r1, #0]
 8006ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	f01e 0f10 	tst.w	lr, #16
 8006ece:	bf08      	it	eq
 8006ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ed4:	f380 8809 	msr	PSP, r0
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop

08006ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	b672      	cpsid	i
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	b662      	cpsie	i
 8006f02:	607b      	str	r3, [r7, #4]
}
 8006f04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f06:	f7fe fecf 	bl	8005ca8 <xTaskIncrementTick>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f10:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <SysTick_Handler+0x44>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	f383 8811 	msr	BASEPRI, r3
}
 8006f22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f34:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <vPortSetupTimerInterrupt+0x34>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <vPortSetupTimerInterrupt+0x38>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <vPortSetupTimerInterrupt+0x3c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <vPortSetupTimerInterrupt+0x40>)
 8006f46:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4a:	099b      	lsrs	r3, r3, #6
 8006f4c:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <vPortSetupTimerInterrupt+0x44>)
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f52:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <vPortSetupTimerInterrupt+0x34>)
 8006f54:	2207      	movs	r2, #7
 8006f56:	601a      	str	r2, [r3, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	e000e010 	.word	0xe000e010
 8006f68:	e000e018 	.word	0xe000e018
 8006f6c:	20000000 	.word	0x20000000
 8006f70:	10624dd3 	.word	0x10624dd3
 8006f74:	e000e014 	.word	0xe000e014

08006f78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f88 <vPortEnableVFP+0x10>
 8006f7c:	6801      	ldr	r1, [r0, #0]
 8006f7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f82:	6001      	str	r1, [r0, #0]
 8006f84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f86:	bf00      	nop
 8006f88:	e000ed88 	.word	0xe000ed88

08006f8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f92:	f3ef 8305 	mrs	r3, IPSR
 8006f96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b0f      	cmp	r3, #15
 8006f9c:	d916      	bls.n	8006fcc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f9e:	4a19      	ldr	r2, [pc, #100]	; (8007004 <vPortValidateInterruptPriority+0x78>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fa8:	4b17      	ldr	r3, [pc, #92]	; (8007008 <vPortValidateInterruptPriority+0x7c>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	7afa      	ldrb	r2, [r7, #11]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d20c      	bcs.n	8006fcc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	b672      	cpsid	i
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	b662      	cpsie	i
 8006fc6:	607b      	str	r3, [r7, #4]
}
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <vPortValidateInterruptPriority+0x80>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fd4:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <vPortValidateInterruptPriority+0x84>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d90c      	bls.n	8006ff6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	b672      	cpsid	i
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	b662      	cpsie	i
 8006ff0:	603b      	str	r3, [r7, #0]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <vPortValidateInterruptPriority+0x68>
	}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	e000e3f0 	.word	0xe000e3f0
 8007008:	20000f3c 	.word	0x20000f3c
 800700c:	e000ed0c 	.word	0xe000ed0c
 8007010:	20000f40 	.word	0x20000f40

08007014 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007020:	f7fe fd84 	bl	8005b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007024:	4b5b      	ldr	r3, [pc, #364]	; (8007194 <pvPortMalloc+0x180>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800702c:	f000 f91a 	bl	8007264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007030:	4b59      	ldr	r3, [pc, #356]	; (8007198 <pvPortMalloc+0x184>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4013      	ands	r3, r2
 8007038:	2b00      	cmp	r3, #0
 800703a:	f040 8092 	bne.w	8007162 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01f      	beq.n	8007084 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007044:	2208      	movs	r2, #8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f023 0307 	bic.w	r3, r3, #7
 800705c:	3308      	adds	r3, #8
 800705e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00c      	beq.n	8007084 <pvPortMalloc+0x70>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	b672      	cpsid	i
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	b662      	cpsie	i
 800707e:	617b      	str	r3, [r7, #20]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d06b      	beq.n	8007162 <pvPortMalloc+0x14e>
 800708a:	4b44      	ldr	r3, [pc, #272]	; (800719c <pvPortMalloc+0x188>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	429a      	cmp	r2, r3
 8007092:	d866      	bhi.n	8007162 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007094:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <pvPortMalloc+0x18c>)
 8007096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007098:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <pvPortMalloc+0x18c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800709e:	e004      	b.n	80070aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d903      	bls.n	80070bc <pvPortMalloc+0xa8>
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1f1      	bne.n	80070a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070bc:	4b35      	ldr	r3, [pc, #212]	; (8007194 <pvPortMalloc+0x180>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d04d      	beq.n	8007162 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2208      	movs	r2, #8
 80070cc:	4413      	add	r3, r2
 80070ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	2308      	movs	r3, #8
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d921      	bls.n	800712c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <pvPortMalloc+0x100>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	b672      	cpsid	i
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	b662      	cpsie	i
 800710e:	613b      	str	r3, [r7, #16]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	1ad2      	subs	r2, r2, r3
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007126:	69b8      	ldr	r0, [r7, #24]
 8007128:	f000 f8fe 	bl	8007328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <pvPortMalloc+0x188>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	4a19      	ldr	r2, [pc, #100]	; (800719c <pvPortMalloc+0x188>)
 8007138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800713a:	4b18      	ldr	r3, [pc, #96]	; (800719c <pvPortMalloc+0x188>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <pvPortMalloc+0x190>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d203      	bcs.n	800714e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007146:	4b15      	ldr	r3, [pc, #84]	; (800719c <pvPortMalloc+0x188>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <pvPortMalloc+0x190>)
 800714c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <pvPortMalloc+0x184>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	431a      	orrs	r2, r3
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007162:	f7fe fcf1 	bl	8005b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00c      	beq.n	800718a <pvPortMalloc+0x176>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	b672      	cpsid	i
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	b662      	cpsie	i
 8007184:	60fb      	str	r3, [r7, #12]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <pvPortMalloc+0x174>
	return pvReturn;
 800718a:	69fb      	ldr	r3, [r7, #28]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3728      	adds	r7, #40	; 0x28
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20004b4c 	.word	0x20004b4c
 8007198:	20004b58 	.word	0x20004b58
 800719c:	20004b50 	.word	0x20004b50
 80071a0:	20004b44 	.word	0x20004b44
 80071a4:	20004b54 	.word	0x20004b54

080071a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d04c      	beq.n	8007254 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071ba:	2308      	movs	r3, #8
 80071bc:	425b      	negs	r3, r3
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4413      	add	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	4b23      	ldr	r3, [pc, #140]	; (800725c <vPortFree+0xb4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10c      	bne.n	80071f0 <vPortFree+0x48>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	b672      	cpsid	i
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	b662      	cpsie	i
 80071ea:	60fb      	str	r3, [r7, #12]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00c      	beq.n	8007212 <vPortFree+0x6a>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	b672      	cpsid	i
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	b662      	cpsie	i
 800720c:	60bb      	str	r3, [r7, #8]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	4b11      	ldr	r3, [pc, #68]	; (800725c <vPortFree+0xb4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d019      	beq.n	8007254 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	4b0b      	ldr	r3, [pc, #44]	; (800725c <vPortFree+0xb4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	43db      	mvns	r3, r3
 8007232:	401a      	ands	r2, r3
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007238:	f7fe fc78 	bl	8005b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <vPortFree+0xb8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4413      	add	r3, r2
 8007246:	4a06      	ldr	r2, [pc, #24]	; (8007260 <vPortFree+0xb8>)
 8007248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800724a:	6938      	ldr	r0, [r7, #16]
 800724c:	f000 f86c 	bl	8007328 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007250:	f7fe fc7a 	bl	8005b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007254:	bf00      	nop
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20004b58 	.word	0x20004b58
 8007260:	20004b50 	.word	0x20004b50

08007264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800726a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800726e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007270:	4b27      	ldr	r3, [pc, #156]	; (8007310 <prvHeapInit+0xac>)
 8007272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3307      	adds	r3, #7
 8007282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0307 	bic.w	r3, r3, #7
 800728a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <prvHeapInit+0xac>)
 8007294:	4413      	add	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <prvHeapInit+0xb0>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072a2:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <prvHeapInit+0xb0>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072b0:	2208      	movs	r2, #8
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a15      	ldr	r2, [pc, #84]	; (8007318 <prvHeapInit+0xb4>)
 80072c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <prvHeapInit+0xb4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <prvHeapInit+0xb4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <prvHeapInit+0xb4>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4a0a      	ldr	r2, [pc, #40]	; (800731c <prvHeapInit+0xb8>)
 80072f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4a09      	ldr	r2, [pc, #36]	; (8007320 <prvHeapInit+0xbc>)
 80072fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <prvHeapInit+0xc0>)
 80072fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007302:	601a      	str	r2, [r3, #0]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20000f44 	.word	0x20000f44
 8007314:	20004b44 	.word	0x20004b44
 8007318:	20004b4c 	.word	0x20004b4c
 800731c:	20004b54 	.word	0x20004b54
 8007320:	20004b50 	.word	0x20004b50
 8007324:	20004b58 	.word	0x20004b58

08007328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007330:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <prvInsertBlockIntoFreeList+0xac>)
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e002      	b.n	800733c <prvInsertBlockIntoFreeList+0x14>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d8f7      	bhi.n	8007336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d108      	bne.n	800736a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	441a      	add	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d118      	bne.n	80073b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d00d      	beq.n	80073a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	441a      	add	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	e008      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <prvInsertBlockIntoFreeList+0xb0>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e003      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d002      	beq.n	80073c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20004b44 	.word	0x20004b44
 80073d8:	20004b4c 	.word	0x20004b4c

080073dc <memset>:
 80073dc:	4402      	add	r2, r0
 80073de:	4603      	mov	r3, r0
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d100      	bne.n	80073e6 <memset+0xa>
 80073e4:	4770      	bx	lr
 80073e6:	f803 1b01 	strb.w	r1, [r3], #1
 80073ea:	e7f9      	b.n	80073e0 <memset+0x4>

080073ec <_reclaim_reent>:
 80073ec:	4b29      	ldr	r3, [pc, #164]	; (8007494 <_reclaim_reent+0xa8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4283      	cmp	r3, r0
 80073f2:	b570      	push	{r4, r5, r6, lr}
 80073f4:	4604      	mov	r4, r0
 80073f6:	d04b      	beq.n	8007490 <_reclaim_reent+0xa4>
 80073f8:	69c3      	ldr	r3, [r0, #28]
 80073fa:	b143      	cbz	r3, 800740e <_reclaim_reent+0x22>
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d144      	bne.n	800748c <_reclaim_reent+0xa0>
 8007402:	69e3      	ldr	r3, [r4, #28]
 8007404:	6819      	ldr	r1, [r3, #0]
 8007406:	b111      	cbz	r1, 800740e <_reclaim_reent+0x22>
 8007408:	4620      	mov	r0, r4
 800740a:	f000 f879 	bl	8007500 <_free_r>
 800740e:	6961      	ldr	r1, [r4, #20]
 8007410:	b111      	cbz	r1, 8007418 <_reclaim_reent+0x2c>
 8007412:	4620      	mov	r0, r4
 8007414:	f000 f874 	bl	8007500 <_free_r>
 8007418:	69e1      	ldr	r1, [r4, #28]
 800741a:	b111      	cbz	r1, 8007422 <_reclaim_reent+0x36>
 800741c:	4620      	mov	r0, r4
 800741e:	f000 f86f 	bl	8007500 <_free_r>
 8007422:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007424:	b111      	cbz	r1, 800742c <_reclaim_reent+0x40>
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f86a 	bl	8007500 <_free_r>
 800742c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800742e:	b111      	cbz	r1, 8007436 <_reclaim_reent+0x4a>
 8007430:	4620      	mov	r0, r4
 8007432:	f000 f865 	bl	8007500 <_free_r>
 8007436:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007438:	b111      	cbz	r1, 8007440 <_reclaim_reent+0x54>
 800743a:	4620      	mov	r0, r4
 800743c:	f000 f860 	bl	8007500 <_free_r>
 8007440:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007442:	b111      	cbz	r1, 800744a <_reclaim_reent+0x5e>
 8007444:	4620      	mov	r0, r4
 8007446:	f000 f85b 	bl	8007500 <_free_r>
 800744a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800744c:	b111      	cbz	r1, 8007454 <_reclaim_reent+0x68>
 800744e:	4620      	mov	r0, r4
 8007450:	f000 f856 	bl	8007500 <_free_r>
 8007454:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007456:	b111      	cbz	r1, 800745e <_reclaim_reent+0x72>
 8007458:	4620      	mov	r0, r4
 800745a:	f000 f851 	bl	8007500 <_free_r>
 800745e:	6a23      	ldr	r3, [r4, #32]
 8007460:	b1b3      	cbz	r3, 8007490 <_reclaim_reent+0xa4>
 8007462:	4620      	mov	r0, r4
 8007464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007468:	4718      	bx	r3
 800746a:	5949      	ldr	r1, [r1, r5]
 800746c:	b941      	cbnz	r1, 8007480 <_reclaim_reent+0x94>
 800746e:	3504      	adds	r5, #4
 8007470:	69e3      	ldr	r3, [r4, #28]
 8007472:	2d80      	cmp	r5, #128	; 0x80
 8007474:	68d9      	ldr	r1, [r3, #12]
 8007476:	d1f8      	bne.n	800746a <_reclaim_reent+0x7e>
 8007478:	4620      	mov	r0, r4
 800747a:	f000 f841 	bl	8007500 <_free_r>
 800747e:	e7c0      	b.n	8007402 <_reclaim_reent+0x16>
 8007480:	680e      	ldr	r6, [r1, #0]
 8007482:	4620      	mov	r0, r4
 8007484:	f000 f83c 	bl	8007500 <_free_r>
 8007488:	4631      	mov	r1, r6
 800748a:	e7ef      	b.n	800746c <_reclaim_reent+0x80>
 800748c:	2500      	movs	r5, #0
 800748e:	e7ef      	b.n	8007470 <_reclaim_reent+0x84>
 8007490:	bd70      	pop	{r4, r5, r6, pc}
 8007492:	bf00      	nop
 8007494:	2000005c 	.word	0x2000005c

08007498 <__libc_init_array>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4d0d      	ldr	r5, [pc, #52]	; (80074d0 <__libc_init_array+0x38>)
 800749c:	4c0d      	ldr	r4, [pc, #52]	; (80074d4 <__libc_init_array+0x3c>)
 800749e:	1b64      	subs	r4, r4, r5
 80074a0:	10a4      	asrs	r4, r4, #2
 80074a2:	2600      	movs	r6, #0
 80074a4:	42a6      	cmp	r6, r4
 80074a6:	d109      	bne.n	80074bc <__libc_init_array+0x24>
 80074a8:	4d0b      	ldr	r5, [pc, #44]	; (80074d8 <__libc_init_array+0x40>)
 80074aa:	4c0c      	ldr	r4, [pc, #48]	; (80074dc <__libc_init_array+0x44>)
 80074ac:	f000 f880 	bl	80075b0 <_init>
 80074b0:	1b64      	subs	r4, r4, r5
 80074b2:	10a4      	asrs	r4, r4, #2
 80074b4:	2600      	movs	r6, #0
 80074b6:	42a6      	cmp	r6, r4
 80074b8:	d105      	bne.n	80074c6 <__libc_init_array+0x2e>
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c0:	4798      	blx	r3
 80074c2:	3601      	adds	r6, #1
 80074c4:	e7ee      	b.n	80074a4 <__libc_init_array+0xc>
 80074c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ca:	4798      	blx	r3
 80074cc:	3601      	adds	r6, #1
 80074ce:	e7f2      	b.n	80074b6 <__libc_init_array+0x1e>
 80074d0:	08007764 	.word	0x08007764
 80074d4:	08007764 	.word	0x08007764
 80074d8:	08007764 	.word	0x08007764
 80074dc:	08007768 	.word	0x08007768

080074e0 <__retarget_lock_acquire_recursive>:
 80074e0:	4770      	bx	lr

080074e2 <__retarget_lock_release_recursive>:
 80074e2:	4770      	bx	lr

080074e4 <memcpy>:
 80074e4:	440a      	add	r2, r1
 80074e6:	4291      	cmp	r1, r2
 80074e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ec:	d100      	bne.n	80074f0 <memcpy+0xc>
 80074ee:	4770      	bx	lr
 80074f0:	b510      	push	{r4, lr}
 80074f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074fa:	4291      	cmp	r1, r2
 80074fc:	d1f9      	bne.n	80074f2 <memcpy+0xe>
 80074fe:	bd10      	pop	{r4, pc}

08007500 <_free_r>:
 8007500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007502:	2900      	cmp	r1, #0
 8007504:	d044      	beq.n	8007590 <_free_r+0x90>
 8007506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750a:	9001      	str	r0, [sp, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f1a1 0404 	sub.w	r4, r1, #4
 8007512:	bfb8      	it	lt
 8007514:	18e4      	addlt	r4, r4, r3
 8007516:	f000 f83f 	bl	8007598 <__malloc_lock>
 800751a:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <_free_r+0x94>)
 800751c:	9801      	ldr	r0, [sp, #4]
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	b933      	cbnz	r3, 8007530 <_free_r+0x30>
 8007522:	6063      	str	r3, [r4, #4]
 8007524:	6014      	str	r4, [r2, #0]
 8007526:	b003      	add	sp, #12
 8007528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800752c:	f000 b83a 	b.w	80075a4 <__malloc_unlock>
 8007530:	42a3      	cmp	r3, r4
 8007532:	d908      	bls.n	8007546 <_free_r+0x46>
 8007534:	6825      	ldr	r5, [r4, #0]
 8007536:	1961      	adds	r1, r4, r5
 8007538:	428b      	cmp	r3, r1
 800753a:	bf01      	itttt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	1949      	addeq	r1, r1, r5
 8007542:	6021      	streq	r1, [r4, #0]
 8007544:	e7ed      	b.n	8007522 <_free_r+0x22>
 8007546:	461a      	mov	r2, r3
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b10b      	cbz	r3, 8007550 <_free_r+0x50>
 800754c:	42a3      	cmp	r3, r4
 800754e:	d9fa      	bls.n	8007546 <_free_r+0x46>
 8007550:	6811      	ldr	r1, [r2, #0]
 8007552:	1855      	adds	r5, r2, r1
 8007554:	42a5      	cmp	r5, r4
 8007556:	d10b      	bne.n	8007570 <_free_r+0x70>
 8007558:	6824      	ldr	r4, [r4, #0]
 800755a:	4421      	add	r1, r4
 800755c:	1854      	adds	r4, r2, r1
 800755e:	42a3      	cmp	r3, r4
 8007560:	6011      	str	r1, [r2, #0]
 8007562:	d1e0      	bne.n	8007526 <_free_r+0x26>
 8007564:	681c      	ldr	r4, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	6053      	str	r3, [r2, #4]
 800756a:	440c      	add	r4, r1
 800756c:	6014      	str	r4, [r2, #0]
 800756e:	e7da      	b.n	8007526 <_free_r+0x26>
 8007570:	d902      	bls.n	8007578 <_free_r+0x78>
 8007572:	230c      	movs	r3, #12
 8007574:	6003      	str	r3, [r0, #0]
 8007576:	e7d6      	b.n	8007526 <_free_r+0x26>
 8007578:	6825      	ldr	r5, [r4, #0]
 800757a:	1961      	adds	r1, r4, r5
 800757c:	428b      	cmp	r3, r1
 800757e:	bf04      	itt	eq
 8007580:	6819      	ldreq	r1, [r3, #0]
 8007582:	685b      	ldreq	r3, [r3, #4]
 8007584:	6063      	str	r3, [r4, #4]
 8007586:	bf04      	itt	eq
 8007588:	1949      	addeq	r1, r1, r5
 800758a:	6021      	streq	r1, [r4, #0]
 800758c:	6054      	str	r4, [r2, #4]
 800758e:	e7ca      	b.n	8007526 <_free_r+0x26>
 8007590:	b003      	add	sp, #12
 8007592:	bd30      	pop	{r4, r5, pc}
 8007594:	20004c98 	.word	0x20004c98

08007598 <__malloc_lock>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__malloc_lock+0x8>)
 800759a:	f7ff bfa1 	b.w	80074e0 <__retarget_lock_acquire_recursive>
 800759e:	bf00      	nop
 80075a0:	20004c94 	.word	0x20004c94

080075a4 <__malloc_unlock>:
 80075a4:	4801      	ldr	r0, [pc, #4]	; (80075ac <__malloc_unlock+0x8>)
 80075a6:	f7ff bf9c 	b.w	80074e2 <__retarget_lock_release_recursive>
 80075aa:	bf00      	nop
 80075ac:	20004c94 	.word	0x20004c94

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
