
FreeRTOS_UART_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800734c  0800734c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007354  08007354  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800735c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c28  20000060  080073bc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c88  080073bc  00024c88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b680  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a92  00000000  00000000  0003b751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0003f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001078  00000000  00000000  00040710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029fa7  00000000  00000000  00041788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae63  00000000  00000000  0006b72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001057a2  00000000  00000000  00086592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005acc  00000000  00000000  0018bd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00191800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080072a0 	.word	0x080072a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080072a0 	.word	0x080072a0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <MX_FREERTOS_Init+0x28>)
 8000542:	2100      	movs	r1, #0
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <MX_FREERTOS_Init+0x2c>)
 8000546:	f003 ff05 	bl	8004354 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <MX_FREERTOS_Init+0x30>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of API_dispatcher */
  API_dispatcherHandle = osThreadNew(StartAPI_dispatcher, NULL, &API_dispatcher_attributes);
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <MX_FREERTOS_Init+0x34>)
 8000552:	2100      	movs	r1, #0
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <MX_FREERTOS_Init+0x38>)
 8000556:	f003 fefd 	bl	8004354 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <MX_FREERTOS_Init+0x3c>)
 800055e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	080072ec 	.word	0x080072ec
 8000568:	0800057d 	.word	0x0800057d
 800056c:	2000007c 	.word	0x2000007c
 8000570:	08007310 	.word	0x08007310
 8000574:	0800058d 	.word	0x0800058d
 8000578:	20000080 	.word	0x20000080

0800057c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
//	uint8_t data[] = "A\r\n";

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelete(NULL);
 8000584:	2000      	movs	r0, #0
 8000586:	f004 ff3d 	bl	8005404 <vTaskDelete>
 800058a:	e7fb      	b.n	8000584 <StartDefaultTask+0x8>

0800058c <StartAPI_dispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_dispatcher */
void StartAPI_dispatcher(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_dispatcher */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);	// suspend itself
 8000594:	2000      	movs	r0, #0
 8000596:	f004 ffa9 	bl	80054ec <vTaskSuspend>
//	  ulTaskNotifyTake(pdTRUE, (TickType_t) portMAX_DELAY);

	  switch(rx_buffer[0]) {
 800059a:	4b25      	ldr	r3, [pc, #148]	; (8000630 <StartAPI_dispatcher+0xa4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	2b06      	cmp	r3, #6
 80005a2:	d8f7      	bhi.n	8000594 <StartAPI_dispatcher+0x8>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <StartAPI_dispatcher+0x20>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	080005c9 	.word	0x080005c9
 80005b0:	080005d3 	.word	0x080005d3
 80005b4:	080005df 	.word	0x080005df
 80005b8:	080005e9 	.word	0x080005e9
 80005bc:	080005f5 	.word	0x080005f5
 80005c0:	08000601 	.word	0x08000601
 80005c4:	08000617 	.word	0x08000617
	  	case 0x1:
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	481a      	ldr	r0, [pc, #104]	; (8000634 <StartAPI_dispatcher+0xa8>)
 80005cc:	f000 ff55 	bl	800147a <HAL_GPIO_TogglePin>
	  		break;
 80005d0:	e02d      	b.n	800062e <StartAPI_dispatcher+0xa2>
	  	case 0x2:
	  		HAL_GPIO_TogglePin(API_START_ENGIN_LEDs_GPIO_Port, API_START_ENGIN_LEDs_Pin);
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	4818      	ldr	r0, [pc, #96]	; (8000638 <StartAPI_dispatcher+0xac>)
 80005d8:	f000 ff4f 	bl	800147a <HAL_GPIO_TogglePin>
	  		break;
 80005dc:	e027      	b.n	800062e <StartAPI_dispatcher+0xa2>
	  	case 0x3:
	  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005de:	2101      	movs	r1, #1
 80005e0:	4814      	ldr	r0, [pc, #80]	; (8000634 <StartAPI_dispatcher+0xa8>)
 80005e2:	f000 ff4a 	bl	800147a <HAL_GPIO_TogglePin>
	  		break;
 80005e6:	e022      	b.n	800062e <StartAPI_dispatcher+0xa2>
	  	case 0x4:
	  		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <StartAPI_dispatcher+0xac>)
 80005ee:	f000 ff44 	bl	800147a <HAL_GPIO_TogglePin>
	  		break;
 80005f2:	e01c      	b.n	800062e <StartAPI_dispatcher+0xa2>
	  	case 0x5:
	  		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 80005f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f8:	480f      	ldr	r0, [pc, #60]	; (8000638 <StartAPI_dispatcher+0xac>)
 80005fa:	f000 ff3e 	bl	800147a <HAL_GPIO_TogglePin>
	  		break;
 80005fe:	e016      	b.n	800062e <StartAPI_dispatcher+0xa2>
	  	case 0x6:
	  		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 8000600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <StartAPI_dispatcher+0xac>)
 8000606:	f000 ff38 	bl	800147a <HAL_GPIO_TogglePin>
	  		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 800060a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <StartAPI_dispatcher+0xac>)
 8000610:	f000 ff33 	bl	800147a <HAL_GPIO_TogglePin>
	  		break;
 8000614:	e00b      	b.n	800062e <StartAPI_dispatcher+0xa2>
	  	case 0x7:
	  		HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <StartAPI_dispatcher+0xac>)
 800061c:	f000 ff2d 	bl	800147a <HAL_GPIO_TogglePin>
	  		HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 8000620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <StartAPI_dispatcher+0xac>)
 8000626:	f000 ff28 	bl	800147a <HAL_GPIO_TogglePin>
	  		break;
 800062a:	bf00      	nop
 800062c:	e7b2      	b.n	8000594 <StartAPI_dispatcher+0x8>
	  vTaskSuspend(NULL);	// suspend itself
 800062e:	e7b1      	b.n	8000594 <StartAPI_dispatcher+0x8>
 8000630:	20000084 	.word	0x20000084
 8000634:	40020400 	.word	0x40020400
 8000638:	40020800 	.word	0x40020800

0800063c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b8a      	ldr	r3, [pc, #552]	; (800087c <MX_GPIO_Init+0x240>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a89      	ldr	r2, [pc, #548]	; (800087c <MX_GPIO_Init+0x240>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b87      	ldr	r3, [pc, #540]	; (800087c <MX_GPIO_Init+0x240>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	4b84      	ldr	r3, [pc, #528]	; (800087c <MX_GPIO_Init+0x240>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a83      	ldr	r2, [pc, #524]	; (800087c <MX_GPIO_Init+0x240>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b81      	ldr	r3, [pc, #516]	; (800087c <MX_GPIO_Init+0x240>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b7e      	ldr	r3, [pc, #504]	; (800087c <MX_GPIO_Init+0x240>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a7d      	ldr	r2, [pc, #500]	; (800087c <MX_GPIO_Init+0x240>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b7b      	ldr	r3, [pc, #492]	; (800087c <MX_GPIO_Init+0x240>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b78      	ldr	r3, [pc, #480]	; (800087c <MX_GPIO_Init+0x240>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a77      	ldr	r2, [pc, #476]	; (800087c <MX_GPIO_Init+0x240>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b75      	ldr	r3, [pc, #468]	; (800087c <MX_GPIO_Init+0x240>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b72      	ldr	r3, [pc, #456]	; (800087c <MX_GPIO_Init+0x240>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a71      	ldr	r2, [pc, #452]	; (800087c <MX_GPIO_Init+0x240>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b6f      	ldr	r3, [pc, #444]	; (800087c <MX_GPIO_Init+0x240>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ca:	4b6c      	ldr	r3, [pc, #432]	; (800087c <MX_GPIO_Init+0x240>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a6b      	ldr	r2, [pc, #428]	; (800087c <MX_GPIO_Init+0x240>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b69      	ldr	r3, [pc, #420]	; (800087c <MX_GPIO_Init+0x240>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e8:	4865      	ldr	r0, [pc, #404]	; (8000880 <MX_GPIO_Init+0x244>)
 80006ea:	f000 fead 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4864      	ldr	r0, [pc, #400]	; (8000884 <MX_GPIO_Init+0x248>)
 80006f4:	f000 fea8 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80006fe:	4862      	ldr	r0, [pc, #392]	; (8000888 <MX_GPIO_Init+0x24c>)
 8000700:	f000 fea2 	bl	8001448 <HAL_GPIO_WritePin>
                          |API_TURN_LEFT_LEDs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	485b      	ldr	r0, [pc, #364]	; (8000888 <MX_GPIO_Init+0x24c>)
 800071c:	f000 fce8 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000720:	2332      	movs	r3, #50	; 0x32
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4853      	ldr	r0, [pc, #332]	; (8000888 <MX_GPIO_Init+0x24c>)
 800073c:	f000 fcd8 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000740:	2386      	movs	r3, #134	; 0x86
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000750:	230b      	movs	r3, #11
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	484c      	ldr	r0, [pc, #304]	; (800088c <MX_GPIO_Init+0x250>)
 800075c:	f000 fcc8 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000760:	f244 0381 	movw	r3, #16513	; 0x4081
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	4841      	ldr	r0, [pc, #260]	; (8000880 <MX_GPIO_Init+0x244>)
 800077a:	f000 fcb9 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000790:	230b      	movs	r3, #11
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4839      	ldr	r0, [pc, #228]	; (8000880 <MX_GPIO_Init+0x244>)
 800079c:	f000 fca8 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007b2:	2307      	movs	r3, #7
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4834      	ldr	r0, [pc, #208]	; (8000890 <MX_GPIO_Init+0x254>)
 80007be:	f000 fc97 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	482a      	ldr	r0, [pc, #168]	; (8000884 <MX_GPIO_Init+0x248>)
 80007da:	f000 fc89 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4824      	ldr	r0, [pc, #144]	; (8000884 <MX_GPIO_Init+0x248>)
 80007f2:	f000 fc7d 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 80007f6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007fa:	61fb      	str	r3, [r7, #28]
                          |API_TURN_LEFT_LEDs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	481e      	ldr	r0, [pc, #120]	; (8000888 <MX_GPIO_Init+0x24c>)
 8000810:	f000 fc6e 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000814:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000826:	230a      	movs	r3, #10
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_GPIO_Init+0x250>)
 8000832:	f000 fc5d 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <MX_GPIO_Init+0x250>)
 800084c:	f000 fc50 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000850:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000862:	230b      	movs	r3, #11
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0x248>)
 800086e:	f000 fc3f 	bl	80010f0 <HAL_GPIO_Init>

}
 8000872:	bf00      	nop
 8000874:	3730      	adds	r7, #48	; 0x30
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40021800 	.word	0x40021800
 8000888:	40020800 	.word	0x40020800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020c00 	.word	0x40020c00

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fa89 	bl	8000dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f814 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f7ff fecc 	bl	800063c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 f9ae 	bl	8000c04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT( &huart1, rx_buffer, 1 );
 80008a8:	2201      	movs	r2, #1
 80008aa:	4905      	ldr	r1, [pc, #20]	; (80008c0 <main+0x2c>)
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <main+0x30>)
 80008ae:	f002 faa9 	bl	8002e04 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80008b2:	f003 fce5 	bl	8004280 <osKernelInitialize>
  MX_FREERTOS_Init();
 80008b6:	f7ff fe41 	bl	800053c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008ba:	f003 fd15 	bl	80042e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008be:	e7fe      	b.n	80008be <main+0x2a>
 80008c0:	20000084 	.word	0x20000084
 80008c4:	200000dc 	.word	0x200000dc

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2234      	movs	r2, #52	; 0x34
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 fbf8 	bl	80070cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <SystemClock_Config+0xd4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a2a      	ldr	r2, [pc, #168]	; (800099c <SystemClock_Config+0xd4>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <SystemClock_Config+0xd4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <SystemClock_Config+0xd8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <SystemClock_Config+0xd8>)
 800090a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <SystemClock_Config+0xd8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000930:	2308      	movs	r3, #8
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000934:	23d8      	movs	r3, #216	; 0xd8
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fe01 	bl	8001550 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000954:	f000 f872 	bl	8000a3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000958:	f000 fdaa 	bl	80014b0 <HAL_PWREx_EnableOverDrive>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000962:	f000 f86b 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2302      	movs	r3, #2
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000972:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2107      	movs	r1, #7
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f891 	bl	8001aac <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000990:	f000 f854 	bl	8000a3c <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	3750      	adds	r7, #80	; 0x50
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart1x ) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	checkIfYieldRequired = xTaskResumeFromISR(API_dispatcherHandle);
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_RxCpltCallback+0x44>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 fe47 	bl	8005644 <xTaskResumeFromISR>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <HAL_UART_RxCpltCallback+0x48>)
 80009ba:	6013      	str	r3, [r2, #0]
	portYIELD_FROM_ISR(checkIfYieldRequired);
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_UART_RxCpltCallback+0x48>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d007      	beq.n	80009d4 <HAL_UART_RxCpltCallback+0x30>
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_UART_RxCpltCallback+0x4c>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	f3bf 8f4f 	dsb	sy
 80009d0:	f3bf 8f6f 	isb	sy
//	vTaskNotifyGiveFromISR(API_dispatcherHandle, 0);

	HAL_UART_Receive_IT( &huart1, rx_buffer, 1 );	// used for "opening" ST MCU for future interrupts on RX
 80009d4:	2201      	movs	r2, #1
 80009d6:	4907      	ldr	r1, [pc, #28]	; (80009f4 <HAL_UART_RxCpltCallback+0x50>)
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <HAL_UART_RxCpltCallback+0x54>)
 80009da:	f002 fa13 	bl	8002e04 <HAL_UART_Receive_IT>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000080 	.word	0x20000080
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	e000ed04 	.word	0xe000ed04
 80009f4:	20000084 	.word	0x20000084
 80009f8:	200000dc 	.word	0x200000dc

080009fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart1 ){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <HAL_UART_TxCpltCallback+0x18>)
 8000a08:	f000 fd37 	bl	800147a <HAL_GPIO_TogglePin>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 f9cd 	bl	8000dc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40001000 	.word	0x40001000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210f      	movs	r1, #15
 8000a82:	f06f 0001 	mvn.w	r0, #1
 8000a86:	f000 fa77 	bl	8000f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa8:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <HAL_InitTick+0xe0>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a32      	ldr	r2, [pc, #200]	; (8000b78 <HAL_InitTick+0xe0>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <HAL_InitTick+0xe0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fa12 	bl	8001ef4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d103      	bne.n	8000ae2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ada:	f001 f9e3 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8000ade:	6378      	str	r0, [r7, #52]	; 0x34
 8000ae0:	e004      	b.n	8000aec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ae2:	f001 f9df 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <HAL_InitTick+0xe4>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	0c9b      	lsrs	r3, r3, #18
 8000af6:	3b01      	subs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <HAL_InitTick+0xe8>)
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <HAL_InitTick+0xec>)
 8000afe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <HAL_InitTick+0xe8>)
 8000b02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_InitTick+0xe8>)
 8000b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_InitTick+0xe8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_InitTick+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_InitTick+0xe8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b20:	4817      	ldr	r0, [pc, #92]	; (8000b80 <HAL_InitTick+0xe8>)
 8000b22:	f001 fe41 	bl	80027a8 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d11b      	bne.n	8000b6c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b34:	4812      	ldr	r0, [pc, #72]	; (8000b80 <HAL_InitTick+0xe8>)
 8000b36:	f001 fe99 	bl	800286c <HAL_TIM_Base_Start_IT>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d111      	bne.n	8000b6c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b48:	2036      	movs	r0, #54	; 0x36
 8000b4a:	f000 fa31 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d808      	bhi.n	8000b66 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	f000 fa0d 	bl	8000f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_InitTick+0xf0>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	e002      	b.n	8000b6c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3738      	adds	r7, #56	; 0x38
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	20000090 	.word	0x20000090
 8000b84:	40001000 	.word	0x40001000
 8000b88:	20000004 	.word	0x20000004

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <USART1_IRQHandler+0x10>)
 8000bbe:	f002 f965 	bl	8002e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000dc 	.word	0x200000dc

08000bcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <TIM6_DAC_IRQHandler+0x10>)
 8000bd2:	f001 fec3 	bl	800295c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000090 	.word	0x20000090

08000be0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART1_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c48:	f002 f88e 	bl	8002d68 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f7ff fef3 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000dc 	.word	0x200000dc
 8000c60:	40011000 	.word	0x40011000

08000c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ae      	sub	sp, #184	; 0xb8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2290      	movs	r2, #144	; 0x90
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 fa21 	bl	80070cc <memset>
  if(uartHandle->Instance==USART1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <HAL_UART_MspInit+0xec>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d158      	bne.n	8000d46 <HAL_UART_MspInit+0xe2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 f959 	bl	8001f58 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cac:	f7ff fec6 	bl	8000a3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <HAL_UART_MspInit+0xf0>)
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <HAL_UART_MspInit+0xf0>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <HAL_UART_MspInit+0xf0>)
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_UART_MspInit+0xf0>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <HAL_UART_MspInit+0xf0>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_UART_MspInit+0xf0>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0xf4>)
 8000d08:	f000 f9f2 	bl	80010f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <HAL_UART_MspInit+0xf4>)
 8000d32:	f000 f9dd 	bl	80010f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2105      	movs	r1, #5
 8000d3a:	2025      	movs	r0, #37	; 0x25
 8000d3c:	f000 f91c 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d40:	2025      	movs	r0, #37	; 0x25
 8000d42:	f000 f935 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	37b8      	adds	r7, #184	; 0xb8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020400 	.word	0x40020400

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ff2b 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f006 f9fd 	bl	8007188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fd81 	bl	8000894 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000da0:	0800735c 	.word	0x0800735c
  ldr r2, =_sbss
 8000da4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000da8:	20004c88 	.word	0x20004c88

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>

08000dae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db2:	2003      	movs	r0, #3
 8000db4:	f000 f8d5 	bl	8000f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db8:	200f      	movs	r0, #15
 8000dba:	f7ff fe6d 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff fe43 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000164 	.word	0x20000164

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000164 	.word	0x20000164

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	05fa0000 	.word	0x05fa0000

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff4c 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8a:	f7ff ff61 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff ffb1 	bl	8000efc <NVIC_EncodePriority>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff80 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff54 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fda:	f7ff ff09 	bl	8000df0 <HAL_GetTick>
 8000fde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d008      	beq.n	8000ffe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e052      	b.n	80010a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0216 	bic.w	r2, r2, #22
 800100c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800101c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <HAL_DMA_Abort+0x62>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104e:	e013      	b.n	8001078 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001050:	f7ff fece 	bl	8000df0 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b05      	cmp	r3, #5
 800105c:	d90c      	bls.n	8001078 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2220      	movs	r2, #32
 8001062:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e015      	b.n	80010a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1e4      	bne.n	8001050 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	223f      	movs	r2, #63	; 0x3f
 800108c:	409a      	lsls	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d004      	beq.n	80010ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00c      	b.n	80010e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2205      	movs	r2, #5
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e175      	b.n	80013fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8164 	bne.w	80013f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x56>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80be 	beq.w	80013f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <HAL_GPIO_Init+0x324>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a65      	ldr	r2, [pc, #404]	; (8001414 <HAL_GPIO_Init+0x324>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_GPIO_Init+0x324>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001292:	4a61      	ldr	r2, [pc, #388]	; (8001418 <HAL_GPIO_Init+0x328>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a58      	ldr	r2, [pc, #352]	; (800141c <HAL_GPIO_Init+0x32c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d037      	beq.n	800132e <HAL_GPIO_Init+0x23e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a57      	ldr	r2, [pc, #348]	; (8001420 <HAL_GPIO_Init+0x330>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d031      	beq.n	800132a <HAL_GPIO_Init+0x23a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a56      	ldr	r2, [pc, #344]	; (8001424 <HAL_GPIO_Init+0x334>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x236>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a55      	ldr	r2, [pc, #340]	; (8001428 <HAL_GPIO_Init+0x338>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x232>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a54      	ldr	r2, [pc, #336]	; (800142c <HAL_GPIO_Init+0x33c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x22e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a53      	ldr	r2, [pc, #332]	; (8001430 <HAL_GPIO_Init+0x340>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x22a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_GPIO_Init+0x344>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x226>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a51      	ldr	r2, [pc, #324]	; (8001438 <HAL_GPIO_Init+0x348>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x222>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a50      	ldr	r2, [pc, #320]	; (800143c <HAL_GPIO_Init+0x34c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x21e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4f      	ldr	r2, [pc, #316]	; (8001440 <HAL_GPIO_Init+0x350>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x21a>
 8001306:	2309      	movs	r3, #9
 8001308:	e012      	b.n	8001330 <HAL_GPIO_Init+0x240>
 800130a:	230a      	movs	r3, #10
 800130c:	e010      	b.n	8001330 <HAL_GPIO_Init+0x240>
 800130e:	2308      	movs	r3, #8
 8001310:	e00e      	b.n	8001330 <HAL_GPIO_Init+0x240>
 8001312:	2307      	movs	r3, #7
 8001314:	e00c      	b.n	8001330 <HAL_GPIO_Init+0x240>
 8001316:	2306      	movs	r3, #6
 8001318:	e00a      	b.n	8001330 <HAL_GPIO_Init+0x240>
 800131a:	2305      	movs	r3, #5
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x240>
 800131e:	2304      	movs	r3, #4
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x240>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x240>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x240>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x240>
 800132e:	2300      	movs	r3, #0
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001340:	4935      	ldr	r1, [pc, #212]	; (8001418 <HAL_GPIO_Init+0x328>)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <HAL_GPIO_Init+0x354>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001372:	4a34      	ldr	r2, [pc, #208]	; (8001444 <HAL_GPIO_Init+0x354>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <HAL_GPIO_Init+0x354>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800139c:	4a29      	ldr	r2, [pc, #164]	; (8001444 <HAL_GPIO_Init+0x354>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <HAL_GPIO_Init+0x354>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c6:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <HAL_GPIO_Init+0x354>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_GPIO_Init+0x354>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_GPIO_Init+0x354>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3301      	adds	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	f67f ae86 	bls.w	8001110 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40013800 	.word	0x40013800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	40020800 	.word	0x40020800
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40021000 	.word	0x40021000
 8001430:	40021400 	.word	0x40021400
 8001434:	40021800 	.word	0x40021800
 8001438:	40021c00 	.word	0x40021c00
 800143c:	40022000 	.word	0x40022000
 8001440:	40022400 	.word	0x40022400
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001464:	e003      	b.n	800146e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43d9      	mvns	r1, r3
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	400b      	ands	r3, r1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_PWREx_EnableOverDrive+0x98>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_PWREx_EnableOverDrive+0x98>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_PWREx_EnableOverDrive+0x98>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014de:	f7ff fc87 	bl	8000df0 <HAL_GetTick>
 80014e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e4:	e009      	b.n	80014fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e6:	f7ff fc83 	bl	8000df0 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f4:	d901      	bls.n	80014fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e022      	b.n	8001540 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001506:	d1ee      	bne.n	80014e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_PWREx_EnableOverDrive+0x9c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_PWREx_EnableOverDrive+0x9c>)
 800150e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001512:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001514:	f7ff fc6c 	bl	8000df0 <HAL_GetTick>
 8001518:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800151a:	e009      	b.n	8001530 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800151c:	f7ff fc68 	bl	8000df0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152a:	d901      	bls.n	8001530 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e007      	b.n	8001540 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800153c:	d1ee      	bne.n	800151c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e29b      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8087 	beq.w	8001682 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001574:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00c      	beq.n	800159a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001580:	4b93      	ldr	r3, [pc, #588]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d112      	bne.n	80015b2 <HAL_RCC_OscConfig+0x62>
 800158c:	4b90      	ldr	r3, [pc, #576]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001598:	d10b      	bne.n	80015b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d06c      	beq.n	8001680 <HAL_RCC_OscConfig+0x130>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d168      	bne.n	8001680 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e275      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x7a>
 80015bc:	4b84      	ldr	r3, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a83      	ldr	r2, [pc, #524]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e02e      	b.n	8001628 <HAL_RCC_OscConfig+0xd8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x9c>
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7b      	ldr	r2, [pc, #492]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xd8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0xc0>
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a75      	ldr	r2, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a72      	ldr	r2, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xd8>
 8001610:	4b6f      	ldr	r3, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6e      	ldr	r2, [pc, #440]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b6c      	ldr	r3, [pc, #432]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6b      	ldr	r2, [pc, #428]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fbde 	bl	8000df0 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fbda 	bl	8000df0 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e229      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b61      	ldr	r3, [pc, #388]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xe8>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fbca 	bl	8000df0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fbc6 	bl	8000df0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e215      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x110>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d069      	beq.n	8001762 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x190>
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x17a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1e9      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	493d      	ldr	r1, [pc, #244]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e040      	b.n	8001762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb7c 	bl	8000df0 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fb78 	bl	8000df0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1c7      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4929      	ldr	r1, [pc, #164]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
 800172e:	e018      	b.n	8001762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fb58 	bl	8000df0 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fb54 	bl	8000df0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1a3      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d038      	beq.n	80017e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff fb35 	bl	8000df0 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fb31 	bl	8000df0 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e180      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x23a>
 80017a8:	e01a      	b.n	80017e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb1b 	bl	8000df0 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fb17 	bl	8000df0 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d903      	bls.n	80017d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e166      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
 80017d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ee      	bne.n	80017be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a4 	beq.w	8001936 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a88      	ldr	r2, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b86      	ldr	r3, [pc, #536]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	4b83      	ldr	r3, [pc, #524]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001822:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7f      	ldr	r2, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff fadf 	bl	8000df0 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7ff fadb 	bl	8000df0 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	; 0x64
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e12a      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x31a>
 800185c:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	e02d      	b.n	80018c6 <HAL_RCC_OscConfig+0x376>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x33c>
 8001872:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a67      	ldr	r2, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	e01c      	b.n	80018c6 <HAL_RCC_OscConfig+0x376>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x35e>
 8001894:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a61      	ldr	r2, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x376>
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a5b      	ldr	r2, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff fa8f 	bl	8000df0 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff fa8b 	bl	8000df0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0d8      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <HAL_RCC_OscConfig+0x386>
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fa79 	bl	8000df0 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fa75 	bl	8000df0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0c2      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80ae 	beq.w	8001a9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d06d      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d14b      	bne.n	80019ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 800195a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fa46 	bl	8000df0 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fa42 	bl	8000df0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e091      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	071b      	lsls	r3, r3, #28
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa14 	bl	8000df0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fa10 	bl	8000df0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e05f      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x47c>
 80019ea:	e057      	b.n	8001a9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 80019f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f9fa 	bl	8000df0 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f9f6 	bl	8000df0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e045      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4b0>
 8001a1e:	e03d      	b.n	8001a9c <HAL_RCC_OscConfig+0x54c>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x558>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d030      	beq.n	8001a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d129      	bne.n	8001a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d122      	bne.n	8001a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d119      	bne.n	8001a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d10f      	bne.n	8001a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0d0      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d910      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 020f 	bic.w	r2, r3, #15
 8001ada:	4965      	ldr	r1, [pc, #404]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0b8      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a58      	ldr	r2, [pc, #352]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	494d      	ldr	r1, [pc, #308]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d040      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d115      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e07f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e073      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e06b      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4936      	ldr	r1, [pc, #216]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba0:	f7ff f926 	bl	8000df0 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7ff f922 	bl	8000df0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e053      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d210      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 020f 	bic.w	r2, r3, #15
 8001be6:	4922      	ldr	r1, [pc, #136]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e032      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4916      	ldr	r1, [pc, #88]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	490e      	ldr	r1, [pc, #56]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3e:	f000 f821 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	490a      	ldr	r1, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x1cc>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1d0>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1d4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe ff1a 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08007334 	.word	0x08007334
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c88:	b094      	sub	sp, #80	; 0x50
 8001c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c90:	2300      	movs	r3, #0
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c94:	2300      	movs	r3, #0
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9c:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	f200 80e1 	bhi.w	8001e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001cb6:	e0db      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cbc:	e0db      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc2:	e0d8      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	f04f 0000 	mov.w	r0, #0
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	0159      	lsls	r1, r3, #5
 8001d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d08:	0150      	lsls	r0, r2, #5
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4621      	mov	r1, r4
 8001d10:	1a51      	subs	r1, r2, r1
 8001d12:	6139      	str	r1, [r7, #16]
 8001d14:	4629      	mov	r1, r5
 8001d16:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d28:	4659      	mov	r1, fp
 8001d2a:	018b      	lsls	r3, r1, #6
 8001d2c:	4651      	mov	r1, sl
 8001d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d32:	4651      	mov	r1, sl
 8001d34:	018a      	lsls	r2, r1, #6
 8001d36:	4651      	mov	r1, sl
 8001d38:	ebb2 0801 	subs.w	r8, r2, r1
 8001d3c:	4659      	mov	r1, fp
 8001d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d56:	4690      	mov	r8, r2
 8001d58:	4699      	mov	r9, r3
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	eb18 0303 	adds.w	r3, r8, r3
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	462b      	mov	r3, r5
 8001d64:	eb49 0303 	adc.w	r3, r9, r3
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d76:	4629      	mov	r1, r5
 8001d78:	028b      	lsls	r3, r1, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d80:	4621      	mov	r1, r4
 8001d82:	028a      	lsls	r2, r1, #10
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d94:	f7fe fa54 	bl	8000240 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001da0:	e058      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	2200      	movs	r2, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	4611      	mov	r1, r2
 8001dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
 8001db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0159      	lsls	r1, r3, #5
 8001dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dce:	0150      	lsls	r0, r2, #5
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dda:	4649      	mov	r1, r9
 8001ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df4:	ebb2 040a 	subs.w	r4, r2, sl
 8001df8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	00eb      	lsls	r3, r5, #3
 8001e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0a:	00e2      	lsls	r2, r4, #3
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	461d      	mov	r5, r3
 8001e10:	4643      	mov	r3, r8
 8001e12:	18e3      	adds	r3, r4, r3
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	464b      	mov	r3, r9
 8001e18:	eb45 0303 	adc.w	r3, r5, r3
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	028b      	lsls	r3, r1, #10
 8001e2e:	4621      	mov	r1, r4
 8001e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e34:	4621      	mov	r1, r4
 8001e36:	028a      	lsls	r2, r1, #10
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	61fa      	str	r2, [r7, #28]
 8001e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e48:	f7fe f9fa 	bl	8000240 <__aeabi_uldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4613      	mov	r3, r2
 8001e52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e6e:	e002      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3750      	adds	r7, #80	; 0x50
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400

08001e8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0a9b      	lsrs	r3, r3, #10
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08007344 	.word	0x08007344

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed0:	f7ff ffdc 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0b5b      	lsrs	r3, r3, #13
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08007344 	.word	0x08007344

08001ef4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	220f      	movs	r2, #15
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <HAL_RCC_GetClockConfig+0x60>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 020f 	and.w	r2, r3, #15
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d012      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f80:	4b69      	ldr	r3, [pc, #420]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a68      	ldr	r2, [pc, #416]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f8a:	6093      	str	r3, [r2, #8]
 8001f8c:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	4964      	ldr	r1, [pc, #400]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d017      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	4959      	ldr	r1, [pc, #356]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d017      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fee:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	494a      	ldr	r1, [pc, #296]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800200c:	d101      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 808b 	beq.w	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a39      	ldr	r2, [pc, #228]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
 8002048:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002054:	4b35      	ldr	r3, [pc, #212]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a34      	ldr	r2, [pc, #208]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002060:	f7fe fec6 	bl	8000df0 <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7fe fec2 	bl	8000df0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e38f      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d035      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d02e      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d114      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fe8a 	bl	8000df0 <HAL_GetTick>
 80020dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	e00a      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe fe86 	bl	8000df0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e351      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0ee      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800210e:	d111      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800211e:	400b      	ands	r3, r1
 8002120:	4901      	ldr	r1, [pc, #4]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
 8002126:	e00b      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002128:	40023800 	.word	0x40023800
 800212c:	40007000 	.word	0x40007000
 8002130:	0ffffcff 	.word	0x0ffffcff
 8002134:	4bac      	ldr	r3, [pc, #688]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4aab      	ldr	r2, [pc, #684]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800213e:	6093      	str	r3, [r2, #8]
 8002140:	4ba9      	ldr	r3, [pc, #676]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214c:	49a6      	ldr	r1, [pc, #664]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214e:	4313      	orrs	r3, r2
 8002150:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800215e:	4ba2      	ldr	r3, [pc, #648]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002164:	4aa0      	ldr	r2, [pc, #640]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800216e:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002170:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	499b      	ldr	r1, [pc, #620]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218c:	4b96      	ldr	r3, [pc, #600]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800219a:	4993      	ldr	r1, [pc, #588]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ae:	4b8e      	ldr	r3, [pc, #568]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021bc:	498a      	ldr	r1, [pc, #552]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d0:	4b85      	ldr	r3, [pc, #532]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021de:	4982      	ldr	r1, [pc, #520]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021f2:	4b7d      	ldr	r3, [pc, #500]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4979      	ldr	r1, [pc, #484]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002214:	4b74      	ldr	r3, [pc, #464]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4971      	ldr	r1, [pc, #452]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002236:	4b6c      	ldr	r3, [pc, #432]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f023 020c 	bic.w	r2, r3, #12
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002244:	4968      	ldr	r1, [pc, #416]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002258:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	4960      	ldr	r1, [pc, #384]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800227a:	4b5b      	ldr	r3, [pc, #364]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002288:	4957      	ldr	r1, [pc, #348]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800229c:	4b52      	ldr	r3, [pc, #328]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	494f      	ldr	r1, [pc, #316]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4946      	ldr	r1, [pc, #280]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	493e      	ldr	r1, [pc, #248]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002302:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002324:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002332:	492d      	ldr	r1, [pc, #180]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d011      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002354:	4924      	ldr	r1, [pc, #144]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002364:	d101      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	4914      	ldr	r1, [pc, #80]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b8:	490b      	ldr	r1, [pc, #44]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00f      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023dc:	4902      	ldr	r1, [pc, #8]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023e4:	e002      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023f8:	4b8a      	ldr	r3, [pc, #552]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	4986      	ldr	r1, [pc, #536]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800241c:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002422:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800242c:	497d      	ldr	r1, [pc, #500]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d006      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80d6 	beq.w	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002448:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fccc 	bl	8000df0 <HAL_GetTick>
 8002458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800245c:	f7fe fcc8 	bl	8000df0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e195      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d021      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11d      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800248e:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800249c:	4b61      	ldr	r3, [pc, #388]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a2:	0e1b      	lsrs	r3, r3, #24
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	019a      	lsls	r2, r3, #6
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	071b      	lsls	r3, r3, #28
 80024c2:	4958      	ldr	r1, [pc, #352]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d02e      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f4:	d129      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024f6:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002504:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250a:	0f1b      	lsrs	r3, r3, #28
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	019a      	lsls	r2, r3, #6
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	493e      	ldr	r1, [pc, #248]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002532:	4b3c      	ldr	r3, [pc, #240]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002538:	f023 021f 	bic.w	r2, r3, #31
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	3b01      	subs	r3, #1
 8002542:	4938      	ldr	r1, [pc, #224]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01d      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	0e1b      	lsrs	r3, r3, #24
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	0f1b      	lsrs	r3, r3, #28
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	019a      	lsls	r2, r3, #6
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	071b      	lsls	r3, r3, #28
 800258a:	4926      	ldr	r1, [pc, #152]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d011      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	019a      	lsls	r2, r3, #6
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	071b      	lsls	r3, r3, #28
 80025ba:	491a      	ldr	r1, [pc, #104]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ce:	f7fe fc0f 	bl	8000df0 <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025d6:	f7fe fc0b 	bl	8000df0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0d8      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 80ce 	bne.w	8002798 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a08      	ldr	r2, [pc, #32]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002608:	f7fe fbf2 	bl	8000df0 <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800260e:	e00b      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002610:	f7fe fbee 	bl	8000df0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d904      	bls.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0bb      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002628:	4b5e      	ldr	r3, [pc, #376]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002634:	d0ec      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02e      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d12a      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800266c:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	0f1b      	lsrs	r3, r3, #28
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	019a      	lsls	r2, r3, #6
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	061b      	lsls	r3, r3, #24
 800268c:	431a      	orrs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	071b      	lsls	r3, r3, #28
 8002692:	4944      	ldr	r1, [pc, #272]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800269a:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	493d      	ldr	r1, [pc, #244]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d022      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c8:	d11d      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026ca:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	0e1b      	lsrs	r3, r3, #24
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026d8:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	0f1b      	lsrs	r3, r3, #28
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	019a      	lsls	r2, r3, #6
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431a      	orrs	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	061b      	lsls	r3, r3, #24
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	071b      	lsls	r3, r3, #28
 80026fe:	4929      	ldr	r1, [pc, #164]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d028      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	0e1b      	lsrs	r3, r3, #24
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	019a      	lsls	r2, r3, #6
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	071b      	lsls	r3, r3, #28
 8002746:	4917      	ldr	r1, [pc, #92]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	4911      	ldr	r1, [pc, #68]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe fb3e 	bl	8000df0 <HAL_GetTick>
 8002774:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002778:	f7fe fb3a 	bl	8000df0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e007      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002796:	d1ef      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e049      	b.n	800284e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f841 	bl	8002856 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fa00 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d001      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e054      	b.n	800292e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <HAL_TIM_Base_Start_IT+0xd0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d022      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x80>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d01d      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x80>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <HAL_TIM_Base_Start_IT+0xd4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d018      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x80>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <HAL_TIM_Base_Start_IT+0xd8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x80>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <HAL_TIM_Base_Start_IT+0xdc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00e      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x80>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <HAL_TIM_Base_Start_IT+0xe0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x80>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_TIM_Base_Start_IT+0xe4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x80>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_TIM_Base_Start_IT+0xe8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d115      	bne.n	8002918 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_TIM_Base_Start_IT+0xec>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d015      	beq.n	800292a <HAL_TIM_Base_Start_IT+0xbe>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d011      	beq.n	800292a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	e008      	b.n	800292a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e000      	b.n	800292c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40010400 	.word	0x40010400
 8002950:	40014000 	.word	0x40014000
 8002954:	40001800 	.word	0x40001800
 8002958:	00010007 	.word	0x00010007

0800295c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b02      	cmp	r3, #2
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0202 	mvn.w	r2, #2
 8002988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f905 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8f7 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f908 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0204 	mvn.w	r2, #4
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8db 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8cd 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8de 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0208 	mvn.w	r2, #8
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2204      	movs	r2, #4
 8002a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8b1 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8a3 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8b4 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0210 	mvn.w	r2, #16
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f887 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f879 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f88a 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0201 	mvn.w	r2, #1
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fd ff9c 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f91a 	bl	8002d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1a:	d10e      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d107      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f90d 	bl	8002d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d10e      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d107      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f838 	bl	8002bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d10e      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0220 	mvn.w	r2, #32
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8cd 	bl	8002d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d00f      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <TIM_Base_SetConfig+0x118>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <TIM_Base_SetConfig+0x11c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3b      	ldr	r2, [pc, #236]	; (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d027      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <TIM_Base_SetConfig+0x118>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d023      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2b      	ldr	r2, [pc, #172]	; (8002d08 <TIM_Base_SetConfig+0x11c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d017      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <TIM_Base_SetConfig+0x128>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <TIM_Base_SetConfig+0x130>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <TIM_Base_SetConfig+0x134>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <TIM_Base_SetConfig+0x138>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d003      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <TIM_Base_SetConfig+0x13c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0xf8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40010400 	.word	0x40010400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800
 8002d20:	40001800 	.word	0x40001800
 8002d24:	40001c00 	.word	0x40001c00
 8002d28:	40002000 	.word	0x40002000

08002d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e040      	b.n	8002dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd ff6a 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fb78 	bl	800349c <UART_SetConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e022      	b.n	8002dfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fdd0 	bl	8003964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fe57 	bl	8003aa8 <UART_CheckIdleState>
 8002dfa:	4603      	mov	r3, r0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d132      	bne.n	8002e82 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_UART_Receive_IT+0x24>
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e02b      	b.n	8002e84 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d018      	beq.n	8002e72 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	69f9      	ldr	r1, [r7, #28]
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e6      	bne.n	8002e40 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 ff29 	bl	8003cd0 <UART_Start_Receive_IT>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	e000      	b.n	8002e84 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3728      	adds	r7, #40	; 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0ba      	sub	sp, #232	; 0xe8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002eb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002eba:	4013      	ands	r3, r2
 8002ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d115      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00f      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 82ac 	beq.w	8003442 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
      }
      return;
 8002ef2:	e2a6      	b.n	8003442 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8117 	beq.w	800312c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f0e:	4b85      	ldr	r3, [pc, #532]	; (8003124 <HAL_UART_IRQHandler+0x298>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 810a 	beq.w	800312c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d011      	beq.n	8002f48 <HAL_UART_IRQHandler+0xbc>
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d011      	beq.n	8002f78 <HAL_UART_IRQHandler+0xec>
 8002f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2202      	movs	r2, #2
 8002f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6e:	f043 0204 	orr.w	r2, r3, #4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d011      	beq.n	8002fa8 <HAL_UART_IRQHandler+0x11c>
 8002f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2204      	movs	r2, #4
 8002f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d017      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fda:	f043 0208 	orr.w	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <HAL_UART_IRQHandler+0x18a>
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00c      	beq.n	8003016 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8212 	beq.w	8003446 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00d      	beq.n	800304a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d005      	beq.n	800306e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003066:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800306a:	2b00      	cmp	r3, #0
 800306c:	d04f      	beq.n	800310e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fef4 	bl	8003e5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	d141      	bne.n	8003106 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3308      	adds	r3, #8
 8003088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800309c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3308      	adds	r3, #8
 80030aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1d9      	bne.n	8003082 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d013      	beq.n	80030fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030da:	4a13      	ldr	r2, [pc, #76]	; (8003128 <HAL_UART_IRQHandler+0x29c>)
 80030dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd ffe2 	bl	80010ac <HAL_DMA_Abort_IT>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d017      	beq.n	800311e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030f8:	4610      	mov	r0, r2
 80030fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	e00f      	b.n	800311e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9ac 	bl	800345c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003104:	e00b      	b.n	800311e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f9a8 	bl	800345c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310c:	e007      	b.n	800311e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9a4 	bl	800345c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800311c:	e193      	b.n	8003446 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311e:	bf00      	nop
    return;
 8003120:	e191      	b.n	8003446 <HAL_UART_IRQHandler+0x5ba>
 8003122:	bf00      	nop
 8003124:	04000120 	.word	0x04000120
 8003128:	08003f25 	.word	0x08003f25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 814c 	bne.w	80033ce <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8145 	beq.w	80033ce <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 813e 	beq.w	80033ce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	f040 80b6 	bne.w	80032d6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003176:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8165 	beq.w	800344a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800318a:	429a      	cmp	r2, r3
 800318c:	f080 815d 	bcs.w	800344a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a4:	f000 8086 	beq.w	80032b4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1da      	bne.n	80031a8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3308      	adds	r3, #8
 8003212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003216:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800321a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800321e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e1      	bne.n	80031f2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3308      	adds	r3, #8
 8003234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800323e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3308      	adds	r3, #8
 800324e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003252:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e3      	bne.n	800322e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003284:	f023 0310 	bic.w	r3, r3, #16
 8003288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003296:	65bb      	str	r3, [r7, #88]	; 0x58
 8003298:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800329c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e4      	bne.n	8003274 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fe8c 	bl	8000fcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8ce 	bl	8003470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032d4:	e0b9      	b.n	800344a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80ab 	beq.w	800344e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80032f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a6 	beq.w	800344e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	e853 3f00 	ldrex	r3, [r3]
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003316:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
 8003326:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800332a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e4      	bne.n	8003302 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3308      	adds	r3, #8
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	623b      	str	r3, [r7, #32]
   return(result);
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3308      	adds	r3, #8
 8003358:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800335c:	633a      	str	r2, [r7, #48]	; 0x30
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e3      	bne.n	8003338 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	60fb      	str	r3, [r7, #12]
   return(result);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f023 0310 	bic.w	r3, r3, #16
 8003398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	69b9      	ldr	r1, [r7, #24]
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	617b      	str	r3, [r7, #20]
   return(result);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e4      	bne.n	8003384 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f852 	bl	8003470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033cc:	e03f      	b.n	800344e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <HAL_UART_IRQHandler+0x56c>
 80033da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f849 	bl	8003488 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033f6:	e02d      	b.n	8003454 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01c      	beq.n	8003452 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
    }
    return;
 8003420:	e017      	b.n	8003452 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d012      	beq.n	8003454 <HAL_UART_IRQHandler+0x5c8>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fd88 	bl	8003f50 <UART_EndTransmit_IT>
    return;
 8003440:	e008      	b.n	8003454 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003442:	bf00      	nop
 8003444:	e006      	b.n	8003454 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003446:	bf00      	nop
 8003448:	e004      	b.n	8003454 <HAL_UART_IRQHandler+0x5c8>
      return;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <HAL_UART_IRQHandler+0x5c8>
      return;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003452:	bf00      	nop
  }

}
 8003454:	37e8      	adds	r7, #232	; 0xe8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop

0800345c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4ba6      	ldr	r3, [pc, #664]	; (8003760 <UART_SetConfig+0x2c4>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a94      	ldr	r2, [pc, #592]	; (8003764 <UART_SetConfig+0x2c8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d120      	bne.n	800355a <UART_SetConfig+0xbe>
 8003518:	4b93      	ldr	r3, [pc, #588]	; (8003768 <UART_SetConfig+0x2cc>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d816      	bhi.n	8003554 <UART_SetConfig+0xb8>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x90>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003549 	.word	0x08003549
 8003534:	08003543 	.word	0x08003543
 8003538:	0800354f 	.word	0x0800354f
 800353c:	2301      	movs	r3, #1
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e150      	b.n	80037e4 <UART_SetConfig+0x348>
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e14d      	b.n	80037e4 <UART_SetConfig+0x348>
 8003548:	2304      	movs	r3, #4
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e14a      	b.n	80037e4 <UART_SetConfig+0x348>
 800354e:	2308      	movs	r3, #8
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e147      	b.n	80037e4 <UART_SetConfig+0x348>
 8003554:	2310      	movs	r3, #16
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e144      	b.n	80037e4 <UART_SetConfig+0x348>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a83      	ldr	r2, [pc, #524]	; (800376c <UART_SetConfig+0x2d0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d132      	bne.n	80035ca <UART_SetConfig+0x12e>
 8003564:	4b80      	ldr	r3, [pc, #512]	; (8003768 <UART_SetConfig+0x2cc>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d828      	bhi.n	80035c4 <UART_SetConfig+0x128>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <UART_SetConfig+0xdc>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035c5 	.word	0x080035c5
 8003580:	080035c5 	.word	0x080035c5
 8003584:	080035c5 	.word	0x080035c5
 8003588:	080035b9 	.word	0x080035b9
 800358c:	080035c5 	.word	0x080035c5
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035b3 	.word	0x080035b3
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035c5 	.word	0x080035c5
 80035a8:	080035bf 	.word	0x080035bf
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e118      	b.n	80037e4 <UART_SetConfig+0x348>
 80035b2:	2302      	movs	r3, #2
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e115      	b.n	80037e4 <UART_SetConfig+0x348>
 80035b8:	2304      	movs	r3, #4
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e112      	b.n	80037e4 <UART_SetConfig+0x348>
 80035be:	2308      	movs	r3, #8
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e10f      	b.n	80037e4 <UART_SetConfig+0x348>
 80035c4:	2310      	movs	r3, #16
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e10c      	b.n	80037e4 <UART_SetConfig+0x348>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a68      	ldr	r2, [pc, #416]	; (8003770 <UART_SetConfig+0x2d4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d120      	bne.n	8003616 <UART_SetConfig+0x17a>
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <UART_SetConfig+0x2cc>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d013      	beq.n	800360a <UART_SetConfig+0x16e>
 80035e2:	2b30      	cmp	r3, #48	; 0x30
 80035e4:	d814      	bhi.n	8003610 <UART_SetConfig+0x174>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d009      	beq.n	80035fe <UART_SetConfig+0x162>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d810      	bhi.n	8003610 <UART_SetConfig+0x174>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <UART_SetConfig+0x15c>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d006      	beq.n	8003604 <UART_SetConfig+0x168>
 80035f6:	e00b      	b.n	8003610 <UART_SetConfig+0x174>
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e0f2      	b.n	80037e4 <UART_SetConfig+0x348>
 80035fe:	2302      	movs	r3, #2
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e0ef      	b.n	80037e4 <UART_SetConfig+0x348>
 8003604:	2304      	movs	r3, #4
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0ec      	b.n	80037e4 <UART_SetConfig+0x348>
 800360a:	2308      	movs	r3, #8
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e0e9      	b.n	80037e4 <UART_SetConfig+0x348>
 8003610:	2310      	movs	r3, #16
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0e6      	b.n	80037e4 <UART_SetConfig+0x348>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a56      	ldr	r2, [pc, #344]	; (8003774 <UART_SetConfig+0x2d8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d120      	bne.n	8003662 <UART_SetConfig+0x1c6>
 8003620:	4b51      	ldr	r3, [pc, #324]	; (8003768 <UART_SetConfig+0x2cc>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800362a:	2bc0      	cmp	r3, #192	; 0xc0
 800362c:	d013      	beq.n	8003656 <UART_SetConfig+0x1ba>
 800362e:	2bc0      	cmp	r3, #192	; 0xc0
 8003630:	d814      	bhi.n	800365c <UART_SetConfig+0x1c0>
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d009      	beq.n	800364a <UART_SetConfig+0x1ae>
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d810      	bhi.n	800365c <UART_SetConfig+0x1c0>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <UART_SetConfig+0x1a8>
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d006      	beq.n	8003650 <UART_SetConfig+0x1b4>
 8003642:	e00b      	b.n	800365c <UART_SetConfig+0x1c0>
 8003644:	2300      	movs	r3, #0
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e0cc      	b.n	80037e4 <UART_SetConfig+0x348>
 800364a:	2302      	movs	r3, #2
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e0c9      	b.n	80037e4 <UART_SetConfig+0x348>
 8003650:	2304      	movs	r3, #4
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e0c6      	b.n	80037e4 <UART_SetConfig+0x348>
 8003656:	2308      	movs	r3, #8
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e0c3      	b.n	80037e4 <UART_SetConfig+0x348>
 800365c:	2310      	movs	r3, #16
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e0c0      	b.n	80037e4 <UART_SetConfig+0x348>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a44      	ldr	r2, [pc, #272]	; (8003778 <UART_SetConfig+0x2dc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d125      	bne.n	80036b8 <UART_SetConfig+0x21c>
 800366c:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <UART_SetConfig+0x2cc>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367a:	d017      	beq.n	80036ac <UART_SetConfig+0x210>
 800367c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003680:	d817      	bhi.n	80036b2 <UART_SetConfig+0x216>
 8003682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003686:	d00b      	beq.n	80036a0 <UART_SetConfig+0x204>
 8003688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368c:	d811      	bhi.n	80036b2 <UART_SetConfig+0x216>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <UART_SetConfig+0x1fe>
 8003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003696:	d006      	beq.n	80036a6 <UART_SetConfig+0x20a>
 8003698:	e00b      	b.n	80036b2 <UART_SetConfig+0x216>
 800369a:	2300      	movs	r3, #0
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0a1      	b.n	80037e4 <UART_SetConfig+0x348>
 80036a0:	2302      	movs	r3, #2
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e09e      	b.n	80037e4 <UART_SetConfig+0x348>
 80036a6:	2304      	movs	r3, #4
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e09b      	b.n	80037e4 <UART_SetConfig+0x348>
 80036ac:	2308      	movs	r3, #8
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e098      	b.n	80037e4 <UART_SetConfig+0x348>
 80036b2:	2310      	movs	r3, #16
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e095      	b.n	80037e4 <UART_SetConfig+0x348>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	; (800377c <UART_SetConfig+0x2e0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d125      	bne.n	800370e <UART_SetConfig+0x272>
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <UART_SetConfig+0x2cc>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d0:	d017      	beq.n	8003702 <UART_SetConfig+0x266>
 80036d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d6:	d817      	bhi.n	8003708 <UART_SetConfig+0x26c>
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036dc:	d00b      	beq.n	80036f6 <UART_SetConfig+0x25a>
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d811      	bhi.n	8003708 <UART_SetConfig+0x26c>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <UART_SetConfig+0x254>
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ec:	d006      	beq.n	80036fc <UART_SetConfig+0x260>
 80036ee:	e00b      	b.n	8003708 <UART_SetConfig+0x26c>
 80036f0:	2301      	movs	r3, #1
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	e076      	b.n	80037e4 <UART_SetConfig+0x348>
 80036f6:	2302      	movs	r3, #2
 80036f8:	77fb      	strb	r3, [r7, #31]
 80036fa:	e073      	b.n	80037e4 <UART_SetConfig+0x348>
 80036fc:	2304      	movs	r3, #4
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e070      	b.n	80037e4 <UART_SetConfig+0x348>
 8003702:	2308      	movs	r3, #8
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e06d      	b.n	80037e4 <UART_SetConfig+0x348>
 8003708:	2310      	movs	r3, #16
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e06a      	b.n	80037e4 <UART_SetConfig+0x348>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <UART_SetConfig+0x2e4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d138      	bne.n	800378a <UART_SetConfig+0x2ee>
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <UART_SetConfig+0x2cc>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003726:	d017      	beq.n	8003758 <UART_SetConfig+0x2bc>
 8003728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800372c:	d82a      	bhi.n	8003784 <UART_SetConfig+0x2e8>
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003732:	d00b      	beq.n	800374c <UART_SetConfig+0x2b0>
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d824      	bhi.n	8003784 <UART_SetConfig+0x2e8>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <UART_SetConfig+0x2aa>
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d006      	beq.n	8003752 <UART_SetConfig+0x2b6>
 8003744:	e01e      	b.n	8003784 <UART_SetConfig+0x2e8>
 8003746:	2300      	movs	r3, #0
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e04b      	b.n	80037e4 <UART_SetConfig+0x348>
 800374c:	2302      	movs	r3, #2
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e048      	b.n	80037e4 <UART_SetConfig+0x348>
 8003752:	2304      	movs	r3, #4
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e045      	b.n	80037e4 <UART_SetConfig+0x348>
 8003758:	2308      	movs	r3, #8
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e042      	b.n	80037e4 <UART_SetConfig+0x348>
 800375e:	bf00      	nop
 8003760:	efff69f3 	.word	0xefff69f3
 8003764:	40011000 	.word	0x40011000
 8003768:	40023800 	.word	0x40023800
 800376c:	40004400 	.word	0x40004400
 8003770:	40004800 	.word	0x40004800
 8003774:	40004c00 	.word	0x40004c00
 8003778:	40005000 	.word	0x40005000
 800377c:	40011400 	.word	0x40011400
 8003780:	40007800 	.word	0x40007800
 8003784:	2310      	movs	r3, #16
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e02c      	b.n	80037e4 <UART_SetConfig+0x348>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a72      	ldr	r2, [pc, #456]	; (8003958 <UART_SetConfig+0x4bc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d125      	bne.n	80037e0 <UART_SetConfig+0x344>
 8003794:	4b71      	ldr	r3, [pc, #452]	; (800395c <UART_SetConfig+0x4c0>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800379e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a2:	d017      	beq.n	80037d4 <UART_SetConfig+0x338>
 80037a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a8:	d817      	bhi.n	80037da <UART_SetConfig+0x33e>
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ae:	d00b      	beq.n	80037c8 <UART_SetConfig+0x32c>
 80037b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b4:	d811      	bhi.n	80037da <UART_SetConfig+0x33e>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <UART_SetConfig+0x326>
 80037ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037be:	d006      	beq.n	80037ce <UART_SetConfig+0x332>
 80037c0:	e00b      	b.n	80037da <UART_SetConfig+0x33e>
 80037c2:	2300      	movs	r3, #0
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e00d      	b.n	80037e4 <UART_SetConfig+0x348>
 80037c8:	2302      	movs	r3, #2
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e00a      	b.n	80037e4 <UART_SetConfig+0x348>
 80037ce:	2304      	movs	r3, #4
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e007      	b.n	80037e4 <UART_SetConfig+0x348>
 80037d4:	2308      	movs	r3, #8
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e004      	b.n	80037e4 <UART_SetConfig+0x348>
 80037da:	2310      	movs	r3, #16
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e001      	b.n	80037e4 <UART_SetConfig+0x348>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ec:	d15b      	bne.n	80038a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d828      	bhi.n	8003846 <UART_SetConfig+0x3aa>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x360>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003821 	.word	0x08003821
 8003800:	08003829 	.word	0x08003829
 8003804:	08003831 	.word	0x08003831
 8003808:	08003847 	.word	0x08003847
 800380c:	08003837 	.word	0x08003837
 8003810:	08003847 	.word	0x08003847
 8003814:	08003847 	.word	0x08003847
 8003818:	08003847 	.word	0x08003847
 800381c:	0800383f 	.word	0x0800383f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe fb40 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8003824:	61b8      	str	r0, [r7, #24]
        break;
 8003826:	e013      	b.n	8003850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003828:	f7fe fb50 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 800382c:	61b8      	str	r0, [r7, #24]
        break;
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <UART_SetConfig+0x4c4>)
 8003832:	61bb      	str	r3, [r7, #24]
        break;
 8003834:	e00c      	b.n	8003850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7fe fa25 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 800383a:	61b8      	str	r0, [r7, #24]
        break;
 800383c:	e008      	b.n	8003850 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	61bb      	str	r3, [r7, #24]
        break;
 8003844:	e004      	b.n	8003850 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	77bb      	strb	r3, [r7, #30]
        break;
 800384e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d074      	beq.n	8003940 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	005a      	lsls	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d916      	bls.n	80038a0 <UART_SetConfig+0x404>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d212      	bcs.n	80038a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	b29b      	uxth	r3, r3
 800387e:	f023 030f 	bic.w	r3, r3, #15
 8003882:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	b29a      	uxth	r2, r3
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	4313      	orrs	r3, r2
 8003894:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	89fa      	ldrh	r2, [r7, #14]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	e04f      	b.n	8003940 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	77bb      	strb	r3, [r7, #30]
 80038a4:	e04c      	b.n	8003940 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038a6:	7ffb      	ldrb	r3, [r7, #31]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d828      	bhi.n	80038fe <UART_SetConfig+0x462>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x418>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	080038e1 	.word	0x080038e1
 80038bc:	080038e9 	.word	0x080038e9
 80038c0:	080038ff 	.word	0x080038ff
 80038c4:	080038ef 	.word	0x080038ef
 80038c8:	080038ff 	.word	0x080038ff
 80038cc:	080038ff 	.word	0x080038ff
 80038d0:	080038ff 	.word	0x080038ff
 80038d4:	080038f7 	.word	0x080038f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7fe fae4 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 80038dc:	61b8      	str	r0, [r7, #24]
        break;
 80038de:	e013      	b.n	8003908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7fe faf4 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 80038e4:	61b8      	str	r0, [r7, #24]
        break;
 80038e6:	e00f      	b.n	8003908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <UART_SetConfig+0x4c4>)
 80038ea:	61bb      	str	r3, [r7, #24]
        break;
 80038ec:	e00c      	b.n	8003908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7fe f9c9 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 80038f2:	61b8      	str	r0, [r7, #24]
        break;
 80038f4:	e008      	b.n	8003908 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fa:	61bb      	str	r3, [r7, #24]
        break;
 80038fc:	e004      	b.n	8003908 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	77bb      	strb	r3, [r7, #30]
        break;
 8003906:	bf00      	nop
    }

    if (pclk != 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	085a      	lsrs	r2, r3, #1
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d909      	bls.n	800393c <UART_SetConfig+0x4a0>
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392e:	d205      	bcs.n	800393c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	e001      	b.n	8003940 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800394c:	7fbb      	ldrb	r3, [r7, #30]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40007c00 	.word	0x40007c00
 800395c:	40023800 	.word	0x40023800
 8003960:	00f42400 	.word	0x00f42400

08003964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01a      	beq.n	8003a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a62:	d10a      	bne.n	8003a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab8:	f7fd f99a 	bl	8000df0 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d10e      	bne.n	8003aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f831 	bl	8003b42 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e027      	b.n	8003b3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d10e      	bne.n	8003b16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f81b 	bl	8003b42 <UART_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e011      	b.n	8003b3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b09c      	sub	sp, #112	; 0x70
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b52:	e0a7      	b.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	f000 80a3 	beq.w	8003ca4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5e:	f7fd f947 	bl	8000df0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d13f      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b88:	667b      	str	r3, [r7, #100]	; 0x64
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e6      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e5      	bne.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e068      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d050      	beq.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c10:	d148      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e6      	bne.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3308      	adds	r3, #8
 8003c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c6e:	623a      	str	r2, [r7, #32]
 8003c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	69f9      	ldr	r1, [r7, #28]
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e010      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f43f af48 	beq.w	8003b54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3770      	adds	r7, #112	; 0x70
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b097      	sub	sp, #92	; 0x5c
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	d10e      	bne.n	8003d22 <UART_Start_Receive_IT+0x52>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <UART_Start_Receive_IT+0x48>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d16:	e02d      	b.n	8003d74 <UART_Start_Receive_IT+0xa4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	22ff      	movs	r2, #255	; 0xff
 8003d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d20:	e028      	b.n	8003d74 <UART_Start_Receive_IT+0xa4>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10d      	bne.n	8003d46 <UART_Start_Receive_IT+0x76>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <UART_Start_Receive_IT+0x6c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	22ff      	movs	r2, #255	; 0xff
 8003d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d3a:	e01b      	b.n	8003d74 <UART_Start_Receive_IT+0xa4>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	227f      	movs	r2, #127	; 0x7f
 8003d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d44:	e016      	b.n	8003d74 <UART_Start_Receive_IT+0xa4>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d4e:	d10d      	bne.n	8003d6c <UART_Start_Receive_IT+0x9c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <UART_Start_Receive_IT+0x92>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	227f      	movs	r2, #127	; 0x7f
 8003d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d60:	e008      	b.n	8003d74 <UART_Start_Receive_IT+0xa4>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	223f      	movs	r2, #63	; 0x3f
 8003d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d6a:	e003      	b.n	8003d74 <UART_Start_Receive_IT+0xa4>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2222      	movs	r2, #34	; 0x22
 8003d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003da4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003da6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc0:	d107      	bne.n	8003dd2 <UART_Start_Receive_IT+0x102>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <UART_Start_Receive_IT+0x184>)
 8003dce:	669a      	str	r2, [r3, #104]	; 0x68
 8003dd0:	e002      	b.n	8003dd8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a20      	ldr	r2, [pc, #128]	; (8003e58 <UART_Start_Receive_IT+0x188>)
 8003dd6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d019      	beq.n	8003e14 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003df4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003e00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e6      	bne.n	8003de0 <UART_Start_Receive_IT+0x110>
 8003e12:	e018      	b.n	8003e46 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	613b      	str	r3, [r7, #16]
   return(result);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f043 0320 	orr.w	r3, r3, #32
 8003e28:	653b      	str	r3, [r7, #80]	; 0x50
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	69f9      	ldr	r1, [r7, #28]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e6      	bne.n	8003e14 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	375c      	adds	r7, #92	; 0x5c
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	0800410b 	.word	0x0800410b
 8003e58:	08003fa5 	.word	0x08003fa5

08003e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b095      	sub	sp, #84	; 0x54
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e82:	643b      	str	r3, [r7, #64]	; 0x40
 8003e84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e6      	bne.n	8003e64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e5      	bne.n	8003e96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d118      	bne.n	8003f04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	613b      	str	r3, [r7, #16]
   return(result);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e6      	bne.n	8003ed2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f18:	bf00      	nop
 8003f1a:	3754      	adds	r7, #84	; 0x54
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fa8a 	bl	800345c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6979      	ldr	r1, [r7, #20]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	613b      	str	r3, [r7, #16]
   return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e6      	bne.n	8003f58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fc fd30 	bl	80009fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9c:	bf00      	nop
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b096      	sub	sp, #88	; 0x58
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fb2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbc:	2b22      	cmp	r3, #34	; 0x22
 8003fbe:	f040 8098 	bne.w	80040f2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fcc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003fd0:	b2d9      	uxtb	r1, r3
 8003fd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	400a      	ands	r2, r1
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d17b      	bne.n	8004102 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800401e:	653b      	str	r3, [r7, #80]	; 0x50
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004028:	647b      	str	r3, [r7, #68]	; 0x44
 800402a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800402e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	623b      	str	r3, [r7, #32]
   return(result);
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800405c:	633a      	str	r2, [r7, #48]	; 0x30
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e5      	bne.n	800403c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004088:	2b01      	cmp	r3, #1
 800408a:	d12e      	bne.n	80040ea <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0310 	bic.w	r3, r3, #16
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	617b      	str	r3, [r7, #20]
   return(result);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e6      	bne.n	8004092 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d103      	bne.n	80040da <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2210      	movs	r2, #16
 80040d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff f9c4 	bl	8003470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040e8:	e00b      	b.n	8004102 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc fc5a 	bl	80009a4 <HAL_UART_RxCpltCallback>
}
 80040f0:	e007      	b.n	8004102 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0208 	orr.w	r2, r2, #8
 8004100:	619a      	str	r2, [r3, #24]
}
 8004102:	bf00      	nop
 8004104:	3758      	adds	r7, #88	; 0x58
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b096      	sub	sp, #88	; 0x58
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004118:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004122:	2b22      	cmp	r3, #34	; 0x22
 8004124:	f040 8098 	bne.w	8004258 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004138:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800413c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004140:	4013      	ands	r3, r2
 8004142:	b29a      	uxth	r2, r3
 8004144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004146:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d17b      	bne.n	8004268 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418e:	643b      	str	r3, [r7, #64]	; 0x40
 8004190:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e6      	bne.n	8004170 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d12e      	bne.n	8004250 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	60bb      	str	r3, [r7, #8]
   return(result);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f023 0310 	bic.w	r3, r3, #16
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6979      	ldr	r1, [r7, #20]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	613b      	str	r3, [r7, #16]
   return(result);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e6      	bne.n	80041f8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b10      	cmp	r3, #16
 8004236:	d103      	bne.n	8004240 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2210      	movs	r2, #16
 800423e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff f911 	bl	8003470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800424e:	e00b      	b.n	8004268 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fc fba7 	bl	80009a4 <HAL_UART_RxCpltCallback>
}
 8004256:	e007      	b.n	8004268 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	619a      	str	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	3758      	adds	r7, #88	; 0x58
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004286:	f3ef 8305 	mrs	r3, IPSR
 800428a:	60bb      	str	r3, [r7, #8]
  return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004292:	f3ef 8310 	mrs	r3, PRIMASK
 8004296:	607b      	str	r3, [r7, #4]
  return(result);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d105      	bne.n	80042aa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800429e:	f3ef 8311 	mrs	r3, BASEPRI
 80042a2:	603b      	str	r3, [r7, #0]
  return(result);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <osKernelInitialize+0x3a>
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <osKernelInitialize+0x64>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d103      	bne.n	80042ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80042b2:	f06f 0305 	mvn.w	r3, #5
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e00c      	b.n	80042d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <osKernelInitialize+0x64>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <osKernelInitialize+0x64>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e002      	b.n	80042d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80042d4:	68fb      	ldr	r3, [r7, #12]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000168 	.word	0x20000168

080042e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ee:	f3ef 8305 	mrs	r3, IPSR
 80042f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fa:	f3ef 8310 	mrs	r3, PRIMASK
 80042fe:	607b      	str	r3, [r7, #4]
  return(result);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d105      	bne.n	8004312 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004306:	f3ef 8311 	mrs	r3, BASEPRI
 800430a:	603b      	str	r3, [r7, #0]
  return(result);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <osKernelStart+0x3a>
 8004312:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <osKernelStart+0x68>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d103      	bne.n	8004322 <osKernelStart+0x3a>
    stat = osErrorISR;
 800431a:	f06f 0305 	mvn.w	r3, #5
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e010      	b.n	8004344 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <osKernelStart+0x68>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d109      	bne.n	800433e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800432a:	f7ff ffa1 	bl	8004270 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <osKernelStart+0x68>)
 8004330:	2202      	movs	r2, #2
 8004332:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004334:	f001 f9fc 	bl	8005730 <vTaskStartScheduler>
      stat = osOK;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e002      	b.n	8004344 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800433e:	f04f 33ff 	mov.w	r3, #4294967295
 8004342:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004344:	68fb      	ldr	r3, [r7, #12]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000168 	.word	0x20000168

08004354 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b090      	sub	sp, #64	; 0x40
 8004358:	af04      	add	r7, sp, #16
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004364:	f3ef 8305 	mrs	r3, IPSR
 8004368:	61fb      	str	r3, [r7, #28]
  return(result);
 800436a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 808f 	bne.w	8004490 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004372:	f3ef 8310 	mrs	r3, PRIMASK
 8004376:	61bb      	str	r3, [r7, #24]
  return(result);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800437e:	f3ef 8311 	mrs	r3, BASEPRI
 8004382:	617b      	str	r3, [r7, #20]
  return(result);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <osThreadNew+0x3e>
 800438a:	4b44      	ldr	r3, [pc, #272]	; (800449c <osThreadNew+0x148>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d07e      	beq.n	8004490 <osThreadNew+0x13c>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d07b      	beq.n	8004490 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800439c:	2318      	movs	r3, #24
 800439e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80043a4:	f04f 33ff 	mov.w	r3, #4294967295
 80043a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d045      	beq.n	800443c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <osThreadNew+0x6a>
        name = attr->name;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <osThreadNew+0x90>
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	2b38      	cmp	r3, #56	; 0x38
 80043d6:	d805      	bhi.n	80043e4 <osThreadNew+0x90>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <osThreadNew+0x94>
        return (NULL);
 80043e4:	2300      	movs	r3, #0
 80043e6:	e054      	b.n	8004492 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <osThreadNew+0xca>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2ba7      	cmp	r3, #167	; 0xa7
 8004406:	d90a      	bls.n	800441e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800440c:	2b00      	cmp	r3, #0
 800440e:	d006      	beq.n	800441e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <osThreadNew+0xca>
        mem = 1;
 8004418:	2301      	movs	r3, #1
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	e010      	b.n	8004440 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10c      	bne.n	8004440 <osThreadNew+0xec>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <osThreadNew+0xec>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <osThreadNew+0xec>
          mem = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	623b      	str	r3, [r7, #32]
 800443a:	e001      	b.n	8004440 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d110      	bne.n	8004468 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800444e:	9202      	str	r2, [sp, #8]
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800445a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fe11 	bl	8005084 <xTaskCreateStatic>
 8004462:	4603      	mov	r3, r0
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	e013      	b.n	8004490 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d110      	bne.n	8004490 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	b29a      	uxth	r2, r3
 8004472:	f107 0310 	add.w	r3, r7, #16
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fe62 	bl	800514a <xTaskCreate>
 8004486:	4603      	mov	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d001      	beq.n	8004490 <osThreadNew+0x13c>
          hTask = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004490:	693b      	ldr	r3, [r7, #16]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3730      	adds	r7, #48	; 0x30
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000168 	.word	0x20000168

080044a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a07      	ldr	r2, [pc, #28]	; (80044cc <vApplicationGetIdleTaskMemory+0x2c>)
 80044b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a06      	ldr	r2, [pc, #24]	; (80044d0 <vApplicationGetIdleTaskMemory+0x30>)
 80044b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	2000016c 	.word	0x2000016c
 80044d0:	20000214 	.word	0x20000214

080044d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a07      	ldr	r2, [pc, #28]	; (8004500 <vApplicationGetTimerTaskMemory+0x2c>)
 80044e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a06      	ldr	r2, [pc, #24]	; (8004504 <vApplicationGetTimerTaskMemory+0x30>)
 80044ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000414 	.word	0x20000414
 8004504:	200004bc 	.word	0x200004bc

08004508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f103 0208 	add.w	r2, r3, #8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f04f 32ff 	mov.w	r2, #4294967295
 8004520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f103 0208 	add.w	r2, r3, #8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f103 0208 	add.w	r2, r3, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d103      	bne.n	80045ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e00c      	b.n	80045e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3308      	adds	r3, #8
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e002      	b.n	80045d8 <vListInsert+0x2e>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d2f6      	bcs.n	80045d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	601a      	str	r2, [r3, #0]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6892      	ldr	r2, [r2, #8]
 8004632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6852      	ldr	r2, [r2, #4]
 800463c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d103      	bne.n	8004650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1e5a      	subs	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10c      	bne.n	800469e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	b672      	cpsid	i
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	b662      	cpsie	i
 8004698:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800469e:	f002 fa05 	bl	8006aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	3b01      	subs	r3, #1
 80046d0:	68f9      	ldr	r1, [r7, #12]
 80046d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	441a      	add	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	; 0xff
 80046e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	22ff      	movs	r2, #255	; 0xff
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d114      	bne.n	800471e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01a      	beq.n	8004732 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3310      	adds	r3, #16
 8004700:	4618      	mov	r0, r3
 8004702:	f001 fabd 	bl	8005c80 <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <xQueueGenericReset+0xd0>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e009      	b.n	8004732 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3310      	adds	r3, #16
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fef0 	bl	8004508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3324      	adds	r3, #36	; 0x24
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff feeb 	bl	8004508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004732:	f002 f9ef 	bl	8006b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004736:	2301      	movs	r3, #1
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08e      	sub	sp, #56	; 0x38
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10c      	bne.n	8004772 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	b672      	cpsid	i
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	b662      	cpsie	i
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10c      	bne.n	8004792 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	b672      	cpsid	i
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	b662      	cpsie	i
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <xQueueGenericCreateStatic+0x5a>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <xQueueGenericCreateStatic+0x5e>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <xQueueGenericCreateStatic+0x60>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10c      	bne.n	80047c2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	b672      	cpsid	i
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	b662      	cpsie	i
 80047bc:	623b      	str	r3, [r7, #32]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <xQueueGenericCreateStatic+0x8a>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericCreateStatic+0x8e>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericCreateStatic+0x90>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10c      	bne.n	80047f2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	b672      	cpsid	i
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	b662      	cpsie	i
 80047ec:	61fb      	str	r3, [r7, #28]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047f2:	2350      	movs	r3, #80	; 0x50
 80047f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b50      	cmp	r3, #80	; 0x50
 80047fa:	d00c      	beq.n	8004816 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	b672      	cpsid	i
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	b662      	cpsie	i
 8004810:	61bb      	str	r3, [r7, #24]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004816:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800482a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4613      	mov	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f805 	bl	8004848 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004840:	4618      	mov	r0, r3
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d103      	bne.n	8004864 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e002      	b.n	800486a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004876:	2101      	movs	r1, #1
 8004878:	69b8      	ldr	r0, [r7, #24]
 800487a:	f7ff fef9 	bl	8004670 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08e      	sub	sp, #56	; 0x38
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800489e:	2300      	movs	r3, #0
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10c      	bne.n	80048c6 <xQueueGenericSend+0x36>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	b672      	cpsid	i
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	b662      	cpsie	i
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d103      	bne.n	80048d4 <xQueueGenericSend+0x44>
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <xQueueGenericSend+0x48>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <xQueueGenericSend+0x4a>
 80048d8:	2300      	movs	r3, #0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10c      	bne.n	80048f8 <xQueueGenericSend+0x68>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	b672      	cpsid	i
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	b662      	cpsie	i
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d103      	bne.n	8004906 <xQueueGenericSend+0x76>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <xQueueGenericSend+0x7a>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <xQueueGenericSend+0x7c>
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10c      	bne.n	800492a <xQueueGenericSend+0x9a>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	b672      	cpsid	i
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	b662      	cpsie	i
 8004924:	623b      	str	r3, [r7, #32]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800492a:	f001 fb73 	bl	8006014 <xTaskGetSchedulerState>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <xQueueGenericSend+0xaa>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <xQueueGenericSend+0xae>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <xQueueGenericSend+0xb0>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <xQueueGenericSend+0xce>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	b672      	cpsid	i
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	b662      	cpsie	i
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800495e:	f002 f8a5 	bl	8006aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <xQueueGenericSend+0xe4>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d129      	bne.n	80049c8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497a:	f000 fa15 	bl	8004da8 <prvCopyDataToQueue>
 800497e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	3324      	adds	r3, #36	; 0x24
 800498c:	4618      	mov	r0, r3
 800498e:	f001 f977 	bl	8005c80 <xTaskRemoveFromEventList>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <xQueueGenericSend+0x208>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	e00a      	b.n	80049c0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049b0:	4b39      	ldr	r3, [pc, #228]	; (8004a98 <xQueueGenericSend+0x208>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049c0:	f002 f8a8 	bl	8006b14 <vPortExitCritical>
				return pdPASS;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e063      	b.n	8004a90 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ce:	f002 f8a1 	bl	8006b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e05c      	b.n	8004a90 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f9b3 	bl	8005d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ea:	f002 f893 	bl	8006b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ee:	f000 ff13 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f2:	f002 f85b 	bl	8006aac <vPortEnterCritical>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d103      	bne.n	8004a0c <xQueueGenericSend+0x17c>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x192>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a22:	f002 f877 	bl	8006b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a26:	1d3a      	adds	r2, r7, #4
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 f9a2 	bl	8005d78 <xTaskCheckForTimeOut>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d124      	bne.n	8004a84 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3c:	f000 faac 	bl	8004f98 <prvIsQueueFull>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	3310      	adds	r3, #16
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 f8c2 	bl	8005bd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a56:	f000 fa37 	bl	8004ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a5a:	f000 feeb 	bl	8005834 <xTaskResumeAll>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af7c 	bne.w	800495e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <xQueueGenericSend+0x208>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	e772      	b.n	800495e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a7a:	f000 fa25 	bl	8004ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a7e:	f000 fed9 	bl	8005834 <xTaskResumeAll>
 8004a82:	e76c      	b.n	800495e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a86:	f000 fa1f 	bl	8004ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a8a:	f000 fed3 	bl	8005834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3738      	adds	r7, #56	; 0x38
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08e      	sub	sp, #56	; 0x38
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10c      	bne.n	8004ace <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	b672      	cpsid	i
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	b662      	cpsie	i
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d103      	bne.n	8004adc <xQueueGenericSendFromISR+0x40>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <xQueueGenericSendFromISR+0x44>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <xQueueGenericSendFromISR+0x46>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10c      	bne.n	8004b00 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	b672      	cpsid	i
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	b662      	cpsie	i
 8004afa:	623b      	str	r3, [r7, #32]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d103      	bne.n	8004b0e <xQueueGenericSendFromISR+0x72>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <xQueueGenericSendFromISR+0x76>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <xQueueGenericSendFromISR+0x78>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10c      	bne.n	8004b32 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	b672      	cpsid	i
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	b662      	cpsie	i
 8004b2c:	61fb      	str	r3, [r7, #28]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b32:	f002 f8a3 	bl	8006c7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b36:	f3ef 8211 	mrs	r2, BASEPRI
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	b672      	cpsid	i
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	b662      	cpsie	i
 8004b4e:	61ba      	str	r2, [r7, #24]
 8004b50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <xQueueGenericSendFromISR+0xcc>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d12c      	bne.n	8004bc2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b78:	f000 f916 	bl	8004da8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d112      	bne.n	8004bac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	3324      	adds	r3, #36	; 0x24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 f874 	bl	8005c80 <xTaskRemoveFromEventList>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00e      	beq.n	8004bbc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e007      	b.n	8004bbc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	b25a      	sxtb	r2, r3
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004bc0:	e001      	b.n	8004bc6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3738      	adds	r7, #56	; 0x38
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10c      	bne.n	8004c10 <xQueueReceive+0x34>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	b672      	cpsid	i
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	b662      	cpsie	i
 8004c0a:	623b      	str	r3, [r7, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <xQueueReceive+0x42>
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <xQueueReceive+0x46>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <xQueueReceive+0x48>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <xQueueReceive+0x66>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	b672      	cpsid	i
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	b662      	cpsie	i
 8004c3c:	61fb      	str	r3, [r7, #28]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c42:	f001 f9e7 	bl	8006014 <xTaskGetSchedulerState>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <xQueueReceive+0x76>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xQueueReceive+0x7a>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueReceive+0x7c>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10c      	bne.n	8004c76 <xQueueReceive+0x9a>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	61bb      	str	r3, [r7, #24]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c76:	f001 ff19 	bl	8006aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01f      	beq.n	8004cc6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8a:	f000 f8f7 	bl	8004e7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00f      	beq.n	8004cbe <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	3310      	adds	r3, #16
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ffec 	bl	8005c80 <xTaskRemoveFromEventList>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cae:	4b3d      	ldr	r3, [pc, #244]	; (8004da4 <xQueueReceive+0x1c8>)
 8004cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cbe:	f001 ff29 	bl	8006b14 <vPortExitCritical>
				return pdPASS;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e069      	b.n	8004d9a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d103      	bne.n	8004cd4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ccc:	f001 ff22 	bl	8006b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e062      	b.n	8004d9a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cda:	f107 0310 	add.w	r3, r7, #16
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 f834 	bl	8005d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ce8:	f001 ff14 	bl	8006b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cec:	f000 fd94 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cf0:	f001 fedc 	bl	8006aac <vPortEnterCritical>
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d103      	bne.n	8004d0a <xQueueReceive+0x12e>
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d10:	b25b      	sxtb	r3, r3
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d103      	bne.n	8004d20 <xQueueReceive+0x144>
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d20:	f001 fef8 	bl	8006b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d24:	1d3a      	adds	r2, r7, #4
 8004d26:	f107 0310 	add.w	r3, r7, #16
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 f823 	bl	8005d78 <xTaskCheckForTimeOut>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d123      	bne.n	8004d80 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3a:	f000 f917 	bl	8004f6c <prvIsQueueEmpty>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d017      	beq.n	8004d74 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3324      	adds	r3, #36	; 0x24
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 ff43 	bl	8005bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d54:	f000 f8b8 	bl	8004ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d58:	f000 fd6c 	bl	8005834 <xTaskResumeAll>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d189      	bne.n	8004c76 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <xQueueReceive+0x1c8>)
 8004d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	e780      	b.n	8004c76 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d76:	f000 f8a7 	bl	8004ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d7a:	f000 fd5b 	bl	8005834 <xTaskResumeAll>
 8004d7e:	e77a      	b.n	8004c76 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d82:	f000 f8a1 	bl	8004ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d86:	f000 fd55 	bl	8005834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d8c:	f000 f8ee 	bl	8004f6c <prvIsQueueEmpty>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f43f af6f 	beq.w	8004c76 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3730      	adds	r7, #48	; 0x30
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	e000ed04 	.word	0xe000ed04

08004da8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10d      	bne.n	8004de2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d14d      	bne.n	8004e6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 f93c 	bl	8006050 <xTaskPriorityDisinherit>
 8004dd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	e043      	b.n	8004e6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d119      	bne.n	8004e1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6858      	ldr	r0, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	461a      	mov	r2, r3
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	f002 f9ee 	bl	80071d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	441a      	add	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d32b      	bcc.n	8004e6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	e026      	b.n	8004e6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68d8      	ldr	r0, [r3, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	461a      	mov	r2, r3
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	f002 f9d4 	bl	80071d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	425b      	negs	r3, r3
 8004e36:	441a      	add	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d207      	bcs.n	8004e58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	425b      	negs	r3, r3
 8004e52:	441a      	add	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d105      	bne.n	8004e6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e72:	697b      	ldr	r3, [r7, #20]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d018      	beq.n	8004ec0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	441a      	add	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d303      	bcc.n	8004eb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68d9      	ldr	r1, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6838      	ldr	r0, [r7, #0]
 8004ebc:	f002 f98a 	bl	80071d4 <memcpy>
	}
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ed0:	f001 fdec 	bl	8006aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004edc:	e011      	b.n	8004f02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d012      	beq.n	8004f0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3324      	adds	r3, #36	; 0x24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fec8 	bl	8005c80 <xTaskRemoveFromEventList>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ef6:	f000 ffa5 	bl	8005e44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	dce9      	bgt.n	8004ede <prvUnlockQueue+0x16>
 8004f0a:	e000      	b.n	8004f0e <prvUnlockQueue+0x46>
					break;
 8004f0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	22ff      	movs	r2, #255	; 0xff
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f16:	f001 fdfd 	bl	8006b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f1a:	f001 fdc7 	bl	8006aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f26:	e011      	b.n	8004f4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d012      	beq.n	8004f56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3310      	adds	r3, #16
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fea3 	bl	8005c80 <xTaskRemoveFromEventList>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f40:	f000 ff80 	bl	8005e44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f44:	7bbb      	ldrb	r3, [r7, #14]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dce9      	bgt.n	8004f28 <prvUnlockQueue+0x60>
 8004f54:	e000      	b.n	8004f58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	22ff      	movs	r2, #255	; 0xff
 8004f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f60:	f001 fdd8 	bl	8006b14 <vPortExitCritical>
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f74:	f001 fd9a 	bl	8006aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e001      	b.n	8004f8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f8a:	f001 fdc3 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa0:	f001 fd84 	bl	8006aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d102      	bne.n	8004fb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e001      	b.n	8004fba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fba:	f001 fdab 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e014      	b.n	8005002 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fd8:	4a0f      	ldr	r2, [pc, #60]	; (8005018 <vQueueAddToRegistry+0x50>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fe4:	490c      	ldr	r1, [pc, #48]	; (8005018 <vQueueAddToRegistry+0x50>)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <vQueueAddToRegistry+0x50>)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ffa:	e006      	b.n	800500a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b07      	cmp	r3, #7
 8005006:	d9e7      	bls.n	8004fd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200008bc 	.word	0x200008bc

0800501c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800502c:	f001 fd3e 	bl	8006aac <vPortEnterCritical>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <vQueueWaitForMessageRestricted+0x2a>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800504c:	b25b      	sxtb	r3, r3
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d103      	bne.n	800505c <vQueueWaitForMessageRestricted+0x40>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800505c:	f001 fd5a 	bl	8006b14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fdd7 	bl	8005c24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f7ff ff26 	bl	8004ec8 <prvUnlockQueue>
	}
 800507c:	bf00      	nop
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08e      	sub	sp, #56	; 0x38
 8005088:	af04      	add	r7, sp, #16
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10c      	bne.n	80050b2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	b672      	cpsid	i
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	b662      	cpsie	i
 80050ac:	623b      	str	r3, [r7, #32]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10c      	bne.n	80050d2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	b672      	cpsid	i
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	b662      	cpsie	i
 80050cc:	61fb      	str	r3, [r7, #28]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050d2:	23a8      	movs	r3, #168	; 0xa8
 80050d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2ba8      	cmp	r3, #168	; 0xa8
 80050da:	d00c      	beq.n	80050f6 <xTaskCreateStatic+0x72>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	b672      	cpsid	i
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	b662      	cpsie	i
 80050f0:	61bb      	str	r3, [r7, #24]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01e      	beq.n	800513c <xTaskCreateStatic+0xb8>
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	2202      	movs	r2, #2
 8005112:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005116:	2300      	movs	r3, #0
 8005118:	9303      	str	r3, [sp, #12]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	9302      	str	r3, [sp, #8]
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f850 	bl	80051d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005136:	f000 f8f5 	bl	8005324 <prvAddNewTaskToReadyList>
 800513a:	e001      	b.n	8005140 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005140:	697b      	ldr	r3, [r7, #20]
	}
 8005142:	4618      	mov	r0, r3
 8005144:	3728      	adds	r7, #40	; 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800514a:	b580      	push	{r7, lr}
 800514c:	b08c      	sub	sp, #48	; 0x30
 800514e:	af04      	add	r7, sp, #16
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 fdd0 	bl	8006d04 <pvPortMalloc>
 8005164:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800516c:	20a8      	movs	r0, #168	; 0xa8
 800516e:	f001 fdc9 	bl	8006d04 <pvPortMalloc>
 8005172:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
 8005180:	e005      	b.n	800518e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f001 fe88 	bl	8006e98 <vPortFree>
 8005188:	e001      	b.n	800518e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d017      	beq.n	80051c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800519c:	88fa      	ldrh	r2, [r7, #6]
 800519e:	2300      	movs	r3, #0
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	9302      	str	r3, [sp, #8]
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f80e 	bl	80051d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051b8:	69f8      	ldr	r0, [r7, #28]
 80051ba:	f000 f8b3 	bl	8005324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e002      	b.n	80051ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051c4:	f04f 33ff 	mov.w	r3, #4294967295
 80051c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ca:	69bb      	ldr	r3, [r7, #24]
	}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	461a      	mov	r2, r3
 80051ec:	21a5      	movs	r1, #165	; 0xa5
 80051ee:	f001 ff6d 	bl	80070cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80051fc:	440b      	add	r3, r1
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f023 0307 	bic.w	r3, r3, #7
 800520a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	b672      	cpsid	i
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	b662      	cpsie	i
 800522a:	617b      	str	r3, [r7, #20]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01f      	beq.n	8005276 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e012      	b.n	8005262 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	7819      	ldrb	r1, [r3, #0]
 8005244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	3334      	adds	r3, #52	; 0x34
 800524c:	460a      	mov	r2, r1
 800524e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d006      	beq.n	800526a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3301      	adds	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2b0f      	cmp	r3, #15
 8005266:	d9e9      	bls.n	800523c <prvInitialiseNewTask+0x68>
 8005268:	e000      	b.n	800526c <prvInitialiseNewTask+0x98>
			{
				break;
 800526a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005274:	e003      	b.n	800527e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	2b37      	cmp	r3, #55	; 0x37
 8005282:	d901      	bls.n	8005288 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005284:	2337      	movs	r3, #55	; 0x37
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005292:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	2200      	movs	r2, #0
 8005298:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	3304      	adds	r3, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff f952 	bl	8004548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	3318      	adds	r3, #24
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff f94d 	bl	8004548 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	3354      	adds	r3, #84	; 0x54
 80052d8:	224c      	movs	r2, #76	; 0x4c
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f001 fef5 	bl	80070cc <memset>
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	4a0c      	ldr	r2, [pc, #48]	; (8005318 <prvInitialiseNewTask+0x144>)
 80052e6:	659a      	str	r2, [r3, #88]	; 0x58
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <prvInitialiseNewTask+0x148>)
 80052ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	4a0b      	ldr	r2, [pc, #44]	; (8005320 <prvInitialiseNewTask+0x14c>)
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	69b8      	ldr	r0, [r7, #24]
 80052fa:	f001 facb 	bl	8006894 <pxPortInitialiseStack>
 80052fe:	4602      	mov	r2, r0
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005310:	bf00      	nop
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20004b48 	.word	0x20004b48
 800531c:	20004bb0 	.word	0x20004bb0
 8005320:	20004c18 	.word	0x20004c18

08005324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800532c:	f001 fbbe 	bl	8006aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005330:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <prvAddNewTaskToReadyList+0xc4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <prvAddNewTaskToReadyList+0xc4>)
 8005338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800533a:	4b2c      	ldr	r3, [pc, #176]	; (80053ec <prvAddNewTaskToReadyList+0xc8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005342:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <prvAddNewTaskToReadyList+0xc8>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005348:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <prvAddNewTaskToReadyList+0xc4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d110      	bne.n	8005372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005350:	f000 fd9c 	bl	8005e8c <prvInitialiseTaskLists>
 8005354:	e00d      	b.n	8005372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005356:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <prvAddNewTaskToReadyList+0xcc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800535e:	4b23      	ldr	r3, [pc, #140]	; (80053ec <prvAddNewTaskToReadyList+0xc8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	429a      	cmp	r2, r3
 800536a:	d802      	bhi.n	8005372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800536c:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <prvAddNewTaskToReadyList+0xc8>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005372:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <prvAddNewTaskToReadyList+0xd0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <prvAddNewTaskToReadyList+0xd0>)
 800537a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <prvAddNewTaskToReadyList+0xd0>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <prvAddNewTaskToReadyList+0xd4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d903      	bls.n	8005398 <prvAddNewTaskToReadyList+0x74>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <prvAddNewTaskToReadyList+0xd4>)
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4a15      	ldr	r2, [pc, #84]	; (80053fc <prvAddNewTaskToReadyList+0xd8>)
 80053a6:	441a      	add	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f7ff f8d7 	bl	8004562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053b4:	f001 fbae 	bl	8006b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053b8:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <prvAddNewTaskToReadyList+0xcc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <prvAddNewTaskToReadyList+0xc8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d207      	bcs.n	80053de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <prvAddNewTaskToReadyList+0xdc>)
 80053d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000dd0 	.word	0x20000dd0
 80053ec:	200008fc 	.word	0x200008fc
 80053f0:	20000ddc 	.word	0x20000ddc
 80053f4:	20000dec 	.word	0x20000dec
 80053f8:	20000dd8 	.word	0x20000dd8
 80053fc:	20000900 	.word	0x20000900
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800540c:	f001 fb4e 	bl	8006aac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <vTaskDelete+0x18>
 8005416:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <vTaskDelete+0xc8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	e000      	b.n	800541e <vTaskDelete+0x1a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff f8f9 	bl	800461c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3318      	adds	r3, #24
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff f8f0 	bl	800461c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800543c:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <vTaskDelete+0xcc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	4a23      	ldr	r2, [pc, #140]	; (80054d0 <vTaskDelete+0xcc>)
 8005444:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <vTaskDelete+0xc8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	429a      	cmp	r2, r3
 800544e:	d10b      	bne.n	8005468 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	481f      	ldr	r0, [pc, #124]	; (80054d4 <vTaskDelete+0xd0>)
 8005458:	f7ff f883 	bl	8004562 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800545c:	4b1e      	ldr	r3, [pc, #120]	; (80054d8 <vTaskDelete+0xd4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <vTaskDelete+0xd4>)
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e009      	b.n	800547c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005468:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <vTaskDelete+0xd8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3b01      	subs	r3, #1
 800546e:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <vTaskDelete+0xd8>)
 8005470:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fd78 	bl	8005f68 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005478:	f000 fdac 	bl	8005fd4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800547c:	f001 fb4a 	bl	8006b14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005480:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <vTaskDelete+0xdc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01d      	beq.n	80054c4 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8005488:	4b10      	ldr	r3, [pc, #64]	; (80054cc <vTaskDelete+0xc8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	429a      	cmp	r2, r3
 8005490:	d118      	bne.n	80054c4 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <vTaskDelete+0xe0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <vTaskDelete+0xb0>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	b672      	cpsid	i
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	b662      	cpsie	i
 80054ae:	60bb      	str	r3, [r7, #8]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <vTaskDelete+0xe4>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200008fc 	.word	0x200008fc
 80054d0:	20000dec 	.word	0x20000dec
 80054d4:	20000da4 	.word	0x20000da4
 80054d8:	20000db8 	.word	0x20000db8
 80054dc:	20000dd0 	.word	0x20000dd0
 80054e0:	20000ddc 	.word	0x20000ddc
 80054e4:	20000df8 	.word	0x20000df8
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80054f4:	f001 fada 	bl	8006aac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <vTaskSuspend+0x18>
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <vTaskSuspend+0xd8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	e000      	b.n	8005506 <vTaskSuspend+0x1a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3304      	adds	r3, #4
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff f885 	bl	800461c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3318      	adds	r3, #24
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff f87c 	bl	800461c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4827      	ldr	r0, [pc, #156]	; (80055c8 <vTaskSuspend+0xdc>)
 800552c:	f7ff f819 	bl	8004562 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	d103      	bne.n	8005544 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005544:	f001 fae6 	bl	8006b14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005548:	4b20      	ldr	r3, [pc, #128]	; (80055cc <vTaskSuspend+0xe0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005550:	f001 faac 	bl	8006aac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005554:	f000 fd3e 	bl	8005fd4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005558:	f001 fadc 	bl	8006b14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800555c:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <vTaskSuspend+0xd8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	429a      	cmp	r2, r3
 8005564:	d129      	bne.n	80055ba <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8005566:	4b19      	ldr	r3, [pc, #100]	; (80055cc <vTaskSuspend+0xe0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800556e:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <vTaskSuspend+0xe4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <vTaskSuspend+0xa4>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	b672      	cpsid	i
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	b662      	cpsie	i
 800558a:	60bb      	str	r3, [r7, #8]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <vTaskSuspend+0xe8>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055a0:	e00b      	b.n	80055ba <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <vTaskSuspend+0xdc>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <vTaskSuspend+0xec>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d103      	bne.n	80055b6 <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <vTaskSuspend+0xd8>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
	}
 80055b4:	e001      	b.n	80055ba <vTaskSuspend+0xce>
					vTaskSwitchContext();
 80055b6:	f000 faa9 	bl	8005b0c <vTaskSwitchContext>
	}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	200008fc 	.word	0x200008fc
 80055c8:	20000dbc 	.word	0x20000dbc
 80055cc:	20000ddc 	.word	0x20000ddc
 80055d0:	20000df8 	.word	0x20000df8
 80055d4:	e000ed04 	.word	0xe000ed04
 80055d8:	20000dd0 	.word	0x20000dd0

080055dc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10c      	bne.n	800560c <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	b672      	cpsid	i
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	b662      	cpsie	i
 8005606:	60fb      	str	r3, [r7, #12]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <prvTaskIsTaskSuspended+0x60>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d10a      	bne.n	800562c <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	4a09      	ldr	r2, [pc, #36]	; (8005640 <prvTaskIsTaskSuspended+0x64>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d005      	beq.n	800562c <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800562c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800562e:	4618      	mov	r0, r3
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000dbc 	.word	0x20000dbc
 8005640:	20000d90 	.word	0x20000d90

08005644 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <xTaskResumeFromISR+0x30>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	b672      	cpsid	i
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	b662      	cpsie	i
 800566e:	61bb      	str	r3, [r7, #24]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005674:	f001 fb02 	bl	8006c7c <vPortValidateInterruptPriority>
	__asm volatile
 8005678:	f3ef 8211 	mrs	r2, BASEPRI
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	b672      	cpsid	i
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	b662      	cpsie	i
 8005690:	617a      	str	r2, [r7, #20]
 8005692:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005694:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005696:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005698:	6a38      	ldr	r0, [r7, #32]
 800569a:	f7ff ff9f 	bl	80055dc <prvTaskIsTaskSuspended>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d030      	beq.n	8005706 <xTaskResumeFromISR+0xc2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a4:	4b1d      	ldr	r3, [pc, #116]	; (800571c <xTaskResumeFromISR+0xd8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d126      	bne.n	80056fa <xTaskResumeFromISR+0xb6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <xTaskResumeFromISR+0xdc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d301      	bcc.n	80056be <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 80056ba:	2301      	movs	r3, #1
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe ffaa 	bl	800461c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <xTaskResumeFromISR+0xe0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d903      	bls.n	80056dc <xTaskResumeFromISR+0x98>
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	4a12      	ldr	r2, [pc, #72]	; (8005724 <xTaskResumeFromISR+0xe0>)
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4a0f      	ldr	r2, [pc, #60]	; (8005728 <xTaskResumeFromISR+0xe4>)
 80056ea:	441a      	add	r2, r3
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f7fe ff35 	bl	8004562 <vListInsertEnd>
 80056f8:	e005      	b.n	8005706 <xTaskResumeFromISR+0xc2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	3318      	adds	r3, #24
 80056fe:	4619      	mov	r1, r3
 8005700:	480a      	ldr	r0, [pc, #40]	; (800572c <xTaskResumeFromISR+0xe8>)
 8005702:	f7fe ff2e 	bl	8004562 <vListInsertEnd>
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f383 8811 	msr	BASEPRI, r3
}
 8005710:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005714:	4618      	mov	r0, r3
 8005716:	3728      	adds	r7, #40	; 0x28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20000df8 	.word	0x20000df8
 8005720:	200008fc 	.word	0x200008fc
 8005724:	20000dd8 	.word	0x20000dd8
 8005728:	20000900 	.word	0x20000900
 800572c:	20000d90 	.word	0x20000d90

08005730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	; 0x28
 8005734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800573e:	463a      	mov	r2, r7
 8005740:	1d39      	adds	r1, r7, #4
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe feaa 	bl	80044a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	9202      	str	r2, [sp, #8]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	2300      	movs	r3, #0
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	460a      	mov	r2, r1
 800575e:	4926      	ldr	r1, [pc, #152]	; (80057f8 <vTaskStartScheduler+0xc8>)
 8005760:	4826      	ldr	r0, [pc, #152]	; (80057fc <vTaskStartScheduler+0xcc>)
 8005762:	f7ff fc8f 	bl	8005084 <xTaskCreateStatic>
 8005766:	4603      	mov	r3, r0
 8005768:	4a25      	ldr	r2, [pc, #148]	; (8005800 <vTaskStartScheduler+0xd0>)
 800576a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800576c:	4b24      	ldr	r3, [pc, #144]	; (8005800 <vTaskStartScheduler+0xd0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e001      	b.n	800577e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d102      	bne.n	800578a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005784:	f000 fd2a 	bl	80061dc <xTimerCreateTimerTask>
 8005788:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d11d      	bne.n	80057cc <vTaskStartScheduler+0x9c>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	b672      	cpsid	i
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	b662      	cpsie	i
 80057a4:	613b      	str	r3, [r7, #16]
}
 80057a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057a8:	4b16      	ldr	r3, [pc, #88]	; (8005804 <vTaskStartScheduler+0xd4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3354      	adds	r3, #84	; 0x54
 80057ae:	4a16      	ldr	r2, [pc, #88]	; (8005808 <vTaskStartScheduler+0xd8>)
 80057b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <vTaskStartScheduler+0xdc>)
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295
 80057b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <vTaskStartScheduler+0xe0>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057c0:	4b14      	ldr	r3, [pc, #80]	; (8005814 <vTaskStartScheduler+0xe4>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057c6:	f001 f8f3 	bl	80069b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057ca:	e010      	b.n	80057ee <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d10c      	bne.n	80057ee <vTaskStartScheduler+0xbe>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	b672      	cpsid	i
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	b662      	cpsie	i
 80057e8:	60fb      	str	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <vTaskStartScheduler+0xbc>
}
 80057ee:	bf00      	nop
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	080072d4 	.word	0x080072d4
 80057fc:	08005e5d 	.word	0x08005e5d
 8005800:	20000df4 	.word	0x20000df4
 8005804:	200008fc 	.word	0x200008fc
 8005808:	2000005c 	.word	0x2000005c
 800580c:	20000df0 	.word	0x20000df0
 8005810:	20000ddc 	.word	0x20000ddc
 8005814:	20000dd4 	.word	0x20000dd4

08005818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800581c:	4b04      	ldr	r3, [pc, #16]	; (8005830 <vTaskSuspendAll+0x18>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	4a03      	ldr	r2, [pc, #12]	; (8005830 <vTaskSuspendAll+0x18>)
 8005824:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20000df8 	.word	0x20000df8

08005834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005842:	4b43      	ldr	r3, [pc, #268]	; (8005950 <xTaskResumeAll+0x11c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10c      	bne.n	8005864 <xTaskResumeAll+0x30>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	b672      	cpsid	i
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	b662      	cpsie	i
 800585e:	603b      	str	r3, [r7, #0]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005864:	f001 f922 	bl	8006aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005868:	4b39      	ldr	r3, [pc, #228]	; (8005950 <xTaskResumeAll+0x11c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	4a38      	ldr	r2, [pc, #224]	; (8005950 <xTaskResumeAll+0x11c>)
 8005870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005872:	4b37      	ldr	r3, [pc, #220]	; (8005950 <xTaskResumeAll+0x11c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d162      	bne.n	8005940 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800587a:	4b36      	ldr	r3, [pc, #216]	; (8005954 <xTaskResumeAll+0x120>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d05e      	beq.n	8005940 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005882:	e02f      	b.n	80058e4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005884:	4b34      	ldr	r3, [pc, #208]	; (8005958 <xTaskResumeAll+0x124>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3318      	adds	r3, #24
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe fec3 	bl	800461c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3304      	adds	r3, #4
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe febe 	bl	800461c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <xTaskResumeAll+0x128>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d903      	bls.n	80058b4 <xTaskResumeAll+0x80>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4a2a      	ldr	r2, [pc, #168]	; (800595c <xTaskResumeAll+0x128>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4a27      	ldr	r2, [pc, #156]	; (8005960 <xTaskResumeAll+0x12c>)
 80058c2:	441a      	add	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7fe fe49 	bl	8004562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	4b23      	ldr	r3, [pc, #140]	; (8005964 <xTaskResumeAll+0x130>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <xTaskResumeAll+0x134>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e4:	4b1c      	ldr	r3, [pc, #112]	; (8005958 <xTaskResumeAll+0x124>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1cb      	bne.n	8005884 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058f2:	f000 fb6f 	bl	8005fd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <xTaskResumeAll+0x138>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005902:	f000 f847 	bl	8005994 <xTaskIncrementTick>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800590c:	4b16      	ldr	r3, [pc, #88]	; (8005968 <xTaskResumeAll+0x134>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3b01      	subs	r3, #1
 8005916:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f1      	bne.n	8005902 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <xTaskResumeAll+0x138>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005924:	4b10      	ldr	r3, [pc, #64]	; (8005968 <xTaskResumeAll+0x134>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <xTaskResumeAll+0x13c>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005940:	f001 f8e8 	bl	8006b14 <vPortExitCritical>

	return xAlreadyYielded;
 8005944:	68bb      	ldr	r3, [r7, #8]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000df8 	.word	0x20000df8
 8005954:	20000dd0 	.word	0x20000dd0
 8005958:	20000d90 	.word	0x20000d90
 800595c:	20000dd8 	.word	0x20000dd8
 8005960:	20000900 	.word	0x20000900
 8005964:	200008fc 	.word	0x200008fc
 8005968:	20000de4 	.word	0x20000de4
 800596c:	20000de0 	.word	0x20000de0
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <xTaskGetTickCount+0x1c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005980:	687b      	ldr	r3, [r7, #4]
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000dd4 	.word	0x20000dd4

08005994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599e:	4b50      	ldr	r3, [pc, #320]	; (8005ae0 <xTaskIncrementTick+0x14c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 808b 	bne.w	8005abe <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059a8:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <xTaskIncrementTick+0x150>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059b0:	4a4c      	ldr	r2, [pc, #304]	; (8005ae4 <xTaskIncrementTick+0x150>)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d122      	bne.n	8005a02 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80059bc:	4b4a      	ldr	r3, [pc, #296]	; (8005ae8 <xTaskIncrementTick+0x154>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00c      	beq.n	80059e0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	b672      	cpsid	i
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	b662      	cpsie	i
 80059da:	603b      	str	r3, [r7, #0]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xTaskIncrementTick+0x4a>
 80059e0:	4b41      	ldr	r3, [pc, #260]	; (8005ae8 <xTaskIncrementTick+0x154>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	4b41      	ldr	r3, [pc, #260]	; (8005aec <xTaskIncrementTick+0x158>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a3f      	ldr	r2, [pc, #252]	; (8005ae8 <xTaskIncrementTick+0x154>)
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4a3f      	ldr	r2, [pc, #252]	; (8005aec <xTaskIncrementTick+0x158>)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <xTaskIncrementTick+0x15c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <xTaskIncrementTick+0x15c>)
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	f000 fae9 	bl	8005fd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a02:	4b3c      	ldr	r3, [pc, #240]	; (8005af4 <xTaskIncrementTick+0x160>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d349      	bcc.n	8005aa0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a0c:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <xTaskIncrementTick+0x154>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a16:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <xTaskIncrementTick+0x160>)
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1c:	601a      	str	r2, [r3, #0]
					break;
 8005a1e:	e03f      	b.n	8005aa0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a20:	4b31      	ldr	r3, [pc, #196]	; (8005ae8 <xTaskIncrementTick+0x154>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d203      	bcs.n	8005a40 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a38:	4a2e      	ldr	r2, [pc, #184]	; (8005af4 <xTaskIncrementTick+0x160>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a3e:	e02f      	b.n	8005aa0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fde9 	bl	800461c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	3318      	adds	r3, #24
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fde0 	bl	800461c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <xTaskIncrementTick+0x164>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d903      	bls.n	8005a70 <xTaskIncrementTick+0xdc>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	4a22      	ldr	r2, [pc, #136]	; (8005af8 <xTaskIncrementTick+0x164>)
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <xTaskIncrementTick+0x168>)
 8005a7e:	441a      	add	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f7fe fd6b 	bl	8004562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <xTaskIncrementTick+0x16c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d3b8      	bcc.n	8005a0c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a9e:	e7b5      	b.n	8005a0c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <xTaskIncrementTick+0x16c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	4915      	ldr	r1, [pc, #84]	; (8005afc <xTaskIncrementTick+0x168>)
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d907      	bls.n	8005ac8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e004      	b.n	8005ac8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <xTaskIncrementTick+0x170>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <xTaskIncrementTick+0x170>)
 8005ac6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <xTaskIncrementTick+0x174>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ad4:	697b      	ldr	r3, [r7, #20]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000df8 	.word	0x20000df8
 8005ae4:	20000dd4 	.word	0x20000dd4
 8005ae8:	20000d88 	.word	0x20000d88
 8005aec:	20000d8c 	.word	0x20000d8c
 8005af0:	20000de8 	.word	0x20000de8
 8005af4:	20000df0 	.word	0x20000df0
 8005af8:	20000dd8 	.word	0x20000dd8
 8005afc:	20000900 	.word	0x20000900
 8005b00:	200008fc 	.word	0x200008fc
 8005b04:	20000de0 	.word	0x20000de0
 8005b08:	20000de4 	.word	0x20000de4

08005b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b12:	4b2b      	ldr	r3, [pc, #172]	; (8005bc0 <vTaskSwitchContext+0xb4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b1a:	4b2a      	ldr	r3, [pc, #168]	; (8005bc4 <vTaskSwitchContext+0xb8>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b20:	e048      	b.n	8005bb4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005b22:	4b28      	ldr	r3, [pc, #160]	; (8005bc4 <vTaskSwitchContext+0xb8>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <vTaskSwitchContext+0xbc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e012      	b.n	8005b56 <vTaskSwitchContext+0x4a>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10c      	bne.n	8005b50 <vTaskSwitchContext+0x44>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	b672      	cpsid	i
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	b662      	cpsie	i
 8005b4a:	607b      	str	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <vTaskSwitchContext+0x42>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	491d      	ldr	r1, [pc, #116]	; (8005bcc <vTaskSwitchContext+0xc0>)
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0e2      	beq.n	8005b30 <vTaskSwitchContext+0x24>
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <vTaskSwitchContext+0xc0>)
 8005b76:	4413      	add	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	605a      	str	r2, [r3, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d104      	bne.n	8005b9a <vTaskSwitchContext+0x8e>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a0b      	ldr	r2, [pc, #44]	; (8005bd0 <vTaskSwitchContext+0xc4>)
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <vTaskSwitchContext+0xbc>)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <vTaskSwitchContext+0xc4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3354      	adds	r3, #84	; 0x54
 8005bb0:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <vTaskSwitchContext+0xc8>)
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	20000df8 	.word	0x20000df8
 8005bc4:	20000de4 	.word	0x20000de4
 8005bc8:	20000dd8 	.word	0x20000dd8
 8005bcc:	20000900 	.word	0x20000900
 8005bd0:	200008fc 	.word	0x200008fc
 8005bd4:	2000005c 	.word	0x2000005c

08005bd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10c      	bne.n	8005c02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	b672      	cpsid	i
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	b662      	cpsie	i
 8005bfc:	60fb      	str	r3, [r7, #12]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <vTaskPlaceOnEventList+0x48>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3318      	adds	r3, #24
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fe fccd 	bl	80045aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c10:	2101      	movs	r1, #1
 8005c12:	6838      	ldr	r0, [r7, #0]
 8005c14:	f000 fa8e 	bl	8006134 <prvAddCurrentTaskToDelayedList>
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	200008fc 	.word	0x200008fc

08005c24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10c      	bne.n	8005c50 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	b672      	cpsid	i
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	b662      	cpsie	i
 8005c4a:	617b      	str	r3, [r7, #20]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <vTaskPlaceOnEventListRestricted+0x58>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3318      	adds	r3, #24
 8005c56:	4619      	mov	r1, r3
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7fe fc82 	bl	8004562 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005c64:	f04f 33ff 	mov.w	r3, #4294967295
 8005c68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	68b8      	ldr	r0, [r7, #8]
 8005c6e:	f000 fa61 	bl	8006134 <prvAddCurrentTaskToDelayedList>
	}
 8005c72:	bf00      	nop
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200008fc 	.word	0x200008fc

08005c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10c      	bne.n	8005cb0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	b672      	cpsid	i
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	b662      	cpsie	i
 8005caa:	60fb      	str	r3, [r7, #12]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fcb1 	bl	800461c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cba:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <xTaskRemoveFromEventList+0xb4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11d      	bne.n	8005cfe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fca8 	bl	800461c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <xTaskRemoveFromEventList+0xb8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d903      	bls.n	8005ce0 <xTaskRemoveFromEventList+0x60>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <xTaskRemoveFromEventList+0xb8>)
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <xTaskRemoveFromEventList+0xbc>)
 8005cee:	441a      	add	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f7fe fc33 	bl	8004562 <vListInsertEnd>
 8005cfc:	e005      	b.n	8005d0a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3318      	adds	r3, #24
 8005d02:	4619      	mov	r1, r3
 8005d04:	480e      	ldr	r0, [pc, #56]	; (8005d40 <xTaskRemoveFromEventList+0xc0>)
 8005d06:	f7fe fc2c 	bl	8004562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <xTaskRemoveFromEventList+0xc4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d905      	bls.n	8005d24 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <xTaskRemoveFromEventList+0xc8>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e001      	b.n	8005d28 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d28:	697b      	ldr	r3, [r7, #20]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000df8 	.word	0x20000df8
 8005d38:	20000dd8 	.word	0x20000dd8
 8005d3c:	20000900 	.word	0x20000900
 8005d40:	20000d90 	.word	0x20000d90
 8005d44:	200008fc 	.word	0x200008fc
 8005d48:	20000de4 	.word	0x20000de4

08005d4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <vTaskInternalSetTimeOutState+0x24>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <vTaskInternalSetTimeOutState+0x28>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	605a      	str	r2, [r3, #4]
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	20000de8 	.word	0x20000de8
 8005d74:	20000dd4 	.word	0x20000dd4

08005d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10c      	bne.n	8005da2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	b672      	cpsid	i
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	b662      	cpsie	i
 8005d9c:	613b      	str	r3, [r7, #16]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10c      	bne.n	8005dc2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	b672      	cpsid	i
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	b662      	cpsie	i
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005dc2:	f000 fe73 	bl	8006aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	; (8005e3c <xTaskCheckForTimeOut+0xc4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d102      	bne.n	8005de6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	e023      	b.n	8005e2e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <xTaskCheckForTimeOut+0xc8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d007      	beq.n	8005e02 <xTaskCheckForTimeOut+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d302      	bcc.n	8005e02 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e015      	b.n	8005e2e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d20b      	bcs.n	8005e24 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff97 	bl	8005d4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e004      	b.n	8005e2e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e2e:	f000 fe71 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 8005e32:	69fb      	ldr	r3, [r7, #28]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000dd4 	.word	0x20000dd4
 8005e40:	20000de8 	.word	0x20000de8

08005e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <vTaskMissedYield+0x14>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000de4 	.word	0x20000de4

08005e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e64:	f000 f852 	bl	8005f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <prvIdleTask+0x28>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d9f9      	bls.n	8005e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <prvIdleTask+0x2c>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e80:	e7f0      	b.n	8005e64 <prvIdleTask+0x8>
 8005e82:	bf00      	nop
 8005e84:	20000900 	.word	0x20000900
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	e00c      	b.n	8005eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <prvInitialiseTaskLists+0x60>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fb2e 	bl	8004508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b37      	cmp	r3, #55	; 0x37
 8005eb6:	d9ef      	bls.n	8005e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb8:	480d      	ldr	r0, [pc, #52]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eba:	f7fe fb25 	bl	8004508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ebe:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ec0:	f7fe fb22 	bl	8004508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ec4:	480c      	ldr	r0, [pc, #48]	; (8005ef8 <prvInitialiseTaskLists+0x6c>)
 8005ec6:	f7fe fb1f 	bl	8004508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eca:	480c      	ldr	r0, [pc, #48]	; (8005efc <prvInitialiseTaskLists+0x70>)
 8005ecc:	f7fe fb1c 	bl	8004508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ed0:	480b      	ldr	r0, [pc, #44]	; (8005f00 <prvInitialiseTaskLists+0x74>)
 8005ed2:	f7fe fb19 	bl	8004508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <prvInitialiseTaskLists+0x78>)
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <prvInitialiseTaskLists+0x7c>)
 8005ede:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000900 	.word	0x20000900
 8005ef0:	20000d60 	.word	0x20000d60
 8005ef4:	20000d74 	.word	0x20000d74
 8005ef8:	20000d90 	.word	0x20000d90
 8005efc:	20000da4 	.word	0x20000da4
 8005f00:	20000dbc 	.word	0x20000dbc
 8005f04:	20000d88 	.word	0x20000d88
 8005f08:	20000d8c 	.word	0x20000d8c

08005f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f12:	e019      	b.n	8005f48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f14:	f000 fdca 	bl	8006aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <prvCheckTasksWaitingTermination+0x50>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fb79 	bl	800461c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <prvCheckTasksWaitingTermination+0x54>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <prvCheckTasksWaitingTermination+0x54>)
 8005f32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f3e:	f000 fde9 	bl	8006b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f810 	bl	8005f68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e1      	bne.n	8005f14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000da4 	.word	0x20000da4
 8005f60:	20000dd0 	.word	0x20000dd0
 8005f64:	20000db8 	.word	0x20000db8

08005f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3354      	adds	r3, #84	; 0x54
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 f8b1 	bl	80070dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 ff85 	bl	8006e98 <vPortFree>
				vPortFree( pxTCB );
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 ff82 	bl	8006e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f94:	e01a      	b.n	8005fcc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d103      	bne.n	8005fa8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ff79 	bl	8006e98 <vPortFree>
	}
 8005fa6:	e011      	b.n	8005fcc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d00c      	beq.n	8005fcc <prvDeleteTCB+0x64>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	b672      	cpsid	i
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	b662      	cpsie	i
 8005fc6:	60fb      	str	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <prvDeleteTCB+0x62>
	}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <prvResetNextTaskUnblockTime+0x38>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fec:	e008      	b.n	8006000 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <prvResetNextTaskUnblockTime+0x38>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a04      	ldr	r2, [pc, #16]	; (8006010 <prvResetNextTaskUnblockTime+0x3c>)
 8005ffe:	6013      	str	r3, [r2, #0]
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000d88 	.word	0x20000d88
 8006010:	20000df0 	.word	0x20000df0

08006014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <xTaskGetSchedulerState+0x34>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006022:	2301      	movs	r3, #1
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	e008      	b.n	800603a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006028:	4b08      	ldr	r3, [pc, #32]	; (800604c <xTaskGetSchedulerState+0x38>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006030:	2302      	movs	r3, #2
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	e001      	b.n	800603a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800603a:	687b      	ldr	r3, [r7, #4]
	}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	20000ddc 	.word	0x20000ddc
 800604c:	20000df8 	.word	0x20000df8

08006050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d05a      	beq.n	800611c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006066:	4b30      	ldr	r3, [pc, #192]	; (8006128 <xTaskPriorityDisinherit+0xd8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	d00c      	beq.n	800608a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	b672      	cpsid	i
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	b662      	cpsie	i
 8006084:	60fb      	str	r3, [r7, #12]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10c      	bne.n	80060ac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	b672      	cpsid	i
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	b662      	cpsie	i
 80060a6:	60bb      	str	r3, [r7, #8]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b0:	1e5a      	subs	r2, r3, #1
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060be:	429a      	cmp	r2, r3
 80060c0:	d02c      	beq.n	800611c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d128      	bne.n	800611c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe faa4 	bl	800461c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <xTaskPriorityDisinherit+0xdc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <xTaskPriorityDisinherit+0xac>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a0c      	ldr	r2, [pc, #48]	; (800612c <xTaskPriorityDisinherit+0xdc>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <xTaskPriorityDisinherit+0xe0>)
 800610a:	441a      	add	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe fa25 	bl	8004562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006118:	2301      	movs	r3, #1
 800611a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800611c:	697b      	ldr	r3, [r7, #20]
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200008fc 	.word	0x200008fc
 800612c:	20000dd8 	.word	0x20000dd8
 8006130:	20000900 	.word	0x20000900

08006134 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800613e:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006144:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3304      	adds	r3, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fa66 	bl	800461c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d10a      	bne.n	800616e <prvAddCurrentTaskToDelayedList+0x3a>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4819      	ldr	r0, [pc, #100]	; (80061cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006168:	f7fe f9fb 	bl	8004562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800616c:	e026      	b.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	429a      	cmp	r2, r3
 8006184:	d209      	bcs.n	800619a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f7fe fa09 	bl	80045aa <vListInsert>
}
 8006198:	e010      	b.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800619a:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fe f9ff 	bl	80045aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d202      	bcs.n	80061bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061b6:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000dd4 	.word	0x20000dd4
 80061c8:	200008fc 	.word	0x200008fc
 80061cc:	20000dbc 	.word	0x20000dbc
 80061d0:	20000d8c 	.word	0x20000d8c
 80061d4:	20000d88 	.word	0x20000d88
 80061d8:	20000df0 	.word	0x20000df0

080061dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061e6:	f000 fb15 	bl	8006814 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ea:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <xTimerCreateTimerTask+0x84>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d021      	beq.n	8006236 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061fa:	1d3a      	adds	r2, r7, #4
 80061fc:	f107 0108 	add.w	r1, r7, #8
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe f965 	bl	80044d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	9202      	str	r2, [sp, #8]
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	2302      	movs	r3, #2
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	460a      	mov	r2, r1
 800621c:	4911      	ldr	r1, [pc, #68]	; (8006264 <xTimerCreateTimerTask+0x88>)
 800621e:	4812      	ldr	r0, [pc, #72]	; (8006268 <xTimerCreateTimerTask+0x8c>)
 8006220:	f7fe ff30 	bl	8005084 <xTaskCreateStatic>
 8006224:	4603      	mov	r3, r0
 8006226:	4a11      	ldr	r2, [pc, #68]	; (800626c <xTimerCreateTimerTask+0x90>)
 8006228:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800622a:	4b10      	ldr	r3, [pc, #64]	; (800626c <xTimerCreateTimerTask+0x90>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006232:	2301      	movs	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10c      	bne.n	8006256 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	b672      	cpsid	i
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	b662      	cpsie	i
 8006250:	613b      	str	r3, [r7, #16]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006256:	697b      	ldr	r3, [r7, #20]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000e2c 	.word	0x20000e2c
 8006264:	080072dc 	.word	0x080072dc
 8006268:	080063ad 	.word	0x080063ad
 800626c:	20000e30 	.word	0x20000e30

08006270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	; 0x28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10c      	bne.n	80062a2 <xTimerGenericCommand+0x32>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	b672      	cpsid	i
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	b662      	cpsie	i
 800629c:	623b      	str	r3, [r7, #32]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062a2:	4b1a      	ldr	r3, [pc, #104]	; (800630c <xTimerGenericCommand+0x9c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d02a      	beq.n	8006300 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b05      	cmp	r3, #5
 80062ba:	dc18      	bgt.n	80062ee <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062bc:	f7ff feaa 	bl	8006014 <xTaskGetSchedulerState>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d109      	bne.n	80062da <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062c6:	4b11      	ldr	r3, [pc, #68]	; (800630c <xTimerGenericCommand+0x9c>)
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f107 0110 	add.w	r1, r7, #16
 80062ce:	2300      	movs	r3, #0
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	f7fe fadd 	bl	8004890 <xQueueGenericSend>
 80062d6:	6278      	str	r0, [r7, #36]	; 0x24
 80062d8:	e012      	b.n	8006300 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <xTimerGenericCommand+0x9c>)
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	f107 0110 	add.w	r1, r7, #16
 80062e2:	2300      	movs	r3, #0
 80062e4:	2200      	movs	r2, #0
 80062e6:	f7fe fad3 	bl	8004890 <xQueueGenericSend>
 80062ea:	6278      	str	r0, [r7, #36]	; 0x24
 80062ec:	e008      	b.n	8006300 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <xTimerGenericCommand+0x9c>)
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f107 0110 	add.w	r1, r7, #16
 80062f6:	2300      	movs	r3, #0
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	f7fe fbcf 	bl	8004a9c <xQueueGenericSendFromISR>
 80062fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000e2c 	.word	0x20000e2c

08006310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631a:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <prvProcessExpiredTimer+0x98>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3304      	adds	r3, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe f977 	bl	800461c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d024      	beq.n	8006386 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	699a      	ldr	r2, [r3, #24]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	18d1      	adds	r1, r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	6978      	ldr	r0, [r7, #20]
 800634a:	f000 f8d3 	bl	80064f4 <prvInsertTimerInActiveList>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d021      	beq.n	8006398 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006354:	2300      	movs	r3, #0
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2300      	movs	r3, #0
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	2100      	movs	r1, #0
 800635e:	6978      	ldr	r0, [r7, #20]
 8006360:	f7ff ff86 	bl	8006270 <xTimerGenericCommand>
 8006364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d115      	bne.n	8006398 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	b672      	cpsid	i
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	b662      	cpsie	i
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	b2da      	uxtb	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	6978      	ldr	r0, [r7, #20]
 800639e:	4798      	blx	r3
}
 80063a0:	bf00      	nop
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20000e24 	.word	0x20000e24

080063ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063b4:	f107 0308 	add.w	r3, r7, #8
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 f857 	bl	800646c <prvGetNextExpireTime>
 80063be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4619      	mov	r1, r3
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f803 	bl	80063d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ca:	f000 f8d5 	bl	8006578 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063ce:	e7f1      	b.n	80063b4 <prvTimerTask+0x8>

080063d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063da:	f7ff fa1d 	bl	8005818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f866 	bl	80064b4 <prvSampleTimeNow>
 80063e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d130      	bne.n	8006452 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <prvProcessTimerOrBlockTask+0x3c>
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d806      	bhi.n	800640c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063fe:	f7ff fa19 	bl	8005834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff ff83 	bl	8006310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800640a:	e024      	b.n	8006456 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <prvProcessTimerOrBlockTask+0x90>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <prvProcessTimerOrBlockTask+0x50>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <prvProcessTimerOrBlockTask+0x52>
 8006420:	2300      	movs	r3, #0
 8006422:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006424:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <prvProcessTimerOrBlockTask+0x94>)
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	4619      	mov	r1, r3
 8006432:	f7fe fdf3 	bl	800501c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006436:	f7ff f9fd 	bl	8005834 <xTaskResumeAll>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006440:	4b09      	ldr	r3, [pc, #36]	; (8006468 <prvProcessTimerOrBlockTask+0x98>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
}
 8006450:	e001      	b.n	8006456 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006452:	f7ff f9ef 	bl	8005834 <xTaskResumeAll>
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000e28 	.word	0x20000e28
 8006464:	20000e2c 	.word	0x20000e2c
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <prvGetNextExpireTime+0x44>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <prvGetNextExpireTime+0x16>
 800647e:	2201      	movs	r2, #1
 8006480:	e000      	b.n	8006484 <prvGetNextExpireTime+0x18>
 8006482:	2200      	movs	r2, #0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <prvGetNextExpireTime+0x44>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e001      	b.n	80064a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064a0:	68fb      	ldr	r3, [r7, #12]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20000e24 	.word	0x20000e24

080064b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064bc:	f7ff fa5a 	bl	8005974 <xTaskGetTickCount>
 80064c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <prvSampleTimeNow+0x3c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d205      	bcs.n	80064d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064cc:	f000 f93c 	bl	8006748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e002      	b.n	80064de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064de:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <prvSampleTimeNow+0x3c>)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000e34 	.word	0x20000e34

080064f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d812      	bhi.n	8006540 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	1ad2      	subs	r2, r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e01b      	b.n	8006566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800652e:	4b10      	ldr	r3, [pc, #64]	; (8006570 <prvInsertTimerInActiveList+0x7c>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fe f836 	bl	80045aa <vListInsert>
 800653e:	e012      	b.n	8006566 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d206      	bcs.n	8006556 <prvInsertTimerInActiveList+0x62>
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d302      	bcc.n	8006556 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e007      	b.n	8006566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006556:	4b07      	ldr	r3, [pc, #28]	; (8006574 <prvInsertTimerInActiveList+0x80>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3304      	adds	r3, #4
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f7fe f822 	bl	80045aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006566:	697b      	ldr	r3, [r7, #20]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000e28 	.word	0x20000e28
 8006574:	20000e24 	.word	0x20000e24

08006578 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	; 0x38
 800657c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800657e:	e0d0      	b.n	8006722 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	da1a      	bge.n	80065bc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	3304      	adds	r3, #4
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10c      	bne.n	80065ac <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	b672      	cpsid	i
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	b662      	cpsie	i
 80065a6:	61fb      	str	r3, [r7, #28]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b2:	6850      	ldr	r0, [r2, #4]
 80065b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b6:	6892      	ldr	r2, [r2, #8]
 80065b8:	4611      	mov	r1, r2
 80065ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f2c0 80af 	blt.w	8006722 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	3304      	adds	r3, #4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe f821 	bl	800461c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065da:	463b      	mov	r3, r7
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff ff69 	bl	80064b4 <prvSampleTimeNow>
 80065e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b09      	cmp	r3, #9
 80065e8:	f200 809a 	bhi.w	8006720 <prvProcessReceivedCommands+0x1a8>
 80065ec:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <prvProcessReceivedCommands+0x7c>)
 80065ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f2:	bf00      	nop
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	0800661d 	.word	0x0800661d
 8006600:	08006695 	.word	0x08006695
 8006604:	080066a9 	.word	0x080066a9
 8006608:	080066f7 	.word	0x080066f7
 800660c:	0800661d 	.word	0x0800661d
 8006610:	0800661d 	.word	0x0800661d
 8006614:	08006695 	.word	0x08006695
 8006618:	080066a9 	.word	0x080066a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	b2da      	uxtb	r2, r3
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	18d1      	adds	r1, r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663c:	f7ff ff5a 	bl	80064f4 <prvInsertTimerInActiveList>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d06d      	beq.n	8006722 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d062      	beq.n	8006722 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	441a      	add	r2, r3
 8006664:	2300      	movs	r3, #0
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2300      	movs	r3, #0
 800666a:	2100      	movs	r1, #0
 800666c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666e:	f7ff fdff 	bl	8006270 <xTimerGenericCommand>
 8006672:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d153      	bne.n	8006722 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	b672      	cpsid	i
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	b662      	cpsie	i
 800668e:	61bb      	str	r3, [r7, #24]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80066a6:	e03c      	b.n	8006722 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10c      	bne.n	80066e2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	b672      	cpsid	i
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	b662      	cpsie	i
 80066dc:	617b      	str	r3, [r7, #20]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	18d1      	adds	r1, r2, r3
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f0:	f7ff ff00 	bl	80064f4 <prvInsertTimerInActiveList>
					break;
 80066f4:	e015      	b.n	8006722 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006706:	f000 fbc7 	bl	8006e98 <vPortFree>
 800670a:	e00a      	b.n	8006722 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800671e:	e000      	b.n	8006722 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8006720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <prvProcessReceivedCommands+0x1cc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	1d39      	adds	r1, r7, #4
 8006728:	2200      	movs	r2, #0
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fa56 	bl	8004bdc <xQueueReceive>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f47f af24 	bne.w	8006580 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3730      	adds	r7, #48	; 0x30
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000e2c 	.word	0x20000e2c

08006748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800674e:	e04a      	b.n	80067e6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006750:	4b2e      	ldr	r3, [pc, #184]	; (800680c <prvSwitchTimerLists+0xc4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675a:	4b2c      	ldr	r3, [pc, #176]	; (800680c <prvSwitchTimerLists+0xc4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3304      	adds	r3, #4
 8006768:	4618      	mov	r0, r3
 800676a:	f7fd ff57 	bl	800461c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d030      	beq.n	80067e6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	429a      	cmp	r2, r3
 8006794:	d90e      	bls.n	80067b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067a2:	4b1a      	ldr	r3, [pc, #104]	; (800680c <prvSwitchTimerLists+0xc4>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7fd fefc 	bl	80045aa <vListInsert>
 80067b2:	e018      	b.n	80067e6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067b4:	2300      	movs	r3, #0
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2300      	movs	r3, #0
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	2100      	movs	r1, #0
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff fd56 	bl	8006270 <xTimerGenericCommand>
 80067c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10c      	bne.n	80067e6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	b672      	cpsid	i
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	b662      	cpsie	i
 80067e0:	603b      	str	r3, [r7, #0]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <prvSwitchTimerLists+0xc4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1af      	bne.n	8006750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <prvSwitchTimerLists+0xc4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <prvSwitchTimerLists+0xc8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a04      	ldr	r2, [pc, #16]	; (800680c <prvSwitchTimerLists+0xc4>)
 80067fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067fe:	4a04      	ldr	r2, [pc, #16]	; (8006810 <prvSwitchTimerLists+0xc8>)
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	6013      	str	r3, [r2, #0]
}
 8006804:	bf00      	nop
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000e24 	.word	0x20000e24
 8006810:	20000e28 	.word	0x20000e28

08006814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800681a:	f000 f947 	bl	8006aac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <prvCheckForValidListAndQueue+0x60>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d120      	bne.n	8006868 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006826:	4814      	ldr	r0, [pc, #80]	; (8006878 <prvCheckForValidListAndQueue+0x64>)
 8006828:	f7fd fe6e 	bl	8004508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800682c:	4813      	ldr	r0, [pc, #76]	; (800687c <prvCheckForValidListAndQueue+0x68>)
 800682e:	f7fd fe6b 	bl	8004508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <prvCheckForValidListAndQueue+0x6c>)
 8006834:	4a10      	ldr	r2, [pc, #64]	; (8006878 <prvCheckForValidListAndQueue+0x64>)
 8006836:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006838:	4b12      	ldr	r3, [pc, #72]	; (8006884 <prvCheckForValidListAndQueue+0x70>)
 800683a:	4a10      	ldr	r2, [pc, #64]	; (800687c <prvCheckForValidListAndQueue+0x68>)
 800683c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <prvCheckForValidListAndQueue+0x74>)
 8006844:	4a11      	ldr	r2, [pc, #68]	; (800688c <prvCheckForValidListAndQueue+0x78>)
 8006846:	2110      	movs	r1, #16
 8006848:	200a      	movs	r0, #10
 800684a:	f7fd ff7b 	bl	8004744 <xQueueGenericCreateStatic>
 800684e:	4603      	mov	r3, r0
 8006850:	4a08      	ldr	r2, [pc, #32]	; (8006874 <prvCheckForValidListAndQueue+0x60>)
 8006852:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006854:	4b07      	ldr	r3, [pc, #28]	; (8006874 <prvCheckForValidListAndQueue+0x60>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <prvCheckForValidListAndQueue+0x60>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	490b      	ldr	r1, [pc, #44]	; (8006890 <prvCheckForValidListAndQueue+0x7c>)
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fbb0 	bl	8004fc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006868:	f000 f954 	bl	8006b14 <vPortExitCritical>
}
 800686c:	bf00      	nop
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000e2c 	.word	0x20000e2c
 8006878:	20000dfc 	.word	0x20000dfc
 800687c:	20000e10 	.word	0x20000e10
 8006880:	20000e24 	.word	0x20000e24
 8006884:	20000e28 	.word	0x20000e28
 8006888:	20000ed8 	.word	0x20000ed8
 800688c:	20000e38 	.word	0x20000e38
 8006890:	080072e4 	.word	0x080072e4

08006894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3b04      	subs	r3, #4
 80068a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3b04      	subs	r3, #4
 80068b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f023 0201 	bic.w	r2, r3, #1
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3b04      	subs	r3, #4
 80068c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068c4:	4a0c      	ldr	r2, [pc, #48]	; (80068f8 <pxPortInitialiseStack+0x64>)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b14      	subs	r3, #20
 80068ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b04      	subs	r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f06f 0202 	mvn.w	r2, #2
 80068e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3b20      	subs	r3, #32
 80068e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068ea:	68fb      	ldr	r3, [r7, #12]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	080068fd 	.word	0x080068fd

080068fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <prvTaskExitError+0x5c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d00c      	beq.n	800692a <prvTaskExitError+0x2e>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	b672      	cpsid	i
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	b662      	cpsie	i
 8006924:	60fb      	str	r3, [r7, #12]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <prvTaskExitError+0x2c>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	b672      	cpsid	i
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	b662      	cpsie	i
 800693e:	60bb      	str	r3, [r7, #8]
}
 8006940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006942:	bf00      	nop
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0fc      	beq.n	8006944 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	2000000c 	.word	0x2000000c
 800695c:	00000000 	.word	0x00000000

08006960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006960:	4b07      	ldr	r3, [pc, #28]	; (8006980 <pxCurrentTCBConst2>)
 8006962:	6819      	ldr	r1, [r3, #0]
 8006964:	6808      	ldr	r0, [r1, #0]
 8006966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696a:	f380 8809 	msr	PSP, r0
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8811 	msr	BASEPRI, r0
 800697a:	4770      	bx	lr
 800697c:	f3af 8000 	nop.w

08006980 <pxCurrentTCBConst2>:
 8006980:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006988:	4808      	ldr	r0, [pc, #32]	; (80069ac <prvPortStartFirstTask+0x24>)
 800698a:	6800      	ldr	r0, [r0, #0]
 800698c:	6800      	ldr	r0, [r0, #0]
 800698e:	f380 8808 	msr	MSP, r0
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8814 	msr	CONTROL, r0
 800699a:	b662      	cpsie	i
 800699c:	b661      	cpsie	f
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	df00      	svc	0
 80069a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069aa:	bf00      	nop
 80069ac:	e000ed08 	.word	0xe000ed08

080069b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069b6:	4b37      	ldr	r3, [pc, #220]	; (8006a94 <xPortStartScheduler+0xe4>)
 80069b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	22ff      	movs	r2, #255	; 0xff
 80069c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	4b2f      	ldr	r3, [pc, #188]	; (8006a98 <xPortStartScheduler+0xe8>)
 80069dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069de:	4b2f      	ldr	r3, [pc, #188]	; (8006a9c <xPortStartScheduler+0xec>)
 80069e0:	2207      	movs	r2, #7
 80069e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069e4:	e009      	b.n	80069fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80069e6:	4b2d      	ldr	r3, [pc, #180]	; (8006a9c <xPortStartScheduler+0xec>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <xPortStartScheduler+0xec>)
 80069ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d0ef      	beq.n	80069e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a06:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <xPortStartScheduler+0xec>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f1c3 0307 	rsb	r3, r3, #7
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d00c      	beq.n	8006a2c <xPortStartScheduler+0x7c>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	b672      	cpsid	i
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	b662      	cpsie	i
 8006a26:	60bb      	str	r3, [r7, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	; (8006a9c <xPortStartScheduler+0xec>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	4a1a      	ldr	r2, [pc, #104]	; (8006a9c <xPortStartScheduler+0xec>)
 8006a34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a36:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <xPortStartScheduler+0xec>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <xPortStartScheduler+0xec>)
 8006a40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a4a:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <xPortStartScheduler+0xf0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a14      	ldr	r2, [pc, #80]	; (8006aa0 <xPortStartScheduler+0xf0>)
 8006a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a56:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <xPortStartScheduler+0xf0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <xPortStartScheduler+0xf0>)
 8006a5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a62:	f000 f8dd 	bl	8006c20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <xPortStartScheduler+0xf4>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a6c:	f000 f8fc 	bl	8006c68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a70:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <xPortStartScheduler+0xf8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a0c      	ldr	r2, [pc, #48]	; (8006aa8 <xPortStartScheduler+0xf8>)
 8006a76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a7c:	f7ff ff84 	bl	8006988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a80:	f7ff f844 	bl	8005b0c <vTaskSwitchContext>
	prvTaskExitError();
 8006a84:	f7ff ff3a 	bl	80068fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	e000e400 	.word	0xe000e400
 8006a98:	20000f28 	.word	0x20000f28
 8006a9c:	20000f2c 	.word	0x20000f2c
 8006aa0:	e000ed20 	.word	0xe000ed20
 8006aa4:	2000000c 	.word	0x2000000c
 8006aa8:	e000ef34 	.word	0xe000ef34

08006aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	b672      	cpsid	i
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	b662      	cpsie	i
 8006ac6:	607b      	str	r3, [r7, #4]
}
 8006ac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aca:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <vPortEnterCritical+0x60>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <vPortEnterCritical+0x60>)
 8006ad2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <vPortEnterCritical+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d111      	bne.n	8006b00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <vPortEnterCritical+0x64>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00c      	beq.n	8006b00 <vPortEnterCritical+0x54>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	b672      	cpsid	i
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	b662      	cpsie	i
 8006afa:	603b      	str	r3, [r7, #0]
}
 8006afc:	bf00      	nop
 8006afe:	e7fe      	b.n	8006afe <vPortEnterCritical+0x52>
	}
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	2000000c 	.word	0x2000000c
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <vPortExitCritical+0x54>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10c      	bne.n	8006b3c <vPortExitCritical+0x28>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	b672      	cpsid	i
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	b662      	cpsie	i
 8006b36:	607b      	str	r3, [r7, #4]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <vPortExitCritical+0x54>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <vPortExitCritical+0x54>)
 8006b44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <vPortExitCritical+0x54>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <vPortExitCritical+0x46>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	f383 8811 	msr	BASEPRI, r3
}
 8006b58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	2000000c 	.word	0x2000000c
 8006b6c:	00000000 	.word	0x00000000

08006b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b70:	f3ef 8009 	mrs	r0, PSP
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <pxCurrentTCBConst>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	f01e 0f10 	tst.w	lr, #16
 8006b80:	bf08      	it	eq
 8006b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8a:	6010      	str	r0, [r2, #0]
 8006b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b94:	b672      	cpsid	i
 8006b96:	f380 8811 	msr	BASEPRI, r0
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	b662      	cpsie	i
 8006ba4:	f7fe ffb2 	bl	8005b0c <vTaskSwitchContext>
 8006ba8:	f04f 0000 	mov.w	r0, #0
 8006bac:	f380 8811 	msr	BASEPRI, r0
 8006bb0:	bc09      	pop	{r0, r3}
 8006bb2:	6819      	ldr	r1, [r3, #0]
 8006bb4:	6808      	ldr	r0, [r1, #0]
 8006bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bba:	f01e 0f10 	tst.w	lr, #16
 8006bbe:	bf08      	it	eq
 8006bc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bc4:	f380 8809 	msr	PSP, r0
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop

08006bd0 <pxCurrentTCBConst>:
 8006bd0:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop

08006bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	b672      	cpsid	i
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	b662      	cpsie	i
 8006bf2:	607b      	str	r3, [r7, #4]
}
 8006bf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bf6:	f7fe fecd 	bl	8005994 <xTaskIncrementTick>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <SysTick_Handler+0x44>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	f383 8811 	msr	BASEPRI, r3
}
 8006c12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <vPortSetupTimerInterrupt+0x34>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c2a:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <vPortSetupTimerInterrupt+0x38>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <vPortSetupTimerInterrupt+0x3c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <vPortSetupTimerInterrupt+0x40>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	099b      	lsrs	r3, r3, #6
 8006c3c:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <vPortSetupTimerInterrupt+0x44>)
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c42:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <vPortSetupTimerInterrupt+0x34>)
 8006c44:	2207      	movs	r2, #7
 8006c46:	601a      	str	r2, [r3, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	e000e010 	.word	0xe000e010
 8006c58:	e000e018 	.word	0xe000e018
 8006c5c:	20000000 	.word	0x20000000
 8006c60:	10624dd3 	.word	0x10624dd3
 8006c64:	e000e014 	.word	0xe000e014

08006c68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c78 <vPortEnableVFP+0x10>
 8006c6c:	6801      	ldr	r1, [r0, #0]
 8006c6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c72:	6001      	str	r1, [r0, #0]
 8006c74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c76:	bf00      	nop
 8006c78:	e000ed88 	.word	0xe000ed88

08006c7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c82:	f3ef 8305 	mrs	r3, IPSR
 8006c86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b0f      	cmp	r3, #15
 8006c8c:	d916      	bls.n	8006cbc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c8e:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <vPortValidateInterruptPriority+0x78>)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c98:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <vPortValidateInterruptPriority+0x7c>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	7afa      	ldrb	r2, [r7, #11]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d20c      	bcs.n	8006cbc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	b672      	cpsid	i
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	b662      	cpsie	i
 8006cb6:	607b      	str	r3, [r7, #4]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cbc:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <vPortValidateInterruptPriority+0x80>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <vPortValidateInterruptPriority+0x84>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d90c      	bls.n	8006ce6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	b672      	cpsid	i
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	b662      	cpsie	i
 8006ce0:	603b      	str	r3, [r7, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <vPortValidateInterruptPriority+0x68>
	}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	e000e3f0 	.word	0xe000e3f0
 8006cf8:	20000f28 	.word	0x20000f28
 8006cfc:	e000ed0c 	.word	0xe000ed0c
 8006d00:	20000f2c 	.word	0x20000f2c

08006d04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d10:	f7fe fd82 	bl	8005818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d14:	4b5b      	ldr	r3, [pc, #364]	; (8006e84 <pvPortMalloc+0x180>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d1c:	f000 f91a 	bl	8006f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d20:	4b59      	ldr	r3, [pc, #356]	; (8006e88 <pvPortMalloc+0x184>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4013      	ands	r3, r2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f040 8092 	bne.w	8006e52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01f      	beq.n	8006d74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006d34:	2208      	movs	r2, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d016      	beq.n	8006d74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f023 0307 	bic.w	r3, r3, #7
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00c      	beq.n	8006d74 <pvPortMalloc+0x70>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	b672      	cpsid	i
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	b662      	cpsie	i
 8006d6e:	617b      	str	r3, [r7, #20]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d06b      	beq.n	8006e52 <pvPortMalloc+0x14e>
 8006d7a:	4b44      	ldr	r3, [pc, #272]	; (8006e8c <pvPortMalloc+0x188>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d866      	bhi.n	8006e52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d84:	4b42      	ldr	r3, [pc, #264]	; (8006e90 <pvPortMalloc+0x18c>)
 8006d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d88:	4b41      	ldr	r3, [pc, #260]	; (8006e90 <pvPortMalloc+0x18c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d8e:	e004      	b.n	8006d9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d903      	bls.n	8006dac <pvPortMalloc+0xa8>
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f1      	bne.n	8006d90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dac:	4b35      	ldr	r3, [pc, #212]	; (8006e84 <pvPortMalloc+0x180>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d04d      	beq.n	8006e52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2208      	movs	r2, #8
 8006dbc:	4413      	add	r3, r2
 8006dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d921      	bls.n	8006e1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4413      	add	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00c      	beq.n	8006e04 <pvPortMalloc+0x100>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	b672      	cpsid	i
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	b662      	cpsie	i
 8006dfe:	613b      	str	r3, [r7, #16]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e16:	69b8      	ldr	r0, [r7, #24]
 8006e18:	f000 f8fe 	bl	8007018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e1c:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <pvPortMalloc+0x188>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	4a19      	ldr	r2, [pc, #100]	; (8006e8c <pvPortMalloc+0x188>)
 8006e28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e2a:	4b18      	ldr	r3, [pc, #96]	; (8006e8c <pvPortMalloc+0x188>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <pvPortMalloc+0x190>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d203      	bcs.n	8006e3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e36:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <pvPortMalloc+0x188>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	; (8006e94 <pvPortMalloc+0x190>)
 8006e3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <pvPortMalloc+0x184>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e52:	f7fe fcef 	bl	8005834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00c      	beq.n	8006e7a <pvPortMalloc+0x176>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	b672      	cpsid	i
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	b662      	cpsie	i
 8006e74:	60fb      	str	r3, [r7, #12]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <pvPortMalloc+0x174>
	return pvReturn;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3728      	adds	r7, #40	; 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20004b38 	.word	0x20004b38
 8006e88:	20004b44 	.word	0x20004b44
 8006e8c:	20004b3c 	.word	0x20004b3c
 8006e90:	20004b30 	.word	0x20004b30
 8006e94:	20004b40 	.word	0x20004b40

08006e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04c      	beq.n	8006f44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eaa:	2308      	movs	r3, #8
 8006eac:	425b      	negs	r3, r3
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <vPortFree+0xb4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10c      	bne.n	8006ee0 <vPortFree+0x48>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	b672      	cpsid	i
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	b662      	cpsie	i
 8006eda:	60fb      	str	r3, [r7, #12]
}
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00c      	beq.n	8006f02 <vPortFree+0x6a>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	60bb      	str	r3, [r7, #8]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <vPortFree+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d019      	beq.n	8006f44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d115      	bne.n	8006f44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <vPortFree+0xb4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	401a      	ands	r2, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f28:	f7fe fc76 	bl	8005818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <vPortFree+0xb8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4413      	add	r3, r2
 8006f36:	4a06      	ldr	r2, [pc, #24]	; (8006f50 <vPortFree+0xb8>)
 8006f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f3a:	6938      	ldr	r0, [r7, #16]
 8006f3c:	f000 f86c 	bl	8007018 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f40:	f7fe fc78 	bl	8005834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f44:	bf00      	nop
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20004b44 	.word	0x20004b44
 8006f50:	20004b3c 	.word	0x20004b3c

08006f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f60:	4b27      	ldr	r3, [pc, #156]	; (8007000 <prvHeapInit+0xac>)
 8006f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3307      	adds	r3, #7
 8006f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0307 	bic.w	r3, r3, #7
 8006f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <prvHeapInit+0xac>)
 8006f84:	4413      	add	r3, r2
 8006f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f8c:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <prvHeapInit+0xb0>)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f92:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <prvHeapInit+0xb0>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <prvHeapInit+0xb4>)
 8006fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <prvHeapInit+0xb4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fbe:	4b12      	ldr	r3, [pc, #72]	; (8007008 <prvHeapInit+0xb4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <prvHeapInit+0xb4>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <prvHeapInit+0xb8>)
 8006fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <prvHeapInit+0xbc>)
 8006fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <prvHeapInit+0xc0>)
 8006fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	20000f30 	.word	0x20000f30
 8007004:	20004b30 	.word	0x20004b30
 8007008:	20004b38 	.word	0x20004b38
 800700c:	20004b40 	.word	0x20004b40
 8007010:	20004b3c 	.word	0x20004b3c
 8007014:	20004b44 	.word	0x20004b44

08007018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007020:	4b28      	ldr	r3, [pc, #160]	; (80070c4 <prvInsertBlockIntoFreeList+0xac>)
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e002      	b.n	800702c <prvInsertBlockIntoFreeList+0x14>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d8f7      	bhi.n	8007026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	4413      	add	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d108      	bne.n	800705a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	441a      	add	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	441a      	add	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d118      	bne.n	80070a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d00d      	beq.n	8007096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	441a      	add	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	e008      	b.n	80070a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e003      	b.n	80070a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d002      	beq.n	80070b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20004b30 	.word	0x20004b30
 80070c8:	20004b38 	.word	0x20004b38

080070cc <memset>:
 80070cc:	4402      	add	r2, r0
 80070ce:	4603      	mov	r3, r0
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memset+0xa>
 80070d4:	4770      	bx	lr
 80070d6:	f803 1b01 	strb.w	r1, [r3], #1
 80070da:	e7f9      	b.n	80070d0 <memset+0x4>

080070dc <_reclaim_reent>:
 80070dc:	4b29      	ldr	r3, [pc, #164]	; (8007184 <_reclaim_reent+0xa8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4283      	cmp	r3, r0
 80070e2:	b570      	push	{r4, r5, r6, lr}
 80070e4:	4604      	mov	r4, r0
 80070e6:	d04b      	beq.n	8007180 <_reclaim_reent+0xa4>
 80070e8:	69c3      	ldr	r3, [r0, #28]
 80070ea:	b143      	cbz	r3, 80070fe <_reclaim_reent+0x22>
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d144      	bne.n	800717c <_reclaim_reent+0xa0>
 80070f2:	69e3      	ldr	r3, [r4, #28]
 80070f4:	6819      	ldr	r1, [r3, #0]
 80070f6:	b111      	cbz	r1, 80070fe <_reclaim_reent+0x22>
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 f879 	bl	80071f0 <_free_r>
 80070fe:	6961      	ldr	r1, [r4, #20]
 8007100:	b111      	cbz	r1, 8007108 <_reclaim_reent+0x2c>
 8007102:	4620      	mov	r0, r4
 8007104:	f000 f874 	bl	80071f0 <_free_r>
 8007108:	69e1      	ldr	r1, [r4, #28]
 800710a:	b111      	cbz	r1, 8007112 <_reclaim_reent+0x36>
 800710c:	4620      	mov	r0, r4
 800710e:	f000 f86f 	bl	80071f0 <_free_r>
 8007112:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007114:	b111      	cbz	r1, 800711c <_reclaim_reent+0x40>
 8007116:	4620      	mov	r0, r4
 8007118:	f000 f86a 	bl	80071f0 <_free_r>
 800711c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800711e:	b111      	cbz	r1, 8007126 <_reclaim_reent+0x4a>
 8007120:	4620      	mov	r0, r4
 8007122:	f000 f865 	bl	80071f0 <_free_r>
 8007126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007128:	b111      	cbz	r1, 8007130 <_reclaim_reent+0x54>
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f860 	bl	80071f0 <_free_r>
 8007130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007132:	b111      	cbz	r1, 800713a <_reclaim_reent+0x5e>
 8007134:	4620      	mov	r0, r4
 8007136:	f000 f85b 	bl	80071f0 <_free_r>
 800713a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800713c:	b111      	cbz	r1, 8007144 <_reclaim_reent+0x68>
 800713e:	4620      	mov	r0, r4
 8007140:	f000 f856 	bl	80071f0 <_free_r>
 8007144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007146:	b111      	cbz	r1, 800714e <_reclaim_reent+0x72>
 8007148:	4620      	mov	r0, r4
 800714a:	f000 f851 	bl	80071f0 <_free_r>
 800714e:	6a23      	ldr	r3, [r4, #32]
 8007150:	b1b3      	cbz	r3, 8007180 <_reclaim_reent+0xa4>
 8007152:	4620      	mov	r0, r4
 8007154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007158:	4718      	bx	r3
 800715a:	5949      	ldr	r1, [r1, r5]
 800715c:	b941      	cbnz	r1, 8007170 <_reclaim_reent+0x94>
 800715e:	3504      	adds	r5, #4
 8007160:	69e3      	ldr	r3, [r4, #28]
 8007162:	2d80      	cmp	r5, #128	; 0x80
 8007164:	68d9      	ldr	r1, [r3, #12]
 8007166:	d1f8      	bne.n	800715a <_reclaim_reent+0x7e>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f841 	bl	80071f0 <_free_r>
 800716e:	e7c0      	b.n	80070f2 <_reclaim_reent+0x16>
 8007170:	680e      	ldr	r6, [r1, #0]
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f83c 	bl	80071f0 <_free_r>
 8007178:	4631      	mov	r1, r6
 800717a:	e7ef      	b.n	800715c <_reclaim_reent+0x80>
 800717c:	2500      	movs	r5, #0
 800717e:	e7ef      	b.n	8007160 <_reclaim_reent+0x84>
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	bf00      	nop
 8007184:	2000005c 	.word	0x2000005c

08007188 <__libc_init_array>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	4d0d      	ldr	r5, [pc, #52]	; (80071c0 <__libc_init_array+0x38>)
 800718c:	4c0d      	ldr	r4, [pc, #52]	; (80071c4 <__libc_init_array+0x3c>)
 800718e:	1b64      	subs	r4, r4, r5
 8007190:	10a4      	asrs	r4, r4, #2
 8007192:	2600      	movs	r6, #0
 8007194:	42a6      	cmp	r6, r4
 8007196:	d109      	bne.n	80071ac <__libc_init_array+0x24>
 8007198:	4d0b      	ldr	r5, [pc, #44]	; (80071c8 <__libc_init_array+0x40>)
 800719a:	4c0c      	ldr	r4, [pc, #48]	; (80071cc <__libc_init_array+0x44>)
 800719c:	f000 f880 	bl	80072a0 <_init>
 80071a0:	1b64      	subs	r4, r4, r5
 80071a2:	10a4      	asrs	r4, r4, #2
 80071a4:	2600      	movs	r6, #0
 80071a6:	42a6      	cmp	r6, r4
 80071a8:	d105      	bne.n	80071b6 <__libc_init_array+0x2e>
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b0:	4798      	blx	r3
 80071b2:	3601      	adds	r6, #1
 80071b4:	e7ee      	b.n	8007194 <__libc_init_array+0xc>
 80071b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ba:	4798      	blx	r3
 80071bc:	3601      	adds	r6, #1
 80071be:	e7f2      	b.n	80071a6 <__libc_init_array+0x1e>
 80071c0:	08007354 	.word	0x08007354
 80071c4:	08007354 	.word	0x08007354
 80071c8:	08007354 	.word	0x08007354
 80071cc:	08007358 	.word	0x08007358

080071d0 <__retarget_lock_acquire_recursive>:
 80071d0:	4770      	bx	lr

080071d2 <__retarget_lock_release_recursive>:
 80071d2:	4770      	bx	lr

080071d4 <memcpy>:
 80071d4:	440a      	add	r2, r1
 80071d6:	4291      	cmp	r1, r2
 80071d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071dc:	d100      	bne.n	80071e0 <memcpy+0xc>
 80071de:	4770      	bx	lr
 80071e0:	b510      	push	{r4, lr}
 80071e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ea:	4291      	cmp	r1, r2
 80071ec:	d1f9      	bne.n	80071e2 <memcpy+0xe>
 80071ee:	bd10      	pop	{r4, pc}

080071f0 <_free_r>:
 80071f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071f2:	2900      	cmp	r1, #0
 80071f4:	d044      	beq.n	8007280 <_free_r+0x90>
 80071f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fa:	9001      	str	r0, [sp, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f1a1 0404 	sub.w	r4, r1, #4
 8007202:	bfb8      	it	lt
 8007204:	18e4      	addlt	r4, r4, r3
 8007206:	f000 f83f 	bl	8007288 <__malloc_lock>
 800720a:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <_free_r+0x94>)
 800720c:	9801      	ldr	r0, [sp, #4]
 800720e:	6813      	ldr	r3, [r2, #0]
 8007210:	b933      	cbnz	r3, 8007220 <_free_r+0x30>
 8007212:	6063      	str	r3, [r4, #4]
 8007214:	6014      	str	r4, [r2, #0]
 8007216:	b003      	add	sp, #12
 8007218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800721c:	f000 b83a 	b.w	8007294 <__malloc_unlock>
 8007220:	42a3      	cmp	r3, r4
 8007222:	d908      	bls.n	8007236 <_free_r+0x46>
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	1961      	adds	r1, r4, r5
 8007228:	428b      	cmp	r3, r1
 800722a:	bf01      	itttt	eq
 800722c:	6819      	ldreq	r1, [r3, #0]
 800722e:	685b      	ldreq	r3, [r3, #4]
 8007230:	1949      	addeq	r1, r1, r5
 8007232:	6021      	streq	r1, [r4, #0]
 8007234:	e7ed      	b.n	8007212 <_free_r+0x22>
 8007236:	461a      	mov	r2, r3
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b10b      	cbz	r3, 8007240 <_free_r+0x50>
 800723c:	42a3      	cmp	r3, r4
 800723e:	d9fa      	bls.n	8007236 <_free_r+0x46>
 8007240:	6811      	ldr	r1, [r2, #0]
 8007242:	1855      	adds	r5, r2, r1
 8007244:	42a5      	cmp	r5, r4
 8007246:	d10b      	bne.n	8007260 <_free_r+0x70>
 8007248:	6824      	ldr	r4, [r4, #0]
 800724a:	4421      	add	r1, r4
 800724c:	1854      	adds	r4, r2, r1
 800724e:	42a3      	cmp	r3, r4
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	d1e0      	bne.n	8007216 <_free_r+0x26>
 8007254:	681c      	ldr	r4, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	6053      	str	r3, [r2, #4]
 800725a:	440c      	add	r4, r1
 800725c:	6014      	str	r4, [r2, #0]
 800725e:	e7da      	b.n	8007216 <_free_r+0x26>
 8007260:	d902      	bls.n	8007268 <_free_r+0x78>
 8007262:	230c      	movs	r3, #12
 8007264:	6003      	str	r3, [r0, #0]
 8007266:	e7d6      	b.n	8007216 <_free_r+0x26>
 8007268:	6825      	ldr	r5, [r4, #0]
 800726a:	1961      	adds	r1, r4, r5
 800726c:	428b      	cmp	r3, r1
 800726e:	bf04      	itt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	6063      	str	r3, [r4, #4]
 8007276:	bf04      	itt	eq
 8007278:	1949      	addeq	r1, r1, r5
 800727a:	6021      	streq	r1, [r4, #0]
 800727c:	6054      	str	r4, [r2, #4]
 800727e:	e7ca      	b.n	8007216 <_free_r+0x26>
 8007280:	b003      	add	sp, #12
 8007282:	bd30      	pop	{r4, r5, pc}
 8007284:	20004c84 	.word	0x20004c84

08007288 <__malloc_lock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_lock+0x8>)
 800728a:	f7ff bfa1 	b.w	80071d0 <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	20004c80 	.word	0x20004c80

08007294 <__malloc_unlock>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__malloc_unlock+0x8>)
 8007296:	f7ff bf9c 	b.w	80071d2 <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	20004c80 	.word	0x20004c80

080072a0 <_init>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	bf00      	nop
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr

080072ac <_fini>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr
