
FreeRTOS_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001574  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096ac  080096ac  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b4  080096b4  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080096bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  0800972c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  080097cc  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005670  200001b0  0800986c  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005820  0800986c  00025820  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY
 15 .debug_info   00026912  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000052a3  00000000  00000000  00046b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ea0  00000000  00000000  0004bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000017c5  00000000  00000000  0004dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d3f0  00000000  00000000  0004f43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000272b7  00000000  00000000  0007c82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001101b2  00000000  00000000  000a3ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000083cc  00000000  00000000  001b3c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000087  00000000  00000000  001bc064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008120 	.word	0x08008120

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	08008120 	.word	0x08008120

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ETH_Init+0x84>)
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <MX_ETH_Init+0x88>)
 8000544:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_ETH_Init+0x8c>)
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000554:	22e1      	movs	r2, #225	; 0xe1
 8000556:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_ETH_Init+0x8c>)
 800055a:	2200      	movs	r2, #0
 800055c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000560:	2200      	movs	r2, #0
 8000562:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000566:	2200      	movs	r2, #0
 8000568:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_ETH_Init+0x84>)
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_ETH_Init+0x8c>)
 800056e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_ETH_Init+0x84>)
 8000572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000576:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_ETH_Init+0x84>)
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <MX_ETH_Init+0x90>)
 800057c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_ETH_Init+0x84>)
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_ETH_Init+0x94>)
 8000582:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_ETH_Init+0x84>)
 8000586:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800058a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_ETH_Init+0x84>)
 800058e:	f001 f843 	bl	8001618 <HAL_ETH_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000598:	f000 fb38 	bl	8000c0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a2:	f007 fcd3 	bl	8007f4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a8:	2221      	movs	r2, #33	; 0x21
 80005aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_ETH_Init+0x98>)
 80005ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_ETH_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000204 	.word	0x20000204
 80005c4:	40028000 	.word	0x40028000
 80005c8:	200002b4 	.word	0x200002b4
 80005cc:	20000110 	.word	0x20000110
 80005d0:	20000070 	.word	0x20000070
 80005d4:	200001cc 	.word	0x200001cc

080005d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a4e      	ldr	r2, [pc, #312]	; (8000730 <HAL_ETH_MspInit+0x158>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	f040 8096 	bne.w	8000728 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a4c      	ldr	r2, [pc, #304]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000610:	623b      	str	r3, [r7, #32]
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a46      	ldr	r2, [pc, #280]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800061a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a40      	ldr	r2, [pc, #256]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000640:	61bb      	str	r3, [r7, #24]
 8000642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a34      	ldr	r2, [pc, #208]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <HAL_ETH_MspInit+0x160>)
 80006c0:	f001 fad0 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c4:	2386      	movs	r3, #134	; 0x86
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <HAL_ETH_MspInit+0x164>)
 80006e0:	f001 fac0 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f6:	230b      	movs	r3, #11
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <HAL_ETH_MspInit+0x168>)
 8000702:	f001 faaf 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000706:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <HAL_ETH_MspInit+0x16c>)
 8000724:	f001 fa9e 	bl	8001c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3738      	adds	r7, #56	; 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40028000 	.word	0x40028000
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40021800 	.word	0x40021800

08000748 <dashboard>:
  .priority = (osPriority_t) osPriorityNormal,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void dashboard(char* header, char* logotype) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
    uint8_t y = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
    ssd1306_Fill(Black);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fa90 	bl	8000c7c <ssd1306_Fill>

	#ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	4619      	mov	r1, r3
 8000760:	2002      	movs	r0, #2
 8000762:	f000 fbd9 	bl	8000f18 <ssd1306_SetCursor>
    ssd1306_WriteString(header, Font_7x10, White);
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <dashboard+0x58>)
 8000768:	2301      	movs	r3, #1
 800076a:	ca06      	ldmia	r2, {r1, r2}
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 fbad 	bl	8000ecc <ssd1306_WriteString>
    y += 30;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	331e      	adds	r3, #30
 8000776:	73fb      	strb	r3, [r7, #15]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	4619      	mov	r1, r3
 800077c:	2002      	movs	r0, #2
 800077e:	f000 fbcb 	bl	8000f18 <ssd1306_SetCursor>
    ssd1306_WriteString(logotype, Font_11x18, White);
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <dashboard+0x5c>)
 8000784:	2301      	movs	r3, #1
 8000786:	ca06      	ldmia	r2, {r1, r2}
 8000788:	6838      	ldr	r0, [r7, #0]
 800078a:	f000 fb9f 	bl	8000ecc <ssd1306_WriteString>
    y += 36;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3324      	adds	r3, #36	; 0x24
 8000792:	73fb      	strb	r3, [r7, #15]
    #endif

    ssd1306_UpdateScreen();
 8000794:	f000 fa96 	bl	8000cc4 <ssd1306_UpdateScreen>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000008 	.word	0x20000008

080007a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_FREERTOS_Init+0x28>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <MX_FREERTOS_Init+0x2c>)
 80007b2:	f004 fe3d 	bl	8005430 <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <MX_FREERTOS_Init+0x30>)
 80007ba:	6013      	str	r3, [r2, #0]

  /* creation of OLEDPrintTask */
  OLEDPrintTaskHandle = osThreadNew(StartOLEDPrintTask, NULL, &OLEDPrintTask_attributes);
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <MX_FREERTOS_Init+0x34>)
 80007be:	2100      	movs	r1, #0
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_FREERTOS_Init+0x38>)
 80007c2:	f004 fe35 	bl	8005430 <osThreadNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <MX_FREERTOS_Init+0x3c>)
 80007ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08008184 	.word	0x08008184
 80007d4:	080007e9 	.word	0x080007e9
 80007d8:	200002bc 	.word	0x200002bc
 80007dc:	080081a8 	.word	0x080081a8
 80007e0:	08000809 	.word	0x08000809
 80007e4:	200002c0 	.word	0x200002c0

080007e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <StartDefaultTask+0x1c>)
 80007f4:	f001 fbfb 	bl	8001fee <HAL_GPIO_TogglePin>
    osDelay(500);
 80007f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fc:	f004 febe 	bl	800557c <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000800:	e7f6      	b.n	80007f0 <StartDefaultTask+0x8>
 8000802:	bf00      	nop
 8000804:	40020400 	.word	0x40020400

08000808 <StartOLEDPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDPrintTask */
void StartOLEDPrintTask(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDPrintTask */
//	ssd1306_TestAll();
	char header[] = "Connected";
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <StartOLEDPrintTask+0x40>)
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	ca07      	ldmia	r2, {r0, r1, r2}
 8000818:	c303      	stmia	r3!, {r0, r1}
 800081a:	801a      	strh	r2, [r3, #0]
	char logotype[] = "S(car)lett";
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <StartOLEDPrintTask+0x44>)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	ca07      	ldmia	r2, {r0, r1, r2}
 8000824:	c303      	stmia	r3!, {r0, r1}
 8000826:	801a      	strh	r2, [r3, #0]
 8000828:	3302      	adds	r3, #2
 800082a:	0c12      	lsrs	r2, r2, #16
 800082c:	701a      	strb	r2, [r3, #0]

	dashboard(header, logotype);
 800082e:	f107 0208 	add.w	r2, r7, #8
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff85 	bl	8000748 <dashboard>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800083e:	2064      	movs	r0, #100	; 0x64
 8000840:	f004 fe9c 	bl	800557c <osDelay>
 8000844:	e7fb      	b.n	800083e <StartOLEDPrintTask+0x36>
 8000846:	bf00      	nop
 8000848:	08008154 	.word	0x08008154
 800084c:	08008160 	.word	0x08008160

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b47      	ldr	r3, [pc, #284]	; (8000984 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a46      	ldr	r2, [pc, #280]	; (8000984 <MX_GPIO_Init+0x134>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b44      	ldr	r3, [pc, #272]	; (8000984 <MX_GPIO_Init+0x134>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b41      	ldr	r3, [pc, #260]	; (8000984 <MX_GPIO_Init+0x134>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a40      	ldr	r2, [pc, #256]	; (8000984 <MX_GPIO_Init+0x134>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b3e      	ldr	r3, [pc, #248]	; (8000984 <MX_GPIO_Init+0x134>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <MX_GPIO_Init+0x134>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a3a      	ldr	r2, [pc, #232]	; (8000984 <MX_GPIO_Init+0x134>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <MX_GPIO_Init+0x134>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a34      	ldr	r2, [pc, #208]	; (8000984 <MX_GPIO_Init+0x134>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <MX_GPIO_Init+0x134>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	4b29      	ldr	r3, [pc, #164]	; (8000984 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <MX_GPIO_Init+0x134>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008fc:	4822      	ldr	r0, [pc, #136]	; (8000988 <MX_GPIO_Init+0x138>)
 80008fe:	f001 fb5d 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4821      	ldr	r0, [pc, #132]	; (800098c <MX_GPIO_Init+0x13c>)
 8000908:	f001 fb58 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	481b      	ldr	r0, [pc, #108]	; (8000990 <MX_GPIO_Init+0x140>)
 8000924:	f001 f99e 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000928:	f244 0381 	movw	r3, #16513	; 0x4081
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_GPIO_Init+0x138>)
 8000942:	f001 f98f 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <MX_GPIO_Init+0x13c>)
 800095e:	f001 f981 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_GPIO_Init+0x13c>)
 8000976:	f001 f975 	bl	8001c64 <HAL_GPIO_Init>

}
 800097a:	bf00      	nop
 800097c:	3730      	adds	r7, #48	; 0x30
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40021800 	.word	0x40021800
 8000990:	40020800 	.word	0x40020800

08000994 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_I2C1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_I2C1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <MX_I2C1_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009d0:	f001 fb28 	bl	8002024 <HAL_I2C_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 f917 	bl	8000c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009e2:	f001 ff09 	bl	80027f8 <HAL_I2CEx_ConfigAnalogFilter>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 f90e 	bl	8000c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009f4:	f001 ff4b 	bl	800288e <HAL_I2CEx_ConfigDigitalFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f905 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002c4 	.word	0x200002c4
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	20303e5d 	.word	0x20303e5d

08000a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ae      	sub	sp, #184	; 0xb8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2290      	movs	r2, #144	; 0x90
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f007 fa89 	bl	8007f4c <memset>
  if(i2cHandle->Instance==I2C1)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <HAL_I2C_MspInit+0xb4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d13c      	bne.n	8000abe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fe16 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a5e:	f000 f8d5 	bl	8000c0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_I2C_MspInit+0xb8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_I2C_MspInit+0xb8>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_I2C_MspInit+0xb8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a94:	2304      	movs	r3, #4
 8000a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <HAL_I2C_MspInit+0xbc>)
 8000aa2:	f001 f8df 	bl	8001c64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_I2C_MspInit+0xb8>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_I2C_MspInit+0xb8>)
 8000aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_I2C_MspInit+0xb8>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000abe:	bf00      	nop
 8000ac0:	37b8      	adds	r7, #184	; 0xb8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad8:	f000 fc6b 	bl	80013b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f812 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f7ff feb6 	bl	8000850 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ae4:	f7ff fd2a 	bl	800053c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ae8:	f000 fb02 	bl	80010f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aec:	f000 fb90 	bl	8001210 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000af0:	f7ff ff50 	bl	8000994 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000af4:	f004 fc32 	bl	800535c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000af8:	f7ff fe56 	bl	80007a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000afc:	f004 fc62 	bl	80053c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <main+0x2c>
	...

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	; 0x50
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2234      	movs	r2, #52	; 0x34
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fa1a 	bl	8007f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b28:	f002 f846 	bl	8002bb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <SystemClock_Config+0xdc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a2b      	ldr	r2, [pc, #172]	; (8000be0 <SystemClock_Config+0xdc>)
 8000b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <SystemClock_Config+0xdc>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <SystemClock_Config+0xe0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b4c:	4a25      	ldr	r2, [pc, #148]	; (8000be4 <SystemClock_Config+0xe0>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <SystemClock_Config+0xe0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b78:	2360      	movs	r3, #96	; 0x60
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 f873 	bl	8002c78 <HAL_RCC_OscConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b98:	f000 f838 	bl	8000c0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b9c:	f002 f81c 	bl	8002bd8 <HAL_PWREx_EnableOverDrive>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ba6:	f000 f831 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fb04 	bl	80031d4 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bd2:	f000 f81b 	bl	8000c0c <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3750      	adds	r7, #80	; 0x50
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40007000 	.word	0x40007000

08000be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfa:	f000 fbe7 	bl	80013cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40001000 	.word	0x40001000

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2301      	movs	r3, #1
 8000c32:	2200      	movs	r2, #0
 8000c34:	2178      	movs	r1, #120	; 0x78
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <ssd1306_WriteCommand+0x2c>)
 8000c38:	f001 fa84 	bl	8002144 <HAL_I2C_Mem_Write>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200002c4 	.word	0x200002c4

08000c48 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5a:	9202      	str	r2, [sp, #8]
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	2240      	movs	r2, #64	; 0x40
 8000c66:	2178      	movs	r1, #120	; 0x78
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <ssd1306_WriteData+0x30>)
 8000c6a:	f001 fa6b 	bl	8002144 <HAL_I2C_Mem_Write>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200002c4 	.word	0x200002c4

08000c7c <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e00d      	b.n	8000ca8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <ssd1306_Fill+0x1a>
 8000c92:	2100      	movs	r1, #0
 8000c94:	e000      	b.n	8000c98 <ssd1306_Fill+0x1c>
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <ssd1306_Fill+0x44>)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	460a      	mov	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cae:	d3ed      	bcc.n	8000c8c <ssd1306_Fill+0x10>
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000318 	.word	0x20000318

08000cc4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	e016      	b.n	8000cfe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	3b50      	subs	r3, #80	; 0x50
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff9e 	bl	8000c18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff9b 	bl	8000c18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000ce2:	2010      	movs	r0, #16
 8000ce4:	f7ff ff98 	bl	8000c18 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	01db      	lsls	r3, r3, #7
 8000cec:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <ssd1306_UpdateScreen+0x4c>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ffa8 	bl	8000c48 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9e5      	bls.n	8000cd0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000318 	.word	0x20000318

08000d14 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	71bb      	strb	r3, [r7, #6]
 8000d22:	4613      	mov	r3, r2
 8000d24:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db3d      	blt.n	8000daa <ssd1306_DrawPixel+0x96>
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2b3f      	cmp	r3, #63	; 0x3f
 8000d32:	d83a      	bhi.n	8000daa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d34:	797b      	ldrb	r3, [r7, #5]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d11a      	bne.n	8000d70 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b2d8      	uxtb	r0, r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	01db      	lsls	r3, r3, #7
 8000d46:	4413      	add	r3, r2
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <ssd1306_DrawPixel+0xa4>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	2101      	movs	r1, #1
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b259      	sxtb	r1, r3
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	4603      	mov	r3, r0
 8000d64:	01db      	lsls	r3, r3, #7
 8000d66:	4413      	add	r3, r2
 8000d68:	b2c9      	uxtb	r1, r1
 8000d6a:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <ssd1306_DrawPixel+0xa4>)
 8000d6c:	54d1      	strb	r1, [r2, r3]
 8000d6e:	e01d      	b.n	8000dac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	b2d8      	uxtb	r0, r3
 8000d78:	4603      	mov	r3, r0
 8000d7a:	01db      	lsls	r3, r3, #7
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <ssd1306_DrawPixel+0xa4>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	b25a      	sxtb	r2, r3
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	4013      	ands	r3, r2
 8000d98:	b259      	sxtb	r1, r3
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	01db      	lsls	r3, r3, #7
 8000da0:	4413      	add	r3, r2
 8000da2:	b2c9      	uxtb	r1, r1
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <ssd1306_DrawPixel+0xa4>)
 8000da6:	54d1      	strb	r1, [r2, r3]
 8000da8:	e000      	b.n	8000dac <ssd1306_DrawPixel+0x98>
        return;
 8000daa:	bf00      	nop
    }
}
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000318 	.word	0x20000318

08000dbc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	1d38      	adds	r0, r7, #4
 8000dc6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4623      	mov	r3, r4
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b1f      	cmp	r3, #31
 8000dd8:	d902      	bls.n	8000de0 <ssd1306_WriteChar+0x24>
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b7e      	cmp	r3, #126	; 0x7e
 8000dde:	d901      	bls.n	8000de4 <ssd1306_WriteChar+0x28>
        return 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e06d      	b.n	8000ec0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	793b      	ldrb	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	2b80      	cmp	r3, #128	; 0x80
 8000df0:	dc06      	bgt.n	8000e00 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000df4:	885b      	ldrh	r3, [r3, #2]
 8000df6:	461a      	mov	r2, r3
 8000df8:	797b      	ldrb	r3, [r7, #5]
 8000dfa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000dfc:	2b40      	cmp	r3, #64	; 0x40
 8000dfe:	dd01      	ble.n	8000e04 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e05d      	b.n	8000ec0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	e04c      	b.n	8000ea4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	3b20      	subs	r3, #32
 8000e10:	7979      	ldrb	r1, [r7, #5]
 8000e12:	fb01 f303 	mul.w	r3, r1, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	440b      	add	r3, r1
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	e034      	b.n	8000e94 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d012      	beq.n	8000e60 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b2d8      	uxtb	r0, r3
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000e4a:	885b      	ldrh	r3, [r3, #2]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	7bba      	ldrb	r2, [r7, #14]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f7ff ff5b 	bl	8000d14 <ssd1306_DrawPixel>
 8000e5e:	e016      	b.n	8000e8e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b2d8      	uxtb	r0, r3
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000e70:	885b      	ldrh	r3, [r3, #2]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b2d9      	uxtb	r1, r3
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf0c      	ite	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	2300      	movne	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f7ff ff43 	bl	8000d14 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	793b      	ldrb	r3, [r7, #4]
 8000e96:	461a      	mov	r2, r3
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d3c5      	bcc.n	8000e2a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	797b      	ldrb	r3, [r7, #5]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d3ad      	bcc.n	8000e0a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	793b      	ldrb	r3, [r7, #4]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <ssd1306_WriteChar+0x10c>)
 8000ebc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3724      	adds	r7, #36	; 0x24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	20000718 	.word	0x20000718

08000ecc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	1d38      	adds	r0, r7, #4
 8000ed6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000eda:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000edc:	e012      	b.n	8000f04 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	7818      	ldrb	r0, [r3, #0]
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	1d3a      	adds	r2, r7, #4
 8000ee6:	ca06      	ldmia	r2, {r1, r2}
 8000ee8:	f7ff ff68 	bl	8000dbc <ssd1306_WriteChar>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d002      	beq.n	8000efe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	e008      	b.n	8000f10 <ssd1306_WriteString+0x44>
        }
        str++;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1e8      	bne.n	8000ede <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <ssd1306_SetCursor+0x2c>)
 8000f2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <ssd1306_SetCursor+0x2c>)
 8000f36:	805a      	strh	r2, [r3, #2]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	20000718 	.word	0x20000718

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210f      	movs	r1, #15
 8000f82:	f06f 0001 	mvn.w	r0, #1
 8000f86:	f000 fb1d 	bl	80015c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <HAL_InitTick+0xe0>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a32      	ldr	r2, [pc, #200]	; (8001078 <HAL_InitTick+0xe0>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_InitTick+0xe0>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc0:	f107 0210 	add.w	r2, r7, #16
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fb28 	bl	8003620 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d103      	bne.n	8000fe2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fda:	f002 faf9 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8000fde:	6378      	str	r0, [r7, #52]	; 0x34
 8000fe0:	e004      	b.n	8000fec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fe2:	f002 faf5 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <HAL_InitTick+0xe4>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	0c9b      	lsrs	r3, r3, #18
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_InitTick+0xe8>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <HAL_InitTick+0xec>)
 8000ffe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_InitTick+0xe8>)
 8001002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001006:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001008:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_InitTick+0xe8>)
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_InitTick+0xe8>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_InitTick+0xe8>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_InitTick+0xe8>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001020:	4817      	ldr	r0, [pc, #92]	; (8001080 <HAL_InitTick+0xe8>)
 8001022:	f002 ff57 	bl	8003ed4 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800102c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001030:	2b00      	cmp	r3, #0
 8001032:	d11b      	bne.n	800106c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <HAL_InitTick+0xe8>)
 8001036:	f002 ffaf 	bl	8003f98 <HAL_TIM_Base_Start_IT>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001044:	2b00      	cmp	r3, #0
 8001046:	d111      	bne.n	800106c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001048:	2036      	movs	r0, #54	; 0x36
 800104a:	f000 fad7 	bl	80015fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d808      	bhi.n	8001066 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	2036      	movs	r0, #54	; 0x36
 800105a:	f000 fab3 	bl	80015c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_InitTick+0xf0>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e002      	b.n	800106c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800106c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001070:	4618      	mov	r0, r3
 8001072:	3738      	adds	r7, #56	; 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	431bde83 	.word	0x431bde83
 8001080:	20000720 	.word	0x20000720
 8001084:	40001000 	.word	0x40001000
 8001088:	20000014 	.word	0x20000014

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <NMI_Handler+0x4>

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM6_DAC_IRQHandler+0x10>)
 80010be:	f002 ffe3 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000720 	.word	0x20000720

080010cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_USART3_UART_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <MX_USART3_UART_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_USART3_UART_Init+0x58>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART3_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_USART3_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART3_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USART3_UART_Init+0x58>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART3_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USART3_UART_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART3_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USART3_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USART3_UART_Init+0x58>)
 8001134:	f003 f9ae 	bl	8004494 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800113e:	f7ff fd65 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000076c 	.word	0x2000076c
 800114c:	40004800 	.word	0x40004800

08001150 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ae      	sub	sp, #184	; 0xb8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2290      	movs	r2, #144	; 0x90
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f006 feeb 	bl	8007f4c <memset>
  if(uartHandle->Instance==USART3)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_UART_MspInit+0xb4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d13c      	bne.n	80011fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001184:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001186:	2300      	movs	r3, #0
 8001188:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fa78 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800119a:	f7ff fd37 	bl	8000c0c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_UART_MspInit+0xb8>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_UART_MspInit+0xb8>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_UART_MspInit+0xb8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_UART_MspInit+0xb8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_UART_MspInit+0xb8>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_UART_MspInit+0xb8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e8:	2307      	movs	r3, #7
 80011ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_UART_MspInit+0xbc>)
 80011f6:	f000 fd35 	bl	8001c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	37b8      	adds	r7, #184	; 0xb8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40004800 	.word	0x40004800
 8001208:	40023800 	.word	0x40023800
 800120c:	40020c00 	.word	0x40020c00

08001210 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800121a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121e:	2206      	movs	r2, #6
 8001220:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001224:	2202      	movs	r2, #2
 8001226:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001230:	2202      	movs	r2, #2
 8001232:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001236:	2201      	movs	r2, #1
 8001238:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001248:	2201      	movs	r2, #1
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001254:	f001 fb67 	bl	8002926 <HAL_PCD_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800125e:	f7ff fcd5 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200007f4 	.word	0x200007f4

0800126c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ae      	sub	sp, #184	; 0xb8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2290      	movs	r2, #144	; 0x90
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f006 fe5d 	bl	8007f4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129a:	d159      	bne.n	8001350 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800129c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 f9e9 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012b8:	f7ff fca8 	bl	8000c0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <HAL_PCD_MspInit+0xec>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <HAL_PCD_MspInit+0xec>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012ee:	230a      	movs	r3, #10
 80012f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <HAL_PCD_MspInit+0xf0>)
 80012fc:	f000 fcb2 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001318:	4619      	mov	r1, r3
 800131a:	4810      	ldr	r0, [pc, #64]	; (800135c <HAL_PCD_MspInit+0xf0>)
 800131c:	f000 fca2 	bl	8001c64 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_PCD_MspInit+0xec>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_PCD_MspInit+0xec>)
 8001326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132a:	6353      	str	r3, [r2, #52]	; 0x34
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_PCD_MspInit+0xec>)
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <HAL_PCD_MspInit+0xec>)
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_PCD_MspInit+0xec>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001342:	6453      	str	r3, [r2, #68]	; 0x44
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_PCD_MspInit+0xec>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001350:	bf00      	nop
 8001352:	37b8      	adds	r7, #184	; 0xb8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001366:	490e      	ldr	r1, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800137c:	4c0b      	ldr	r4, [pc, #44]	; (80013ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800138a:	f7ff fe9f 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f006 fe3b 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fb9f 	bl	8000ad4 <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013a4:	080096bc 	.word	0x080096bc
  ldr r2, =_sbss
 80013a8:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80013ac:	20005820 	.word	0x20005820

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>

080013b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b6:	2003      	movs	r0, #3
 80013b8:	f000 f8f9 	bl	80015ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013bc:	200f      	movs	r0, #15
 80013be:	f7ff fdeb 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c2:	f7ff fdc1 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000018 	.word	0x20000018
 80013f0:	20000cfc 	.word	0x20000cfc

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000cfc 	.word	0x20000cfc

0800140c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff ffee 	bl	80013f4 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d005      	beq.n	8001432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_Delay+0x44>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001432:	bf00      	nop
 8001434:	f7ff ffde 	bl	80013f4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f7      	bhi.n	8001434 <HAL_Delay+0x28>
  {
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000018 	.word	0x20000018

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <__NVIC_SetPriorityGrouping+0x40>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	4313      	orrs	r3, r2
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x40>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	05fa0000 	.word	0x05fa0000

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4907      	ldr	r1, [pc, #28]	; (80014f0 <__NVIC_EnableIRQ+0x38>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff4c 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d6:	f7ff ff61 	bl	800149c <__NVIC_GetPriorityGrouping>
 80015da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	6978      	ldr	r0, [r7, #20]
 80015e2:	f7ff ffb1 	bl	8001548 <NVIC_EncodePriority>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff80 	bl	80014f4 <__NVIC_SetPriority>
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff54 	bl	80014b8 <__NVIC_EnableIRQ>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06a      	b.n	8001700 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001630:	2b00      	cmp	r3, #0
 8001632:	d106      	bne.n	8001642 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2223      	movs	r2, #35	; 0x23
 8001638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7fe ffcb 	bl	80005d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_ETH_Init+0xf0>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a30      	ldr	r2, [pc, #192]	; (8001708 <HAL_ETH_Init+0xf0>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_ETH_Init+0xf0>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_ETH_Init+0xf4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a2b      	ldr	r2, [pc, #172]	; (800170c <HAL_ETH_Init+0xf4>)
 8001660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001664:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_ETH_Init+0xf4>)
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4927      	ldr	r1, [pc, #156]	; (800170c <HAL_ETH_Init+0xf4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_ETH_Init+0xf4>)
 8001676:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800168e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff feb0 	bl	80013f4 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001696:	e011      	b.n	80016bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001698:	f7ff feac 	bl	80013f4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a6:	d909      	bls.n	80016bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	22e0      	movs	r2, #224	; 0xe0
 80016b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e021      	b.n	8001700 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1e4      	bne.n	8001698 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f958 	bl	8001984 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f9ff 	bl	8001ad8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fa55 	bl	8001b8a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	461a      	mov	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f9bd 	bl	8001a68 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2210      	movs	r2, #16
 80016fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800

08001710 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4b51      	ldr	r3, [pc, #324]	; (800186c <ETH_SetMACConfig+0x15c>)
 8001726:	4013      	ands	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7c1b      	ldrb	r3, [r3, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <ETH_SetMACConfig+0x28>
 8001732:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001736:	e000      	b.n	800173a <ETH_SetMACConfig+0x2a>
 8001738:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	7c5b      	ldrb	r3, [r3, #17]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <ETH_SetMACConfig+0x38>
 8001742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001746:	e000      	b.n	800174a <ETH_SetMACConfig+0x3a>
 8001748:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800174a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001750:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	7fdb      	ldrb	r3, [r3, #31]
 8001756:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001758:	431a      	orrs	r2, r3
                        macconf->Speed |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800175e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	7f92      	ldrb	r2, [r2, #30]
 8001764:	2a00      	cmp	r2, #0
 8001766:	d102      	bne.n	800176e <ETH_SetMACConfig+0x5e>
 8001768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176c:	e000      	b.n	8001770 <ETH_SetMACConfig+0x60>
 800176e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001770:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	7f1b      	ldrb	r3, [r3, #28]
 8001776:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001778:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800177e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	791b      	ldrb	r3, [r3, #4]
 8001784:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001786:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800178e:	2a00      	cmp	r2, #0
 8001790:	d102      	bne.n	8001798 <ETH_SetMACConfig+0x88>
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	e000      	b.n	800179a <ETH_SetMACConfig+0x8a>
 8001798:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800179a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7bdb      	ldrb	r3, [r3, #15]
 80017a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017b2:	4313      	orrs	r3, r2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fe1e 	bl	800140c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017e6:	4013      	ands	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d101      	bne.n	80017fe <ETH_SetMACConfig+0xee>
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	e000      	b.n	8001800 <ETH_SetMACConfig+0xf0>
 80017fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001800:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001806:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800180e:	2a01      	cmp	r2, #1
 8001810:	d101      	bne.n	8001816 <ETH_SetMACConfig+0x106>
 8001812:	2208      	movs	r2, #8
 8001814:	e000      	b.n	8001818 <ETH_SetMACConfig+0x108>
 8001816:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001818:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001820:	2a01      	cmp	r2, #1
 8001822:	d101      	bne.n	8001828 <ETH_SetMACConfig+0x118>
 8001824:	2204      	movs	r2, #4
 8001826:	e000      	b.n	800182a <ETH_SetMACConfig+0x11a>
 8001828:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800182a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001832:	2a01      	cmp	r2, #1
 8001834:	d101      	bne.n	800183a <ETH_SetMACConfig+0x12a>
 8001836:	2202      	movs	r2, #2
 8001838:	e000      	b.n	800183c <ETH_SetMACConfig+0x12c>
 800183a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800183c:	4313      	orrs	r3, r2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff fdd9 	bl	800140c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	ff20810f 	.word	0xff20810f

08001870 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <ETH_SetDMAConfig+0x110>)
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	7b1b      	ldrb	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <ETH_SetDMAConfig+0x2c>
 8001896:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800189a:	e000      	b.n	800189e <ETH_SetDMAConfig+0x2e>
 800189c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7b5b      	ldrb	r3, [r3, #13]
 80018a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	7f52      	ldrb	r2, [r2, #29]
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d102      	bne.n	80018b4 <ETH_SetDMAConfig+0x44>
 80018ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b2:	e000      	b.n	80018b6 <ETH_SetDMAConfig+0x46>
 80018b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7b9b      	ldrb	r3, [r3, #14]
 80018bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	7f1b      	ldrb	r3, [r3, #28]
 80018ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80018cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7f9b      	ldrb	r3, [r3, #30]
 80018d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fd80 	bl	800140c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	461a      	mov	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001924:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800192a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001930:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001938:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800193a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001942:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001948:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001956:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff fd51 	bl	800140c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	f8de3f23 	.word	0xf8de3f23

08001984 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0a6      	sub	sp, #152	; 0x98
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800198c:	2301      	movs	r3, #1
 800198e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001992:	2301      	movs	r3, #1
 8001994:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019c0:	2300      	movs	r3, #0
 80019c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fe86 	bl	8001710 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a30:	2301      	movs	r3, #1
 8001a32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a38:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff08 	bl	8001870 <ETH_SetDMAConfig>
}
 8001a60:	bf00      	nop
 8001a62:	3798      	adds	r7, #152	; 0x98
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3305      	adds	r3, #5
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	3204      	adds	r2, #4
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <ETH_MACAddressConfig+0x68>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3303      	adds	r3, #3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4313      	orrs	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <ETH_MACAddressConfig+0x6c>)
 8001aba:	4413      	add	r3, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40028040 	.word	0x40028040
 8001ad4:	40028044 	.word	0x40028044

08001ad8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e03e      	b.n	8001b64 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68d9      	ldr	r1, [r3, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	3206      	adds	r2, #6
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d80c      	bhi.n	8001b48 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68d9      	ldr	r1, [r3, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	e004      	b.n	8001b52 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d9bd      	bls.n	8001ae6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7c:	611a      	str	r2, [r3, #16]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e046      	b.n	8001c26 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6919      	ldr	r1, [r3, #16]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	3212      	adds	r2, #18
 8001bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d80c      	bhi.n	8001c16 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6919      	ldr	r1, [r3, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	e004      	b.n	8001c20 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d9b5      	bls.n	8001b98 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	60da      	str	r2, [r3, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e175      	b.n	8001f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8164 	bne.w	8001f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x56>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80be 	beq.w	8001f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_GPIO_Init+0x324>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_GPIO_Init+0x324>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_GPIO_Init+0x324>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e06:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_GPIO_Init+0x328>)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_GPIO_Init+0x32c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d037      	beq.n	8001ea2 <HAL_GPIO_Init+0x23e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_GPIO_Init+0x330>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d031      	beq.n	8001e9e <HAL_GPIO_Init+0x23a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a56      	ldr	r2, [pc, #344]	; (8001f98 <HAL_GPIO_Init+0x334>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_Init+0x236>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_GPIO_Init+0x338>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x232>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <HAL_GPIO_Init+0x33c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x22e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_GPIO_Init+0x340>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x22a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_GPIO_Init+0x344>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x226>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <HAL_GPIO_Init+0x348>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x222>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_GPIO_Init+0x34c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x21e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x21a>
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	e012      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e7e:	230a      	movs	r3, #10
 8001e80:	e010      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e82:	2308      	movs	r3, #8
 8001e84:	e00e      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e00c      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	e00a      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e8e:	2305      	movs	r3, #5
 8001e90:	e008      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e004      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x240>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f002 0203 	and.w	r2, r2, #3
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4093      	lsls	r3, r2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eb4:	4935      	ldr	r1, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x328>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a34      	ldr	r2, [pc, #208]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f16:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <HAL_GPIO_Init+0x354>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	f67f ae86 	bls.w	8001c84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40021400 	.word	0x40021400
 8001fa8:	40021800 	.word	0x40021800
 8001fac:	40021c00 	.word	0x40021c00
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	40022400 	.word	0x40022400
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fd8:	e003      	b.n	8001fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	041a      	lsls	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002000:	887a      	ldrh	r2, [r7, #2]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	041a      	lsls	r2, r3, #16
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43d9      	mvns	r1, r3
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	400b      	ands	r3, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	619a      	str	r2, [r3, #24]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fce2 	bl	8000a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e006      	b.n	80020ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d104      	bne.n	80020be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_I2C_Init+0x11c>)
 80020ca:	430b      	orrs	r3, r1
 80020cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69d9      	ldr	r1, [r3, #28]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	02008000 	.word	0x02008000

08002144 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	817b      	strh	r3, [r7, #10]
 8002156:	460b      	mov	r3, r1
 8002158:	813b      	strh	r3, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	f040 80f9 	bne.w	800235e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_I2C_Mem_Write+0x34>
 8002172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0ed      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Mem_Write+0x4e>
 800218e:	2302      	movs	r3, #2
 8002190:	e0e6      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800219a:	f7ff f92b 	bl	80013f4 <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2319      	movs	r3, #25
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f955 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0d1      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2221      	movs	r2, #33	; 0x21
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2240      	movs	r2, #64	; 0x40
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a3a      	ldr	r2, [r7, #32]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e4:	88f8      	ldrh	r0, [r7, #6]
 80021e6:	893a      	ldrh	r2, [r7, #8]
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	4603      	mov	r3, r0
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f8b9 	bl	800236c <I2C_RequestMemoryWrite>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0a9      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	2bff      	cmp	r3, #255	; 0xff
 8002214:	d90e      	bls.n	8002234 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	22ff      	movs	r2, #255	; 0xff
 800221a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	b2da      	uxtb	r2, r3
 8002222:	8979      	ldrh	r1, [r7, #10]
 8002224:	2300      	movs	r3, #0
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fab1 	bl	8002794 <I2C_TransferConfig>
 8002232:	e00f      	b.n	8002254 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	b2da      	uxtb	r2, r3
 8002244:	8979      	ldrh	r1, [r7, #10]
 8002246:	2300      	movs	r3, #0
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 faa0 	bl	8002794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f93f 	bl	80024dc <I2C_WaitOnTXISFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e07b      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d034      	beq.n	800230c <HAL_I2C_Mem_Write+0x1c8>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d130      	bne.n	800230c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	2200      	movs	r2, #0
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f8d1 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e04d      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2bff      	cmp	r3, #255	; 0xff
 80022cc:	d90e      	bls.n	80022ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	8979      	ldrh	r1, [r7, #10]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fa55 	bl	8002794 <I2C_TransferConfig>
 80022ea:	e00f      	b.n	800230c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	2300      	movs	r3, #0
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fa44 	bl	8002794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d19e      	bne.n	8002254 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f91e 	bl	800255c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e01a      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2220      	movs	r2, #32
 8002330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_I2C_Mem_Write+0x224>)
 800233e:	400b      	ands	r3, r1
 8002340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800235e:	2302      	movs	r3, #2
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	fe00e800 	.word	0xfe00e800

0800236c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	817b      	strh	r3, [r7, #10]
 800237e:	460b      	mov	r3, r1
 8002380:	813b      	strh	r3, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	8979      	ldrh	r1, [r7, #10]
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <I2C_RequestMemoryWrite+0xa4>)
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f9fd 	bl	8002794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	69b9      	ldr	r1, [r7, #24]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f89c 	bl	80024dc <I2C_WaitOnTXISFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e02c      	b.n	8002408 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023b4:	893b      	ldrh	r3, [r7, #8]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
 80023be:	e015      	b.n	80023ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023c0:	893b      	ldrh	r3, [r7, #8]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	69b9      	ldr	r1, [r7, #24]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f882 	bl	80024dc <I2C_WaitOnTXISFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e012      	b.n	8002408 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023e2:	893b      	ldrh	r3, [r7, #8]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2200      	movs	r2, #0
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f830 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	80002000 	.word	0x80002000

08002414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d103      	bne.n	8002432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d007      	beq.n	8002450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	619a      	str	r2, [r3, #24]
  }
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	e022      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d01e      	beq.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe ffbd 	bl	80013f4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d113      	bne.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00f      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d0cd      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024e8:	e02c      	b.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f870 	bl	80025d4 <I2C_IsErrorOccurred>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e02a      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d01e      	beq.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7fe ff75 	bl	80013f4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d113      	bne.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e007      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d1cb      	bne.n	80024ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002568:	e028      	b.n	80025bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f830 	bl	80025d4 <I2C_IsErrorOccurred>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e026      	b.n	80025cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257e:	f7fe ff39 	bl	80013f4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	d302      	bcc.n	8002594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d113      	bne.n	80025bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e007      	b.n	80025cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d1cf      	bne.n	800256a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d068      	beq.n	80026d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002608:	e049      	b.n	800269e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d045      	beq.n	800269e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7fe feef 	bl	80013f4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_IsErrorOccurred+0x54>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d13a      	bne.n	800269e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800263a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264a:	d121      	bne.n	8002690 <I2C_IsErrorOccurred+0xbc>
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002652:	d01d      	beq.n	8002690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b20      	cmp	r3, #32
 8002658:	d01a      	beq.n	8002690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800266a:	f7fe fec3 	bl	80013f4 <HAL_GetTick>
 800266e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002670:	e00e      	b.n	8002690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002672:	f7fe febf 	bl	80013f4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b19      	cmp	r3, #25
 800267e:	d907      	bls.n	8002690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f043 0320 	orr.w	r3, r3, #32
 8002686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800268e:	e006      	b.n	800269e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b20      	cmp	r3, #32
 800269c:	d1e9      	bne.n	8002672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d003      	beq.n	80026b4 <I2C_IsErrorOccurred+0xe0>
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0aa      	beq.n	800260a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2220      	movs	r2, #32
 80026c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01c      	beq.n	8002782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff fe63 	bl	8002414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <I2C_IsErrorOccurred+0x1bc>)
 800275a:	400b      	ands	r3, r1
 800275c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	; 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	fe00e800 	.word	0xfe00e800

08002794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	4613      	mov	r3, r2
 80027a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ac:	7a7b      	ldrb	r3, [r7, #9]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	4313      	orrs	r3, r2
 80027be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	0d5b      	lsrs	r3, r3, #21
 80027ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <I2C_TransferConfig+0x60>)
 80027d4:	430b      	orrs	r3, r1
 80027d6:	43db      	mvns	r3, r3
 80027d8:	ea02 0103 	and.w	r1, r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	03ff63ff 	.word	0x03ff63ff

080027f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	d138      	bne.n	8002880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002818:	2302      	movs	r3, #2
 800281a:	e032      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2224      	movs	r2, #36	; 0x24
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800284a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d139      	bne.n	8002918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e033      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2224      	movs	r2, #36	; 0x24
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002928:	b08f      	sub	sp, #60	; 0x3c
 800292a:	af0a      	add	r7, sp, #40	; 0x28
 800292c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e116      	b.n	8002b66 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fc8a 	bl	800126c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2203      	movs	r2, #3
 800295c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fa4c 	bl	8004e14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	687e      	ldr	r6, [r7, #4]
 8002984:	466d      	mov	r5, sp
 8002986:	f106 0410 	add.w	r4, r6, #16
 800298a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002992:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002996:	e885 0003 	stmia.w	r5, {r0, r1}
 800299a:	1d33      	adds	r3, r6, #4
 800299c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	f002 f9e0 	bl	8004d64 <USB_CoreInit>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0d7      	b.n	8002b66 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fa3a 	bl	8004e36 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e04a      	b.n	8002a5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	333d      	adds	r3, #61	; 0x3d
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	333c      	adds	r3, #60	; 0x3c
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	b298      	uxth	r0, r3
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	3344      	adds	r3, #68	; 0x44
 8002a04:	4602      	mov	r2, r0
 8002a06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3340      	adds	r3, #64	; 0x40
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3348      	adds	r3, #72	; 0x48
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334c      	adds	r3, #76	; 0x4c
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3354      	adds	r3, #84	; 0x54
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3af      	bcc.n	80029c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e044      	b.n	8002af8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	3301      	adds	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3b5      	bcc.n	8002a6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	687e      	ldr	r6, [r7, #4]
 8002b0a:	466d      	mov	r5, sp
 8002b0c:	f106 0410 	add.w	r4, r6, #16
 8002b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b20:	1d33      	adds	r3, r6, #4
 8002b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	f002 f9d3 	bl	8004ed0 <USB_DevInit>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e014      	b.n	8002b66 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d102      	bne.n	8002b5a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f80b 	bl	8002b70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 fb91 	bl	8005286 <USB_DevDisconnect>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	10000003 	.word	0x10000003

08002bb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40007000 	.word	0x40007000

08002bd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c06:	f7fe fbf5 	bl	80013f4 <HAL_GetTick>
 8002c0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c0c:	e009      	b.n	8002c22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c0e:	f7fe fbf1 	bl	80013f4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1c:	d901      	bls.n	8002c22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e022      	b.n	8002c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c3c:	f7fe fbda 	bl	80013f4 <HAL_GetTick>
 8002c40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c42:	e009      	b.n	8002c58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c44:	f7fe fbd6 	bl	80013f4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c52:	d901      	bls.n	8002c58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e007      	b.n	8002c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c64:	d1ee      	bne.n	8002c44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e29b      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b96      	ldr	r3, [pc, #600]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca8:	4b93      	ldr	r3, [pc, #588]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
 8002cb4:	4b90      	ldr	r3, [pc, #576]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d06c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x130>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d168      	bne.n	8002da8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e275      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x7a>
 8002ce4:	4b84      	ldr	r3, [pc, #528]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a83      	ldr	r2, [pc, #524]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x9c>
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b7c      	ldr	r3, [pc, #496]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7b      	ldr	r2, [pc, #492]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xc0>
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6b      	ldr	r2, [pc, #428]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fb4c 	bl	80013f4 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe fb48 	bl	80013f4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e229      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe8>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fb38 	bl	80013f4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fb34 	bl	80013f4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e215      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x110>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d069      	beq.n	8002e8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1e9      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	493d      	ldr	r1, [pc, #244]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e040      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe faea 	bl	80013f4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe fae6 	bl	80013f4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1c7      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
 8002e56:	e018      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fac6 	bl	80013f4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fac2 	bl	80013f4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1a3      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d038      	beq.n	8002f08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe faa3 	bl	80013f4 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fa9f 	bl	80013f4 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e180      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x23a>
 8002ed0:	e01a      	b.n	8002f08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe fa89 	bl	80013f4 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fa85 	bl	80013f4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d903      	bls.n	8002efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e166      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
 8002ef8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b92      	ldr	r3, [pc, #584]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a4 	beq.w	800305e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b8c      	ldr	r3, [pc, #560]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b89      	ldr	r3, [pc, #548]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a88      	ldr	r2, [pc, #544]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b86      	ldr	r3, [pc, #536]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	4b83      	ldr	r3, [pc, #524]	; (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f4a:	4b80      	ldr	r3, [pc, #512]	; (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7f      	ldr	r2, [pc, #508]	; (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fa4d 	bl	80013f4 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe fa49 	bl	80013f4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e12a      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f70:	4b76      	ldr	r3, [pc, #472]	; (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x31a>
 8002f84:	4b70      	ldr	r3, [pc, #448]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a6f      	ldr	r2, [pc, #444]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e02d      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x33c>
 8002f9a:	4b6b      	ldr	r3, [pc, #428]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a6a      	ldr	r2, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a67      	ldr	r2, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e01c      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x35e>
 8002fbc:	4b62      	ldr	r3, [pc, #392]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a61      	ldr	r2, [pc, #388]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a5e      	ldr	r2, [pc, #376]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	e00b      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a5b      	ldr	r2, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe2:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f9fd 	bl	80013f4 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe f9f9 	bl	80013f4 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0d8      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCC_OscConfig+0x386>
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe f9e7 	bl	80013f4 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe f9e3 	bl	80013f4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0c2      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003040:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80ae 	beq.w	80031c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d06d      	beq.n	8003150 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d14b      	bne.n	8003114 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b32      	ldr	r3, [pc, #200]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a31      	ldr	r2, [pc, #196]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe f9b4 	bl	80013f4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe f9b0 	bl	80013f4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e091      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	491b      	ldr	r1, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe f982 	bl	80013f4 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe f97e 	bl	80013f4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e05f      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x47c>
 8003112:	e057      	b.n	80031c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800311a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f968 	bl	80013f4 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe f964 	bl	80013f4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e045      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x4b0>
 8003146:	e03d      	b.n	80031c4 <HAL_RCC_OscConfig+0x54c>
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_RCC_OscConfig+0x558>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d030      	beq.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d129      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d122      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003186:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003188:	4293      	cmp	r3, r2
 800318a:	d119      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d10f      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d0      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d910      	bls.n	800321c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 020f 	bic.w	r2, r3, #15
 8003202:	4965      	ldr	r1, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d040      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e073      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4936      	ldr	r1, [pc, #216]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7fe f894 	bl	80013f4 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe f890 	bl	80013f4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e053      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d210      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	4922      	ldr	r1, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fe06 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	08009694 	.word	0x08009694
 80033a4:	20000010 	.word	0x20000010
 80033a8:	20000014 	.word	0x20000014

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b094      	sub	sp, #80	; 0x50
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	2300      	movs	r3, #0
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	2300      	movs	r3, #0
 80033be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b79      	ldr	r3, [pc, #484]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80e1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e0db      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e4:	e0db      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033f6:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
 8003416:	2300      	movs	r3, #0
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800341e:	4622      	mov	r2, r4
 8003420:	462b      	mov	r3, r5
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4621      	mov	r1, r4
 8003438:	1a51      	subs	r1, r2, r1
 800343a:	6139      	str	r1, [r7, #16]
 800343c:	4629      	mov	r1, r5
 800343e:	eb63 0301 	sbc.w	r3, r3, r1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003450:	4659      	mov	r1, fp
 8003452:	018b      	lsls	r3, r1, #6
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345a:	4651      	mov	r1, sl
 800345c:	018a      	lsls	r2, r1, #6
 800345e:	4651      	mov	r1, sl
 8003460:	ebb2 0801 	subs.w	r8, r2, r1
 8003464:	4659      	mov	r1, fp
 8003466:	eb63 0901 	sbc.w	r9, r3, r1
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347e:	4690      	mov	r8, r2
 8003480:	4699      	mov	r9, r3
 8003482:	4623      	mov	r3, r4
 8003484:	eb18 0303 	adds.w	r3, r8, r3
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	462b      	mov	r3, r5
 800348c:	eb49 0303 	adc.w	r3, r9, r3
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349e:	4629      	mov	r1, r5
 80034a0:	024b      	lsls	r3, r1, #9
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a8:	4621      	mov	r1, r4
 80034aa:	024a      	lsls	r2, r1, #9
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034bc:	f7fc fec0 	bl	8000240 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	e058      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	4611      	mov	r1, r2
 80034d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	f04f 0000 	mov.w	r0, #0
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	0159      	lsls	r1, r3, #5
 80034f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f6:	0150      	lsls	r0, r2, #5
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4641      	mov	r1, r8
 80034fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003502:	4649      	mov	r1, r9
 8003504:	eb63 0b01 	sbc.w	fp, r3, r1
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800351c:	ebb2 040a 	subs.w	r4, r2, sl
 8003520:	eb63 050b 	sbc.w	r5, r3, fp
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	00eb      	lsls	r3, r5, #3
 800352e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003532:	00e2      	lsls	r2, r4, #3
 8003534:	4614      	mov	r4, r2
 8003536:	461d      	mov	r5, r3
 8003538:	4643      	mov	r3, r8
 800353a:	18e3      	adds	r3, r4, r3
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	464b      	mov	r3, r9
 8003540:	eb45 0303 	adc.w	r3, r5, r3
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	2200      	movs	r2, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	61fa      	str	r2, [r7, #28]
 800356c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003570:	f7fc fe66 	bl	8000240 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800358c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3750      	adds	r7, #80	; 0x50
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000010 	.word	0x20000010

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	080096a4 	.word	0x080096a4

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	080096a4 	.word	0x080096a4

08003620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	220f      	movs	r2, #15
 800362e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_GetClockConfig+0x5c>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <HAL_RCC_GetClockConfig+0x5c>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_GetClockConfig+0x5c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003654:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_GetClockConfig+0x5c>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <HAL_RCC_GetClockConfig+0x60>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	601a      	str	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40023c00 	.word	0x40023c00

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a68      	ldr	r2, [pc, #416]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	4b66      	ldr	r3, [pc, #408]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	4964      	ldr	r1, [pc, #400]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036de:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	4959      	ldr	r1, [pc, #356]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800371a:	4b4e      	ldr	r3, [pc, #312]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003720:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	494a      	ldr	r1, [pc, #296]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 808b 	beq.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4a39      	ldr	r2, [pc, #228]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6413      	str	r3, [r2, #64]	; 0x40
 8003774:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003780:	4b35      	ldr	r3, [pc, #212]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378c:	f7fd fe32 	bl	80013f4 <HAL_GetTick>
 8003790:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fd fe2e 	bl	80013f4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e38f      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d035      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d02e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037da:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037f2:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f8:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d114      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fdf6 	bl	80013f4 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fd fdf2 	bl	80013f4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e351      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ee      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383a:	d111      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800384a:	400b      	ands	r3, r1
 800384c:	4901      	ldr	r1, [pc, #4]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
 8003852:	e00b      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
 800385c:	0ffffcff 	.word	0x0ffffcff
 8003860:	4bac      	ldr	r3, [pc, #688]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4aab      	ldr	r2, [pc, #684]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003866:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800386a:	6093      	str	r3, [r2, #8]
 800386c:	4ba9      	ldr	r3, [pc, #676]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	49a6      	ldr	r1, [pc, #664]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387a:	4313      	orrs	r3, r2
 800387c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d010      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388a:	4ba2      	ldr	r3, [pc, #648]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	4aa0      	ldr	r2, [pc, #640]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003896:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800389a:	4b9e      	ldr	r3, [pc, #632]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	499b      	ldr	r1, [pc, #620]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b8:	4b96      	ldr	r3, [pc, #600]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c6:	4993      	ldr	r1, [pc, #588]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038da:	4b8e      	ldr	r3, [pc, #568]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e8:	498a      	ldr	r1, [pc, #552]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038fc:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390a:	4982      	ldr	r1, [pc, #520]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800391e:	4b7d      	ldr	r3, [pc, #500]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4979      	ldr	r1, [pc, #484]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003940:	4b74      	ldr	r3, [pc, #464]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4971      	ldr	r1, [pc, #452]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003962:	4b6c      	ldr	r3, [pc, #432]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f023 020c 	bic.w	r2, r3, #12
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	4968      	ldr	r1, [pc, #416]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003984:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4960      	ldr	r1, [pc, #384]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	4957      	ldr	r1, [pc, #348]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c8:	4b52      	ldr	r3, [pc, #328]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	494f      	ldr	r1, [pc, #316]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ea:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	4946      	ldr	r1, [pc, #280]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a0c:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	493e      	ldr	r1, [pc, #248]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	4935      	ldr	r1, [pc, #212]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a50:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5e:	492d      	ldr	r1, [pc, #180]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d011      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a72:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a80:	4924      	ldr	r1, [pc, #144]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a90:	d101      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	4914      	ldr	r1, [pc, #80]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae4:	490b      	ldr	r1, [pc, #44]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	4902      	ldr	r1, [pc, #8]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b24:	4b8a      	ldr	r3, [pc, #552]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	4986      	ldr	r1, [pc, #536]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b48:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b58:	497d      	ldr	r1, [pc, #500]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d006      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80d6 	beq.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b74:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a75      	ldr	r2, [pc, #468]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fd fc38 	bl	80013f4 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b88:	f7fd fc34 	bl	80013f4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e195      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b9a:	4b6d      	ldr	r3, [pc, #436]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d021      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11d      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc8:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bce:	0e1b      	lsrs	r3, r3, #24
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	019a      	lsls	r2, r3, #6
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	071b      	lsls	r3, r3, #28
 8003bee:	4958      	ldr	r1, [pc, #352]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c20:	d129      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c22:	4b4b      	ldr	r3, [pc, #300]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c36:	0f1b      	lsrs	r3, r3, #28
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	493e      	ldr	r1, [pc, #248]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f023 021f 	bic.w	r2, r3, #31
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	4938      	ldr	r1, [pc, #224]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01d      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c82:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	0e1b      	lsrs	r3, r3, #24
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	0f1b      	lsrs	r3, r3, #28
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	019a      	lsls	r2, r3, #6
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	4926      	ldr	r1, [pc, #152]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	019a      	lsls	r2, r3, #6
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	071b      	lsls	r3, r3, #28
 8003ce6:	491a      	ldr	r1, [pc, #104]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fb7b 	bl	80013f4 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d02:	f7fd fb77 	bl	80013f4 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0d8      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	f040 80ce 	bne.w	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd fb5e 	bl	80013f4 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d3c:	f7fd fb5a 	bl	80013f4 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d904      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0bb      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d54:	4b5e      	ldr	r3, [pc, #376]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d60:	d0ec      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02e      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d12a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	0f1b      	lsrs	r3, r3, #28
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	019a      	lsls	r2, r3, #6
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	061b      	lsls	r3, r3, #24
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	4944      	ldr	r1, [pc, #272]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dc6:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d022      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003df4:	d11d      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003df6:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	0f1b      	lsrs	r3, r3, #28
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	019a      	lsls	r2, r3, #6
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	4929      	ldr	r1, [pc, #164]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	0e1b      	lsrs	r3, r3, #24
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e4c:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	019a      	lsls	r2, r3, #6
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	4917      	ldr	r1, [pc, #92]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4911      	ldr	r1, [pc, #68]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd faaa 	bl	80013f4 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ea4:	f7fd faa6 	bl	80013f4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec2:	d1ef      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e049      	b.n	8003f7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f841 	bl	8003f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f000 fa00 	bl	8004318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e054      	b.n	800405a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a26      	ldr	r2, [pc, #152]	; (8004068 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fda:	d01d      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a21      	ldr	r2, [pc, #132]	; (8004070 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <HAL_TIM_Base_Start_IT+0xe0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_TIM_Base_Start_IT+0xe4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_TIM_Base_Start_IT+0xe8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d115      	bne.n	8004044 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_TIM_Base_Start_IT+0xec>)
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b06      	cmp	r3, #6
 8004028:	d015      	beq.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d011      	beq.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	e008      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e000      	b.n	8004058 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40010400 	.word	0x40010400
 800407c:	40014000 	.word	0x40014000
 8004080:	40001800 	.word	0x40001800
 8004084:	00010007 	.word	0x00010007

08004088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0202 	mvn.w	r2, #2
 80040b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f905 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8f7 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f908 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0204 	mvn.w	r2, #4
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8db 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8cd 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f8de 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b08      	cmp	r3, #8
 8004144:	d122      	bne.n	800418c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0208 	mvn.w	r2, #8
 800415c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2204      	movs	r2, #4
 8004162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8b1 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8a3 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f8b4 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b10      	cmp	r3, #16
 8004198:	d122      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d11b      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0210 	mvn.w	r2, #16
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2208      	movs	r2, #8
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f887 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f879 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f88a 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d107      	bne.n	800420c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0201 	mvn.w	r2, #1
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fcee 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b80      	cmp	r3, #128	; 0x80
 8004218:	d10e      	bne.n	8004238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d107      	bne.n	8004238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f91a 	bl	800446c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d10e      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d107      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f90d 	bl	8004480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d10e      	bne.n	8004292 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f838 	bl	8004302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b20      	cmp	r3, #32
 800429e:	d10e      	bne.n	80042be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d107      	bne.n	80042be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f06f 0220 	mvn.w	r2, #32
 80042b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8cd 	bl	8004458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a40      	ldr	r2, [pc, #256]	; (800442c <TIM_Base_SetConfig+0x114>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d00f      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <TIM_Base_SetConfig+0x118>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00b      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <TIM_Base_SetConfig+0x11c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <TIM_Base_SetConfig+0x120>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3a      	ldr	r2, [pc, #232]	; (800443c <TIM_Base_SetConfig+0x124>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2f      	ldr	r2, [pc, #188]	; (800442c <TIM_Base_SetConfig+0x114>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02b      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d027      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2c      	ldr	r2, [pc, #176]	; (8004430 <TIM_Base_SetConfig+0x118>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d023      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <TIM_Base_SetConfig+0x11c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01f      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2a      	ldr	r2, [pc, #168]	; (8004438 <TIM_Base_SetConfig+0x120>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01b      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a29      	ldr	r2, [pc, #164]	; (800443c <TIM_Base_SetConfig+0x124>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d017      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a28      	ldr	r2, [pc, #160]	; (8004440 <TIM_Base_SetConfig+0x128>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a27      	ldr	r2, [pc, #156]	; (8004444 <TIM_Base_SetConfig+0x12c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00f      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a26      	ldr	r2, [pc, #152]	; (8004448 <TIM_Base_SetConfig+0x130>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00b      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a25      	ldr	r2, [pc, #148]	; (800444c <TIM_Base_SetConfig+0x134>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a24      	ldr	r2, [pc, #144]	; (8004450 <TIM_Base_SetConfig+0x138>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <TIM_Base_SetConfig+0x13c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <TIM_Base_SetConfig+0x114>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0xf8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <TIM_Base_SetConfig+0x124>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40010400 	.word	0x40010400
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800
 800444c:	40001800 	.word	0x40001800
 8004450:	40001c00 	.word	0x40001c00
 8004454:	40002000 	.word	0x40002000

08004458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e040      	b.n	8004528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc fe4a 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	; 0x24
 80044c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f82c 	bl	8004530 <UART_SetConfig>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa84 	bl	80049f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800450e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fb0b 	bl	8004b3c <UART_CheckIdleState>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4ba6      	ldr	r3, [pc, #664]	; (80047f4 <UART_SetConfig+0x2c4>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	430b      	orrs	r3, r1
 8004566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a94      	ldr	r2, [pc, #592]	; (80047f8 <UART_SetConfig+0x2c8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d120      	bne.n	80045ee <UART_SetConfig+0xbe>
 80045ac:	4b93      	ldr	r3, [pc, #588]	; (80047fc <UART_SetConfig+0x2cc>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d816      	bhi.n	80045e8 <UART_SetConfig+0xb8>
 80045ba:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x90>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045dd 	.word	0x080045dd
 80045c8:	080045d7 	.word	0x080045d7
 80045cc:	080045e3 	.word	0x080045e3
 80045d0:	2301      	movs	r3, #1
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e150      	b.n	8004878 <UART_SetConfig+0x348>
 80045d6:	2302      	movs	r3, #2
 80045d8:	77fb      	strb	r3, [r7, #31]
 80045da:	e14d      	b.n	8004878 <UART_SetConfig+0x348>
 80045dc:	2304      	movs	r3, #4
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e14a      	b.n	8004878 <UART_SetConfig+0x348>
 80045e2:	2308      	movs	r3, #8
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e147      	b.n	8004878 <UART_SetConfig+0x348>
 80045e8:	2310      	movs	r3, #16
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e144      	b.n	8004878 <UART_SetConfig+0x348>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a83      	ldr	r2, [pc, #524]	; (8004800 <UART_SetConfig+0x2d0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d132      	bne.n	800465e <UART_SetConfig+0x12e>
 80045f8:	4b80      	ldr	r3, [pc, #512]	; (80047fc <UART_SetConfig+0x2cc>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d828      	bhi.n	8004658 <UART_SetConfig+0x128>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <UART_SetConfig+0xdc>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004641 	.word	0x08004641
 8004610:	08004659 	.word	0x08004659
 8004614:	08004659 	.word	0x08004659
 8004618:	08004659 	.word	0x08004659
 800461c:	0800464d 	.word	0x0800464d
 8004620:	08004659 	.word	0x08004659
 8004624:	08004659 	.word	0x08004659
 8004628:	08004659 	.word	0x08004659
 800462c:	08004647 	.word	0x08004647
 8004630:	08004659 	.word	0x08004659
 8004634:	08004659 	.word	0x08004659
 8004638:	08004659 	.word	0x08004659
 800463c:	08004653 	.word	0x08004653
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e118      	b.n	8004878 <UART_SetConfig+0x348>
 8004646:	2302      	movs	r3, #2
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e115      	b.n	8004878 <UART_SetConfig+0x348>
 800464c:	2304      	movs	r3, #4
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e112      	b.n	8004878 <UART_SetConfig+0x348>
 8004652:	2308      	movs	r3, #8
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e10f      	b.n	8004878 <UART_SetConfig+0x348>
 8004658:	2310      	movs	r3, #16
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e10c      	b.n	8004878 <UART_SetConfig+0x348>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a68      	ldr	r2, [pc, #416]	; (8004804 <UART_SetConfig+0x2d4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d120      	bne.n	80046aa <UART_SetConfig+0x17a>
 8004668:	4b64      	ldr	r3, [pc, #400]	; (80047fc <UART_SetConfig+0x2cc>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d013      	beq.n	800469e <UART_SetConfig+0x16e>
 8004676:	2b30      	cmp	r3, #48	; 0x30
 8004678:	d814      	bhi.n	80046a4 <UART_SetConfig+0x174>
 800467a:	2b20      	cmp	r3, #32
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x162>
 800467e:	2b20      	cmp	r3, #32
 8004680:	d810      	bhi.n	80046a4 <UART_SetConfig+0x174>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <UART_SetConfig+0x15c>
 8004686:	2b10      	cmp	r3, #16
 8004688:	d006      	beq.n	8004698 <UART_SetConfig+0x168>
 800468a:	e00b      	b.n	80046a4 <UART_SetConfig+0x174>
 800468c:	2300      	movs	r3, #0
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e0f2      	b.n	8004878 <UART_SetConfig+0x348>
 8004692:	2302      	movs	r3, #2
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e0ef      	b.n	8004878 <UART_SetConfig+0x348>
 8004698:	2304      	movs	r3, #4
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e0ec      	b.n	8004878 <UART_SetConfig+0x348>
 800469e:	2308      	movs	r3, #8
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e0e9      	b.n	8004878 <UART_SetConfig+0x348>
 80046a4:	2310      	movs	r3, #16
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0e6      	b.n	8004878 <UART_SetConfig+0x348>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a56      	ldr	r2, [pc, #344]	; (8004808 <UART_SetConfig+0x2d8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d120      	bne.n	80046f6 <UART_SetConfig+0x1c6>
 80046b4:	4b51      	ldr	r3, [pc, #324]	; (80047fc <UART_SetConfig+0x2cc>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046be:	2bc0      	cmp	r3, #192	; 0xc0
 80046c0:	d013      	beq.n	80046ea <UART_SetConfig+0x1ba>
 80046c2:	2bc0      	cmp	r3, #192	; 0xc0
 80046c4:	d814      	bhi.n	80046f0 <UART_SetConfig+0x1c0>
 80046c6:	2b80      	cmp	r3, #128	; 0x80
 80046c8:	d009      	beq.n	80046de <UART_SetConfig+0x1ae>
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	d810      	bhi.n	80046f0 <UART_SetConfig+0x1c0>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <UART_SetConfig+0x1a8>
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d006      	beq.n	80046e4 <UART_SetConfig+0x1b4>
 80046d6:	e00b      	b.n	80046f0 <UART_SetConfig+0x1c0>
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e0cc      	b.n	8004878 <UART_SetConfig+0x348>
 80046de:	2302      	movs	r3, #2
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e0c9      	b.n	8004878 <UART_SetConfig+0x348>
 80046e4:	2304      	movs	r3, #4
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e0c6      	b.n	8004878 <UART_SetConfig+0x348>
 80046ea:	2308      	movs	r3, #8
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e0c3      	b.n	8004878 <UART_SetConfig+0x348>
 80046f0:	2310      	movs	r3, #16
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e0c0      	b.n	8004878 <UART_SetConfig+0x348>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a44      	ldr	r2, [pc, #272]	; (800480c <UART_SetConfig+0x2dc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d125      	bne.n	800474c <UART_SetConfig+0x21c>
 8004700:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <UART_SetConfig+0x2cc>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470e:	d017      	beq.n	8004740 <UART_SetConfig+0x210>
 8004710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004714:	d817      	bhi.n	8004746 <UART_SetConfig+0x216>
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d00b      	beq.n	8004734 <UART_SetConfig+0x204>
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d811      	bhi.n	8004746 <UART_SetConfig+0x216>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <UART_SetConfig+0x1fe>
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d006      	beq.n	800473a <UART_SetConfig+0x20a>
 800472c:	e00b      	b.n	8004746 <UART_SetConfig+0x216>
 800472e:	2300      	movs	r3, #0
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e0a1      	b.n	8004878 <UART_SetConfig+0x348>
 8004734:	2302      	movs	r3, #2
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e09e      	b.n	8004878 <UART_SetConfig+0x348>
 800473a:	2304      	movs	r3, #4
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e09b      	b.n	8004878 <UART_SetConfig+0x348>
 8004740:	2308      	movs	r3, #8
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e098      	b.n	8004878 <UART_SetConfig+0x348>
 8004746:	2310      	movs	r3, #16
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e095      	b.n	8004878 <UART_SetConfig+0x348>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <UART_SetConfig+0x2e0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d125      	bne.n	80047a2 <UART_SetConfig+0x272>
 8004756:	4b29      	ldr	r3, [pc, #164]	; (80047fc <UART_SetConfig+0x2cc>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004764:	d017      	beq.n	8004796 <UART_SetConfig+0x266>
 8004766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476a:	d817      	bhi.n	800479c <UART_SetConfig+0x26c>
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004770:	d00b      	beq.n	800478a <UART_SetConfig+0x25a>
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004776:	d811      	bhi.n	800479c <UART_SetConfig+0x26c>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x254>
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004780:	d006      	beq.n	8004790 <UART_SetConfig+0x260>
 8004782:	e00b      	b.n	800479c <UART_SetConfig+0x26c>
 8004784:	2301      	movs	r3, #1
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e076      	b.n	8004878 <UART_SetConfig+0x348>
 800478a:	2302      	movs	r3, #2
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e073      	b.n	8004878 <UART_SetConfig+0x348>
 8004790:	2304      	movs	r3, #4
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e070      	b.n	8004878 <UART_SetConfig+0x348>
 8004796:	2308      	movs	r3, #8
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e06d      	b.n	8004878 <UART_SetConfig+0x348>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e06a      	b.n	8004878 <UART_SetConfig+0x348>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <UART_SetConfig+0x2e4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d138      	bne.n	800481e <UART_SetConfig+0x2ee>
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <UART_SetConfig+0x2cc>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047ba:	d017      	beq.n	80047ec <UART_SetConfig+0x2bc>
 80047bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047c0:	d82a      	bhi.n	8004818 <UART_SetConfig+0x2e8>
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c6:	d00b      	beq.n	80047e0 <UART_SetConfig+0x2b0>
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047cc:	d824      	bhi.n	8004818 <UART_SetConfig+0x2e8>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <UART_SetConfig+0x2aa>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	d006      	beq.n	80047e6 <UART_SetConfig+0x2b6>
 80047d8:	e01e      	b.n	8004818 <UART_SetConfig+0x2e8>
 80047da:	2300      	movs	r3, #0
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e04b      	b.n	8004878 <UART_SetConfig+0x348>
 80047e0:	2302      	movs	r3, #2
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e048      	b.n	8004878 <UART_SetConfig+0x348>
 80047e6:	2304      	movs	r3, #4
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e045      	b.n	8004878 <UART_SetConfig+0x348>
 80047ec:	2308      	movs	r3, #8
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e042      	b.n	8004878 <UART_SetConfig+0x348>
 80047f2:	bf00      	nop
 80047f4:	efff69f3 	.word	0xefff69f3
 80047f8:	40011000 	.word	0x40011000
 80047fc:	40023800 	.word	0x40023800
 8004800:	40004400 	.word	0x40004400
 8004804:	40004800 	.word	0x40004800
 8004808:	40004c00 	.word	0x40004c00
 800480c:	40005000 	.word	0x40005000
 8004810:	40011400 	.word	0x40011400
 8004814:	40007800 	.word	0x40007800
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e02c      	b.n	8004878 <UART_SetConfig+0x348>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a72      	ldr	r2, [pc, #456]	; (80049ec <UART_SetConfig+0x4bc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d125      	bne.n	8004874 <UART_SetConfig+0x344>
 8004828:	4b71      	ldr	r3, [pc, #452]	; (80049f0 <UART_SetConfig+0x4c0>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004832:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004836:	d017      	beq.n	8004868 <UART_SetConfig+0x338>
 8004838:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800483c:	d817      	bhi.n	800486e <UART_SetConfig+0x33e>
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d00b      	beq.n	800485c <UART_SetConfig+0x32c>
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004848:	d811      	bhi.n	800486e <UART_SetConfig+0x33e>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <UART_SetConfig+0x326>
 800484e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004852:	d006      	beq.n	8004862 <UART_SetConfig+0x332>
 8004854:	e00b      	b.n	800486e <UART_SetConfig+0x33e>
 8004856:	2300      	movs	r3, #0
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e00d      	b.n	8004878 <UART_SetConfig+0x348>
 800485c:	2302      	movs	r3, #2
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e00a      	b.n	8004878 <UART_SetConfig+0x348>
 8004862:	2304      	movs	r3, #4
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e007      	b.n	8004878 <UART_SetConfig+0x348>
 8004868:	2308      	movs	r3, #8
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e004      	b.n	8004878 <UART_SetConfig+0x348>
 800486e:	2310      	movs	r3, #16
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e001      	b.n	8004878 <UART_SetConfig+0x348>
 8004874:	2310      	movs	r3, #16
 8004876:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	d15b      	bne.n	800493a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d828      	bhi.n	80048da <UART_SetConfig+0x3aa>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x360>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048cb 	.word	0x080048cb
 80048a4:	080048db 	.word	0x080048db
 80048a8:	080048db 	.word	0x080048db
 80048ac:	080048db 	.word	0x080048db
 80048b0:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7fe fe8c 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e013      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe fe9c 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 80048c0:	61b8      	str	r0, [r7, #24]
        break;
 80048c2:	e00f      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c4:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <UART_SetConfig+0x4c4>)
 80048c6:	61bb      	str	r3, [r7, #24]
        break;
 80048c8:	e00c      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ca:	f7fe fd6f 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 80048ce:	61b8      	str	r0, [r7, #24]
        break;
 80048d0:	e008      	b.n	80048e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	61bb      	str	r3, [r7, #24]
        break;
 80048d8:	e004      	b.n	80048e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	77bb      	strb	r3, [r7, #30]
        break;
 80048e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d074      	beq.n	80049d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	005a      	lsls	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d916      	bls.n	8004934 <UART_SetConfig+0x404>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d212      	bcs.n	8004934 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f023 030f 	bic.w	r3, r3, #15
 8004916:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	b29a      	uxth	r2, r3
 8004924:	89fb      	ldrh	r3, [r7, #14]
 8004926:	4313      	orrs	r3, r2
 8004928:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	89fa      	ldrh	r2, [r7, #14]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e04f      	b.n	80049d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	77bb      	strb	r3, [r7, #30]
 8004938:	e04c      	b.n	80049d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800493a:	7ffb      	ldrb	r3, [r7, #31]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d828      	bhi.n	8004992 <UART_SetConfig+0x462>
 8004940:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <UART_SetConfig+0x418>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	08004993 	.word	0x08004993
 8004958:	08004983 	.word	0x08004983
 800495c:	08004993 	.word	0x08004993
 8004960:	08004993 	.word	0x08004993
 8004964:	08004993 	.word	0x08004993
 8004968:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496c:	f7fe fe30 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8004970:	61b8      	str	r0, [r7, #24]
        break;
 8004972:	e013      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7fe fe40 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004978:	61b8      	str	r0, [r7, #24]
        break;
 800497a:	e00f      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <UART_SetConfig+0x4c4>)
 800497e:	61bb      	str	r3, [r7, #24]
        break;
 8004980:	e00c      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fe fd13 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8004986:	61b8      	str	r0, [r7, #24]
        break;
 8004988:	e008      	b.n	800499c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498e:	61bb      	str	r3, [r7, #24]
        break;
 8004990:	e004      	b.n	800499c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	77bb      	strb	r3, [r7, #30]
        break;
 800499a:	bf00      	nop
    }

    if (pclk != 0U)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	085a      	lsrs	r2, r3, #1
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	441a      	add	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d909      	bls.n	80049d0 <UART_SetConfig+0x4a0>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d205      	bcs.n	80049d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	e001      	b.n	80049d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40007c00 	.word	0x40007c00
 80049f0:	40023800 	.word	0x40023800
 80049f4:	00f42400 	.word	0x00f42400

080049f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af6:	d10a      	bne.n	8004b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b4c:	f7fc fc52 	bl	80013f4 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d10e      	bne.n	8004b7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f831 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e027      	b.n	8004bce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d10e      	bne.n	8004baa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f81b 	bl	8004bd6 <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e011      	b.n	8004bce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b09c      	sub	sp, #112	; 0x70
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	e0a7      	b.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	f000 80a3 	beq.w	8004d38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7fc fbff 	bl	80013f4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d13f      	bne.n	8004c88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e6      	bne.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3308      	adds	r3, #8
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	663b      	str	r3, [r7, #96]	; 0x60
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e068      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d050      	beq.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca4:	d148      	bne.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e6      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d02:	623a      	str	r2, [r7, #32]
 8004d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	69f9      	ldr	r1, [r7, #28]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e010      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4013      	ands	r3, r2
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	f43f af48 	beq.w	8004be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3770      	adds	r7, #112	; 0x70
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d64:	b084      	sub	sp, #16
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	f107 001c 	add.w	r0, r7, #28
 8004d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d120      	bne.n	8004dbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <USB_CoreInit+0xac>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fa96 	bl	80052e4 <USB_CoreReset>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e010      	b.n	8004de0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa8a 	bl	80052e4 <USB_CoreReset>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10b      	bne.n	8004dfe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f043 0206 	orr.w	r2, r3, #6
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e0a:	b004      	add	sp, #16
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	ffbdffbf 	.word	0xffbdffbf

08004e14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 0201 	bic.w	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d115      	bne.n	8004e84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e64:	2001      	movs	r0, #1
 8004e66:	f7fc fad1 	bl	800140c <HAL_Delay>
      ms++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa29 	bl	80052c8 <USB_GetMode>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d01e      	beq.n	8004eba <USB_SetCurrentMode+0x84>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b31      	cmp	r3, #49	; 0x31
 8004e80:	d9f0      	bls.n	8004e64 <USB_SetCurrentMode+0x2e>
 8004e82:	e01a      	b.n	8004eba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d115      	bne.n	8004eb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e96:	2001      	movs	r0, #1
 8004e98:	f7fc fab8 	bl	800140c <HAL_Delay>
      ms++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa10 	bl	80052c8 <USB_GetMode>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <USB_SetCurrentMode+0x84>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b31      	cmp	r3, #49	; 0x31
 8004eb2:	d9f0      	bls.n	8004e96 <USB_SetCurrentMode+0x60>
 8004eb4:	e001      	b.n	8004eba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e005      	b.n	8004ec6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b32      	cmp	r3, #50	; 0x32
 8004ebe:	d101      	bne.n	8004ec4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	e009      	b.n	8004f04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	3340      	adds	r3, #64	; 0x40
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	2200      	movs	r2, #0
 8004efc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3301      	adds	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b0e      	cmp	r3, #14
 8004f08:	d9f2      	bls.n	8004ef0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d11c      	bne.n	8004f4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f1e:	f043 0302 	orr.w	r3, r3, #2
 8004f22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e005      	b.n	8004f56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f68:	4619      	mov	r1, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f70:	461a      	mov	r2, r3
 8004f72:	680b      	ldr	r3, [r1, #0]
 8004f74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d10c      	bne.n	8004f96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f82:	2100      	movs	r1, #0
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f965 	bl	8005254 <USB_SetDevSpeed>
 8004f8a:	e008      	b.n	8004f9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f960 	bl	8005254 <USB_SetDevSpeed>
 8004f94:	e003      	b.n	8004f9e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f96:	2103      	movs	r1, #3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f95b 	bl	8005254 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f9e:	2110      	movs	r1, #16
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8f3 	bl	800518c <USB_FlushTxFifo>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f91f 	bl	80051f4 <USB_FlushRxFifo>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	e043      	b.n	8005072 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005000:	d118      	bne.n	8005034 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	461a      	mov	r2, r3
 8005016:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	e013      	b.n	8005046 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	461a      	mov	r2, r3
 800502c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e008      	b.n	8005046 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	461a      	mov	r2, r3
 8005042:	2300      	movs	r3, #0
 8005044:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	461a      	mov	r2, r3
 8005054:	2300      	movs	r3, #0
 8005056:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	461a      	mov	r2, r3
 8005066:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800506a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3301      	adds	r3, #1
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	d3b7      	bcc.n	8004fea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e043      	b.n	8005108 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005096:	d118      	bne.n	80050ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	461a      	mov	r2, r3
 80050ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e013      	b.n	80050dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	461a      	mov	r2, r3
 80050c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e008      	b.n	80050dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	461a      	mov	r2, r3
 80050d8:	2300      	movs	r3, #0
 80050da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	461a      	mov	r2, r3
 80050ea:	2300      	movs	r3, #0
 80050ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	461a      	mov	r2, r3
 80050fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	3301      	adds	r3, #1
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	429a      	cmp	r2, r3
 800510e:	d3b7      	bcc.n	8005080 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800511e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005122:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005130:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f043 0210 	orr.w	r2, r3, #16
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <USB_DevInit+0x2b4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f043 0208 	orr.w	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <USB_DevInit+0x2b8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005180:	b004      	add	sp, #16
 8005182:	4770      	bx	lr
 8005184:	803c3800 	.word	0x803c3800
 8005188:	40000004 	.word	0x40000004

0800518c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <USB_FlushTxFifo+0x64>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e01b      	b.n	80051e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	daf2      	bge.n	800519a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	019b      	lsls	r3, r3, #6
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <USB_FlushTxFifo+0x64>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e006      	b.n	80051e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d0f0      	beq.n	80051c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	00030d40 	.word	0x00030d40

080051f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a11      	ldr	r2, [pc, #68]	; (8005250 <USB_FlushRxFifo+0x5c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e018      	b.n	8005244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	daf2      	bge.n	8005200 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2210      	movs	r2, #16
 8005222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a08      	ldr	r2, [pc, #32]	; (8005250 <USB_FlushRxFifo+0x5c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e006      	b.n	8005244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b10      	cmp	r3, #16
 8005240:	d0f0      	beq.n	8005224 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	00030d40 	.word	0x00030d40

08005254 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052a0:	f023 0303 	bic.w	r3, r3, #3
 80052a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b4:	f043 0302 	orr.w	r3, r3, #2
 80052b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0301 	and.w	r3, r3, #1
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a13      	ldr	r2, [pc, #76]	; (8005348 <USB_CoreReset+0x64>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e01b      	b.n	800533a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	daf2      	bge.n	80052f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <USB_CoreReset+0x64>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d0f0      	beq.n	800531a <USB_CoreReset+0x36>

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	00030d40 	.word	0x00030d40

0800534c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005362:	f3ef 8305 	mrs	r3, IPSR
 8005366:	60bb      	str	r3, [r7, #8]
  return(result);
 8005368:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8310 	mrs	r3, PRIMASK
 8005372:	607b      	str	r3, [r7, #4]
  return(result);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800537a:	f3ef 8311 	mrs	r3, BASEPRI
 800537e:	603b      	str	r3, [r7, #0]
  return(result);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <osKernelInitialize+0x3a>
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <osKernelInitialize+0x64>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d103      	bne.n	8005396 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800538e:	f06f 0305 	mvn.w	r3, #5
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e00c      	b.n	80053b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <osKernelInitialize+0x64>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d105      	bne.n	80053aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <osKernelInitialize+0x64>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e002      	b.n	80053b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80053aa:	f04f 33ff 	mov.w	r3, #4294967295
 80053ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000d00 	.word	0x20000d00

080053c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ca:	f3ef 8305 	mrs	r3, IPSR
 80053ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80053d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d6:	f3ef 8310 	mrs	r3, PRIMASK
 80053da:	607b      	str	r3, [r7, #4]
  return(result);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053e2:	f3ef 8311 	mrs	r3, BASEPRI
 80053e6:	603b      	str	r3, [r7, #0]
  return(result);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <osKernelStart+0x3a>
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <osKernelStart+0x68>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d103      	bne.n	80053fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80053f6:	f06f 0305 	mvn.w	r3, #5
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e010      	b.n	8005420 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <osKernelStart+0x68>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d109      	bne.n	800541a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005406:	f7ff ffa1 	bl	800534c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <osKernelStart+0x68>)
 800540c:	2202      	movs	r2, #2
 800540e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005410:	f001 f8ca 	bl	80065a8 <vTaskStartScheduler>
      stat = osOK;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	e002      	b.n	8005420 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000d00 	.word	0x20000d00

08005430 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b090      	sub	sp, #64	; 0x40
 8005434:	af04      	add	r7, sp, #16
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005440:	f3ef 8305 	mrs	r3, IPSR
 8005444:	61fb      	str	r3, [r7, #28]
  return(result);
 8005446:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005448:	2b00      	cmp	r3, #0
 800544a:	f040 808f 	bne.w	800556c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544e:	f3ef 8310 	mrs	r3, PRIMASK
 8005452:	61bb      	str	r3, [r7, #24]
  return(result);
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800545a:	f3ef 8311 	mrs	r3, BASEPRI
 800545e:	617b      	str	r3, [r7, #20]
  return(result);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <osThreadNew+0x3e>
 8005466:	4b44      	ldr	r3, [pc, #272]	; (8005578 <osThreadNew+0x148>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d07e      	beq.n	800556c <osThreadNew+0x13c>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d07b      	beq.n	800556c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005478:	2318      	movs	r3, #24
 800547a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d045      	beq.n	8005518 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <osThreadNew+0x6a>
        name = attr->name;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <osThreadNew+0x90>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b38      	cmp	r3, #56	; 0x38
 80054b2:	d805      	bhi.n	80054c0 <osThreadNew+0x90>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <osThreadNew+0x94>
        return (NULL);
 80054c0:	2300      	movs	r3, #0
 80054c2:	e054      	b.n	800556e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	089b      	lsrs	r3, r3, #2
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <osThreadNew+0xca>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2ba7      	cmp	r3, #167	; 0xa7
 80054e2:	d90a      	bls.n	80054fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d006      	beq.n	80054fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <osThreadNew+0xca>
        mem = 1;
 80054f4:	2301      	movs	r3, #1
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	e010      	b.n	800551c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10c      	bne.n	800551c <osThreadNew+0xec>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d108      	bne.n	800551c <osThreadNew+0xec>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <osThreadNew+0xec>
          mem = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	e001      	b.n	800551c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d110      	bne.n	8005544 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800552a:	9202      	str	r2, [sp, #8]
 800552c:	9301      	str	r3, [sp, #4]
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fe3f 	bl	80061bc <xTaskCreateStatic>
 800553e:	4603      	mov	r3, r0
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	e013      	b.n	800556c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d110      	bne.n	800556c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	b29a      	uxth	r2, r3
 800554e:	f107 0310 	add.w	r3, r7, #16
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fe90 	bl	8006282 <xTaskCreate>
 8005562:	4603      	mov	r3, r0
 8005564:	2b01      	cmp	r3, #1
 8005566:	d001      	beq.n	800556c <osThreadNew+0x13c>
          hTask = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800556c:	693b      	ldr	r3, [r7, #16]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3730      	adds	r7, #48	; 0x30
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000d00 	.word	0x20000d00

0800557c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005584:	f3ef 8305 	mrs	r3, IPSR
 8005588:	613b      	str	r3, [r7, #16]
  return(result);
 800558a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10f      	bne.n	80055b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005590:	f3ef 8310 	mrs	r3, PRIMASK
 8005594:	60fb      	str	r3, [r7, #12]
  return(result);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800559c:	f3ef 8311 	mrs	r3, BASEPRI
 80055a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <osDelay+0x3c>
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <osDelay+0x58>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d103      	bne.n	80055b8 <osDelay+0x3c>
    stat = osErrorISR;
 80055b0:	f06f 0305 	mvn.w	r3, #5
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e007      	b.n	80055c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 ffba 	bl	800653c <vTaskDelay>
    }
  }

  return (stat);
 80055c8:	697b      	ldr	r3, [r7, #20]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000d00 	.word	0x20000d00

080055d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a07      	ldr	r2, [pc, #28]	; (8005604 <vApplicationGetIdleTaskMemory+0x2c>)
 80055e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4a06      	ldr	r2, [pc, #24]	; (8005608 <vApplicationGetIdleTaskMemory+0x30>)
 80055ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	601a      	str	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000d04 	.word	0x20000d04
 8005608:	20000dac 	.word	0x20000dac

0800560c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a07      	ldr	r2, [pc, #28]	; (8005638 <vApplicationGetTimerTaskMemory+0x2c>)
 800561c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a06      	ldr	r2, [pc, #24]	; (800563c <vApplicationGetTimerTaskMemory+0x30>)
 8005622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800562a:	601a      	str	r2, [r3, #0]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20000fac 	.word	0x20000fac
 800563c:	20001054 	.word	0x20001054

08005640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f103 0208 	add.w	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f04f 32ff 	mov.w	r2, #4294967295
 8005658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f103 0208 	add.w	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f103 0208 	add.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d103      	bne.n	8005702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e00c      	b.n	800571c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3308      	adds	r3, #8
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e002      	b.n	8005710 <vListInsert+0x2e>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	d2f6      	bcs.n	800570a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6892      	ldr	r2, [r2, #8]
 800576a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6852      	ldr	r2, [r2, #4]
 8005774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d103      	bne.n	8005788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	1e5a      	subs	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10c      	bne.n	80057d6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	b672      	cpsid	i
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	b662      	cpsie	i
 80057d0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80057d6:	f002 f8a9 	bl	800792c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057e6:	fb01 f303 	mul.w	r3, r1, r3
 80057ea:	441a      	add	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	3b01      	subs	r3, #1
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	441a      	add	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	22ff      	movs	r2, #255	; 0xff
 800581a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	22ff      	movs	r2, #255	; 0xff
 8005822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d114      	bne.n	8005856 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01a      	beq.n	800586a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3310      	adds	r3, #16
 8005838:	4618      	mov	r0, r3
 800583a:	f001 f95d 	bl	8006af8 <xTaskRemoveFromEventList>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <xQueueGenericReset+0xd0>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	e009      	b.n	800586a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3310      	adds	r3, #16
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fef0 	bl	8005640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3324      	adds	r3, #36	; 0x24
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff feeb 	bl	8005640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800586a:	f002 f893 	bl	8007994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800586e:	2301      	movs	r3, #1
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08e      	sub	sp, #56	; 0x38
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10c      	bne.n	80058aa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	b672      	cpsid	i
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	b662      	cpsie	i
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10c      	bne.n	80058ca <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	b672      	cpsid	i
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	b662      	cpsie	i
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <xQueueGenericCreateStatic+0x5a>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <xQueueGenericCreateStatic+0x5e>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericCreateStatic+0x60>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10c      	bne.n	80058fa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	b672      	cpsid	i
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	b662      	cpsie	i
 80058f4:	623b      	str	r3, [r7, #32]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d102      	bne.n	8005906 <xQueueGenericCreateStatic+0x8a>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <xQueueGenericCreateStatic+0x8e>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <xQueueGenericCreateStatic+0x90>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10c      	bne.n	800592a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	b672      	cpsid	i
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	b662      	cpsie	i
 8005924:	61fb      	str	r3, [r7, #28]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800592a:	2350      	movs	r3, #80	; 0x50
 800592c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b50      	cmp	r3, #80	; 0x50
 8005932:	d00c      	beq.n	800594e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	b672      	cpsid	i
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	b662      	cpsie	i
 8005948:	61bb      	str	r3, [r7, #24]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800594e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005962:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f805 	bl	8005980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005978:	4618      	mov	r0, r3
 800597a:	3730      	adds	r7, #48	; 0x30
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e002      	b.n	80059a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059ae:	2101      	movs	r1, #1
 80059b0:	69b8      	ldr	r0, [r7, #24]
 80059b2:	f7ff fef9 	bl	80057a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08e      	sub	sp, #56	; 0x38
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059d6:	2300      	movs	r3, #0
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10c      	bne.n	80059fe <xQueueGenericSend+0x36>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	b672      	cpsid	i
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	b662      	cpsie	i
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <xQueueGenericSend+0x44>
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <xQueueGenericSend+0x48>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <xQueueGenericSend+0x4a>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10c      	bne.n	8005a30 <xQueueGenericSend+0x68>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	b672      	cpsid	i
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	b662      	cpsie	i
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d103      	bne.n	8005a3e <xQueueGenericSend+0x76>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <xQueueGenericSend+0x7a>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <xQueueGenericSend+0x7c>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10c      	bne.n	8005a62 <xQueueGenericSend+0x9a>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	b672      	cpsid	i
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	b662      	cpsie	i
 8005a5c:	623b      	str	r3, [r7, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a62:	f001 fa13 	bl	8006e8c <xTaskGetSchedulerState>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <xQueueGenericSend+0xaa>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <xQueueGenericSend+0xae>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <xQueueGenericSend+0xb0>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10c      	bne.n	8005a96 <xQueueGenericSend+0xce>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	b672      	cpsid	i
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	b662      	cpsie	i
 8005a90:	61fb      	str	r3, [r7, #28]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a96:	f001 ff49 	bl	800792c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d302      	bcc.n	8005aac <xQueueGenericSend+0xe4>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d129      	bne.n	8005b00 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ab2:	f000 fa15 	bl	8005ee0 <prvCopyDataToQueue>
 8005ab6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	3324      	adds	r3, #36	; 0x24
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 f817 	bl	8006af8 <xTaskRemoveFromEventList>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <xQueueGenericSend+0x208>)
 8005ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	e00a      	b.n	8005af8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ae8:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <xQueueGenericSend+0x208>)
 8005aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005af8:	f001 ff4c 	bl	8007994 <vPortExitCritical>
				return pdPASS;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e063      	b.n	8005bc8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b06:	f001 ff45 	bl	8007994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e05c      	b.n	8005bc8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 f853 	bl	8006bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b22:	f001 ff37 	bl	8007994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b26:	f000 fdb3 	bl	8006690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b2a:	f001 feff 	bl	800792c <vPortEnterCritical>
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d103      	bne.n	8005b44 <xQueueGenericSend+0x17c>
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d103      	bne.n	8005b5a <xQueueGenericSend+0x192>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b5a:	f001 ff1b 	bl	8007994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5e:	1d3a      	adds	r2, r7, #4
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 f842 	bl	8006bf0 <xTaskCheckForTimeOut>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d124      	bne.n	8005bbc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b74:	f000 faac 	bl	80060d0 <prvIsQueueFull>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d018      	beq.n	8005bb0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	3310      	adds	r3, #16
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 ff62 	bl	8006a50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8e:	f000 fa37 	bl	8006000 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b92:	f000 fd8b 	bl	80066ac <xTaskResumeAll>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f af7c 	bne.w	8005a96 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <xQueueGenericSend+0x208>)
 8005ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	e772      	b.n	8005a96 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb2:	f000 fa25 	bl	8006000 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bb6:	f000 fd79 	bl	80066ac <xTaskResumeAll>
 8005bba:	e76c      	b.n	8005a96 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bbe:	f000 fa1f 	bl	8006000 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bc2:	f000 fd73 	bl	80066ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3738      	adds	r7, #56	; 0x38
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	; 0x38
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10c      	bne.n	8005c06 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	b672      	cpsid	i
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	b662      	cpsie	i
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d103      	bne.n	8005c14 <xQueueGenericSendFromISR+0x40>
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <xQueueGenericSendFromISR+0x44>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <xQueueGenericSendFromISR+0x46>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10c      	bne.n	8005c38 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	b672      	cpsid	i
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	b662      	cpsie	i
 8005c32:	623b      	str	r3, [r7, #32]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d103      	bne.n	8005c46 <xQueueGenericSendFromISR+0x72>
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <xQueueGenericSendFromISR+0x76>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <xQueueGenericSendFromISR+0x78>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10c      	bne.n	8005c6a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	b672      	cpsid	i
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	b662      	cpsie	i
 8005c64:	61fb      	str	r3, [r7, #28]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c6a:	f001 ff47 	bl	8007afc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c6e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	b672      	cpsid	i
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	b662      	cpsie	i
 8005c86:	61ba      	str	r2, [r7, #24]
 8005c88:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d302      	bcc.n	8005ca0 <xQueueGenericSendFromISR+0xcc>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d12c      	bne.n	8005cfa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb0:	f000 f916 	bl	8005ee0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d112      	bne.n	8005ce4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	3324      	adds	r3, #36	; 0x24
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 ff14 	bl	8006af8 <xTaskRemoveFromEventList>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e007      	b.n	8005cf4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ce4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ce8:	3301      	adds	r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	b25a      	sxtb	r2, r3
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005cf8:	e001      	b.n	8005cfe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3738      	adds	r7, #56	; 0x38
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	; 0x30
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10c      	bne.n	8005d48 <xQueueReceive+0x34>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	b672      	cpsid	i
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	b662      	cpsie	i
 8005d42:	623b      	str	r3, [r7, #32]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <xQueueReceive+0x42>
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <xQueueReceive+0x46>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <xQueueReceive+0x48>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10c      	bne.n	8005d7a <xQueueReceive+0x66>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	b672      	cpsid	i
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	b662      	cpsie	i
 8005d74:	61fb      	str	r3, [r7, #28]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d7a:	f001 f887 	bl	8006e8c <xTaskGetSchedulerState>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <xQueueReceive+0x76>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <xQueueReceive+0x7a>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <xQueueReceive+0x7c>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10c      	bne.n	8005dae <xQueueReceive+0x9a>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	b672      	cpsid	i
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	b662      	cpsie	i
 8005da8:	61bb      	str	r3, [r7, #24]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dae:	f001 fdbd 	bl	800792c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01f      	beq.n	8005dfe <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc2:	f000 f8f7 	bl	8005fb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	1e5a      	subs	r2, r3, #1
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00f      	beq.n	8005df6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	3310      	adds	r3, #16
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fe8c 	bl	8006af8 <xTaskRemoveFromEventList>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005de6:	4b3d      	ldr	r3, [pc, #244]	; (8005edc <xQueueReceive+0x1c8>)
 8005de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005df6:	f001 fdcd 	bl	8007994 <vPortExitCritical>
				return pdPASS;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e069      	b.n	8005ed2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e04:	f001 fdc6 	bl	8007994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e062      	b.n	8005ed2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e12:	f107 0310 	add.w	r3, r7, #16
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fed4 	bl	8006bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e20:	f001 fdb8 	bl	8007994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e24:	f000 fc34 	bl	8006690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e28:	f001 fd80 	bl	800792c <vPortEnterCritical>
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e32:	b25b      	sxtb	r3, r3
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d103      	bne.n	8005e42 <xQueueReceive+0x12e>
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e48:	b25b      	sxtb	r3, r3
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d103      	bne.n	8005e58 <xQueueReceive+0x144>
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e58:	f001 fd9c 	bl	8007994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e5c:	1d3a      	adds	r2, r7, #4
 8005e5e:	f107 0310 	add.w	r3, r7, #16
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fec3 	bl	8006bf0 <xTaskCheckForTimeOut>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d123      	bne.n	8005eb8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e72:	f000 f917 	bl	80060a4 <prvIsQueueEmpty>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d017      	beq.n	8005eac <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	3324      	adds	r3, #36	; 0x24
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fde3 	bl	8006a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8c:	f000 f8b8 	bl	8006000 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e90:	f000 fc0c 	bl	80066ac <xTaskResumeAll>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d189      	bne.n	8005dae <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <xQueueReceive+0x1c8>)
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	e780      	b.n	8005dae <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eae:	f000 f8a7 	bl	8006000 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eb2:	f000 fbfb 	bl	80066ac <xTaskResumeAll>
 8005eb6:	e77a      	b.n	8005dae <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eba:	f000 f8a1 	bl	8006000 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ebe:	f000 fbf5 	bl	80066ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec4:	f000 f8ee 	bl	80060a4 <prvIsQueueEmpty>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f43f af6f 	beq.w	8005dae <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ed0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3730      	adds	r7, #48	; 0x30
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d14d      	bne.n	8005fa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 ffdc 	bl	8006ec8 <xTaskPriorityDisinherit>
 8005f10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	e043      	b.n	8005fa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d119      	bne.n	8005f54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6858      	ldr	r0, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	f002 f892 	bl	8008054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	441a      	add	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d32b      	bcc.n	8005fa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	e026      	b.n	8005fa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68d8      	ldr	r0, [r3, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	f002 f878 	bl	8008054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	425b      	negs	r3, r3
 8005f6e:	441a      	add	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d207      	bcs.n	8005f90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	425b      	negs	r3, r3
 8005f8a:	441a      	add	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d105      	bne.n	8005fa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d018      	beq.n	8005ff8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	441a      	add	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d303      	bcc.n	8005fe8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68d9      	ldr	r1, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6838      	ldr	r0, [r7, #0]
 8005ff4:	f002 f82e 	bl	8008054 <memcpy>
	}
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006008:	f001 fc90 	bl	800792c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006012:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006014:	e011      	b.n	800603a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d012      	beq.n	8006044 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3324      	adds	r3, #36	; 0x24
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fd68 	bl	8006af8 <xTaskRemoveFromEventList>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800602e:	f000 fe45 	bl	8006cbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	3b01      	subs	r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800603a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	dce9      	bgt.n	8006016 <prvUnlockQueue+0x16>
 8006042:	e000      	b.n	8006046 <prvUnlockQueue+0x46>
					break;
 8006044:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	22ff      	movs	r2, #255	; 0xff
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800604e:	f001 fca1 	bl	8007994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006052:	f001 fc6b 	bl	800792c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800605e:	e011      	b.n	8006084 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3310      	adds	r3, #16
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fd43 	bl	8006af8 <xTaskRemoveFromEventList>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006078:	f000 fe20 	bl	8006cbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	3b01      	subs	r3, #1
 8006080:	b2db      	uxtb	r3, r3
 8006082:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dce9      	bgt.n	8006060 <prvUnlockQueue+0x60>
 800608c:	e000      	b.n	8006090 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800608e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	22ff      	movs	r2, #255	; 0xff
 8006094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006098:	f001 fc7c 	bl	8007994 <vPortExitCritical>
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ac:	f001 fc3e 	bl	800792c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e001      	b.n	80060c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060c2:	f001 fc67 	bl	8007994 <vPortExitCritical>

	return xReturn;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060d8:	f001 fc28 	bl	800792c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d102      	bne.n	80060ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e001      	b.n	80060f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f2:	f001 fc4f 	bl	8007994 <vPortExitCritical>

	return xReturn;
 80060f6:	68fb      	ldr	r3, [r7, #12]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e014      	b.n	800613a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006110:	4a0f      	ldr	r2, [pc, #60]	; (8006150 <vQueueAddToRegistry+0x50>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800611c:	490c      	ldr	r1, [pc, #48]	; (8006150 <vQueueAddToRegistry+0x50>)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006126:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <vQueueAddToRegistry+0x50>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006132:	e006      	b.n	8006142 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b07      	cmp	r3, #7
 800613e:	d9e7      	bls.n	8006110 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20001454 	.word	0x20001454

08006154 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006164:	f001 fbe2 	bl	800792c <vPortEnterCritical>
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800616e:	b25b      	sxtb	r3, r3
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d103      	bne.n	800617e <vQueueWaitForMessageRestricted+0x2a>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006184:	b25b      	sxtb	r3, r3
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d103      	bne.n	8006194 <vQueueWaitForMessageRestricted+0x40>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006194:	f001 fbfe 	bl	8007994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fc77 	bl	8006a9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061ae:	6978      	ldr	r0, [r7, #20]
 80061b0:	f7ff ff26 	bl	8006000 <prvUnlockQueue>
	}
 80061b4:	bf00      	nop
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08e      	sub	sp, #56	; 0x38
 80061c0:	af04      	add	r7, sp, #16
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10c      	bne.n	80061ea <xTaskCreateStatic+0x2e>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	b672      	cpsid	i
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	b662      	cpsie	i
 80061e4:	623b      	str	r3, [r7, #32]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10c      	bne.n	800620a <xTaskCreateStatic+0x4e>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	b672      	cpsid	i
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	b662      	cpsie	i
 8006204:	61fb      	str	r3, [r7, #28]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800620a:	23a8      	movs	r3, #168	; 0xa8
 800620c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2ba8      	cmp	r3, #168	; 0xa8
 8006212:	d00c      	beq.n	800622e <xTaskCreateStatic+0x72>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	b672      	cpsid	i
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	b662      	cpsie	i
 8006228:	61bb      	str	r3, [r7, #24]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800622e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01e      	beq.n	8006274 <xTaskCreateStatic+0xb8>
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006244:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	2202      	movs	r2, #2
 800624a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800624e:	2300      	movs	r3, #0
 8006250:	9303      	str	r3, [sp, #12]
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	9302      	str	r3, [sp, #8]
 8006256:	f107 0314 	add.w	r3, r7, #20
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f850 	bl	800630c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800626c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800626e:	f000 f8f5 	bl	800645c <prvAddNewTaskToReadyList>
 8006272:	e001      	b.n	8006278 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006278:	697b      	ldr	r3, [r7, #20]
	}
 800627a:	4618      	mov	r0, r3
 800627c:	3728      	adds	r7, #40	; 0x28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006282:	b580      	push	{r7, lr}
 8006284:	b08c      	sub	sp, #48	; 0x30
 8006286:	af04      	add	r7, sp, #16
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	603b      	str	r3, [r7, #0]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4618      	mov	r0, r3
 8006298:	f001 fc74 	bl	8007b84 <pvPortMalloc>
 800629c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062a4:	20a8      	movs	r0, #168	; 0xa8
 80062a6:	f001 fc6d 	bl	8007b84 <pvPortMalloc>
 80062aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
 80062b8:	e005      	b.n	80062c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062ba:	6978      	ldr	r0, [r7, #20]
 80062bc:	f001 fd2c 	bl	8007d18 <vPortFree>
 80062c0:	e001      	b.n	80062c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d017      	beq.n	80062fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062d4:	88fa      	ldrh	r2, [r7, #6]
 80062d6:	2300      	movs	r3, #0
 80062d8:	9303      	str	r3, [sp, #12]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	9302      	str	r3, [sp, #8]
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f80e 	bl	800630c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062f0:	69f8      	ldr	r0, [r7, #28]
 80062f2:	f000 f8b3 	bl	800645c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062f6:	2301      	movs	r3, #1
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	e002      	b.n	8006302 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006300:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006302:	69bb      	ldr	r3, [r7, #24]
	}
 8006304:	4618      	mov	r0, r3
 8006306:	3720      	adds	r7, #32
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	461a      	mov	r2, r3
 8006324:	21a5      	movs	r1, #165	; 0xa5
 8006326:	f001 fe11 	bl	8007f4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006334:	440b      	add	r3, r1
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f023 0307 	bic.w	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00c      	beq.n	8006368 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	b672      	cpsid	i
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	b662      	cpsie	i
 8006362:	617b      	str	r3, [r7, #20]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01f      	beq.n	80063ae <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e012      	b.n	800639a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	4413      	add	r3, r2
 800637a:	7819      	ldrb	r1, [r3, #0]
 800637c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	3334      	adds	r3, #52	; 0x34
 8006384:	460a      	mov	r2, r1
 8006386:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d006      	beq.n	80063a2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	3301      	adds	r3, #1
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2b0f      	cmp	r3, #15
 800639e:	d9e9      	bls.n	8006374 <prvInitialiseNewTask+0x68>
 80063a0:	e000      	b.n	80063a4 <prvInitialiseNewTask+0x98>
			{
				break;
 80063a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ac:	e003      	b.n	80063b6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b37      	cmp	r3, #55	; 0x37
 80063ba:	d901      	bls.n	80063c0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063bc:	2337      	movs	r3, #55	; 0x37
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	2200      	movs	r2, #0
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	3304      	adds	r3, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff f952 	bl	8005680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	3318      	adds	r3, #24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff f94d 	bl	8005680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	2200      	movs	r2, #0
 8006408:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	3354      	adds	r3, #84	; 0x54
 8006410:	224c      	movs	r2, #76	; 0x4c
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fd99 	bl	8007f4c <memset>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	4a0c      	ldr	r2, [pc, #48]	; (8006450 <prvInitialiseNewTask+0x144>)
 800641e:	659a      	str	r2, [r3, #88]	; 0x58
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	4a0c      	ldr	r2, [pc, #48]	; (8006454 <prvInitialiseNewTask+0x148>)
 8006424:	65da      	str	r2, [r3, #92]	; 0x5c
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	4a0b      	ldr	r2, [pc, #44]	; (8006458 <prvInitialiseNewTask+0x14c>)
 800642a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	69b8      	ldr	r0, [r7, #24]
 8006432:	f001 f96b 	bl	800770c <pxPortInitialiseStack>
 8006436:	4602      	mov	r2, r0
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006448:	bf00      	nop
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200056e0 	.word	0x200056e0
 8006454:	20005748 	.word	0x20005748
 8006458:	200057b0 	.word	0x200057b0

0800645c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006464:	f001 fa62 	bl	800792c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006468:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <prvAddNewTaskToReadyList+0xc4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <prvAddNewTaskToReadyList+0xc4>)
 8006470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006472:	4b2c      	ldr	r3, [pc, #176]	; (8006524 <prvAddNewTaskToReadyList+0xc8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800647a:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <prvAddNewTaskToReadyList+0xc8>)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006480:	4b27      	ldr	r3, [pc, #156]	; (8006520 <prvAddNewTaskToReadyList+0xc4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d110      	bne.n	80064aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006488:	f000 fc3c 	bl	8006d04 <prvInitialiseTaskLists>
 800648c:	e00d      	b.n	80064aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800648e:	4b26      	ldr	r3, [pc, #152]	; (8006528 <prvAddNewTaskToReadyList+0xcc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006496:	4b23      	ldr	r3, [pc, #140]	; (8006524 <prvAddNewTaskToReadyList+0xc8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d802      	bhi.n	80064aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064a4:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <prvAddNewTaskToReadyList+0xc8>)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064aa:	4b20      	ldr	r3, [pc, #128]	; (800652c <prvAddNewTaskToReadyList+0xd0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3301      	adds	r3, #1
 80064b0:	4a1e      	ldr	r2, [pc, #120]	; (800652c <prvAddNewTaskToReadyList+0xd0>)
 80064b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064b4:	4b1d      	ldr	r3, [pc, #116]	; (800652c <prvAddNewTaskToReadyList+0xd0>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <prvAddNewTaskToReadyList+0xd4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d903      	bls.n	80064d0 <prvAddNewTaskToReadyList+0x74>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a18      	ldr	r2, [pc, #96]	; (8006530 <prvAddNewTaskToReadyList+0xd4>)
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4a15      	ldr	r2, [pc, #84]	; (8006534 <prvAddNewTaskToReadyList+0xd8>)
 80064de:	441a      	add	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7ff f8d7 	bl	800569a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064ec:	f001 fa52 	bl	8007994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064f0:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <prvAddNewTaskToReadyList+0xcc>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00e      	beq.n	8006516 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064f8:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <prvAddNewTaskToReadyList+0xc8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	429a      	cmp	r2, r3
 8006504:	d207      	bcs.n	8006516 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <prvAddNewTaskToReadyList+0xdc>)
 8006508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20001968 	.word	0x20001968
 8006524:	20001494 	.word	0x20001494
 8006528:	20001974 	.word	0x20001974
 800652c:	20001984 	.word	0x20001984
 8006530:	20001970 	.word	0x20001970
 8006534:	20001498 	.word	0x20001498
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d019      	beq.n	8006582 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <vTaskDelay+0x64>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <vTaskDelay+0x34>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	b672      	cpsid	i
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	b662      	cpsie	i
 800656a:	60bb      	str	r3, [r7, #8]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006570:	f000 f88e 	bl	8006690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006574:	2100      	movs	r1, #0
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fd18 	bl	8006fac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800657c:	f000 f896 	bl	80066ac <xTaskResumeAll>
 8006580:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d107      	bne.n	8006598 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <vTaskDelay+0x68>)
 800658a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20001990 	.word	0x20001990
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065b6:	463a      	mov	r2, r7
 80065b8:	1d39      	adds	r1, r7, #4
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff f80a 	bl	80055d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	9202      	str	r2, [sp, #8]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	460a      	mov	r2, r1
 80065d6:	4926      	ldr	r1, [pc, #152]	; (8006670 <vTaskStartScheduler+0xc8>)
 80065d8:	4826      	ldr	r0, [pc, #152]	; (8006674 <vTaskStartScheduler+0xcc>)
 80065da:	f7ff fdef 	bl	80061bc <xTaskCreateStatic>
 80065de:	4603      	mov	r3, r0
 80065e0:	4a25      	ldr	r2, [pc, #148]	; (8006678 <vTaskStartScheduler+0xd0>)
 80065e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065e4:	4b24      	ldr	r3, [pc, #144]	; (8006678 <vTaskStartScheduler+0xd0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065ec:	2301      	movs	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e001      	b.n	80065f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d102      	bne.n	8006602 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065fc:	f000 fd2a 	bl	8007054 <xTimerCreateTimerTask>
 8006600:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d11d      	bne.n	8006644 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	b672      	cpsid	i
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	b662      	cpsie	i
 800661c:	613b      	str	r3, [r7, #16]
}
 800661e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006620:	4b16      	ldr	r3, [pc, #88]	; (800667c <vTaskStartScheduler+0xd4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3354      	adds	r3, #84	; 0x54
 8006626:	4a16      	ldr	r2, [pc, #88]	; (8006680 <vTaskStartScheduler+0xd8>)
 8006628:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <vTaskStartScheduler+0xdc>)
 800662c:	f04f 32ff 	mov.w	r2, #4294967295
 8006630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <vTaskStartScheduler+0xe0>)
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006638:	4b14      	ldr	r3, [pc, #80]	; (800668c <vTaskStartScheduler+0xe4>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800663e:	f001 f8f7 	bl	8007830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006642:	e010      	b.n	8006666 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d10c      	bne.n	8006666 <vTaskStartScheduler+0xbe>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	b672      	cpsid	i
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	b662      	cpsie	i
 8006660:	60fb      	str	r3, [r7, #12]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <vTaskStartScheduler+0xbc>
}
 8006666:	bf00      	nop
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	0800816c 	.word	0x0800816c
 8006674:	08006cd5 	.word	0x08006cd5
 8006678:	2000198c 	.word	0x2000198c
 800667c:	20001494 	.word	0x20001494
 8006680:	2000006c 	.word	0x2000006c
 8006684:	20001988 	.word	0x20001988
 8006688:	20001974 	.word	0x20001974
 800668c:	2000196c 	.word	0x2000196c

08006690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006694:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <vTaskSuspendAll+0x18>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	4a03      	ldr	r2, [pc, #12]	; (80066a8 <vTaskSuspendAll+0x18>)
 800669c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800669e:	bf00      	nop
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	20001990 	.word	0x20001990

080066ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066ba:	4b43      	ldr	r3, [pc, #268]	; (80067c8 <xTaskResumeAll+0x11c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <xTaskResumeAll+0x30>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	b672      	cpsid	i
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	b662      	cpsie	i
 80066d6:	603b      	str	r3, [r7, #0]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066dc:	f001 f926 	bl	800792c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066e0:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <xTaskResumeAll+0x11c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	4a38      	ldr	r2, [pc, #224]	; (80067c8 <xTaskResumeAll+0x11c>)
 80066e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ea:	4b37      	ldr	r3, [pc, #220]	; (80067c8 <xTaskResumeAll+0x11c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d162      	bne.n	80067b8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066f2:	4b36      	ldr	r3, [pc, #216]	; (80067cc <xTaskResumeAll+0x120>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d05e      	beq.n	80067b8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066fa:	e02f      	b.n	800675c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066fc:	4b34      	ldr	r3, [pc, #208]	; (80067d0 <xTaskResumeAll+0x124>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3318      	adds	r3, #24
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff f823 	bl	8005754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3304      	adds	r3, #4
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff f81e 	bl	8005754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <xTaskResumeAll+0x128>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d903      	bls.n	800672c <xTaskResumeAll+0x80>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <xTaskResumeAll+0x128>)
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006730:	4613      	mov	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4a27      	ldr	r2, [pc, #156]	; (80067d8 <xTaskResumeAll+0x12c>)
 800673a:	441a      	add	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f7fe ffa9 	bl	800569a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4b23      	ldr	r3, [pc, #140]	; (80067dc <xTaskResumeAll+0x130>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	429a      	cmp	r2, r3
 8006754:	d302      	bcc.n	800675c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006756:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <xTaskResumeAll+0x134>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800675c:	4b1c      	ldr	r3, [pc, #112]	; (80067d0 <xTaskResumeAll+0x124>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1cb      	bne.n	80066fc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800676a:	f000 fb6f 	bl	8006e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800676e:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <xTaskResumeAll+0x138>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d010      	beq.n	800679c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800677a:	f000 f847 	bl	800680c <xTaskIncrementTick>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006784:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <xTaskResumeAll+0x134>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3b01      	subs	r3, #1
 800678e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f1      	bne.n	800677a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <xTaskResumeAll+0x138>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <xTaskResumeAll+0x134>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <xTaskResumeAll+0x13c>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067b8:	f001 f8ec 	bl	8007994 <vPortExitCritical>

	return xAlreadyYielded;
 80067bc:	68bb      	ldr	r3, [r7, #8]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20001990 	.word	0x20001990
 80067cc:	20001968 	.word	0x20001968
 80067d0:	20001928 	.word	0x20001928
 80067d4:	20001970 	.word	0x20001970
 80067d8:	20001498 	.word	0x20001498
 80067dc:	20001494 	.word	0x20001494
 80067e0:	2000197c 	.word	0x2000197c
 80067e4:	20001978 	.word	0x20001978
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <xTaskGetTickCount+0x1c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067f8:	687b      	ldr	r3, [r7, #4]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	2000196c 	.word	0x2000196c

0800680c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006816:	4b50      	ldr	r3, [pc, #320]	; (8006958 <xTaskIncrementTick+0x14c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 808b 	bne.w	8006936 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006820:	4b4e      	ldr	r3, [pc, #312]	; (800695c <xTaskIncrementTick+0x150>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006828:	4a4c      	ldr	r2, [pc, #304]	; (800695c <xTaskIncrementTick+0x150>)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d122      	bne.n	800687a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006834:	4b4a      	ldr	r3, [pc, #296]	; (8006960 <xTaskIncrementTick+0x154>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00c      	beq.n	8006858 <xTaskIncrementTick+0x4c>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	b672      	cpsid	i
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	b662      	cpsie	i
 8006852:	603b      	str	r3, [r7, #0]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xTaskIncrementTick+0x4a>
 8006858:	4b41      	ldr	r3, [pc, #260]	; (8006960 <xTaskIncrementTick+0x154>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	4b41      	ldr	r3, [pc, #260]	; (8006964 <xTaskIncrementTick+0x158>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a3f      	ldr	r2, [pc, #252]	; (8006960 <xTaskIncrementTick+0x154>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4a3f      	ldr	r2, [pc, #252]	; (8006964 <xTaskIncrementTick+0x158>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4b3e      	ldr	r3, [pc, #248]	; (8006968 <xTaskIncrementTick+0x15c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a3d      	ldr	r2, [pc, #244]	; (8006968 <xTaskIncrementTick+0x15c>)
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	f000 fae9 	bl	8006e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800687a:	4b3c      	ldr	r3, [pc, #240]	; (800696c <xTaskIncrementTick+0x160>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	429a      	cmp	r2, r3
 8006882:	d349      	bcc.n	8006918 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006884:	4b36      	ldr	r3, [pc, #216]	; (8006960 <xTaskIncrementTick+0x154>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688e:	4b37      	ldr	r3, [pc, #220]	; (800696c <xTaskIncrementTick+0x160>)
 8006890:	f04f 32ff 	mov.w	r2, #4294967295
 8006894:	601a      	str	r2, [r3, #0]
					break;
 8006896:	e03f      	b.n	8006918 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006898:	4b31      	ldr	r3, [pc, #196]	; (8006960 <xTaskIncrementTick+0x154>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d203      	bcs.n	80068b8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068b0:	4a2e      	ldr	r2, [pc, #184]	; (800696c <xTaskIncrementTick+0x160>)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068b6:	e02f      	b.n	8006918 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe ff49 	bl	8005754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3318      	adds	r3, #24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe ff40 	bl	8005754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	4b25      	ldr	r3, [pc, #148]	; (8006970 <xTaskIncrementTick+0x164>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d903      	bls.n	80068e8 <xTaskIncrementTick+0xdc>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a22      	ldr	r2, [pc, #136]	; (8006970 <xTaskIncrementTick+0x164>)
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <xTaskIncrementTick+0x168>)
 80068f6:	441a      	add	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f7fe fecb 	bl	800569a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <xTaskIncrementTick+0x16c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	429a      	cmp	r2, r3
 8006910:	d3b8      	bcc.n	8006884 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006912:	2301      	movs	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006916:	e7b5      	b.n	8006884 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006918:	4b17      	ldr	r3, [pc, #92]	; (8006978 <xTaskIncrementTick+0x16c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	4915      	ldr	r1, [pc, #84]	; (8006974 <xTaskIncrementTick+0x168>)
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d907      	bls.n	8006940 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e004      	b.n	8006940 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <xTaskIncrementTick+0x170>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	4a0f      	ldr	r2, [pc, #60]	; (800697c <xTaskIncrementTick+0x170>)
 800693e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006940:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <xTaskIncrementTick+0x174>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800694c:	697b      	ldr	r3, [r7, #20]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20001990 	.word	0x20001990
 800695c:	2000196c 	.word	0x2000196c
 8006960:	20001920 	.word	0x20001920
 8006964:	20001924 	.word	0x20001924
 8006968:	20001980 	.word	0x20001980
 800696c:	20001988 	.word	0x20001988
 8006970:	20001970 	.word	0x20001970
 8006974:	20001498 	.word	0x20001498
 8006978:	20001494 	.word	0x20001494
 800697c:	20001978 	.word	0x20001978
 8006980:	2000197c 	.word	0x2000197c

08006984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800698a:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <vTaskSwitchContext+0xb4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006992:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <vTaskSwitchContext+0xb8>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006998:	e048      	b.n	8006a2c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800699a:	4b28      	ldr	r3, [pc, #160]	; (8006a3c <vTaskSwitchContext+0xb8>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <vTaskSwitchContext+0xbc>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	e012      	b.n	80069ce <vTaskSwitchContext+0x4a>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10c      	bne.n	80069c8 <vTaskSwitchContext+0x44>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	b672      	cpsid	i
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	b662      	cpsie	i
 80069c2:	607b      	str	r3, [r7, #4]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <vTaskSwitchContext+0x42>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	491d      	ldr	r1, [pc, #116]	; (8006a44 <vTaskSwitchContext+0xc0>)
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0e2      	beq.n	80069a8 <vTaskSwitchContext+0x24>
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <vTaskSwitchContext+0xc0>)
 80069ee:	4413      	add	r3, r2
 80069f0:	60bb      	str	r3, [r7, #8]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	605a      	str	r2, [r3, #4]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3308      	adds	r3, #8
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d104      	bne.n	8006a12 <vTaskSwitchContext+0x8e>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <vTaskSwitchContext+0xc4>)
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <vTaskSwitchContext+0xbc>)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <vTaskSwitchContext+0xc4>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3354      	adds	r3, #84	; 0x54
 8006a28:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <vTaskSwitchContext+0xc8>)
 8006a2a:	6013      	str	r3, [r2, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	20001990 	.word	0x20001990
 8006a3c:	2000197c 	.word	0x2000197c
 8006a40:	20001970 	.word	0x20001970
 8006a44:	20001498 	.word	0x20001498
 8006a48:	20001494 	.word	0x20001494
 8006a4c:	2000006c 	.word	0x2000006c

08006a50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10c      	bne.n	8006a7a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	b672      	cpsid	i
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	b662      	cpsie	i
 8006a74:	60fb      	str	r3, [r7, #12]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <vTaskPlaceOnEventList+0x48>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3318      	adds	r3, #24
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fe fe2d 	bl	80056e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a88:	2101      	movs	r1, #1
 8006a8a:	6838      	ldr	r0, [r7, #0]
 8006a8c:	f000 fa8e 	bl	8006fac <prvAddCurrentTaskToDelayedList>
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20001494 	.word	0x20001494

08006a9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10c      	bne.n	8006ac8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	b672      	cpsid	i
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	b662      	cpsie	i
 8006ac2:	617b      	str	r3, [r7, #20]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <vTaskPlaceOnEventListRestricted+0x58>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3318      	adds	r3, #24
 8006ace:	4619      	mov	r1, r3
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f7fe fde2 	bl	800569a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	68b8      	ldr	r0, [r7, #8]
 8006ae6:	f000 fa61 	bl	8006fac <prvAddCurrentTaskToDelayedList>
	}
 8006aea:	bf00      	nop
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20001494 	.word	0x20001494

08006af8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10c      	bne.n	8006b28 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	b672      	cpsid	i
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	b662      	cpsie	i
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	3318      	adds	r3, #24
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fe fe11 	bl	8005754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b32:	4b1e      	ldr	r3, [pc, #120]	; (8006bac <xTaskRemoveFromEventList+0xb4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d11d      	bne.n	8006b76 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fe08 	bl	8005754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b48:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <xTaskRemoveFromEventList+0xb8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d903      	bls.n	8006b58 <xTaskRemoveFromEventList+0x60>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4a16      	ldr	r2, [pc, #88]	; (8006bb0 <xTaskRemoveFromEventList+0xb8>)
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <xTaskRemoveFromEventList+0xbc>)
 8006b66:	441a      	add	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fd93 	bl	800569a <vListInsertEnd>
 8006b74:	e005      	b.n	8006b82 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	3318      	adds	r3, #24
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	480e      	ldr	r0, [pc, #56]	; (8006bb8 <xTaskRemoveFromEventList+0xc0>)
 8006b7e:	f7fe fd8c 	bl	800569a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <xTaskRemoveFromEventList+0xc4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d905      	bls.n	8006b9c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b94:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <xTaskRemoveFromEventList+0xc8>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e001      	b.n	8006ba0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ba0:	697b      	ldr	r3, [r7, #20]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20001990 	.word	0x20001990
 8006bb0:	20001970 	.word	0x20001970
 8006bb4:	20001498 	.word	0x20001498
 8006bb8:	20001928 	.word	0x20001928
 8006bbc:	20001494 	.word	0x20001494
 8006bc0:	2000197c 	.word	0x2000197c

08006bc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <vTaskInternalSetTimeOutState+0x24>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <vTaskInternalSetTimeOutState+0x28>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	605a      	str	r2, [r3, #4]
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20001980 	.word	0x20001980
 8006bec:	2000196c 	.word	0x2000196c

08006bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10c      	bne.n	8006c1a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	b672      	cpsid	i
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	b662      	cpsie	i
 8006c14:	613b      	str	r3, [r7, #16]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10c      	bne.n	8006c3a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006c3a:	f000 fe77 	bl	800792c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c3e:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <xTaskCheckForTimeOut+0xc4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d102      	bne.n	8006c5e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e023      	b.n	8006ca6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <xTaskCheckForTimeOut+0xc8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d007      	beq.n	8006c7a <xTaskCheckForTimeOut+0x8a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d302      	bcc.n	8006c7a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e015      	b.n	8006ca6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d20b      	bcs.n	8006c9c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	1ad2      	subs	r2, r2, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff ff97 	bl	8006bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	e004      	b.n	8006ca6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ca6:	f000 fe75 	bl	8007994 <vPortExitCritical>

	return xReturn;
 8006caa:	69fb      	ldr	r3, [r7, #28]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	2000196c 	.word	0x2000196c
 8006cb8:	20001980 	.word	0x20001980

08006cbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cc0:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <vTaskMissedYield+0x14>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	2000197c 	.word	0x2000197c

08006cd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cdc:	f000 f852 	bl	8006d84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <prvIdleTask+0x28>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d9f9      	bls.n	8006cdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <prvIdleTask+0x2c>)
 8006cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cf8:	e7f0      	b.n	8006cdc <prvIdleTask+0x8>
 8006cfa:	bf00      	nop
 8006cfc:	20001498 	.word	0x20001498
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	607b      	str	r3, [r7, #4]
 8006d0e:	e00c      	b.n	8006d2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4a12      	ldr	r2, [pc, #72]	; (8006d64 <prvInitialiseTaskLists+0x60>)
 8006d1c:	4413      	add	r3, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fc8e 	bl	8005640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3301      	adds	r3, #1
 8006d28:	607b      	str	r3, [r7, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b37      	cmp	r3, #55	; 0x37
 8006d2e:	d9ef      	bls.n	8006d10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d30:	480d      	ldr	r0, [pc, #52]	; (8006d68 <prvInitialiseTaskLists+0x64>)
 8006d32:	f7fe fc85 	bl	8005640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d36:	480d      	ldr	r0, [pc, #52]	; (8006d6c <prvInitialiseTaskLists+0x68>)
 8006d38:	f7fe fc82 	bl	8005640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d3c:	480c      	ldr	r0, [pc, #48]	; (8006d70 <prvInitialiseTaskLists+0x6c>)
 8006d3e:	f7fe fc7f 	bl	8005640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d42:	480c      	ldr	r0, [pc, #48]	; (8006d74 <prvInitialiseTaskLists+0x70>)
 8006d44:	f7fe fc7c 	bl	8005640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d48:	480b      	ldr	r0, [pc, #44]	; (8006d78 <prvInitialiseTaskLists+0x74>)
 8006d4a:	f7fe fc79 	bl	8005640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <prvInitialiseTaskLists+0x78>)
 8006d50:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <prvInitialiseTaskLists+0x64>)
 8006d52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <prvInitialiseTaskLists+0x7c>)
 8006d56:	4a05      	ldr	r2, [pc, #20]	; (8006d6c <prvInitialiseTaskLists+0x68>)
 8006d58:	601a      	str	r2, [r3, #0]
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20001498 	.word	0x20001498
 8006d68:	200018f8 	.word	0x200018f8
 8006d6c:	2000190c 	.word	0x2000190c
 8006d70:	20001928 	.word	0x20001928
 8006d74:	2000193c 	.word	0x2000193c
 8006d78:	20001954 	.word	0x20001954
 8006d7c:	20001920 	.word	0x20001920
 8006d80:	20001924 	.word	0x20001924

08006d84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d8a:	e019      	b.n	8006dc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d8c:	f000 fdce 	bl	800792c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d90:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <prvCheckTasksWaitingTermination+0x50>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe fcd9 	bl	8005754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006da2:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <prvCheckTasksWaitingTermination+0x54>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	4a0b      	ldr	r2, [pc, #44]	; (8006dd8 <prvCheckTasksWaitingTermination+0x54>)
 8006daa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dac:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <prvCheckTasksWaitingTermination+0x58>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <prvCheckTasksWaitingTermination+0x58>)
 8006db4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006db6:	f000 fded 	bl	8007994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f810 	bl	8006de0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <prvCheckTasksWaitingTermination+0x58>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e1      	bne.n	8006d8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	2000193c 	.word	0x2000193c
 8006dd8:	20001968 	.word	0x20001968
 8006ddc:	20001950 	.word	0x20001950

08006de0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3354      	adds	r3, #84	; 0x54
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 f8b5 	bl	8007f5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d108      	bne.n	8006e0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 ff89 	bl	8007d18 <vPortFree>
				vPortFree( pxTCB );
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 ff86 	bl	8007d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e0c:	e01a      	b.n	8006e44 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d103      	bne.n	8006e20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 ff7d 	bl	8007d18 <vPortFree>
	}
 8006e1e:	e011      	b.n	8006e44 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d00c      	beq.n	8006e44 <prvDeleteTCB+0x64>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	b672      	cpsid	i
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	b662      	cpsie	i
 8006e3e:	60fb      	str	r3, [r7, #12]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <prvDeleteTCB+0x62>
	}
 8006e44:	bf00      	nop
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <prvResetNextTaskUnblockTime+0x38>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <prvResetNextTaskUnblockTime+0x3c>)
 8006e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e64:	e008      	b.n	8006e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <prvResetNextTaskUnblockTime+0x38>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	4a04      	ldr	r2, [pc, #16]	; (8006e88 <prvResetNextTaskUnblockTime+0x3c>)
 8006e76:	6013      	str	r3, [r2, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	20001920 	.word	0x20001920
 8006e88:	20001988 	.word	0x20001988

08006e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e92:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <xTaskGetSchedulerState+0x34>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	e008      	b.n	8006eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea0:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <xTaskGetSchedulerState+0x38>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	607b      	str	r3, [r7, #4]
 8006eac:	e001      	b.n	8006eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eb2:	687b      	ldr	r3, [r7, #4]
	}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20001974 	.word	0x20001974
 8006ec4:	20001990 	.word	0x20001990

08006ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d05a      	beq.n	8006f94 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ede:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <xTaskPriorityDisinherit+0xd8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d00c      	beq.n	8006f02 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	60fb      	str	r3, [r7, #12]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10c      	bne.n	8006f24 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	b672      	cpsid	i
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	b662      	cpsie	i
 8006f1e:	60bb      	str	r3, [r7, #8]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	1e5a      	subs	r2, r3, #1
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d02c      	beq.n	8006f94 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d128      	bne.n	8006f94 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fc04 	bl	8005754 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <xTaskPriorityDisinherit+0xdc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d903      	bls.n	8006f74 <xTaskPriorityDisinherit+0xac>
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <xTaskPriorityDisinherit+0xdc>)
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <xTaskPriorityDisinherit+0xe0>)
 8006f82:	441a      	add	r2, r3
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f7fe fb85 	bl	800569a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f94:	697b      	ldr	r3, [r7, #20]
	}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20001494 	.word	0x20001494
 8006fa4:	20001970 	.word	0x20001970
 8006fa8:	20001498 	.word	0x20001498

08006fac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fb6:	4b21      	ldr	r3, [pc, #132]	; (800703c <prvAddCurrentTaskToDelayedList+0x90>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fbc:	4b20      	ldr	r3, [pc, #128]	; (8007040 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fbc6 	bl	8005754 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d10a      	bne.n	8006fe6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd6:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4819      	ldr	r0, [pc, #100]	; (8007044 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fe0:	f7fe fb5b 	bl	800569a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fe4:	e026      	b.n	8007034 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fee:	4b14      	ldr	r3, [pc, #80]	; (8007040 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d209      	bcs.n	8007012 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <prvAddCurrentTaskToDelayedList+0x94>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	4610      	mov	r0, r2
 800700c:	f7fe fb69 	bl	80056e2 <vListInsert>
}
 8007010:	e010      	b.n	8007034 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007012:	4b0e      	ldr	r3, [pc, #56]	; (800704c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <prvAddCurrentTaskToDelayedList+0x94>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f7fe fb5f 	bl	80056e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d202      	bcs.n	8007034 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800702e:	4a08      	ldr	r2, [pc, #32]	; (8007050 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	6013      	str	r3, [r2, #0]
}
 8007034:	bf00      	nop
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	2000196c 	.word	0x2000196c
 8007040:	20001494 	.word	0x20001494
 8007044:	20001954 	.word	0x20001954
 8007048:	20001924 	.word	0x20001924
 800704c:	20001920 	.word	0x20001920
 8007050:	20001988 	.word	0x20001988

08007054 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800705e:	f000 fb15 	bl	800768c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <xTimerCreateTimerTask+0x84>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d021      	beq.n	80070ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007072:	1d3a      	adds	r2, r7, #4
 8007074:	f107 0108 	add.w	r1, r7, #8
 8007078:	f107 030c 	add.w	r3, r7, #12
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fac5 	bl	800560c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	9202      	str	r2, [sp, #8]
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	2302      	movs	r3, #2
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	2300      	movs	r3, #0
 8007092:	460a      	mov	r2, r1
 8007094:	4911      	ldr	r1, [pc, #68]	; (80070dc <xTimerCreateTimerTask+0x88>)
 8007096:	4812      	ldr	r0, [pc, #72]	; (80070e0 <xTimerCreateTimerTask+0x8c>)
 8007098:	f7ff f890 	bl	80061bc <xTaskCreateStatic>
 800709c:	4603      	mov	r3, r0
 800709e:	4a11      	ldr	r2, [pc, #68]	; (80070e4 <xTimerCreateTimerTask+0x90>)
 80070a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070a2:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <xTimerCreateTimerTask+0x90>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070aa:	2301      	movs	r3, #1
 80070ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10c      	bne.n	80070ce <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	b672      	cpsid	i
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	b662      	cpsie	i
 80070c8:	613b      	str	r3, [r7, #16]
}
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80070ce:	697b      	ldr	r3, [r7, #20]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	200019c4 	.word	0x200019c4
 80070dc:	08008174 	.word	0x08008174
 80070e0:	08007225 	.word	0x08007225
 80070e4:	200019c8 	.word	0x200019c8

080070e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10c      	bne.n	800711a <xTimerGenericCommand+0x32>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	b672      	cpsid	i
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	b662      	cpsie	i
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800711a:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <xTimerGenericCommand+0x9c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d02a      	beq.n	8007178 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b05      	cmp	r3, #5
 8007132:	dc18      	bgt.n	8007166 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007134:	f7ff feaa 	bl	8006e8c <xTaskGetSchedulerState>
 8007138:	4603      	mov	r3, r0
 800713a:	2b02      	cmp	r3, #2
 800713c:	d109      	bne.n	8007152 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <xTimerGenericCommand+0x9c>)
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	f107 0110 	add.w	r1, r7, #16
 8007146:	2300      	movs	r3, #0
 8007148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714a:	f7fe fc3d 	bl	80059c8 <xQueueGenericSend>
 800714e:	6278      	str	r0, [r7, #36]	; 0x24
 8007150:	e012      	b.n	8007178 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <xTimerGenericCommand+0x9c>)
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f107 0110 	add.w	r1, r7, #16
 800715a:	2300      	movs	r3, #0
 800715c:	2200      	movs	r2, #0
 800715e:	f7fe fc33 	bl	80059c8 <xQueueGenericSend>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24
 8007164:	e008      	b.n	8007178 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <xTimerGenericCommand+0x9c>)
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f107 0110 	add.w	r1, r7, #16
 800716e:	2300      	movs	r3, #0
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	f7fe fd2f 	bl	8005bd4 <xQueueGenericSendFromISR>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200019c4 	.word	0x200019c4

08007188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007192:	4b23      	ldr	r3, [pc, #140]	; (8007220 <prvProcessExpiredTimer+0x98>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	3304      	adds	r3, #4
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fad7 	bl	8005754 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d024      	beq.n	80071fe <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	18d1      	adds	r1, r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	6978      	ldr	r0, [r7, #20]
 80071c2:	f000 f8d3 	bl	800736c <prvInsertTimerInActiveList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d021      	beq.n	8007210 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	2100      	movs	r1, #0
 80071d6:	6978      	ldr	r0, [r7, #20]
 80071d8:	f7ff ff86 	bl	80070e8 <xTimerGenericCommand>
 80071dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d115      	bne.n	8007210 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	b672      	cpsid	i
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	b662      	cpsie	i
 80071f8:	60fb      	str	r3, [r7, #12]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	b2da      	uxtb	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	6978      	ldr	r0, [r7, #20]
 8007216:	4798      	blx	r3
}
 8007218:	bf00      	nop
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	200019bc 	.word	0x200019bc

08007224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f857 	bl	80072e4 <prvGetNextExpireTime>
 8007236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f803 	bl	8007248 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007242:	f000 f8d5 	bl	80073f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007246:	e7f1      	b.n	800722c <prvTimerTask+0x8>

08007248 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007252:	f7ff fa1d 	bl	8006690 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007256:	f107 0308 	add.w	r3, r7, #8
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f866 	bl	800732c <prvSampleTimeNow>
 8007260:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d130      	bne.n	80072ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <prvProcessTimerOrBlockTask+0x3c>
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	429a      	cmp	r2, r3
 8007274:	d806      	bhi.n	8007284 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007276:	f7ff fa19 	bl	80066ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff ff83 	bl	8007188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007282:	e024      	b.n	80072ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d008      	beq.n	800729c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <prvProcessTimerOrBlockTask+0x90>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <prvProcessTimerOrBlockTask+0x50>
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <prvProcessTimerOrBlockTask+0x52>
 8007298:	2300      	movs	r3, #0
 800729a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800729c:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <prvProcessTimerOrBlockTask+0x94>)
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	4619      	mov	r1, r3
 80072aa:	f7fe ff53 	bl	8006154 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072ae:	f7ff f9fd 	bl	80066ac <xTaskResumeAll>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072b8:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <prvProcessTimerOrBlockTask+0x98>)
 80072ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	f3bf 8f6f 	isb	sy
}
 80072c8:	e001      	b.n	80072ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ca:	f7ff f9ef 	bl	80066ac <xTaskResumeAll>
}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200019c0 	.word	0x200019c0
 80072dc:	200019c4 	.word	0x200019c4
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <prvGetNextExpireTime+0x44>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <prvGetNextExpireTime+0x16>
 80072f6:	2201      	movs	r2, #1
 80072f8:	e000      	b.n	80072fc <prvGetNextExpireTime+0x18>
 80072fa:	2200      	movs	r2, #0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d105      	bne.n	8007314 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007308:	4b07      	ldr	r3, [pc, #28]	; (8007328 <prvGetNextExpireTime+0x44>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	e001      	b.n	8007318 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007318:	68fb      	ldr	r3, [r7, #12]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	200019bc 	.word	0x200019bc

0800732c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007334:	f7ff fa5a 	bl	80067ec <xTaskGetTickCount>
 8007338:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <prvSampleTimeNow+0x3c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	429a      	cmp	r2, r3
 8007342:	d205      	bcs.n	8007350 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007344:	f000 f93c 	bl	80075c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e002      	b.n	8007356 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007356:	4a04      	ldr	r2, [pc, #16]	; (8007368 <prvSampleTimeNow+0x3c>)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800735c:	68fb      	ldr	r3, [r7, #12]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	200019cc 	.word	0x200019cc

0800736c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	429a      	cmp	r2, r3
 8007390:	d812      	bhi.n	80073b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	429a      	cmp	r2, r3
 800739e:	d302      	bcc.n	80073a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	e01b      	b.n	80073de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <prvInsertTimerInActiveList+0x7c>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7fe f996 	bl	80056e2 <vListInsert>
 80073b6:	e012      	b.n	80073de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d206      	bcs.n	80073ce <prvInsertTimerInActiveList+0x62>
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d302      	bcc.n	80073ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073c8:	2301      	movs	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e007      	b.n	80073de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ce:	4b07      	ldr	r3, [pc, #28]	; (80073ec <prvInsertTimerInActiveList+0x80>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f7fe f982 	bl	80056e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073de:	697b      	ldr	r3, [r7, #20]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200019c0 	.word	0x200019c0
 80073ec:	200019bc 	.word	0x200019bc

080073f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08e      	sub	sp, #56	; 0x38
 80073f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073f6:	e0d0      	b.n	800759a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da1a      	bge.n	8007434 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	3304      	adds	r3, #4
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10c      	bne.n	8007424 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	b672      	cpsid	i
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	b662      	cpsie	i
 800741e:	61fb      	str	r3, [r7, #28]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742a:	6850      	ldr	r0, [r2, #4]
 800742c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742e:	6892      	ldr	r2, [r2, #8]
 8007430:	4611      	mov	r1, r2
 8007432:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f2c0 80af 	blt.w	800759a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	3304      	adds	r3, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe f981 	bl	8005754 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007452:	463b      	mov	r3, r7
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff ff69 	bl	800732c <prvSampleTimeNow>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b09      	cmp	r3, #9
 8007460:	f200 809a 	bhi.w	8007598 <prvProcessReceivedCommands+0x1a8>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <prvProcessReceivedCommands+0x7c>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007495 	.word	0x08007495
 8007470:	08007495 	.word	0x08007495
 8007474:	08007495 	.word	0x08007495
 8007478:	0800750d 	.word	0x0800750d
 800747c:	08007521 	.word	0x08007521
 8007480:	0800756f 	.word	0x0800756f
 8007484:	08007495 	.word	0x08007495
 8007488:	08007495 	.word	0x08007495
 800748c:	0800750d 	.word	0x0800750d
 8007490:	08007521 	.word	0x08007521
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	18d1      	adds	r1, r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b4:	f7ff ff5a 	bl	800736c <prvInsertTimerInActiveList>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d06d      	beq.n	800759a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d062      	beq.n	800759a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	441a      	add	r2, r3
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e6:	f7ff fdff 	bl	80070e8 <xTimerGenericCommand>
 80074ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d153      	bne.n	800759a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	b672      	cpsid	i
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	b662      	cpsie	i
 8007506:	61bb      	str	r3, [r7, #24]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	b2da      	uxtb	r2, r3
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800751e:	e03c      	b.n	800759a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	b672      	cpsid	i
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	b662      	cpsie	i
 8007554:	617b      	str	r3, [r7, #20]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	18d1      	adds	r1, r2, r3
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007568:	f7ff ff00 	bl	800736c <prvInsertTimerInActiveList>
					break;
 800756c:	e015      	b.n	800759a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800757c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757e:	f000 fbcb 	bl	8007d18 <vPortFree>
 8007582:	e00a      	b.n	800759a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	b2da      	uxtb	r2, r3
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007596:	e000      	b.n	800759a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007598:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800759a:	4b08      	ldr	r3, [pc, #32]	; (80075bc <prvProcessReceivedCommands+0x1cc>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	1d39      	adds	r1, r7, #4
 80075a0:	2200      	movs	r2, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fbb6 	bl	8005d14 <xQueueReceive>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f47f af24 	bne.w	80073f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	3730      	adds	r7, #48	; 0x30
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	200019c4 	.word	0x200019c4

080075c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075c6:	e04a      	b.n	800765e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c8:	4b2e      	ldr	r3, [pc, #184]	; (8007684 <prvSwitchTimerLists+0xc4>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d2:	4b2c      	ldr	r3, [pc, #176]	; (8007684 <prvSwitchTimerLists+0xc4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3304      	adds	r3, #4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe f8b7 	bl	8005754 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d030      	beq.n	800765e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4413      	add	r3, r2
 8007604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	429a      	cmp	r2, r3
 800760c:	d90e      	bls.n	800762c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800761a:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <prvSwitchTimerLists+0xc4>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f7fe f85c 	bl	80056e2 <vListInsert>
 800762a:	e018      	b.n	800765e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800762c:	2300      	movs	r3, #0
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	2100      	movs	r1, #0
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff fd56 	bl	80070e8 <xTimerGenericCommand>
 800763c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	b672      	cpsid	i
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	b662      	cpsie	i
 8007658:	603b      	str	r3, [r7, #0]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <prvSwitchTimerLists+0xc4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1af      	bne.n	80075c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <prvSwitchTimerLists+0xc4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <prvSwitchTimerLists+0xc8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a04      	ldr	r2, [pc, #16]	; (8007684 <prvSwitchTimerLists+0xc4>)
 8007674:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007676:	4a04      	ldr	r2, [pc, #16]	; (8007688 <prvSwitchTimerLists+0xc8>)
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	6013      	str	r3, [r2, #0]
}
 800767c:	bf00      	nop
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	200019bc 	.word	0x200019bc
 8007688:	200019c0 	.word	0x200019c0

0800768c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007692:	f000 f94b 	bl	800792c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d120      	bne.n	80076e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800769e:	4814      	ldr	r0, [pc, #80]	; (80076f0 <prvCheckForValidListAndQueue+0x64>)
 80076a0:	f7fd ffce 	bl	8005640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076a4:	4813      	ldr	r0, [pc, #76]	; (80076f4 <prvCheckForValidListAndQueue+0x68>)
 80076a6:	f7fd ffcb 	bl	8005640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076aa:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <prvCheckForValidListAndQueue+0x6c>)
 80076ac:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <prvCheckForValidListAndQueue+0x64>)
 80076ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <prvCheckForValidListAndQueue+0x70>)
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <prvCheckForValidListAndQueue+0x68>)
 80076b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076b6:	2300      	movs	r3, #0
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <prvCheckForValidListAndQueue+0x74>)
 80076bc:	4a11      	ldr	r2, [pc, #68]	; (8007704 <prvCheckForValidListAndQueue+0x78>)
 80076be:	2110      	movs	r1, #16
 80076c0:	200a      	movs	r0, #10
 80076c2:	f7fe f8db 	bl	800587c <xQueueGenericCreateStatic>
 80076c6:	4603      	mov	r3, r0
 80076c8:	4a08      	ldr	r2, [pc, #32]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 80076ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076cc:	4b07      	ldr	r3, [pc, #28]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	490b      	ldr	r1, [pc, #44]	; (8007708 <prvCheckForValidListAndQueue+0x7c>)
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fe fd10 	bl	8006100 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076e0:	f000 f958 	bl	8007994 <vPortExitCritical>
}
 80076e4:	bf00      	nop
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	200019c4 	.word	0x200019c4
 80076f0:	20001994 	.word	0x20001994
 80076f4:	200019a8 	.word	0x200019a8
 80076f8:	200019bc 	.word	0x200019bc
 80076fc:	200019c0 	.word	0x200019c0
 8007700:	20001a70 	.word	0x20001a70
 8007704:	200019d0 	.word	0x200019d0
 8007708:	0800817c 	.word	0x0800817c

0800770c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3b04      	subs	r3, #4
 800771c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b04      	subs	r3, #4
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f023 0201 	bic.w	r2, r3, #1
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b04      	subs	r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800773c:	4a0c      	ldr	r2, [pc, #48]	; (8007770 <pxPortInitialiseStack+0x64>)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3b14      	subs	r3, #20
 8007746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3b04      	subs	r3, #4
 8007752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f06f 0202 	mvn.w	r2, #2
 800775a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b20      	subs	r3, #32
 8007760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	08007775 	.word	0x08007775

08007774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800777e:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <prvTaskExitError+0x5c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d00c      	beq.n	80077a2 <prvTaskExitError+0x2e>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	b672      	cpsid	i
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	b662      	cpsie	i
 800779c:	60fb      	str	r3, [r7, #12]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <prvTaskExitError+0x2c>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	b672      	cpsid	i
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	b662      	cpsie	i
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077ba:	bf00      	nop
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0fc      	beq.n	80077bc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	2000001c 	.word	0x2000001c
	...

080077e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <pxCurrentTCBConst2>)
 80077e2:	6819      	ldr	r1, [r3, #0]
 80077e4:	6808      	ldr	r0, [r1, #0]
 80077e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	f380 8809 	msr	PSP, r0
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	4770      	bx	lr
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst2>:
 8007800:	20001494 	.word	0x20001494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007808:	4808      	ldr	r0, [pc, #32]	; (800782c <prvPortStartFirstTask+0x24>)
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	6800      	ldr	r0, [r0, #0]
 800780e:	f380 8808 	msr	MSP, r0
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f380 8814 	msr	CONTROL, r0
 800781a:	b662      	cpsie	i
 800781c:	b661      	cpsie	f
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	df00      	svc	0
 8007828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800782a:	bf00      	nop
 800782c:	e000ed08 	.word	0xe000ed08

08007830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007836:	4b37      	ldr	r3, [pc, #220]	; (8007914 <xPortStartScheduler+0xe4>)
 8007838:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	b2db      	uxtb	r3, r3
 8007840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007858:	b2da      	uxtb	r2, r3
 800785a:	4b2f      	ldr	r3, [pc, #188]	; (8007918 <xPortStartScheduler+0xe8>)
 800785c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800785e:	4b2f      	ldr	r3, [pc, #188]	; (800791c <xPortStartScheduler+0xec>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007864:	e009      	b.n	800787a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007866:	4b2d      	ldr	r3, [pc, #180]	; (800791c <xPortStartScheduler+0xec>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3b01      	subs	r3, #1
 800786c:	4a2b      	ldr	r2, [pc, #172]	; (800791c <xPortStartScheduler+0xec>)
 800786e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	b2db      	uxtb	r3, r3
 8007878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d0ef      	beq.n	8007866 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007886:	4b25      	ldr	r3, [pc, #148]	; (800791c <xPortStartScheduler+0xec>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f1c3 0307 	rsb	r3, r3, #7
 800788e:	2b04      	cmp	r3, #4
 8007890:	d00c      	beq.n	80078ac <xPortStartScheduler+0x7c>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	b672      	cpsid	i
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	b662      	cpsie	i
 80078a6:	60bb      	str	r3, [r7, #8]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078ac:	4b1b      	ldr	r3, [pc, #108]	; (800791c <xPortStartScheduler+0xec>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	4a1a      	ldr	r2, [pc, #104]	; (800791c <xPortStartScheduler+0xec>)
 80078b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078b6:	4b19      	ldr	r3, [pc, #100]	; (800791c <xPortStartScheduler+0xec>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078be:	4a17      	ldr	r2, [pc, #92]	; (800791c <xPortStartScheduler+0xec>)
 80078c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078ca:	4b15      	ldr	r3, [pc, #84]	; (8007920 <xPortStartScheduler+0xf0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a14      	ldr	r2, [pc, #80]	; (8007920 <xPortStartScheduler+0xf0>)
 80078d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078d6:	4b12      	ldr	r3, [pc, #72]	; (8007920 <xPortStartScheduler+0xf0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a11      	ldr	r2, [pc, #68]	; (8007920 <xPortStartScheduler+0xf0>)
 80078dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078e2:	f000 f8dd 	bl	8007aa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <xPortStartScheduler+0xf4>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078ec:	f000 f8fc 	bl	8007ae8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078f0:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <xPortStartScheduler+0xf8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <xPortStartScheduler+0xf8>)
 80078f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078fc:	f7ff ff84 	bl	8007808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007900:	f7ff f840 	bl	8006984 <vTaskSwitchContext>
	prvTaskExitError();
 8007904:	f7ff ff36 	bl	8007774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	e000e400 	.word	0xe000e400
 8007918:	20001ac0 	.word	0x20001ac0
 800791c:	20001ac4 	.word	0x20001ac4
 8007920:	e000ed20 	.word	0xe000ed20
 8007924:	2000001c 	.word	0x2000001c
 8007928:	e000ef34 	.word	0xe000ef34

0800792c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	b672      	cpsid	i
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	b662      	cpsie	i
 8007946:	607b      	str	r3, [r7, #4]
}
 8007948:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800794a:	4b10      	ldr	r3, [pc, #64]	; (800798c <vPortEnterCritical+0x60>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3301      	adds	r3, #1
 8007950:	4a0e      	ldr	r2, [pc, #56]	; (800798c <vPortEnterCritical+0x60>)
 8007952:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007954:	4b0d      	ldr	r3, [pc, #52]	; (800798c <vPortEnterCritical+0x60>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d111      	bne.n	8007980 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800795c:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <vPortEnterCritical+0x64>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00c      	beq.n	8007980 <vPortEnterCritical+0x54>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	b672      	cpsid	i
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	b662      	cpsie	i
 800797a:	603b      	str	r3, [r7, #0]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vPortEnterCritical+0x52>
	}
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	2000001c 	.word	0x2000001c
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800799a:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <vPortExitCritical+0x54>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10c      	bne.n	80079bc <vPortExitCritical+0x28>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	607b      	str	r3, [r7, #4]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <vPortExitCritical+0x54>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <vPortExitCritical+0x54>)
 80079c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <vPortExitCritical+0x54>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d105      	bne.n	80079da <vPortExitCritical+0x46>
 80079ce:	2300      	movs	r3, #0
 80079d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	f383 8811 	msr	BASEPRI, r3
}
 80079d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000001c 	.word	0x2000001c
 80079ec:	00000000 	.word	0x00000000

080079f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079f0:	f3ef 8009 	mrs	r0, PSP
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <pxCurrentTCBConst>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	f01e 0f10 	tst.w	lr, #16
 8007a00:	bf08      	it	eq
 8007a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0a:	6010      	str	r0, [r2, #0]
 8007a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a14:	b672      	cpsid	i
 8007a16:	f380 8811 	msr	BASEPRI, r0
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	b662      	cpsie	i
 8007a24:	f7fe ffae 	bl	8006984 <vTaskSwitchContext>
 8007a28:	f04f 0000 	mov.w	r0, #0
 8007a2c:	f380 8811 	msr	BASEPRI, r0
 8007a30:	bc09      	pop	{r0, r3}
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	6808      	ldr	r0, [r1, #0]
 8007a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	f01e 0f10 	tst.w	lr, #16
 8007a3e:	bf08      	it	eq
 8007a40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a44:	f380 8809 	msr	PSP, r0
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <pxCurrentTCBConst>:
 8007a50:	20001494 	.word	0x20001494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	b672      	cpsid	i
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	b662      	cpsie	i
 8007a72:	607b      	str	r3, [r7, #4]
}
 8007a74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a76:	f7fe fec9 	bl	800680c <xTaskIncrementTick>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a80:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <SysTick_Handler+0x44>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f383 8811 	msr	BASEPRI, r3
}
 8007a92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007aa4:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <vPortSetupTimerInterrupt+0x34>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <vPortSetupTimerInterrupt+0x38>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <vPortSetupTimerInterrupt+0x3c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a0a      	ldr	r2, [pc, #40]	; (8007ae0 <vPortSetupTimerInterrupt+0x40>)
 8007ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aba:	099b      	lsrs	r3, r3, #6
 8007abc:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <vPortSetupTimerInterrupt+0x44>)
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ac2:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <vPortSetupTimerInterrupt+0x34>)
 8007ac4:	2207      	movs	r2, #7
 8007ac6:	601a      	str	r2, [r3, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	e000e010 	.word	0xe000e010
 8007ad8:	e000e018 	.word	0xe000e018
 8007adc:	20000010 	.word	0x20000010
 8007ae0:	10624dd3 	.word	0x10624dd3
 8007ae4:	e000e014 	.word	0xe000e014

08007ae8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ae8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007af8 <vPortEnableVFP+0x10>
 8007aec:	6801      	ldr	r1, [r0, #0]
 8007aee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007af2:	6001      	str	r1, [r0, #0]
 8007af4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007af6:	bf00      	nop
 8007af8:	e000ed88 	.word	0xe000ed88

08007afc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b02:	f3ef 8305 	mrs	r3, IPSR
 8007b06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b0f      	cmp	r3, #15
 8007b0c:	d916      	bls.n	8007b3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b0e:	4a19      	ldr	r2, [pc, #100]	; (8007b74 <vPortValidateInterruptPriority+0x78>)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b18:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <vPortValidateInterruptPriority+0x7c>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	7afa      	ldrb	r2, [r7, #11]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d20c      	bcs.n	8007b3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	b672      	cpsid	i
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	b662      	cpsie	i
 8007b36:	607b      	str	r3, [r7, #4]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <vPortValidateInterruptPriority+0x80>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <vPortValidateInterruptPriority+0x84>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d90c      	bls.n	8007b66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	b672      	cpsid	i
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	b662      	cpsie	i
 8007b60:	603b      	str	r3, [r7, #0]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <vPortValidateInterruptPriority+0x68>
	}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	e000e3f0 	.word	0xe000e3f0
 8007b78:	20001ac0 	.word	0x20001ac0
 8007b7c:	e000ed0c 	.word	0xe000ed0c
 8007b80:	20001ac4 	.word	0x20001ac4

08007b84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b90:	f7fe fd7e 	bl	8006690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b94:	4b5b      	ldr	r3, [pc, #364]	; (8007d04 <pvPortMalloc+0x180>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b9c:	f000 f91a 	bl	8007dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba0:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <pvPortMalloc+0x184>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f040 8092 	bne.w	8007cd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01f      	beq.n	8007bf4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4413      	add	r3, r2
 8007bba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d016      	beq.n	8007bf4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f023 0307 	bic.w	r3, r3, #7
 8007bcc:	3308      	adds	r3, #8
 8007bce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00c      	beq.n	8007bf4 <pvPortMalloc+0x70>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	b672      	cpsid	i
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	b662      	cpsie	i
 8007bee:	617b      	str	r3, [r7, #20]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d06b      	beq.n	8007cd2 <pvPortMalloc+0x14e>
 8007bfa:	4b44      	ldr	r3, [pc, #272]	; (8007d0c <pvPortMalloc+0x188>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d866      	bhi.n	8007cd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c04:	4b42      	ldr	r3, [pc, #264]	; (8007d10 <pvPortMalloc+0x18c>)
 8007c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c08:	4b41      	ldr	r3, [pc, #260]	; (8007d10 <pvPortMalloc+0x18c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0e:	e004      	b.n	8007c1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d903      	bls.n	8007c2c <pvPortMalloc+0xa8>
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f1      	bne.n	8007c10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c2c:	4b35      	ldr	r3, [pc, #212]	; (8007d04 <pvPortMalloc+0x180>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d04d      	beq.n	8007cd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	2308      	movs	r3, #8
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d921      	bls.n	8007c9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00c      	beq.n	8007c84 <pvPortMalloc+0x100>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	b672      	cpsid	i
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	b662      	cpsie	i
 8007c7e:	613b      	str	r3, [r7, #16]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c96:	69b8      	ldr	r0, [r7, #24]
 8007c98:	f000 f8fe 	bl	8007e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <pvPortMalloc+0x188>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <pvPortMalloc+0x188>)
 8007ca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007caa:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <pvPortMalloc+0x188>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <pvPortMalloc+0x190>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d203      	bcs.n	8007cbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cb6:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <pvPortMalloc+0x188>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <pvPortMalloc+0x190>)
 8007cbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <pvPortMalloc+0x184>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cd2:	f7fe fceb 	bl	80066ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00c      	beq.n	8007cfa <pvPortMalloc+0x176>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	b662      	cpsie	i
 8007cf4:	60fb      	str	r3, [r7, #12]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <pvPortMalloc+0x174>
	return pvReturn;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3728      	adds	r7, #40	; 0x28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	200056d0 	.word	0x200056d0
 8007d08:	200056dc 	.word	0x200056dc
 8007d0c:	200056d4 	.word	0x200056d4
 8007d10:	200056c8 	.word	0x200056c8
 8007d14:	200056d8 	.word	0x200056d8

08007d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04c      	beq.n	8007dc4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	425b      	negs	r3, r3
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4413      	add	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4b23      	ldr	r3, [pc, #140]	; (8007dcc <vPortFree+0xb4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4013      	ands	r3, r2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <vPortFree+0x48>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	b672      	cpsid	i
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	b662      	cpsie	i
 8007d5a:	60fb      	str	r3, [r7, #12]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00c      	beq.n	8007d82 <vPortFree+0x6a>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	b672      	cpsid	i
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	b662      	cpsie	i
 8007d7c:	60bb      	str	r3, [r7, #8]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <vPortFree+0xb4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d019      	beq.n	8007dc4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d115      	bne.n	8007dc4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <vPortFree+0xb4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	401a      	ands	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007da8:	f7fe fc72 	bl	8006690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <vPortFree+0xb8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	4a06      	ldr	r2, [pc, #24]	; (8007dd0 <vPortFree+0xb8>)
 8007db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dba:	6938      	ldr	r0, [r7, #16]
 8007dbc:	f000 f86c 	bl	8007e98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007dc0:	f7fe fc74 	bl	80066ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dc4:	bf00      	nop
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	200056dc 	.word	0x200056dc
 8007dd0:	200056d4 	.word	0x200056d4

08007dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007de0:	4b27      	ldr	r3, [pc, #156]	; (8007e80 <prvHeapInit+0xac>)
 8007de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3307      	adds	r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <prvHeapInit+0xac>)
 8007e04:	4413      	add	r3, r2
 8007e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <prvHeapInit+0xb0>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <prvHeapInit+0xb0>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e20:	2208      	movs	r2, #8
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0307 	bic.w	r3, r3, #7
 8007e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <prvHeapInit+0xb4>)
 8007e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <prvHeapInit+0xb4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <prvHeapInit+0xb4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <prvHeapInit+0xb4>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <prvHeapInit+0xb8>)
 8007e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <prvHeapInit+0xbc>)
 8007e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e6c:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <prvHeapInit+0xc0>)
 8007e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e72:	601a      	str	r2, [r3, #0]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20001ac8 	.word	0x20001ac8
 8007e84:	200056c8 	.word	0x200056c8
 8007e88:	200056d0 	.word	0x200056d0
 8007e8c:	200056d8 	.word	0x200056d8
 8007e90:	200056d4 	.word	0x200056d4
 8007e94:	200056dc 	.word	0x200056dc

08007e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ea0:	4b28      	ldr	r3, [pc, #160]	; (8007f44 <prvInsertBlockIntoFreeList+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e002      	b.n	8007eac <prvInsertBlockIntoFreeList+0x14>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d8f7      	bhi.n	8007ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d108      	bne.n	8007eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d118      	bne.n	8007f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d00d      	beq.n	8007f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e008      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e003      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d002      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	200056c8 	.word	0x200056c8
 8007f48:	200056d0 	.word	0x200056d0

08007f4c <memset>:
 8007f4c:	4402      	add	r2, r0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d100      	bne.n	8007f56 <memset+0xa>
 8007f54:	4770      	bx	lr
 8007f56:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5a:	e7f9      	b.n	8007f50 <memset+0x4>

08007f5c <_reclaim_reent>:
 8007f5c:	4b29      	ldr	r3, [pc, #164]	; (8008004 <_reclaim_reent+0xa8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4283      	cmp	r3, r0
 8007f62:	b570      	push	{r4, r5, r6, lr}
 8007f64:	4604      	mov	r4, r0
 8007f66:	d04b      	beq.n	8008000 <_reclaim_reent+0xa4>
 8007f68:	69c3      	ldr	r3, [r0, #28]
 8007f6a:	b143      	cbz	r3, 8007f7e <_reclaim_reent+0x22>
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d144      	bne.n	8007ffc <_reclaim_reent+0xa0>
 8007f72:	69e3      	ldr	r3, [r4, #28]
 8007f74:	6819      	ldr	r1, [r3, #0]
 8007f76:	b111      	cbz	r1, 8007f7e <_reclaim_reent+0x22>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 f879 	bl	8008070 <_free_r>
 8007f7e:	6961      	ldr	r1, [r4, #20]
 8007f80:	b111      	cbz	r1, 8007f88 <_reclaim_reent+0x2c>
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 f874 	bl	8008070 <_free_r>
 8007f88:	69e1      	ldr	r1, [r4, #28]
 8007f8a:	b111      	cbz	r1, 8007f92 <_reclaim_reent+0x36>
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f000 f86f 	bl	8008070 <_free_r>
 8007f92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007f94:	b111      	cbz	r1, 8007f9c <_reclaim_reent+0x40>
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 f86a 	bl	8008070 <_free_r>
 8007f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f9e:	b111      	cbz	r1, 8007fa6 <_reclaim_reent+0x4a>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 f865 	bl	8008070 <_free_r>
 8007fa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007fa8:	b111      	cbz	r1, 8007fb0 <_reclaim_reent+0x54>
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f860 	bl	8008070 <_free_r>
 8007fb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007fb2:	b111      	cbz	r1, 8007fba <_reclaim_reent+0x5e>
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 f85b 	bl	8008070 <_free_r>
 8007fba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007fbc:	b111      	cbz	r1, 8007fc4 <_reclaim_reent+0x68>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f856 	bl	8008070 <_free_r>
 8007fc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007fc6:	b111      	cbz	r1, 8007fce <_reclaim_reent+0x72>
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 f851 	bl	8008070 <_free_r>
 8007fce:	6a23      	ldr	r3, [r4, #32]
 8007fd0:	b1b3      	cbz	r3, 8008000 <_reclaim_reent+0xa4>
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007fd8:	4718      	bx	r3
 8007fda:	5949      	ldr	r1, [r1, r5]
 8007fdc:	b941      	cbnz	r1, 8007ff0 <_reclaim_reent+0x94>
 8007fde:	3504      	adds	r5, #4
 8007fe0:	69e3      	ldr	r3, [r4, #28]
 8007fe2:	2d80      	cmp	r5, #128	; 0x80
 8007fe4:	68d9      	ldr	r1, [r3, #12]
 8007fe6:	d1f8      	bne.n	8007fda <_reclaim_reent+0x7e>
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 f841 	bl	8008070 <_free_r>
 8007fee:	e7c0      	b.n	8007f72 <_reclaim_reent+0x16>
 8007ff0:	680e      	ldr	r6, [r1, #0]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 f83c 	bl	8008070 <_free_r>
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	e7ef      	b.n	8007fdc <_reclaim_reent+0x80>
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	e7ef      	b.n	8007fe0 <_reclaim_reent+0x84>
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	bf00      	nop
 8008004:	2000006c 	.word	0x2000006c

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4d0d      	ldr	r5, [pc, #52]	; (8008040 <__libc_init_array+0x38>)
 800800c:	4c0d      	ldr	r4, [pc, #52]	; (8008044 <__libc_init_array+0x3c>)
 800800e:	1b64      	subs	r4, r4, r5
 8008010:	10a4      	asrs	r4, r4, #2
 8008012:	2600      	movs	r6, #0
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	4d0b      	ldr	r5, [pc, #44]	; (8008048 <__libc_init_array+0x40>)
 800801a:	4c0c      	ldr	r4, [pc, #48]	; (800804c <__libc_init_array+0x44>)
 800801c:	f000 f880 	bl	8008120 <_init>
 8008020:	1b64      	subs	r4, r4, r5
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	2600      	movs	r6, #0
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	080096b4 	.word	0x080096b4
 8008044:	080096b4 	.word	0x080096b4
 8008048:	080096b4 	.word	0x080096b4
 800804c:	080096b8 	.word	0x080096b8

08008050 <__retarget_lock_acquire_recursive>:
 8008050:	4770      	bx	lr

08008052 <__retarget_lock_release_recursive>:
 8008052:	4770      	bx	lr

08008054 <memcpy>:
 8008054:	440a      	add	r2, r1
 8008056:	4291      	cmp	r1, r2
 8008058:	f100 33ff 	add.w	r3, r0, #4294967295
 800805c:	d100      	bne.n	8008060 <memcpy+0xc>
 800805e:	4770      	bx	lr
 8008060:	b510      	push	{r4, lr}
 8008062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800806a:	4291      	cmp	r1, r2
 800806c:	d1f9      	bne.n	8008062 <memcpy+0xe>
 800806e:	bd10      	pop	{r4, pc}

08008070 <_free_r>:
 8008070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008072:	2900      	cmp	r1, #0
 8008074:	d044      	beq.n	8008100 <_free_r+0x90>
 8008076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807a:	9001      	str	r0, [sp, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f1a1 0404 	sub.w	r4, r1, #4
 8008082:	bfb8      	it	lt
 8008084:	18e4      	addlt	r4, r4, r3
 8008086:	f000 f83f 	bl	8008108 <__malloc_lock>
 800808a:	4a1e      	ldr	r2, [pc, #120]	; (8008104 <_free_r+0x94>)
 800808c:	9801      	ldr	r0, [sp, #4]
 800808e:	6813      	ldr	r3, [r2, #0]
 8008090:	b933      	cbnz	r3, 80080a0 <_free_r+0x30>
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	6014      	str	r4, [r2, #0]
 8008096:	b003      	add	sp, #12
 8008098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800809c:	f000 b83a 	b.w	8008114 <__malloc_unlock>
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d908      	bls.n	80080b6 <_free_r+0x46>
 80080a4:	6825      	ldr	r5, [r4, #0]
 80080a6:	1961      	adds	r1, r4, r5
 80080a8:	428b      	cmp	r3, r1
 80080aa:	bf01      	itttt	eq
 80080ac:	6819      	ldreq	r1, [r3, #0]
 80080ae:	685b      	ldreq	r3, [r3, #4]
 80080b0:	1949      	addeq	r1, r1, r5
 80080b2:	6021      	streq	r1, [r4, #0]
 80080b4:	e7ed      	b.n	8008092 <_free_r+0x22>
 80080b6:	461a      	mov	r2, r3
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	b10b      	cbz	r3, 80080c0 <_free_r+0x50>
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d9fa      	bls.n	80080b6 <_free_r+0x46>
 80080c0:	6811      	ldr	r1, [r2, #0]
 80080c2:	1855      	adds	r5, r2, r1
 80080c4:	42a5      	cmp	r5, r4
 80080c6:	d10b      	bne.n	80080e0 <_free_r+0x70>
 80080c8:	6824      	ldr	r4, [r4, #0]
 80080ca:	4421      	add	r1, r4
 80080cc:	1854      	adds	r4, r2, r1
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	6011      	str	r1, [r2, #0]
 80080d2:	d1e0      	bne.n	8008096 <_free_r+0x26>
 80080d4:	681c      	ldr	r4, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	6053      	str	r3, [r2, #4]
 80080da:	440c      	add	r4, r1
 80080dc:	6014      	str	r4, [r2, #0]
 80080de:	e7da      	b.n	8008096 <_free_r+0x26>
 80080e0:	d902      	bls.n	80080e8 <_free_r+0x78>
 80080e2:	230c      	movs	r3, #12
 80080e4:	6003      	str	r3, [r0, #0]
 80080e6:	e7d6      	b.n	8008096 <_free_r+0x26>
 80080e8:	6825      	ldr	r5, [r4, #0]
 80080ea:	1961      	adds	r1, r4, r5
 80080ec:	428b      	cmp	r3, r1
 80080ee:	bf04      	itt	eq
 80080f0:	6819      	ldreq	r1, [r3, #0]
 80080f2:	685b      	ldreq	r3, [r3, #4]
 80080f4:	6063      	str	r3, [r4, #4]
 80080f6:	bf04      	itt	eq
 80080f8:	1949      	addeq	r1, r1, r5
 80080fa:	6021      	streq	r1, [r4, #0]
 80080fc:	6054      	str	r4, [r2, #4]
 80080fe:	e7ca      	b.n	8008096 <_free_r+0x26>
 8008100:	b003      	add	sp, #12
 8008102:	bd30      	pop	{r4, r5, pc}
 8008104:	2000581c 	.word	0x2000581c

08008108 <__malloc_lock>:
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <__malloc_lock+0x8>)
 800810a:	f7ff bfa1 	b.w	8008050 <__retarget_lock_acquire_recursive>
 800810e:	bf00      	nop
 8008110:	20005818 	.word	0x20005818

08008114 <__malloc_unlock>:
 8008114:	4801      	ldr	r0, [pc, #4]	; (800811c <__malloc_unlock+0x8>)
 8008116:	f7ff bf9c 	b.w	8008052 <__retarget_lock_release_recursive>
 800811a:	bf00      	nop
 800811c:	20005818 	.word	0x20005818

08008120 <_init>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr

0800812c <_fini>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	bf00      	nop
 8008130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008132:	bc08      	pop	{r3}
 8008134:	469e      	mov	lr, r3
 8008136:	4770      	bx	lr
