
FreeRTOS_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008078  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001574  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097ec  080097ec  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f4  080097f4  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080097fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  0800986c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  0800990c  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005670  200001b0  080099ac  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005820  080099ac  00025820  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY
 15 .debug_info   00026916  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000052a5  00000000  00000000  00046b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ea0  00000000  00000000  0004bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000017c5  00000000  00000000  0004dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d3f0  00000000  00000000  0004f445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000272ba  00000000  00000000  0007c835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001101b2  00000000  00000000  000a3aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000083cc  00000000  00000000  001b3ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000087  00000000  00000000  001bc070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008260 	.word	0x08008260

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	08008260 	.word	0x08008260

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ETH_Init+0x84>)
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <MX_ETH_Init+0x88>)
 8000544:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_ETH_Init+0x8c>)
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000554:	22e1      	movs	r2, #225	; 0xe1
 8000556:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_ETH_Init+0x8c>)
 800055a:	2200      	movs	r2, #0
 800055c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000560:	2200      	movs	r2, #0
 8000562:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000566:	2200      	movs	r2, #0
 8000568:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_ETH_Init+0x84>)
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_ETH_Init+0x8c>)
 800056e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_ETH_Init+0x84>)
 8000572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000576:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_ETH_Init+0x84>)
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <MX_ETH_Init+0x90>)
 800057c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_ETH_Init+0x84>)
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_ETH_Init+0x94>)
 8000582:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_ETH_Init+0x84>)
 8000586:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800058a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_ETH_Init+0x84>)
 800058e:	f001 f8e7 	bl	8001760 <HAL_ETH_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000598:	f000 fb3a 	bl	8000c10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a2:	f007 fd73 	bl	800808c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a8:	2221      	movs	r2, #33	; 0x21
 80005aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_ETH_Init+0x98>)
 80005ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_ETH_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000204 	.word	0x20000204
 80005c4:	40028000 	.word	0x40028000
 80005c8:	200002b4 	.word	0x200002b4
 80005cc:	20000110 	.word	0x20000110
 80005d0:	20000070 	.word	0x20000070
 80005d4:	200001cc 	.word	0x200001cc

080005d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a4e      	ldr	r2, [pc, #312]	; (8000730 <HAL_ETH_MspInit+0x158>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	f040 8096 	bne.w	8000728 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a4c      	ldr	r2, [pc, #304]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000610:	623b      	str	r3, [r7, #32]
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a46      	ldr	r2, [pc, #280]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800061a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a40      	ldr	r2, [pc, #256]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000640:	61bb      	str	r3, [r7, #24]
 8000642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a34      	ldr	r2, [pc, #208]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <HAL_ETH_MspInit+0x160>)
 80006c0:	f001 fb74 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c4:	2386      	movs	r3, #134	; 0x86
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <HAL_ETH_MspInit+0x164>)
 80006e0:	f001 fb64 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f6:	230b      	movs	r3, #11
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <HAL_ETH_MspInit+0x168>)
 8000702:	f001 fb53 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000706:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <HAL_ETH_MspInit+0x16c>)
 8000724:	f001 fb42 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3738      	adds	r7, #56	; 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40028000 	.word	0x40028000
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40021800 	.word	0x40021800

08000748 <dashboard>:
  .priority = (osPriority_t) osPriorityNormal,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void dashboard(char* header, char* logotype) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	ssd1306_Init();
 8000752:	f000 fa9b 	bl	8000c8c <ssd1306_Init>

    uint8_t y = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
    ssd1306_Fill(Black);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fb00 	bl	8000d60 <ssd1306_Fill>

	#ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	4619      	mov	r1, r3
 8000764:	2002      	movs	r0, #2
 8000766:	f000 fc49 	bl	8000ffc <ssd1306_SetCursor>
    ssd1306_WriteString(header, Font_7x10, White);
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <dashboard+0x5c>)
 800076c:	2301      	movs	r3, #1
 800076e:	ca06      	ldmia	r2, {r1, r2}
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 fc1d 	bl	8000fb0 <ssd1306_WriteString>
    y += 30;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	331e      	adds	r3, #30
 800077a:	73fb      	strb	r3, [r7, #15]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	4619      	mov	r1, r3
 8000780:	2002      	movs	r0, #2
 8000782:	f000 fc3b 	bl	8000ffc <ssd1306_SetCursor>
    ssd1306_WriteString(logotype, Font_11x18, White);
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <dashboard+0x60>)
 8000788:	2301      	movs	r3, #1
 800078a:	ca06      	ldmia	r2, {r1, r2}
 800078c:	6838      	ldr	r0, [r7, #0]
 800078e:	f000 fc0f 	bl	8000fb0 <ssd1306_WriteString>
    y += 36;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	3324      	adds	r3, #36	; 0x24
 8000796:	73fb      	strb	r3, [r7, #15]
    #endif

    ssd1306_UpdateScreen();
 8000798:	f000 fb06 	bl	8000da8 <ssd1306_UpdateScreen>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008

080007ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <MX_FREERTOS_Init+0x28>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <MX_FREERTOS_Init+0x2c>)
 80007b6:	f004 fedf 	bl	8005578 <osThreadNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <MX_FREERTOS_Init+0x30>)
 80007be:	6013      	str	r3, [r2, #0]

  /* creation of OLEDPrintTask */
  OLEDPrintTaskHandle = osThreadNew(StartOLEDPrintTask, NULL, &OLEDPrintTask_attributes);
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <MX_FREERTOS_Init+0x34>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_FREERTOS_Init+0x38>)
 80007c6:	f004 fed7 	bl	8005578 <osThreadNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <MX_FREERTOS_Init+0x3c>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	080082c4 	.word	0x080082c4
 80007d8:	080007ed 	.word	0x080007ed
 80007dc:	200002bc 	.word	0x200002bc
 80007e0:	080082e8 	.word	0x080082e8
 80007e4:	0800080d 	.word	0x0800080d
 80007e8:	200002c0 	.word	0x200002c0

080007ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <StartDefaultTask+0x1c>)
 80007f8:	f001 fc9d 	bl	8002136 <HAL_GPIO_TogglePin>
    osDelay(500);
 80007fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000800:	f004 ff60 	bl	80056c4 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000804:	e7f6      	b.n	80007f4 <StartDefaultTask+0x8>
 8000806:	bf00      	nop
 8000808:	40020400 	.word	0x40020400

0800080c <StartOLEDPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDPrintTask */
void StartOLEDPrintTask(void *argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDPrintTask */
//	ssd1306_TestAll();
	char header[] = "Connected";
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <StartOLEDPrintTask+0x40>)
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	ca07      	ldmia	r2, {r0, r1, r2}
 800081c:	c303      	stmia	r3!, {r0, r1}
 800081e:	801a      	strh	r2, [r3, #0]
	char logotype[] = "S(car)lett";
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <StartOLEDPrintTask+0x44>)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	ca07      	ldmia	r2, {r0, r1, r2}
 8000828:	c303      	stmia	r3!, {r0, r1}
 800082a:	801a      	strh	r2, [r3, #0]
 800082c:	3302      	adds	r3, #2
 800082e:	0c12      	lsrs	r2, r2, #16
 8000830:	701a      	strb	r2, [r3, #0]

	dashboard(header, logotype);
 8000832:	f107 0208 	add.w	r2, r7, #8
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff83 	bl	8000748 <dashboard>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f004 ff3e 	bl	80056c4 <osDelay>
 8000848:	e7fb      	b.n	8000842 <StartOLEDPrintTask+0x36>
 800084a:	bf00      	nop
 800084c:	08008294 	.word	0x08008294
 8000850:	080082a0 	.word	0x080082a0

08000854 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b47      	ldr	r3, [pc, #284]	; (8000988 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a46      	ldr	r2, [pc, #280]	; (8000988 <MX_GPIO_Init+0x134>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b44      	ldr	r3, [pc, #272]	; (8000988 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b41      	ldr	r3, [pc, #260]	; (8000988 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a40      	ldr	r2, [pc, #256]	; (8000988 <MX_GPIO_Init+0x134>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a3a      	ldr	r2, [pc, #232]	; (8000988 <MX_GPIO_Init+0x134>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a34      	ldr	r2, [pc, #208]	; (8000988 <MX_GPIO_Init+0x134>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2e      	ldr	r2, [pc, #184]	; (8000988 <MX_GPIO_Init+0x134>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a28      	ldr	r2, [pc, #160]	; (8000988 <MX_GPIO_Init+0x134>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000900:	4822      	ldr	r0, [pc, #136]	; (800098c <MX_GPIO_Init+0x138>)
 8000902:	f001 fbff 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2140      	movs	r1, #64	; 0x40
 800090a:	4821      	ldr	r0, [pc, #132]	; (8000990 <MX_GPIO_Init+0x13c>)
 800090c:	f001 fbfa 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	481b      	ldr	r0, [pc, #108]	; (8000994 <MX_GPIO_Init+0x140>)
 8000928:	f001 fa40 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_GPIO_Init+0x138>)
 8000946:	f001 fa31 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_GPIO_Init+0x13c>)
 8000962:	f001 fa23 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_GPIO_Init+0x13c>)
 800097a:	f001 fa17 	bl	8001dac <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800
 8000994:	40020800 	.word	0x40020800

08000998 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_I2C1_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <MX_I2C1_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009a4:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <MX_I2C1_Init+0x7c>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009d4:	f001 fbca 	bl	800216c <HAL_I2C_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009de:	f000 f917 	bl	8000c10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009e6:	f001 ffab 	bl	8002940 <HAL_I2CEx_ConfigAnalogFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 f90e 	bl	8000c10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_I2C1_Init+0x74>)
 80009f8:	f001 ffed 	bl	80029d6 <HAL_I2CEx_ConfigDigitalFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 f905 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200002c4 	.word	0x200002c4
 8000a10:	40005400 	.word	0x40005400
 8000a14:	20303e5d 	.word	0x20303e5d

08000a18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0ae      	sub	sp, #184	; 0xb8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2290      	movs	r2, #144	; 0x90
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f007 fb27 	bl	800808c <memset>
  if(i2cHandle->Instance==I2C1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a22      	ldr	r2, [pc, #136]	; (8000acc <HAL_I2C_MspInit+0xb4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d13c      	bne.n	8000ac2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 feb8 	bl	80037cc <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a62:	f000 f8d5 	bl	8000c10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_I2C_MspInit+0xb8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_I2C_MspInit+0xb8>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_I2C_MspInit+0xb8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a86:	2312      	movs	r3, #18
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <HAL_I2C_MspInit+0xbc>)
 8000aa6:	f001 f981 	bl	8001dac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_I2C_MspInit+0xb8>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_I2C_MspInit+0xb8>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_I2C_MspInit+0xb8>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	37b8      	adds	r7, #184	; 0xb8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fd0d 	bl	80014fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f812 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f7ff feb6 	bl	8000854 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ae8:	f7ff fd28 	bl	800053c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000aec:	f000 fba4 	bl	8001238 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000af0:	f000 fc32 	bl	8001358 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000af4:	f7ff ff50 	bl	8000998 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000af8:	f004 fcd4 	bl	80054a4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000afc:	f7ff fe56 	bl	80007ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b00:	f004 fd04 	bl	800550c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <main+0x2c>
	...

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2234      	movs	r2, #52	; 0x34
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f007 fab8 	bl	800808c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b2c:	f002 f8e8 	bl	8002d00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <SystemClock_Config+0xdc>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <SystemClock_Config+0xdc>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <SystemClock_Config+0xdc>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b48:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <SystemClock_Config+0xe0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b50:	4a25      	ldr	r2, [pc, #148]	; (8000be8 <SystemClock_Config+0xe0>)
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <SystemClock_Config+0xe0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b7c:	2360      	movs	r3, #96	; 0x60
 8000b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b84:	2304      	movs	r3, #4
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 f915 	bl	8002dc0 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b9c:	f000 f838 	bl	8000c10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ba0:	f002 f8be 	bl	8002d20 <HAL_PWREx_EnableOverDrive>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000baa:	f000 f831 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	2103      	movs	r1, #3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fba6 	bl	800331c <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bd6:	f000 f81b 	bl	8000c10 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40007000 	.word	0x40007000

08000bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfe:	f000 fc89 	bl	8001514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40001000 	.word	0x40001000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>

08000c1a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	2200      	movs	r2, #0
 8000c44:	2178      	movs	r1, #120	; 0x78
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <ssd1306_WriteCommand+0x2c>)
 8000c48:	f001 fb20 	bl	800228c <HAL_I2C_Mem_Write>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200002c4 	.word	0x200002c4

08000c58 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6a:	9202      	str	r2, [sp, #8]
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	2240      	movs	r2, #64	; 0x40
 8000c76:	2178      	movs	r1, #120	; 0x78
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <ssd1306_WriteData+0x30>)
 8000c7a:	f001 fb07 	bl	800228c <HAL_I2C_Mem_Write>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200002c4 	.word	0x200002c4

08000c8c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000c90:	f7ff ffc3 	bl	8000c1a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000c94:	2064      	movs	r0, #100	; 0x64
 8000c96:	f000 fc5d 	bl	8001554 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f9da 	bl	8001054 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ca0:	2020      	movs	r0, #32
 8000ca2:	f7ff ffc1 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ffbe 	bl	8000c28 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000cac:	20b0      	movs	r0, #176	; 0xb0
 8000cae:	f7ff ffbb 	bl	8000c28 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000cb2:	20c8      	movs	r0, #200	; 0xc8
 8000cb4:	f7ff ffb8 	bl	8000c28 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ffb5 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000cbe:	2010      	movs	r0, #16
 8000cc0:	f7ff ffb2 	bl	8000c28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000cc4:	2040      	movs	r0, #64	; 0x40
 8000cc6:	f7ff ffaf 	bl	8000c28 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000cca:	20ff      	movs	r0, #255	; 0xff
 8000ccc:	f000 f9ae 	bl	800102c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000cd0:	20a1      	movs	r0, #161	; 0xa1
 8000cd2:	f7ff ffa9 	bl	8000c28 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000cd6:	20a6      	movs	r0, #166	; 0xa6
 8000cd8:	f7ff ffa6 	bl	8000c28 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cdc:	20a8      	movs	r0, #168	; 0xa8
 8000cde:	f7ff ffa3 	bl	8000c28 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ce2:	203f      	movs	r0, #63	; 0x3f
 8000ce4:	f7ff ffa0 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ce8:	20a4      	movs	r0, #164	; 0xa4
 8000cea:	f7ff ff9d 	bl	8000c28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000cee:	20d3      	movs	r0, #211	; 0xd3
 8000cf0:	f7ff ff9a 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff ff97 	bl	8000c28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cfa:	20d5      	movs	r0, #213	; 0xd5
 8000cfc:	f7ff ff94 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000d00:	20f0      	movs	r0, #240	; 0xf0
 8000d02:	f7ff ff91 	bl	8000c28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d06:	20d9      	movs	r0, #217	; 0xd9
 8000d08:	f7ff ff8e 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d0c:	2022      	movs	r0, #34	; 0x22
 8000d0e:	f7ff ff8b 	bl	8000c28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d12:	20da      	movs	r0, #218	; 0xda
 8000d14:	f7ff ff88 	bl	8000c28 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000d18:	2012      	movs	r0, #18
 8000d1a:	f7ff ff85 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d1e:	20db      	movs	r0, #219	; 0xdb
 8000d20:	f7ff ff82 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d24:	2020      	movs	r0, #32
 8000d26:	f7ff ff7f 	bl	8000c28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d2a:	208d      	movs	r0, #141	; 0x8d
 8000d2c:	f7ff ff7c 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d30:	2014      	movs	r0, #20
 8000d32:	f7ff ff79 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000d36:	2001      	movs	r0, #1
 8000d38:	f000 f98c 	bl	8001054 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 f80f 	bl	8000d60 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000d42:	f000 f831 	bl	8000da8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <ssd1306_Init+0xd0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <ssd1306_Init+0xd0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000d52:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <ssd1306_Init+0xd0>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	711a      	strb	r2, [r3, #4]
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000718 	.word	0x20000718

08000d60 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	e00d      	b.n	8000d8c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <ssd1306_Fill+0x1a>
 8000d76:	2100      	movs	r1, #0
 8000d78:	e000      	b.n	8000d7c <ssd1306_Fill+0x1c>
 8000d7a:	21ff      	movs	r1, #255	; 0xff
 8000d7c:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <ssd1306_Fill+0x44>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	460a      	mov	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d92:	d3ed      	bcc.n	8000d70 <ssd1306_Fill+0x10>
    }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000318 	.word	0x20000318

08000da8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e016      	b.n	8000de2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	3b50      	subs	r3, #80	; 0x50
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff34 	bl	8000c28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff31 	bl	8000c28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000dc6:	2010      	movs	r0, #16
 8000dc8:	f7ff ff2e 	bl	8000c28 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	01db      	lsls	r3, r3, #7
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <ssd1306_UpdateScreen+0x4c>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff3e 	bl	8000c58 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	3301      	adds	r3, #1
 8000de0:	71fb      	strb	r3, [r7, #7]
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b07      	cmp	r3, #7
 8000de6:	d9e5      	bls.n	8000db4 <ssd1306_UpdateScreen+0xc>
    }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000318 	.word	0x20000318

08000df8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	460b      	mov	r3, r1
 8000e04:	71bb      	strb	r3, [r7, #6]
 8000e06:	4613      	mov	r3, r2
 8000e08:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db3d      	blt.n	8000e8e <ssd1306_DrawPixel+0x96>
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b3f      	cmp	r3, #63	; 0x3f
 8000e16:	d83a      	bhi.n	8000e8e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d11a      	bne.n	8000e54 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	b2d8      	uxtb	r0, r3
 8000e26:	4603      	mov	r3, r0
 8000e28:	01db      	lsls	r3, r3, #7
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <ssd1306_DrawPixel+0xa4>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b259      	sxtb	r1, r3
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	4603      	mov	r3, r0
 8000e48:	01db      	lsls	r3, r3, #7
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b2c9      	uxtb	r1, r1
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <ssd1306_DrawPixel+0xa4>)
 8000e50:	54d1      	strb	r1, [r2, r3]
 8000e52:	e01d      	b.n	8000e90 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e54:	79fa      	ldrb	r2, [r7, #7]
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b2d8      	uxtb	r0, r3
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	01db      	lsls	r3, r3, #7
 8000e60:	4413      	add	r3, r2
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <ssd1306_DrawPixel+0xa4>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	b25a      	sxtb	r2, r3
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	b259      	sxtb	r1, r3
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4603      	mov	r3, r0
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	4413      	add	r3, r2
 8000e86:	b2c9      	uxtb	r1, r1
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <ssd1306_DrawPixel+0xa4>)
 8000e8a:	54d1      	strb	r1, [r2, r3]
 8000e8c:	e000      	b.n	8000e90 <ssd1306_DrawPixel+0x98>
        return;
 8000e8e:	bf00      	nop
    }
}
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000318 	.word	0x20000318

08000ea0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	1d38      	adds	r0, r7, #4
 8000eaa:	e880 0006 	stmia.w	r0, {r1, r2}
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4623      	mov	r3, r4
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b1f      	cmp	r3, #31
 8000ebc:	d902      	bls.n	8000ec4 <ssd1306_WriteChar+0x24>
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ec2:	d901      	bls.n	8000ec8 <ssd1306_WriteChar+0x28>
        return 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e06d      	b.n	8000fa4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	793b      	ldrb	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2b80      	cmp	r3, #128	; 0x80
 8000ed4:	dc06      	bgt.n	8000ee4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000ed8:	885b      	ldrh	r3, [r3, #2]
 8000eda:	461a      	mov	r2, r3
 8000edc:	797b      	ldrb	r3, [r7, #5]
 8000ede:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ee0:	2b40      	cmp	r3, #64	; 0x40
 8000ee2:	dd01      	ble.n	8000ee8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e05d      	b.n	8000fa4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	e04c      	b.n	8000f88 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	3b20      	subs	r3, #32
 8000ef4:	7979      	ldrb	r1, [r7, #5]
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	440b      	add	r3, r1
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	e034      	b.n	8000f78 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d012      	beq.n	8000f44 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000f2e:	885b      	ldrh	r3, [r3, #2]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	7bba      	ldrb	r2, [r7, #14]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff ff5b 	bl	8000df8 <ssd1306_DrawPixel>
 8000f42:	e016      	b.n	8000f72 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2d8      	uxtb	r0, r3
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000f54:	885b      	ldrh	r3, [r3, #2]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2d9      	uxtb	r1, r3
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf0c      	ite	eq
 8000f66:	2301      	moveq	r3, #1
 8000f68:	2300      	movne	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f7ff ff43 	bl	8000df8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	793b      	ldrb	r3, [r7, #4]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d3c5      	bcc.n	8000f0e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	797b      	ldrb	r3, [r7, #5]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d3ad      	bcc.n	8000eee <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000f94:	881a      	ldrh	r2, [r3, #0]
 8000f96:	793b      	ldrb	r3, [r7, #4]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <ssd1306_WriteChar+0x10c>)
 8000fa0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3724      	adds	r7, #36	; 0x24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	20000718 	.word	0x20000718

08000fb0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	1d38      	adds	r0, r7, #4
 8000fba:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fbe:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000fc0:	e012      	b.n	8000fe8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	7818      	ldrb	r0, [r3, #0]
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	1d3a      	adds	r2, r7, #4
 8000fca:	ca06      	ldmia	r2, {r1, r2}
 8000fcc:	f7ff ff68 	bl	8000ea0 <ssd1306_WriteChar>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d002      	beq.n	8000fe2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	e008      	b.n	8000ff4 <ssd1306_WriteString+0x44>
        }
        str++;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e8      	bne.n	8000fc2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <ssd1306_SetCursor+0x2c>)
 8001012:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <ssd1306_SetCursor+0x2c>)
 800101a:	805a      	strh	r2, [r3, #2]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20000718 	.word	0x20000718

0800102c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001036:	2381      	movs	r3, #129	; 0x81
 8001038:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fdf3 	bl	8000c28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fdef 	bl	8000c28 <ssd1306_WriteCommand>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001064:	23af      	movs	r3, #175	; 0xaf
 8001066:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <ssd1306_SetDisplayOn+0x38>)
 800106a:	2201      	movs	r2, #1
 800106c:	715a      	strb	r2, [r3, #5]
 800106e:	e004      	b.n	800107a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001070:	23ae      	movs	r3, #174	; 0xae
 8001072:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <ssd1306_SetDisplayOn+0x38>)
 8001076:	2200      	movs	r2, #0
 8001078:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fdd3 	bl	8000c28 <ssd1306_WriteCommand>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000718 	.word	0x20000718

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_MspInit+0x4c>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	210f      	movs	r1, #15
 80010ca:	f06f 0001 	mvn.w	r0, #1
 80010ce:	f000 fb1d 	bl	800170c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_InitTick+0xe0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <HAL_InitTick+0xe0>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_InitTick+0xe0>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001108:	f107 0210 	add.w	r2, r7, #16
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fb28 	bl	8003768 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001122:	f002 faf9 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8001126:	6378      	str	r0, [r7, #52]	; 0x34
 8001128:	e004      	b.n	8001134 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800112a:	f002 faf5 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 800112e:	4603      	mov	r3, r0
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_InitTick+0xe4>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9b      	lsrs	r3, r3, #18
 800113e:	3b01      	subs	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_InitTick+0xe8>)
 8001144:	4a21      	ldr	r2, [pc, #132]	; (80011cc <HAL_InitTick+0xec>)
 8001146:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_InitTick+0xe8>)
 800114a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800114e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_InitTick+0xe8>)
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_InitTick+0xe8>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_InitTick+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_InitTick+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001168:	4817      	ldr	r0, [pc, #92]	; (80011c8 <HAL_InitTick+0xe8>)
 800116a:	f002 ff57 	bl	800401c <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001178:	2b00      	cmp	r3, #0
 800117a:	d11b      	bne.n	80011b4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <HAL_InitTick+0xe8>)
 800117e:	f002 ffaf 	bl	80040e0 <HAL_TIM_Base_Start_IT>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001188:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800118c:	2b00      	cmp	r3, #0
 800118e:	d111      	bne.n	80011b4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001190:	2036      	movs	r0, #54	; 0x36
 8001192:	f000 fad7 	bl	8001744 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d808      	bhi.n	80011ae <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	2036      	movs	r0, #54	; 0x36
 80011a2:	f000 fab3 	bl	800170c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0xf0>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e002      	b.n	80011b4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3738      	adds	r7, #56	; 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	20000720 	.word	0x20000720
 80011cc:	40001000 	.word	0x40001000
 80011d0:	20000014 	.word	0x20000014

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <TIM6_DAC_IRQHandler+0x10>)
 8001206:	f002 ffe3 	bl	80041d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000720 	.word	0x20000720

08001214 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USART3_UART_Init+0x58>)
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <MX_USART3_UART_Init+0x5c>)
 8001240:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_USART3_UART_Init+0x58>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART3_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_USART3_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART3_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART3_UART_Init+0x58>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART3_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART3_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART3_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART3_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART3_UART_Init+0x58>)
 800127c:	f003 f9ae 	bl	80045dc <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001286:	f7ff fcc3 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000076c 	.word	0x2000076c
 8001294:	40004800 	.word	0x40004800

08001298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ae      	sub	sp, #184	; 0xb8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2290      	movs	r2, #144	; 0x90
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f006 fee7 	bl	800808c <memset>
  if(uartHandle->Instance==USART3)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_UART_MspInit+0xb4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d13c      	bne.n	8001342 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fa78 	bl	80037cc <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012e2:	f7ff fc95 	bl	8000c10 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_UART_MspInit+0xb8>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_UART_MspInit+0xb8>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_UART_MspInit+0xb8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_UART_MspInit+0xb8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <HAL_UART_MspInit+0xb8>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_UART_MspInit+0xb8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001330:	2307      	movs	r3, #7
 8001332:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_UART_MspInit+0xbc>)
 800133e:	f000 fd35 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001342:	bf00      	nop
 8001344:	37b8      	adds	r7, #184	; 0xb8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40004800 	.word	0x40004800
 8001350:	40023800 	.word	0x40023800
 8001354:	40020c00 	.word	0x40020c00

08001358 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001362:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2206      	movs	r2, #6
 8001368:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	2202      	movs	r2, #2
 800136e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001378:	2202      	movs	r2, #2
 800137a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137e:	2201      	movs	r2, #1
 8001380:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001390:	2201      	movs	r2, #1
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139c:	f001 fb67 	bl	8002a6e <HAL_PCD_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013a6:	f7ff fc33 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200007f4 	.word	0x200007f4

080013b4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0ae      	sub	sp, #184	; 0xb8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2290      	movs	r2, #144	; 0x90
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 fe59 	bl	800808c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e2:	d159      	bne.n	8001498 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 f9e9 	bl	80037cc <HAL_RCCEx_PeriphCLKConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001400:	f7ff fc06 	bl	8000c10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800141c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001436:	230a      	movs	r3, #10
 8001438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001440:	4619      	mov	r1, r3
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <HAL_PCD_MspInit+0xf0>)
 8001444:	f000 fcb2 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001460:	4619      	mov	r1, r3
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <HAL_PCD_MspInit+0xf0>)
 8001464:	f000 fca2 	bl	8001dac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 800146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001472:	6353      	str	r3, [r2, #52]	; 0x34
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 8001476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148a:	6453      	str	r3, [r2, #68]	; 0x44
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_PCD_MspInit+0xec>)
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001498:	bf00      	nop
 800149a:	37b8      	adds	r7, #184	; 0xb8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ae:	490e      	ldr	r1, [pc, #56]	; (80014e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c4:	4c0b      	ldr	r4, [pc, #44]	; (80014f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d2:	f7ff fe9f 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f006 fe37 	bl	8008148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff fafd 	bl	8000ad8 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014ec:	080097fc 	.word	0x080097fc
  ldr r2, =_sbss
 80014f0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80014f4:	20005820 	.word	0x20005820

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>

080014fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fe:	2003      	movs	r0, #3
 8001500:	f000 f8f9 	bl	80016f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001504:	200f      	movs	r0, #15
 8001506:	f7ff fdeb 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150a:	f7ff fdc1 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000018 	.word	0x20000018
 8001538:	20000cfc 	.word	0x20000cfc

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000cfc 	.word	0x20000cfc

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff ffee 	bl	800153c <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d005      	beq.n	800157a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_Delay+0x44>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157a:	bf00      	nop
 800157c:	f7ff ffde 	bl	800153c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f7      	bhi.n	800157c <HAL_Delay+0x28>
  {
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000018 	.word	0x20000018

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <__NVIC_SetPriorityGrouping+0x40>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x40>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	05fa0000 	.word	0x05fa0000

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ff4c 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171e:	f7ff ff61 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001722:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	6978      	ldr	r0, [r7, #20]
 800172a:	f7ff ffb1 	bl	8001690 <NVIC_EncodePriority>
 800172e:	4602      	mov	r2, r0
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff80 	bl	800163c <__NVIC_SetPriority>
}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff54 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06a      	b.n	8001848 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2223      	movs	r2, #35	; 0x23
 8001780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7fe ff27 	bl	80005d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <HAL_ETH_Init+0xf0>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <HAL_ETH_Init+0xf0>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_ETH_Init+0xf0>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017a2:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <HAL_ETH_Init+0xf4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a2b      	ldr	r2, [pc, #172]	; (8001854 <HAL_ETH_Init+0xf4>)
 80017a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_ETH_Init+0xf4>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4927      	ldr	r1, [pc, #156]	; (8001854 <HAL_ETH_Init+0xf4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_ETH_Init+0xf4>)
 80017be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d8:	f7ff feb0 	bl	800153c <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017de:	e011      	b.n	8001804 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017e0:	f7ff feac 	bl	800153c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017ee:	d909      	bls.n	8001804 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2204      	movs	r2, #4
 80017f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	22e0      	movs	r2, #224	; 0xe0
 80017fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e021      	b.n	8001848 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1e4      	bne.n	80017e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f958 	bl	8001acc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f9ff 	bl	8001c20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fa55 	bl	8001cd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	461a      	mov	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f9bd 	bl	8001bb0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2210      	movs	r2, #16
 8001842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40013800 	.word	0x40013800

08001858 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <ETH_SetMACConfig+0x15c>)
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	7c1b      	ldrb	r3, [r3, #16]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <ETH_SetMACConfig+0x28>
 800187a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800187e:	e000      	b.n	8001882 <ETH_SetMACConfig+0x2a>
 8001880:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	7c5b      	ldrb	r3, [r3, #17]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <ETH_SetMACConfig+0x38>
 800188a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188e:	e000      	b.n	8001892 <ETH_SetMACConfig+0x3a>
 8001890:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001892:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001898:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	7fdb      	ldrb	r3, [r3, #31]
 800189e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	7f92      	ldrb	r2, [r2, #30]
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d102      	bne.n	80018b6 <ETH_SetMACConfig+0x5e>
 80018b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b4:	e000      	b.n	80018b8 <ETH_SetMACConfig+0x60>
 80018b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80018b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	7f1b      	ldrb	r3, [r3, #28]
 80018be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80018ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d102      	bne.n	80018e0 <ETH_SetMACConfig+0x88>
 80018da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018de:	e000      	b.n	80018e2 <ETH_SetMACConfig+0x8a>
 80018e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	7bdb      	ldrb	r3, [r3, #15]
 80018e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80018ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80018f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018fa:	4313      	orrs	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fe1e 	bl	8001554 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001936:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800193e:	2a00      	cmp	r2, #0
 8001940:	d101      	bne.n	8001946 <ETH_SetMACConfig+0xee>
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	e000      	b.n	8001948 <ETH_SetMACConfig+0xf0>
 8001946:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001948:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800194e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001956:	2a01      	cmp	r2, #1
 8001958:	d101      	bne.n	800195e <ETH_SetMACConfig+0x106>
 800195a:	2208      	movs	r2, #8
 800195c:	e000      	b.n	8001960 <ETH_SetMACConfig+0x108>
 800195e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001960:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001968:	2a01      	cmp	r2, #1
 800196a:	d101      	bne.n	8001970 <ETH_SetMACConfig+0x118>
 800196c:	2204      	movs	r2, #4
 800196e:	e000      	b.n	8001972 <ETH_SetMACConfig+0x11a>
 8001970:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001972:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800197a:	2a01      	cmp	r2, #1
 800197c:	d101      	bne.n	8001982 <ETH_SetMACConfig+0x12a>
 800197e:	2202      	movs	r2, #2
 8001980:	e000      	b.n	8001984 <ETH_SetMACConfig+0x12c>
 8001982:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001984:	4313      	orrs	r3, r2
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fdd9 	bl	8001554 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	ff20810f 	.word	0xff20810f

080019b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <ETH_SetDMAConfig+0x110>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	7b1b      	ldrb	r3, [r3, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <ETH_SetDMAConfig+0x2c>
 80019de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019e2:	e000      	b.n	80019e6 <ETH_SetDMAConfig+0x2e>
 80019e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	7b5b      	ldrb	r3, [r3, #13]
 80019ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	7f52      	ldrb	r2, [r2, #29]
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	d102      	bne.n	80019fc <ETH_SetDMAConfig+0x44>
 80019f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019fa:	e000      	b.n	80019fe <ETH_SetDMAConfig+0x46>
 80019fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	7b9b      	ldrb	r3, [r3, #14]
 8001a04:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a06:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	7f1b      	ldrb	r3, [r3, #28]
 8001a12:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	7f9b      	ldrb	r3, [r3, #30]
 8001a1a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a1c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f7ff fd80 	bl	8001554 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a6c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a72:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a78:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a80:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a82:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a8a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a90:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a9e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff fd51 	bl	8001554 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	f8de3f23 	.word	0xf8de3f23

08001acc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0a6      	sub	sp, #152	; 0x98
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b32:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fe86 	bl	8001858 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b80:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff08 	bl	80019b8 <ETH_SetDMAConfig>
}
 8001ba8:	bf00      	nop
 8001baa:	3798      	adds	r7, #152	; 0x98
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3305      	adds	r3, #5
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	3204      	adds	r2, #4
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <ETH_MACAddressConfig+0x68>)
 8001bd2:	4413      	add	r3, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3303      	adds	r3, #3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	061a      	lsls	r2, r3, #24
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3302      	adds	r3, #2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <ETH_MACAddressConfig+0x6c>)
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40028040 	.word	0x40028040
 8001c1c:	40028044 	.word	0x40028044

08001c20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e03e      	b.n	8001cac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68d9      	ldr	r1, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	3206      	adds	r2, #6
 8001c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d80c      	bhi.n	8001c90 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	e004      	b.n	8001c9a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d9bd      	bls.n	8001c2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc4:	611a      	str	r2, [r3, #16]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e046      	b.n	8001d6e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d24:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	3212      	adds	r2, #18
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d80c      	bhi.n	8001d5e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6919      	ldr	r1, [r3, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	e004      	b.n	8001d68 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d9b5      	bls.n	8001ce0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9e:	60da      	str	r2, [r3, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e175      	b.n	80020b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f040 8164 	bne.w	80020b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d005      	beq.n	8001e02 <HAL_GPIO_Init+0x56>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d130      	bne.n	8001e64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 0201 	and.w	r2, r3, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d017      	beq.n	8001ea0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d123      	bne.n	8001ef4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80be 	beq.w	80020b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	4b66      	ldr	r3, [pc, #408]	; (80020d0 <HAL_GPIO_Init+0x324>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a65      	ldr	r2, [pc, #404]	; (80020d0 <HAL_GPIO_Init+0x324>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <HAL_GPIO_Init+0x324>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f4e:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <HAL_GPIO_Init+0x328>)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_GPIO_Init+0x32c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d037      	beq.n	8001fea <HAL_GPIO_Init+0x23e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a57      	ldr	r2, [pc, #348]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d031      	beq.n	8001fe6 <HAL_GPIO_Init+0x23a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d02b      	beq.n	8001fe2 <HAL_GPIO_Init+0x236>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a55      	ldr	r2, [pc, #340]	; (80020e4 <HAL_GPIO_Init+0x338>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d025      	beq.n	8001fde <HAL_GPIO_Init+0x232>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a54      	ldr	r2, [pc, #336]	; (80020e8 <HAL_GPIO_Init+0x33c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01f      	beq.n	8001fda <HAL_GPIO_Init+0x22e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a53      	ldr	r2, [pc, #332]	; (80020ec <HAL_GPIO_Init+0x340>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d019      	beq.n	8001fd6 <HAL_GPIO_Init+0x22a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_GPIO_Init+0x344>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a51      	ldr	r2, [pc, #324]	; (80020f4 <HAL_GPIO_Init+0x348>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00d      	beq.n	8001fce <HAL_GPIO_Init+0x222>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a50      	ldr	r2, [pc, #320]	; (80020f8 <HAL_GPIO_Init+0x34c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <HAL_GPIO_Init+0x21e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <HAL_GPIO_Init+0x350>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_GPIO_Init+0x21a>
 8001fc2:	2309      	movs	r3, #9
 8001fc4:	e012      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	e010      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fca:	2308      	movs	r3, #8
 8001fcc:	e00e      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fce:	2307      	movs	r3, #7
 8001fd0:	e00c      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e00a      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e008      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x240>
 8001fea:	2300      	movs	r3, #0
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ffc:	4935      	ldr	r1, [pc, #212]	; (80020d4 <HAL_GPIO_Init+0x328>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_GPIO_Init+0x354>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800202e:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_GPIO_Init+0x354>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_GPIO_Init+0x354>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <HAL_GPIO_Init+0x354>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_GPIO_Init+0x354>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_GPIO_Init+0x354>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_GPIO_Init+0x354>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_GPIO_Init+0x354>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	f67f ae86 	bls.w	8001dcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40021800 	.word	0x40021800
 80020f4:	40021c00 	.word	0x40021c00
 80020f8:	40022000 	.word	0x40022000
 80020fc:	40022400 	.word	0x40022400
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002120:	e003      	b.n	800212a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	041a      	lsls	r2, r3, #16
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43d9      	mvns	r1, r3
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	400b      	ands	r3, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	619a      	str	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e07f      	b.n	800227e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fc40 	bl	8000a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e006      	b.n	80021f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d104      	bne.n	8002206 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002204:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_I2C_Init+0x11c>)
 8002212:	430b      	orrs	r3, r1
 8002214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	02008000 	.word	0x02008000

0800228c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4603      	mov	r3, r0
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	460b      	mov	r3, r1
 80022a0:	813b      	strh	r3, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	f040 80f9 	bne.w	80024a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x34>
 80022ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0ed      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Mem_Write+0x4e>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0e6      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e2:	f7ff f92b 	bl	800153c <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2319      	movs	r3, #25
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f955 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d1      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232c:	88f8      	ldrh	r0, [r7, #6]
 800232e:	893a      	ldrh	r2, [r7, #8]
 8002330:	8979      	ldrh	r1, [r7, #10]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4603      	mov	r3, r0
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f8b9 	bl	80024b4 <I2C_RequestMemoryWrite>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0a9      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d90e      	bls.n	800237c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	b2da      	uxtb	r2, r3
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fab1 	bl	80028dc <I2C_TransferConfig>
 800237a:	e00f      	b.n	800239c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	b2da      	uxtb	r2, r3
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	2300      	movs	r3, #0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 faa0 	bl	80028dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f93f 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e07b      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d034      	beq.n	8002454 <HAL_I2C_Mem_Write+0x1c8>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d130      	bne.n	8002454 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	2200      	movs	r2, #0
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f8d1 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e04d      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d90e      	bls.n	8002434 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	22ff      	movs	r2, #255	; 0xff
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	b2da      	uxtb	r2, r3
 8002422:	8979      	ldrh	r1, [r7, #10]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fa55 	bl	80028dc <I2C_TransferConfig>
 8002432:	e00f      	b.n	8002454 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa44 	bl	80028dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d19e      	bne.n	800239c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f91e 	bl	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e01a      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2220      	movs	r2, #32
 8002478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_I2C_Mem_Write+0x224>)
 8002486:	400b      	ands	r3, r1
 8002488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	fe00e800 	.word	0xfe00e800

080024b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	817b      	strh	r3, [r7, #10]
 80024c6:	460b      	mov	r3, r1
 80024c8:	813b      	strh	r3, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <I2C_RequestMemoryWrite+0xa4>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f9fd 	bl	80028dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	69b9      	ldr	r1, [r7, #24]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f89c 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e02c      	b.n	8002550 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024fc:	893b      	ldrh	r3, [r7, #8]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
 8002506:	e015      	b.n	8002534 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002508:	893b      	ldrh	r3, [r7, #8]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	69b9      	ldr	r1, [r7, #24]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f882 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e012      	b.n	8002550 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800252a:	893b      	ldrh	r3, [r7, #8]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2200      	movs	r2, #0
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f830 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	80002000 	.word	0x80002000

0800255c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d103      	bne.n	800257a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	619a      	str	r2, [r3, #24]
  }
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	e022      	b.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d01e      	beq.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7fe ffbd 	bl	800153c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d113      	bne.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e00f      	b.n	800261c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	429a      	cmp	r2, r3
 8002618:	d0cd      	beq.n	80025b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002630:	e02c      	b.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f870 	bl	800271c <I2C_IsErrorOccurred>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e02a      	b.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d01e      	beq.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264e:	f7fe ff75 	bl	800153c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d113      	bne.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e007      	b.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d1cb      	bne.n	8002632 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b0:	e028      	b.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f830 	bl	800271c <I2C_IsErrorOccurred>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e026      	b.n	8002714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c6:	f7fe ff39 	bl	800153c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d113      	bne.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b20      	cmp	r3, #32
 8002710:	d1cf      	bne.n	80026b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d068      	beq.n	800281a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002750:	e049      	b.n	80027e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d045      	beq.n	80027e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe feef 	bl	800153c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_IsErrorOccurred+0x54>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d13a      	bne.n	80027e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002782:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800278e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002792:	d121      	bne.n	80027d8 <I2C_IsErrorOccurred+0xbc>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279a:	d01d      	beq.n	80027d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d01a      	beq.n	80027d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027b2:	f7fe fec3 	bl	800153c <HAL_GetTick>
 80027b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b8:	e00e      	b.n	80027d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027ba:	f7fe febf 	bl	800153c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b19      	cmp	r3, #25
 80027c6:	d907      	bls.n	80027d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f043 0320 	orr.w	r3, r3, #32
 80027ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80027d6:	e006      	b.n	80027e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d1e9      	bne.n	80027ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d003      	beq.n	80027fc <I2C_IsErrorOccurred+0xe0>
 80027f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0aa      	beq.n	8002752 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2220      	movs	r2, #32
 800280a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002880:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01c      	beq.n	80028ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff fe63 	bl	800255c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <I2C_IsErrorOccurred+0x1bc>)
 80028a2:	400b      	ands	r3, r1
 80028a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	fe00e800 	.word	0xfe00e800

080028dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	817b      	strh	r3, [r7, #10]
 80028ea:	4613      	mov	r3, r2
 80028ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ee:	897b      	ldrh	r3, [r7, #10]
 80028f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028f4:	7a7b      	ldrb	r3, [r7, #9]
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	4313      	orrs	r3, r2
 8002906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800290a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	0d5b      	lsrs	r3, r3, #21
 8002916:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <I2C_TransferConfig+0x60>)
 800291c:	430b      	orrs	r3, r1
 800291e:	43db      	mvns	r3, r3
 8002920:	ea02 0103 	and.w	r1, r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	03ff63ff 	.word	0x03ff63ff

08002940 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b20      	cmp	r3, #32
 8002954:	d138      	bne.n	80029c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002960:	2302      	movs	r3, #2
 8002962:	e032      	b.n	80029ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002992:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d139      	bne.n	8002a60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e033      	b.n	8002a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2224      	movs	r2, #36	; 0x24
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a70:	b08f      	sub	sp, #60	; 0x3c
 8002a72:	af0a      	add	r7, sp, #40	; 0x28
 8002a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e116      	b.n	8002cae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fc8a 	bl	80013b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 fa4c 	bl	8004f5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	687e      	ldr	r6, [r7, #4]
 8002acc:	466d      	mov	r5, sp
 8002ace:	f106 0410 	add.w	r4, r6, #16
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae2:	1d33      	adds	r3, r6, #4
 8002ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	f002 f9e0 	bl	8004eac <USB_CoreInit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0d7      	b.n	8002cae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 fa3a 	bl	8004f7e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	e04a      	b.n	8002ba6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333d      	adds	r3, #61	; 0x3d
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	333c      	adds	r3, #60	; 0x3c
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	b298      	uxth	r0, r3
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3344      	adds	r3, #68	; 0x44
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3340      	adds	r3, #64	; 0x40
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3348      	adds	r3, #72	; 0x48
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334c      	adds	r3, #76	; 0x4c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3354      	adds	r3, #84	; 0x54
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3af      	bcc.n	8002b10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e044      	b.n	8002c40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3b5      	bcc.n	8002bb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	687e      	ldr	r6, [r7, #4]
 8002c52:	466d      	mov	r5, sp
 8002c54:	f106 0410 	add.w	r4, r6, #16
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c68:	1d33      	adds	r3, r6, #4
 8002c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	f002 f9d3 	bl	8005018 <USB_DevInit>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e014      	b.n	8002cae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f80b 	bl	8002cb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fb91 	bl	80053ce <USB_DevDisconnect>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002cb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	10000003 	.word	0x10000003

08002d00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40007000 	.word	0x40007000

08002d20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d4e:	f7fe fbf5 	bl	800153c <HAL_GetTick>
 8002d52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d54:	e009      	b.n	8002d6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d56:	f7fe fbf1 	bl	800153c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d64:	d901      	bls.n	8002d6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e022      	b.n	8002db0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d1ee      	bne.n	8002d56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d84:	f7fe fbda 	bl	800153c <HAL_GetTick>
 8002d88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d8a:	e009      	b.n	8002da0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d8c:	f7fe fbd6 	bl	800153c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9a:	d901      	bls.n	8002da0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e007      	b.n	8002db0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dac:	d1ee      	bne.n	8002d8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000

08002dc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e29b      	b.n	800330e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8087 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de4:	4b96      	ldr	r3, [pc, #600]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df0:	4b93      	ldr	r3, [pc, #588]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_OscConfig+0x62>
 8002dfc:	4b90      	ldr	r3, [pc, #576]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	4b8d      	ldr	r3, [pc, #564]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x130>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d168      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e275      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x7a>
 8002e2c:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a83      	ldr	r2, [pc, #524]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e02e      	b.n	8002e98 <HAL_RCC_OscConfig+0xd8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x9c>
 8002e42:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7e      	ldr	r2, [pc, #504]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b7c      	ldr	r3, [pc, #496]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7b      	ldr	r2, [pc, #492]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xd8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0xc0>
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a75      	ldr	r2, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a72      	ldr	r2, [pc, #456]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xd8>
 8002e80:	4b6f      	ldr	r3, [pc, #444]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6e      	ldr	r2, [pc, #440]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6b      	ldr	r2, [pc, #428]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fb4c 	bl	800153c <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fb48 	bl	800153c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e229      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b61      	ldr	r3, [pc, #388]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe8>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fb38 	bl	800153c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fb34 	bl	800153c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e215      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x110>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d069      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efe:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0a:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x190>
 8002f16:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x17a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1e9      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	493d      	ldr	r1, [pc, #244]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e040      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a38      	ldr	r2, [pc, #224]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe faea 	bl	800153c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fae6 	bl	800153c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1c7      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4929      	ldr	r1, [pc, #164]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
 8002f9e:	e018      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fac6 	bl	800153c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fac2 	bl	800153c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1a3      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d038      	beq.n	8003050 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	4a15      	ldr	r2, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe faa3 	bl	800153c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fa9f 	bl	800153c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e180      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 800300e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x23a>
 8003018:	e01a      	b.n	8003050 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	4a08      	ldr	r2, [pc, #32]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7fe fa89 	bl	800153c <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302e:	f7fe fa85 	bl	800153c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d903      	bls.n	8003044 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e166      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
 8003040:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b92      	ldr	r3, [pc, #584]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a4 	beq.w	80031a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b8c      	ldr	r3, [pc, #560]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a88      	ldr	r2, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b86      	ldr	r3, [pc, #536]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003086:	4b83      	ldr	r3, [pc, #524]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003092:	4b80      	ldr	r3, [pc, #512]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7f      	ldr	r2, [pc, #508]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fe fa4d 	bl	800153c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7fe fa49 	bl	800153c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e12a      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b8:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x31a>
 80030cc:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6713      	str	r3, [r2, #112]	; 0x70
 80030d8:	e02d      	b.n	8003136 <HAL_RCC_OscConfig+0x376>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x33c>
 80030e2:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6713      	str	r3, [r2, #112]	; 0x70
 80030ee:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	e01c      	b.n	8003136 <HAL_RCC_OscConfig+0x376>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d10c      	bne.n	800311e <HAL_RCC_OscConfig+0x35e>
 8003104:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a5e      	ldr	r2, [pc, #376]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	e00b      	b.n	8003136 <HAL_RCC_OscConfig+0x376>
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	4b59      	ldr	r3, [pc, #356]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d015      	beq.n	800316a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fe f9fd 	bl	800153c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fe f9f9 	bl	800153c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0d8      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ee      	beq.n	8003146 <HAL_RCC_OscConfig+0x386>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe f9e7 	bl	800153c <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe f9e3 	bl	800153c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0c2      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a3c      	ldr	r2, [pc, #240]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80ae 	beq.w	800330c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d06d      	beq.n	8003298 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d14b      	bne.n	800325c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a31      	ldr	r2, [pc, #196]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe f9b4 	bl	800153c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe f9b0 	bl	800153c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e091      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	3b01      	subs	r3, #1
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	491b      	ldr	r1, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe f982 	bl	800153c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe f97e 	bl	800153c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e05f      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x47c>
 800325a:	e057      	b.n	800330c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe f968 	bl	800153c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe f964 	bl	800153c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e045      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x4b0>
 800328e:	e03d      	b.n	800330c <HAL_RCC_OscConfig+0x54c>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCC_OscConfig+0x558>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d030      	beq.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d129      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d122      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d119      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d10f      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800

0800331c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0d0      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 020f 	bic.w	r2, r3, #15
 800334a:	4965      	ldr	r1, [pc, #404]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d040      	beq.n	8003440 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d115      	bne.n	80033fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e073      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b39      	ldr	r3, [pc, #228]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4936      	ldr	r1, [pc, #216]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003410:	f7fe f894 	bl	800153c <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fe f890 	bl	800153c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e053      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d210      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 020f 	bic.w	r2, r3, #15
 8003456:	4922      	ldr	r1, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1cc>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1d0>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1d4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fe06 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	080097d4 	.word	0x080097d4
 80034ec:	20000010 	.word	0x20000010
 80034f0:	20000014 	.word	0x20000014

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b094      	sub	sp, #80	; 0x50
 80034fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003500:	2300      	movs	r3, #0
 8003502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003504:	2300      	movs	r3, #0
 8003506:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350c:	4b79      	ldr	r3, [pc, #484]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d00d      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x40>
 8003518:	2b08      	cmp	r3, #8
 800351a:	f200 80e1 	bhi.w	80036e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x34>
 8003522:	2b04      	cmp	r3, #4
 8003524:	d003      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x3a>
 8003526:	e0db      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800352c:	e0db      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003530:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003532:	e0d8      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003534:	4b6f      	ldr	r3, [pc, #444]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800353e:	4b6d      	ldr	r3, [pc, #436]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	2200      	movs	r2, #0
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
 8003554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355c:	633b      	str	r3, [r7, #48]	; 0x30
 800355e:	2300      	movs	r3, #0
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
 8003562:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003566:	4622      	mov	r2, r4
 8003568:	462b      	mov	r3, r5
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	0159      	lsls	r1, r3, #5
 8003574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003578:	0150      	lsls	r0, r2, #5
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4621      	mov	r1, r4
 8003580:	1a51      	subs	r1, r2, r1
 8003582:	6139      	str	r1, [r7, #16]
 8003584:	4629      	mov	r1, r5
 8003586:	eb63 0301 	sbc.w	r3, r3, r1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003598:	4659      	mov	r1, fp
 800359a:	018b      	lsls	r3, r1, #6
 800359c:	4651      	mov	r1, sl
 800359e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035a2:	4651      	mov	r1, sl
 80035a4:	018a      	lsls	r2, r1, #6
 80035a6:	4651      	mov	r1, sl
 80035a8:	ebb2 0801 	subs.w	r8, r2, r1
 80035ac:	4659      	mov	r1, fp
 80035ae:	eb63 0901 	sbc.w	r9, r3, r1
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c6:	4690      	mov	r8, r2
 80035c8:	4699      	mov	r9, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	eb18 0303 	adds.w	r3, r8, r3
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	462b      	mov	r3, r5
 80035d4:	eb49 0303 	adc.w	r3, r9, r3
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035e6:	4629      	mov	r1, r5
 80035e8:	024b      	lsls	r3, r1, #9
 80035ea:	4621      	mov	r1, r4
 80035ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035f0:	4621      	mov	r1, r4
 80035f2:	024a      	lsls	r2, r1, #9
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fa:	2200      	movs	r2, #0
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003600:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003604:	f7fc fe1c 	bl	8000240 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4613      	mov	r3, r2
 800360e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003610:	e058      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	2200      	movs	r2, #0
 800361a:	4618      	mov	r0, r3
 800361c:	4611      	mov	r1, r2
 800361e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	f04f 0000 	mov.w	r0, #0
 8003634:	f04f 0100 	mov.w	r1, #0
 8003638:	0159      	lsls	r1, r3, #5
 800363a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363e:	0150      	lsls	r0, r2, #5
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4641      	mov	r1, r8
 8003646:	ebb2 0a01 	subs.w	sl, r2, r1
 800364a:	4649      	mov	r1, r9
 800364c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800365c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003660:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003664:	ebb2 040a 	subs.w	r4, r2, sl
 8003668:	eb63 050b 	sbc.w	r5, r3, fp
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	00eb      	lsls	r3, r5, #3
 8003676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800367a:	00e2      	lsls	r2, r4, #3
 800367c:	4614      	mov	r4, r2
 800367e:	461d      	mov	r5, r3
 8003680:	4643      	mov	r3, r8
 8003682:	18e3      	adds	r3, r4, r3
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	464b      	mov	r3, r9
 8003688:	eb45 0303 	adc.w	r3, r5, r3
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800369a:	4629      	mov	r1, r5
 800369c:	028b      	lsls	r3, r1, #10
 800369e:	4621      	mov	r1, r4
 80036a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a4:	4621      	mov	r1, r4
 80036a6:	028a      	lsls	r2, r1, #10
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ae:	2200      	movs	r2, #0
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	61fa      	str	r2, [r7, #28]
 80036b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b8:	f7fc fdc2 	bl	8000240 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4613      	mov	r3, r2
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	3301      	adds	r3, #1
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80036d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80036e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3750      	adds	r7, #80	; 0x50
 80036ec:	46bd      	mov	sp, r7
 80036ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	00f42400 	.word	0x00f42400
 80036fc:	007a1200 	.word	0x007a1200

08003700 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCC_GetHCLKFreq+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000010 	.word	0x20000010

08003718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800371c:	f7ff fff0 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0a9b      	lsrs	r3, r3, #10
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4903      	ldr	r1, [pc, #12]	; (800373c <HAL_RCC_GetPCLK1Freq+0x24>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40023800 	.word	0x40023800
 800373c:	080097e4 	.word	0x080097e4

08003740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003744:	f7ff ffdc 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0b5b      	lsrs	r3, r3, #13
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4903      	ldr	r1, [pc, #12]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	080097e4 	.word	0x080097e4

08003768 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	220f      	movs	r2, #15
 8003776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_GetClockConfig+0x5c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0203 	and.w	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	08db      	lsrs	r3, r3, #3
 80037a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_RCC_GetClockConfig+0x60>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40023c00 	.word	0x40023c00

080037cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037f4:	4b69      	ldr	r3, [pc, #420]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a68      	ldr	r2, [pc, #416]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037fe:	6093      	str	r3, [r2, #8]
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	4964      	ldr	r1, [pc, #400]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d017      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003826:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	4959      	ldr	r1, [pc, #356]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d017      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003862:	4b4e      	ldr	r3, [pc, #312]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003868:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	494a      	ldr	r1, [pc, #296]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003880:	d101      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 808b 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4a39      	ldr	r2, [pc, #228]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6413      	str	r3, [r2, #64]	; 0x40
 80038bc:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038c8:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fd fe32 	bl	800153c <HAL_GetTick>
 80038d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038dc:	f7fd fe2e 	bl	800153c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	; 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e38f      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038ee:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d035      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	429a      	cmp	r2, r3
 8003916:	d02e      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003938:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800393a:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d114      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fd fdf6 	bl	800153c <HAL_GetTick>
 8003950:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	e00a      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fd fdf2 	bl	800153c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e351      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ee      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003982:	d111      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003992:	400b      	ands	r3, r1
 8003994:	4901      	ldr	r1, [pc, #4]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
 800399a:	e00b      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000
 80039a4:	0ffffcff 	.word	0x0ffffcff
 80039a8:	4bac      	ldr	r3, [pc, #688]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4aab      	ldr	r2, [pc, #684]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	4ba9      	ldr	r3, [pc, #676]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	49a6      	ldr	r1, [pc, #664]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039d2:	4ba2      	ldr	r3, [pc, #648]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	4aa0      	ldr	r2, [pc, #640]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039e2:	4b9e      	ldr	r3, [pc, #632]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	499b      	ldr	r1, [pc, #620]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a00:	4b96      	ldr	r3, [pc, #600]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0e:	4993      	ldr	r1, [pc, #588]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a22:	4b8e      	ldr	r3, [pc, #568]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a30:	498a      	ldr	r1, [pc, #552]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a44:	4b85      	ldr	r3, [pc, #532]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a52:	4982      	ldr	r1, [pc, #520]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a66:	4b7d      	ldr	r3, [pc, #500]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4979      	ldr	r1, [pc, #484]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a88:	4b74      	ldr	r3, [pc, #464]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4971      	ldr	r1, [pc, #452]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aaa:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f023 020c 	bic.w	r2, r3, #12
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab8:	4968      	ldr	r1, [pc, #416]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003acc:	4b63      	ldr	r3, [pc, #396]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	4960      	ldr	r1, [pc, #384]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aee:	4b5b      	ldr	r3, [pc, #364]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	4957      	ldr	r1, [pc, #348]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b10:	4b52      	ldr	r3, [pc, #328]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	494f      	ldr	r1, [pc, #316]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b32:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	4946      	ldr	r1, [pc, #280]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	493e      	ldr	r1, [pc, #248]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b76:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b84:	4935      	ldr	r1, [pc, #212]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b98:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba6:	492d      	ldr	r1, [pc, #180]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d011      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bba:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc8:	4924      	ldr	r1, [pc, #144]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd8:	d101      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c08:	4914      	ldr	r1, [pc, #80]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2c:	490b      	ldr	r1, [pc, #44]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00f      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c50:	4902      	ldr	r1, [pc, #8]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c58:	e002      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00b      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c6c:	4b8a      	ldr	r3, [pc, #552]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	4986      	ldr	r1, [pc, #536]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c90:	4b81      	ldr	r3, [pc, #516]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca0:	497d      	ldr	r1, [pc, #500]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d006      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80d6 	beq.w	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cbc:	4b76      	ldr	r3, [pc, #472]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a75      	ldr	r2, [pc, #468]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc8:	f7fd fc38 	bl	800153c <HAL_GetTick>
 8003ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd0:	f7fd fc34 	bl	800153c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e195      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce2:	4b6d      	ldr	r3, [pc, #436]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d021      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11d      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d02:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d10:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	0e1b      	lsrs	r3, r3, #24
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	019a      	lsls	r2, r3, #6
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	071b      	lsls	r3, r3, #28
 8003d36:	4958      	ldr	r1, [pc, #352]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02e      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d68:	d129      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d78:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	0f1b      	lsrs	r3, r3, #28
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	493e      	ldr	r1, [pc, #248]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003da6:	4b3c      	ldr	r3, [pc, #240]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dac:	f023 021f 	bic.w	r2, r3, #31
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	3b01      	subs	r3, #1
 8003db6:	4938      	ldr	r1, [pc, #224]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01d      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd0:	0e1b      	lsrs	r3, r3, #24
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd8:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dde:	0f1b      	lsrs	r3, r3, #28
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	019a      	lsls	r2, r3, #6
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	431a      	orrs	r2, r3
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	061b      	lsls	r3, r3, #24
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	071b      	lsls	r3, r3, #28
 8003dfe:	4926      	ldr	r1, [pc, #152]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d011      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	019a      	lsls	r2, r3, #6
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	491a      	ldr	r1, [pc, #104]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e36:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e42:	f7fd fb7b 	bl	800153c <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e4a:	f7fd fb77 	bl	800153c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0d8      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	f040 80ce 	bne.w	800400c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fd fb5e 	bl	800153c <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e82:	e00b      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e84:	f7fd fb5a 	bl	800153c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d904      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0bb      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea8:	d0ec      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d12a      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ed2:	4b51      	ldr	r3, [pc, #324]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ee0:	4b4d      	ldr	r3, [pc, #308]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	0f1b      	lsrs	r3, r3, #28
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	019a      	lsls	r2, r3, #6
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	061b      	lsls	r3, r3, #24
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	071b      	lsls	r3, r3, #28
 8003f06:	4944      	ldr	r1, [pc, #272]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f0e:	4b42      	ldr	r3, [pc, #264]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	493d      	ldr	r1, [pc, #244]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3c:	d11d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	0e1b      	lsrs	r3, r3, #24
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f4c:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	0f1b      	lsrs	r3, r3, #28
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	019a      	lsls	r2, r3, #6
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	061b      	lsls	r3, r3, #24
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	071b      	lsls	r3, r3, #28
 8003f72:	4929      	ldr	r1, [pc, #164]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	0e1b      	lsrs	r3, r3, #24
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	019a      	lsls	r2, r3, #6
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	071b      	lsls	r3, r3, #28
 8003fba:	4917      	ldr	r1, [pc, #92]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4911      	ldr	r1, [pc, #68]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fd faaa 	bl	800153c <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fec:	f7fd faa6 	bl	800153c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e007      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800400a:	d1ef      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800

0800401c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e049      	b.n	80040c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f841 	bl	80040ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fa00 	bl	8004460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d001      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e054      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x80>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d01d      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x80>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x80>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x80>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <HAL_TIM_Base_Start_IT+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x80>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d115      	bne.n	800418c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_TIM_Base_Start_IT+0xec>)
 8004168:	4013      	ands	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d015      	beq.n	800419e <HAL_TIM_Base_Start_IT+0xbe>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d011      	beq.n	800419e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	e008      	b.n	800419e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e000      	b.n	80041a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40010400 	.word	0x40010400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40001800 	.word	0x40001800
 80041cc:	00010007 	.word	0x00010007

080041d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0202 	mvn.w	r2, #2
 80041fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f905 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8f7 	bl	800440e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f908 	bl	8004436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d122      	bne.n	8004280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b04      	cmp	r3, #4
 8004246:	d11b      	bne.n	8004280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0204 	mvn.w	r2, #4
 8004250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f8db 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8cd 	bl	800440e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f8de 	bl	8004436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b08      	cmp	r3, #8
 800428c:	d122      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b08      	cmp	r3, #8
 800429a:	d11b      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0208 	mvn.w	r2, #8
 80042a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2204      	movs	r2, #4
 80042aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8b1 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 80042c0:	e005      	b.n	80042ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8a3 	bl	800440e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f8b4 	bl	8004436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d122      	bne.n	8004328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d11b      	bne.n	8004328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0210 	mvn.w	r2, #16
 80042f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2208      	movs	r2, #8
 80042fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f887 	bl	8004422 <HAL_TIM_IC_CaptureCallback>
 8004314:	e005      	b.n	8004322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f879 	bl	800440e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f88a 	bl	8004436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10e      	bne.n	8004354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0201 	mvn.w	r2, #1
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fc fc4c 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b80      	cmp	r3, #128	; 0x80
 800436e:	d107      	bne.n	8004380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f91a 	bl	80045b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438e:	d10e      	bne.n	80043ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d107      	bne.n	80043ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f90d 	bl	80045c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d10e      	bne.n	80043da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d107      	bne.n	80043da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f838 	bl	800444a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d10e      	bne.n	8004406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d107      	bne.n	8004406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f06f 0220 	mvn.w	r2, #32
 80043fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f8cd 	bl	80045a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a40      	ldr	r2, [pc, #256]	; (8004574 <TIM_Base_SetConfig+0x114>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d013      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d00f      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3d      	ldr	r2, [pc, #244]	; (8004578 <TIM_Base_SetConfig+0x118>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00b      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3c      	ldr	r2, [pc, #240]	; (800457c <TIM_Base_SetConfig+0x11c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3b      	ldr	r2, [pc, #236]	; (8004580 <TIM_Base_SetConfig+0x120>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3a      	ldr	r2, [pc, #232]	; (8004584 <TIM_Base_SetConfig+0x124>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d108      	bne.n	80044b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <TIM_Base_SetConfig+0x114>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d02b      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d027      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <TIM_Base_SetConfig+0x118>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d023      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2b      	ldr	r2, [pc, #172]	; (800457c <TIM_Base_SetConfig+0x11c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01f      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <TIM_Base_SetConfig+0x120>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01b      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a29      	ldr	r2, [pc, #164]	; (8004584 <TIM_Base_SetConfig+0x124>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d017      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a28      	ldr	r2, [pc, #160]	; (8004588 <TIM_Base_SetConfig+0x128>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <TIM_Base_SetConfig+0x12c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00f      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a26      	ldr	r2, [pc, #152]	; (8004590 <TIM_Base_SetConfig+0x130>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a25      	ldr	r2, [pc, #148]	; (8004594 <TIM_Base_SetConfig+0x134>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a24      	ldr	r2, [pc, #144]	; (8004598 <TIM_Base_SetConfig+0x138>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a23      	ldr	r2, [pc, #140]	; (800459c <TIM_Base_SetConfig+0x13c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d108      	bne.n	8004524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <TIM_Base_SetConfig+0x114>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0xf8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <TIM_Base_SetConfig+0x124>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d103      	bne.n	8004560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	615a      	str	r2, [r3, #20]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40010400 	.word	0x40010400
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800
 8004594:	40001800 	.word	0x40001800
 8004598:	40001c00 	.word	0x40001c00
 800459c:	40002000 	.word	0x40002000

080045a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e040      	b.n	8004670 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc fe4a 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f82c 	bl	8004678 <UART_SetConfig>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e022      	b.n	8004670 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fa84 	bl	8004b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fb0b 	bl	8004c84 <UART_CheckIdleState>
 800466e:	4603      	mov	r3, r0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4ba6      	ldr	r3, [pc, #664]	; (800493c <UART_SetConfig+0x2c4>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a94      	ldr	r2, [pc, #592]	; (8004940 <UART_SetConfig+0x2c8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d120      	bne.n	8004736 <UART_SetConfig+0xbe>
 80046f4:	4b93      	ldr	r3, [pc, #588]	; (8004944 <UART_SetConfig+0x2cc>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d816      	bhi.n	8004730 <UART_SetConfig+0xb8>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <UART_SetConfig+0x90>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004719 	.word	0x08004719
 800470c:	08004725 	.word	0x08004725
 8004710:	0800471f 	.word	0x0800471f
 8004714:	0800472b 	.word	0x0800472b
 8004718:	2301      	movs	r3, #1
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e150      	b.n	80049c0 <UART_SetConfig+0x348>
 800471e:	2302      	movs	r3, #2
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e14d      	b.n	80049c0 <UART_SetConfig+0x348>
 8004724:	2304      	movs	r3, #4
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e14a      	b.n	80049c0 <UART_SetConfig+0x348>
 800472a:	2308      	movs	r3, #8
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e147      	b.n	80049c0 <UART_SetConfig+0x348>
 8004730:	2310      	movs	r3, #16
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e144      	b.n	80049c0 <UART_SetConfig+0x348>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a83      	ldr	r2, [pc, #524]	; (8004948 <UART_SetConfig+0x2d0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d132      	bne.n	80047a6 <UART_SetConfig+0x12e>
 8004740:	4b80      	ldr	r3, [pc, #512]	; (8004944 <UART_SetConfig+0x2cc>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d828      	bhi.n	80047a0 <UART_SetConfig+0x128>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0xdc>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004789 	.word	0x08004789
 8004758:	080047a1 	.word	0x080047a1
 800475c:	080047a1 	.word	0x080047a1
 8004760:	080047a1 	.word	0x080047a1
 8004764:	08004795 	.word	0x08004795
 8004768:	080047a1 	.word	0x080047a1
 800476c:	080047a1 	.word	0x080047a1
 8004770:	080047a1 	.word	0x080047a1
 8004774:	0800478f 	.word	0x0800478f
 8004778:	080047a1 	.word	0x080047a1
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a1 	.word	0x080047a1
 8004784:	0800479b 	.word	0x0800479b
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e118      	b.n	80049c0 <UART_SetConfig+0x348>
 800478e:	2302      	movs	r3, #2
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e115      	b.n	80049c0 <UART_SetConfig+0x348>
 8004794:	2304      	movs	r3, #4
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e112      	b.n	80049c0 <UART_SetConfig+0x348>
 800479a:	2308      	movs	r3, #8
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e10f      	b.n	80049c0 <UART_SetConfig+0x348>
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e10c      	b.n	80049c0 <UART_SetConfig+0x348>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a68      	ldr	r2, [pc, #416]	; (800494c <UART_SetConfig+0x2d4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d120      	bne.n	80047f2 <UART_SetConfig+0x17a>
 80047b0:	4b64      	ldr	r3, [pc, #400]	; (8004944 <UART_SetConfig+0x2cc>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ba:	2b30      	cmp	r3, #48	; 0x30
 80047bc:	d013      	beq.n	80047e6 <UART_SetConfig+0x16e>
 80047be:	2b30      	cmp	r3, #48	; 0x30
 80047c0:	d814      	bhi.n	80047ec <UART_SetConfig+0x174>
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d009      	beq.n	80047da <UART_SetConfig+0x162>
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d810      	bhi.n	80047ec <UART_SetConfig+0x174>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <UART_SetConfig+0x15c>
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d006      	beq.n	80047e0 <UART_SetConfig+0x168>
 80047d2:	e00b      	b.n	80047ec <UART_SetConfig+0x174>
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e0f2      	b.n	80049c0 <UART_SetConfig+0x348>
 80047da:	2302      	movs	r3, #2
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e0ef      	b.n	80049c0 <UART_SetConfig+0x348>
 80047e0:	2304      	movs	r3, #4
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e0ec      	b.n	80049c0 <UART_SetConfig+0x348>
 80047e6:	2308      	movs	r3, #8
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e0e9      	b.n	80049c0 <UART_SetConfig+0x348>
 80047ec:	2310      	movs	r3, #16
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e0e6      	b.n	80049c0 <UART_SetConfig+0x348>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a56      	ldr	r2, [pc, #344]	; (8004950 <UART_SetConfig+0x2d8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d120      	bne.n	800483e <UART_SetConfig+0x1c6>
 80047fc:	4b51      	ldr	r3, [pc, #324]	; (8004944 <UART_SetConfig+0x2cc>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004806:	2bc0      	cmp	r3, #192	; 0xc0
 8004808:	d013      	beq.n	8004832 <UART_SetConfig+0x1ba>
 800480a:	2bc0      	cmp	r3, #192	; 0xc0
 800480c:	d814      	bhi.n	8004838 <UART_SetConfig+0x1c0>
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d009      	beq.n	8004826 <UART_SetConfig+0x1ae>
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d810      	bhi.n	8004838 <UART_SetConfig+0x1c0>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <UART_SetConfig+0x1a8>
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d006      	beq.n	800482c <UART_SetConfig+0x1b4>
 800481e:	e00b      	b.n	8004838 <UART_SetConfig+0x1c0>
 8004820:	2300      	movs	r3, #0
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e0cc      	b.n	80049c0 <UART_SetConfig+0x348>
 8004826:	2302      	movs	r3, #2
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e0c9      	b.n	80049c0 <UART_SetConfig+0x348>
 800482c:	2304      	movs	r3, #4
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e0c6      	b.n	80049c0 <UART_SetConfig+0x348>
 8004832:	2308      	movs	r3, #8
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e0c3      	b.n	80049c0 <UART_SetConfig+0x348>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e0c0      	b.n	80049c0 <UART_SetConfig+0x348>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a44      	ldr	r2, [pc, #272]	; (8004954 <UART_SetConfig+0x2dc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d125      	bne.n	8004894 <UART_SetConfig+0x21c>
 8004848:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <UART_SetConfig+0x2cc>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004856:	d017      	beq.n	8004888 <UART_SetConfig+0x210>
 8004858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485c:	d817      	bhi.n	800488e <UART_SetConfig+0x216>
 800485e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004862:	d00b      	beq.n	800487c <UART_SetConfig+0x204>
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d811      	bhi.n	800488e <UART_SetConfig+0x216>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <UART_SetConfig+0x1fe>
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d006      	beq.n	8004882 <UART_SetConfig+0x20a>
 8004874:	e00b      	b.n	800488e <UART_SetConfig+0x216>
 8004876:	2300      	movs	r3, #0
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e0a1      	b.n	80049c0 <UART_SetConfig+0x348>
 800487c:	2302      	movs	r3, #2
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e09e      	b.n	80049c0 <UART_SetConfig+0x348>
 8004882:	2304      	movs	r3, #4
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e09b      	b.n	80049c0 <UART_SetConfig+0x348>
 8004888:	2308      	movs	r3, #8
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e098      	b.n	80049c0 <UART_SetConfig+0x348>
 800488e:	2310      	movs	r3, #16
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e095      	b.n	80049c0 <UART_SetConfig+0x348>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <UART_SetConfig+0x2e0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d125      	bne.n	80048ea <UART_SetConfig+0x272>
 800489e:	4b29      	ldr	r3, [pc, #164]	; (8004944 <UART_SetConfig+0x2cc>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ac:	d017      	beq.n	80048de <UART_SetConfig+0x266>
 80048ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048b2:	d817      	bhi.n	80048e4 <UART_SetConfig+0x26c>
 80048b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b8:	d00b      	beq.n	80048d2 <UART_SetConfig+0x25a>
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048be:	d811      	bhi.n	80048e4 <UART_SetConfig+0x26c>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <UART_SetConfig+0x254>
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c8:	d006      	beq.n	80048d8 <UART_SetConfig+0x260>
 80048ca:	e00b      	b.n	80048e4 <UART_SetConfig+0x26c>
 80048cc:	2301      	movs	r3, #1
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e076      	b.n	80049c0 <UART_SetConfig+0x348>
 80048d2:	2302      	movs	r3, #2
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e073      	b.n	80049c0 <UART_SetConfig+0x348>
 80048d8:	2304      	movs	r3, #4
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e070      	b.n	80049c0 <UART_SetConfig+0x348>
 80048de:	2308      	movs	r3, #8
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e06d      	b.n	80049c0 <UART_SetConfig+0x348>
 80048e4:	2310      	movs	r3, #16
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e06a      	b.n	80049c0 <UART_SetConfig+0x348>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1b      	ldr	r2, [pc, #108]	; (800495c <UART_SetConfig+0x2e4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d138      	bne.n	8004966 <UART_SetConfig+0x2ee>
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <UART_SetConfig+0x2cc>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004902:	d017      	beq.n	8004934 <UART_SetConfig+0x2bc>
 8004904:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004908:	d82a      	bhi.n	8004960 <UART_SetConfig+0x2e8>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490e:	d00b      	beq.n	8004928 <UART_SetConfig+0x2b0>
 8004910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004914:	d824      	bhi.n	8004960 <UART_SetConfig+0x2e8>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <UART_SetConfig+0x2aa>
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d006      	beq.n	800492e <UART_SetConfig+0x2b6>
 8004920:	e01e      	b.n	8004960 <UART_SetConfig+0x2e8>
 8004922:	2300      	movs	r3, #0
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e04b      	b.n	80049c0 <UART_SetConfig+0x348>
 8004928:	2302      	movs	r3, #2
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e048      	b.n	80049c0 <UART_SetConfig+0x348>
 800492e:	2304      	movs	r3, #4
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e045      	b.n	80049c0 <UART_SetConfig+0x348>
 8004934:	2308      	movs	r3, #8
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e042      	b.n	80049c0 <UART_SetConfig+0x348>
 800493a:	bf00      	nop
 800493c:	efff69f3 	.word	0xefff69f3
 8004940:	40011000 	.word	0x40011000
 8004944:	40023800 	.word	0x40023800
 8004948:	40004400 	.word	0x40004400
 800494c:	40004800 	.word	0x40004800
 8004950:	40004c00 	.word	0x40004c00
 8004954:	40005000 	.word	0x40005000
 8004958:	40011400 	.word	0x40011400
 800495c:	40007800 	.word	0x40007800
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e02c      	b.n	80049c0 <UART_SetConfig+0x348>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a72      	ldr	r2, [pc, #456]	; (8004b34 <UART_SetConfig+0x4bc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d125      	bne.n	80049bc <UART_SetConfig+0x344>
 8004970:	4b71      	ldr	r3, [pc, #452]	; (8004b38 <UART_SetConfig+0x4c0>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800497a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800497e:	d017      	beq.n	80049b0 <UART_SetConfig+0x338>
 8004980:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004984:	d817      	bhi.n	80049b6 <UART_SetConfig+0x33e>
 8004986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498a:	d00b      	beq.n	80049a4 <UART_SetConfig+0x32c>
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	d811      	bhi.n	80049b6 <UART_SetConfig+0x33e>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <UART_SetConfig+0x326>
 8004996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499a:	d006      	beq.n	80049aa <UART_SetConfig+0x332>
 800499c:	e00b      	b.n	80049b6 <UART_SetConfig+0x33e>
 800499e:	2300      	movs	r3, #0
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e00d      	b.n	80049c0 <UART_SetConfig+0x348>
 80049a4:	2302      	movs	r3, #2
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e00a      	b.n	80049c0 <UART_SetConfig+0x348>
 80049aa:	2304      	movs	r3, #4
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e007      	b.n	80049c0 <UART_SetConfig+0x348>
 80049b0:	2308      	movs	r3, #8
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e004      	b.n	80049c0 <UART_SetConfig+0x348>
 80049b6:	2310      	movs	r3, #16
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e001      	b.n	80049c0 <UART_SetConfig+0x348>
 80049bc:	2310      	movs	r3, #16
 80049be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c8:	d15b      	bne.n	8004a82 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d828      	bhi.n	8004a22 <UART_SetConfig+0x3aa>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x360>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004a23 	.word	0x08004a23
 80049e8:	08004a13 	.word	0x08004a13
 80049ec:	08004a23 	.word	0x08004a23
 80049f0:	08004a23 	.word	0x08004a23
 80049f4:	08004a23 	.word	0x08004a23
 80049f8:	08004a1b 	.word	0x08004a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fc:	f7fe fe8c 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8004a00:	61b8      	str	r0, [r7, #24]
        break;
 8004a02:	e013      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a04:	f7fe fe9c 	bl	8003740 <HAL_RCC_GetPCLK2Freq>
 8004a08:	61b8      	str	r0, [r7, #24]
        break;
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <UART_SetConfig+0x4c4>)
 8004a0e:	61bb      	str	r3, [r7, #24]
        break;
 8004a10:	e00c      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a12:	f7fe fd6f 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8004a16:	61b8      	str	r0, [r7, #24]
        break;
 8004a18:	e008      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1e:	61bb      	str	r3, [r7, #24]
        break;
 8004a20:	e004      	b.n	8004a2c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	77bb      	strb	r3, [r7, #30]
        break;
 8004a2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d074      	beq.n	8004b1c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	005a      	lsls	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	441a      	add	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b0f      	cmp	r3, #15
 8004a4c:	d916      	bls.n	8004a7c <UART_SetConfig+0x404>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d212      	bcs.n	8004a7c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f023 030f 	bic.w	r3, r3, #15
 8004a5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	89fa      	ldrh	r2, [r7, #14]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e04f      	b.n	8004b1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	77bb      	strb	r3, [r7, #30]
 8004a80:	e04c      	b.n	8004b1c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a82:	7ffb      	ldrb	r3, [r7, #31]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d828      	bhi.n	8004ada <UART_SetConfig+0x462>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x418>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004acb 	.word	0x08004acb
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fe fe30 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	61b8      	str	r0, [r7, #24]
        break;
 8004aba:	e013      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7fe fe40 	bl	8003740 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	61b8      	str	r0, [r7, #24]
        break;
 8004ac2:	e00f      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <UART_SetConfig+0x4c4>)
 8004ac6:	61bb      	str	r3, [r7, #24]
        break;
 8004ac8:	e00c      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7fe fd13 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8004ace:	61b8      	str	r0, [r7, #24]
        break;
 8004ad0:	e008      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad6:	61bb      	str	r3, [r7, #24]
        break;
 8004ad8:	e004      	b.n	8004ae4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ae2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	085a      	lsrs	r2, r3, #1
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	441a      	add	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	d909      	bls.n	8004b18 <UART_SetConfig+0x4a0>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d205      	bcs.n	8004b18 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	e001      	b.n	8004b1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b28:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40007c00 	.word	0x40007c00
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400

08004b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3e:	d10a      	bne.n	8004c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c94:	f7fc fc52 	bl	800153c <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d10e      	bne.n	8004cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f831 	bl	8004d1e <UART_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e027      	b.n	8004d16 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d10e      	bne.n	8004cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f81b 	bl	8004d1e <UART_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e011      	b.n	8004d16 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b09c      	sub	sp, #112	; 0x70
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2e:	e0a7      	b.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	f000 80a3 	beq.w	8004e80 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fc fbff 	bl	800153c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d13f      	bne.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d64:	667b      	str	r3, [r7, #100]	; 0x64
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e6      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004da2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004da4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e5      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e068      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d050      	beq.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dec:	d148      	bne.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
 8004e18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e6      	bne.n	8004df8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e4a:	623a      	str	r2, [r7, #32]
 8004e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	69f9      	ldr	r1, [r7, #28]
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e5      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e010      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	f43f af48 	beq.w	8004d30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3770      	adds	r7, #112	; 0x70
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eac:	b084      	sub	sp, #16
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	f107 001c 	add.w	r0, r7, #28
 8004eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d120      	bne.n	8004f06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <USB_CoreInit+0xac>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa96 	bl	800542c <USB_CoreReset>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e010      	b.n	8004f28 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa8a 	bl	800542c <USB_CoreReset>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d10b      	bne.n	8004f46 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f043 0206 	orr.w	r2, r3, #6
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f52:	b004      	add	sp, #16
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	ffbdffbf 	.word	0xffbdffbf

08004f5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f023 0201 	bic.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d115      	bne.n	8004fcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fac:	2001      	movs	r0, #1
 8004fae:	f7fc fad1 	bl	8001554 <HAL_Delay>
      ms++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa29 	bl	8005410 <USB_GetMode>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d01e      	beq.n	8005002 <USB_SetCurrentMode+0x84>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b31      	cmp	r3, #49	; 0x31
 8004fc8:	d9f0      	bls.n	8004fac <USB_SetCurrentMode+0x2e>
 8004fca:	e01a      	b.n	8005002 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d115      	bne.n	8004ffe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f7fc fab8 	bl	8001554 <HAL_Delay>
      ms++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa10 	bl	8005410 <USB_GetMode>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <USB_SetCurrentMode+0x84>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b31      	cmp	r3, #49	; 0x31
 8004ffa:	d9f0      	bls.n	8004fde <USB_SetCurrentMode+0x60>
 8004ffc:	e001      	b.n	8005002 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e005      	b.n	800500e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b32      	cmp	r3, #50	; 0x32
 8005006:	d101      	bne.n	800500c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005018:	b084      	sub	sp, #16
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e009      	b.n	800504c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3340      	adds	r3, #64	; 0x40
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	2200      	movs	r2, #0
 8005044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3301      	adds	r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b0e      	cmp	r3, #14
 8005050:	d9f2      	bls.n	8005038 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11c      	bne.n	8005092 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e005      	b.n	800509e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050a4:	461a      	mov	r2, r3
 80050a6:	2300      	movs	r3, #0
 80050a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	4619      	mov	r1, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	461a      	mov	r2, r3
 80050ba:	680b      	ldr	r3, [r1, #0]
 80050bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d10c      	bne.n	80050de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050ca:	2100      	movs	r1, #0
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f965 	bl	800539c <USB_SetDevSpeed>
 80050d2:	e008      	b.n	80050e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050d4:	2101      	movs	r1, #1
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f960 	bl	800539c <USB_SetDevSpeed>
 80050dc:	e003      	b.n	80050e6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050de:	2103      	movs	r1, #3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f95b 	bl	800539c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050e6:	2110      	movs	r1, #16
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f8f3 	bl	80052d4 <USB_FlushTxFifo>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f91f 	bl	800533c <USB_FlushRxFifo>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	461a      	mov	r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	461a      	mov	r2, r3
 800511c:	2300      	movs	r3, #0
 800511e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e043      	b.n	80051ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005148:	d118      	bne.n	800517c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	e013      	b.n	800518e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	461a      	mov	r2, r3
 8005174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e008      	b.n	800518e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	461a      	mov	r2, r3
 800518a:	2300      	movs	r3, #0
 800518c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	461a      	mov	r2, r3
 800519c:	2300      	movs	r3, #0
 800519e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	461a      	mov	r2, r3
 80051ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	3301      	adds	r3, #1
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d3b7      	bcc.n	8005132 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e043      	b.n	8005250 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051de:	d118      	bne.n	8005212 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	461a      	mov	r2, r3
 80051f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e013      	b.n	8005224 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	461a      	mov	r2, r3
 800520a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	e008      	b.n	8005224 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	461a      	mov	r2, r3
 8005220:	2300      	movs	r3, #0
 8005222:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	461a      	mov	r2, r3
 8005232:	2300      	movs	r3, #0
 8005234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005242:	461a      	mov	r2, r3
 8005244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3301      	adds	r3, #1
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	429a      	cmp	r2, r3
 8005256:	d3b7      	bcc.n	80051c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800526a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005278:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f043 0210 	orr.w	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <USB_DevInit+0x2b4>)
 8005292:	4313      	orrs	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f043 0208 	orr.w	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <USB_DevInit+0x2b8>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c8:	b004      	add	sp, #16
 80052ca:	4770      	bx	lr
 80052cc:	803c3800 	.word	0x803c3800
 80052d0:	40000004 	.word	0x40000004

080052d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4a13      	ldr	r2, [pc, #76]	; (8005338 <USB_FlushTxFifo+0x64>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e01b      	b.n	800532c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	daf2      	bge.n	80052e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	019b      	lsls	r3, r3, #6
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <USB_FlushTxFifo+0x64>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e006      	b.n	800532c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b20      	cmp	r3, #32
 8005328:	d0f0      	beq.n	800530c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	00030d40 	.word	0x00030d40

0800533c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4a11      	ldr	r2, [pc, #68]	; (8005398 <USB_FlushRxFifo+0x5c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e018      	b.n	800538c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	daf2      	bge.n	8005348 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2210      	movs	r2, #16
 800536a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <USB_FlushRxFifo+0x5c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e006      	b.n	800538c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b10      	cmp	r3, #16
 8005388:	d0f0      	beq.n	800536c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	00030d40 	.word	0x00030d40

0800539c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053e8:	f023 0303 	bic.w	r3, r3, #3
 80053ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fc:	f043 0302 	orr.w	r3, r3, #2
 8005400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f003 0301 	and.w	r3, r3, #1
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a13      	ldr	r2, [pc, #76]	; (8005490 <USB_CoreReset+0x64>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e01b      	b.n	8005482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	daf2      	bge.n	8005438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3301      	adds	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <USB_CoreReset+0x64>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d901      	bls.n	8005474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e006      	b.n	8005482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d0f0      	beq.n	8005462 <USB_CoreReset+0x36>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	00030d40 	.word	0x00030d40

08005494 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054aa:	f3ef 8305 	mrs	r3, IPSR
 80054ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80054b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10f      	bne.n	80054d6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ba:	607b      	str	r3, [r7, #4]
  return(result);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d105      	bne.n	80054ce <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054c2:	f3ef 8311 	mrs	r3, BASEPRI
 80054c6:	603b      	str	r3, [r7, #0]
  return(result);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <osKernelInitialize+0x3a>
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <osKernelInitialize+0x64>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d103      	bne.n	80054de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80054d6:	f06f 0305 	mvn.w	r3, #5
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e00c      	b.n	80054f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054de:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <osKernelInitialize+0x64>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <osKernelInitialize+0x64>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e002      	b.n	80054f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000d00 	.word	0x20000d00

0800550c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005512:	f3ef 8305 	mrs	r3, IPSR
 8005516:	60bb      	str	r3, [r7, #8]
  return(result);
 8005518:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551e:	f3ef 8310 	mrs	r3, PRIMASK
 8005522:	607b      	str	r3, [r7, #4]
  return(result);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800552a:	f3ef 8311 	mrs	r3, BASEPRI
 800552e:	603b      	str	r3, [r7, #0]
  return(result);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <osKernelStart+0x3a>
 8005536:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <osKernelStart+0x68>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d103      	bne.n	8005546 <osKernelStart+0x3a>
    stat = osErrorISR;
 800553e:	f06f 0305 	mvn.w	r3, #5
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e010      	b.n	8005568 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <osKernelStart+0x68>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d109      	bne.n	8005562 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800554e:	f7ff ffa1 	bl	8005494 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <osKernelStart+0x68>)
 8005554:	2202      	movs	r2, #2
 8005556:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005558:	f001 f8ca 	bl	80066f0 <vTaskStartScheduler>
      stat = osOK;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e002      	b.n	8005568 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005568:	68fb      	ldr	r3, [r7, #12]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000d00 	.word	0x20000d00

08005578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b090      	sub	sp, #64	; 0x40
 800557c:	af04      	add	r7, sp, #16
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005588:	f3ef 8305 	mrs	r3, IPSR
 800558c:	61fb      	str	r3, [r7, #28]
  return(result);
 800558e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 808f 	bne.w	80056b4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005596:	f3ef 8310 	mrs	r3, PRIMASK
 800559a:	61bb      	str	r3, [r7, #24]
  return(result);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	617b      	str	r3, [r7, #20]
  return(result);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <osThreadNew+0x3e>
 80055ae:	4b44      	ldr	r3, [pc, #272]	; (80056c0 <osThreadNew+0x148>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d07e      	beq.n	80056b4 <osThreadNew+0x13c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d07b      	beq.n	80056b4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80055c0:	2318      	movs	r3, #24
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d045      	beq.n	8005660 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <osThreadNew+0x6a>
        name = attr->name;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <osThreadNew+0x90>
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	2b38      	cmp	r3, #56	; 0x38
 80055fa:	d805      	bhi.n	8005608 <osThreadNew+0x90>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <osThreadNew+0x94>
        return (NULL);
 8005608:	2300      	movs	r3, #0
 800560a:	e054      	b.n	80056b6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <osThreadNew+0xca>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2ba7      	cmp	r3, #167	; 0xa7
 800562a:	d90a      	bls.n	8005642 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005630:	2b00      	cmp	r3, #0
 8005632:	d006      	beq.n	8005642 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <osThreadNew+0xca>
        mem = 1;
 800563c:	2301      	movs	r3, #1
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	e010      	b.n	8005664 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <osThreadNew+0xec>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d108      	bne.n	8005664 <osThreadNew+0xec>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <osThreadNew+0xec>
          mem = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	e001      	b.n	8005664 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d110      	bne.n	800568c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005672:	9202      	str	r2, [sp, #8]
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800567e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fe3f 	bl	8006304 <xTaskCreateStatic>
 8005686:	4603      	mov	r3, r0
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	e013      	b.n	80056b4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d110      	bne.n	80056b4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	b29a      	uxth	r2, r3
 8005696:	f107 0310 	add.w	r3, r7, #16
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fe90 	bl	80063ca <xTaskCreate>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <osThreadNew+0x13c>
          hTask = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056b4:	693b      	ldr	r3, [r7, #16]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3730      	adds	r7, #48	; 0x30
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000d00 	.word	0x20000d00

080056c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056cc:	f3ef 8305 	mrs	r3, IPSR
 80056d0:	613b      	str	r3, [r7, #16]
  return(result);
 80056d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10f      	bne.n	80056f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d8:	f3ef 8310 	mrs	r3, PRIMASK
 80056dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056e4:	f3ef 8311 	mrs	r3, BASEPRI
 80056e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <osDelay+0x3c>
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <osDelay+0x58>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d103      	bne.n	8005700 <osDelay+0x3c>
    stat = osErrorISR;
 80056f8:	f06f 0305 	mvn.w	r3, #5
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e007      	b.n	8005710 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <osDelay+0x4c>
      vTaskDelay(ticks);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 ffba 	bl	8006684 <vTaskDelay>
    }
  }

  return (stat);
 8005710:	697b      	ldr	r3, [r7, #20]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000d00 	.word	0x20000d00

08005720 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a07      	ldr	r2, [pc, #28]	; (800574c <vApplicationGetIdleTaskMemory+0x2c>)
 8005730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a06      	ldr	r2, [pc, #24]	; (8005750 <vApplicationGetIdleTaskMemory+0x30>)
 8005736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000d04 	.word	0x20000d04
 8005750:	20000dac 	.word	0x20000dac

08005754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a07      	ldr	r2, [pc, #28]	; (8005780 <vApplicationGetTimerTaskMemory+0x2c>)
 8005764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4a06      	ldr	r2, [pc, #24]	; (8005784 <vApplicationGetTimerTaskMemory+0x30>)
 800576a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000fac 	.word	0x20000fac
 8005784:	20001054 	.word	0x20001054

08005788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f103 0208 	add.w	r2, r3, #8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f04f 32ff 	mov.w	r2, #4294967295
 80057a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f103 0208 	add.w	r2, r3, #8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f103 0208 	add.w	r2, r3, #8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
}
 800581e:	bf00      	nop
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d103      	bne.n	800584a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e00c      	b.n	8005864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3308      	adds	r3, #8
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e002      	b.n	8005858 <vListInsert+0x2e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d2f6      	bcs.n	8005852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6892      	ldr	r2, [r2, #8]
 80058b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6852      	ldr	r2, [r2, #4]
 80058bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d103      	bne.n	80058d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10c      	bne.n	800591e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	b672      	cpsid	i
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	b662      	cpsie	i
 8005918:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800591e:	f002 f8a5 	bl	8007a6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	441a      	add	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	3b01      	subs	r3, #1
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005954:	fb01 f303 	mul.w	r3, r1, r3
 8005958:	441a      	add	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	22ff      	movs	r2, #255	; 0xff
 8005962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d114      	bne.n	800599e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01a      	beq.n	80059b2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3310      	adds	r3, #16
 8005980:	4618      	mov	r0, r3
 8005982:	f001 f95d 	bl	8006c40 <xTaskRemoveFromEventList>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d012      	beq.n	80059b2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <xQueueGenericReset+0xd0>)
 800598e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	e009      	b.n	80059b2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3310      	adds	r3, #16
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fef0 	bl	8005788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff feeb 	bl	8005788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059b2:	f002 f88f 	bl	8007ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b6:	2301      	movs	r3, #1
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	; 0x38
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10c      	bne.n	80059f2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	b672      	cpsid	i
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	b662      	cpsie	i
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10c      	bne.n	8005a12 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	b672      	cpsid	i
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	b662      	cpsie	i
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <xQueueGenericCreateStatic+0x5a>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <xQueueGenericCreateStatic+0x5e>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueGenericCreateStatic+0x60>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10c      	bne.n	8005a42 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	b672      	cpsid	i
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	b662      	cpsie	i
 8005a3c:	623b      	str	r3, [r7, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <xQueueGenericCreateStatic+0x8a>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xQueueGenericCreateStatic+0x8e>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueGenericCreateStatic+0x90>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10c      	bne.n	8005a72 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	b672      	cpsid	i
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	b662      	cpsie	i
 8005a6c:	61fb      	str	r3, [r7, #28]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a72:	2350      	movs	r3, #80	; 0x50
 8005a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d00c      	beq.n	8005a96 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	b672      	cpsid	i
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	b662      	cpsie	i
 8005a90:	61bb      	str	r3, [r7, #24]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f805 	bl	8005ac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3730      	adds	r7, #48	; 0x30
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005af6:	2101      	movs	r1, #1
 8005af8:	69b8      	ldr	r0, [r7, #24]
 8005afa:	f7ff fef9 	bl	80058f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	; 0x38
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10c      	bne.n	8005b46 <xQueueGenericSend+0x36>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	b672      	cpsid	i
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	b662      	cpsie	i
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <xQueueGenericSend+0x44>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <xQueueGenericSend+0x48>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <xQueueGenericSend+0x4a>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10c      	bne.n	8005b78 <xQueueGenericSend+0x68>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	b672      	cpsid	i
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	b662      	cpsie	i
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d103      	bne.n	8005b86 <xQueueGenericSend+0x76>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <xQueueGenericSend+0x7a>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueGenericSend+0x7c>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10c      	bne.n	8005baa <xQueueGenericSend+0x9a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005baa:	f001 fa13 	bl	8006fd4 <xTaskGetSchedulerState>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <xQueueGenericSend+0xaa>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSend+0xae>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSend+0xb0>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10c      	bne.n	8005bde <xQueueGenericSend+0xce>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	b672      	cpsid	i
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	b662      	cpsie	i
 8005bd8:	61fb      	str	r3, [r7, #28]
}
 8005bda:	bf00      	nop
 8005bdc:	e7fe      	b.n	8005bdc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bde:	f001 ff45 	bl	8007a6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <xQueueGenericSend+0xe4>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d129      	bne.n	8005c48 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfa:	f000 fa15 	bl	8006028 <prvCopyDataToQueue>
 8005bfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d010      	beq.n	8005c2a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	3324      	adds	r3, #36	; 0x24
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 f817 	bl	8006c40 <xTaskRemoveFromEventList>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d013      	beq.n	8005c40 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c18:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <xQueueGenericSend+0x208>)
 8005c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	e00a      	b.n	8005c40 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c30:	4b39      	ldr	r3, [pc, #228]	; (8005d18 <xQueueGenericSend+0x208>)
 8005c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c40:	f001 ff48 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e063      	b.n	8005d10 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c4e:	f001 ff41 	bl	8007ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e05c      	b.n	8005d10 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 f853 	bl	8006d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c66:	2301      	movs	r3, #1
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c6a:	f001 ff33 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c6e:	f000 fdb3 	bl	80067d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c72:	f001 fefb 	bl	8007a6c <vPortEnterCritical>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c7c:	b25b      	sxtb	r3, r3
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d103      	bne.n	8005c8c <xQueueGenericSend+0x17c>
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c92:	b25b      	sxtb	r3, r3
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d103      	bne.n	8005ca2 <xQueueGenericSend+0x192>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca2:	f001 ff17 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ca6:	1d3a      	adds	r2, r7, #4
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	4611      	mov	r1, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 f842 	bl	8006d38 <xTaskCheckForTimeOut>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d124      	bne.n	8005d04 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cbc:	f000 faac 	bl	8006218 <prvIsQueueFull>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d018      	beq.n	8005cf8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	3310      	adds	r3, #16
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 ff62 	bl	8006b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd6:	f000 fa37 	bl	8006148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cda:	f000 fd8b 	bl	80067f4 <xTaskResumeAll>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f47f af7c 	bne.w	8005bde <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <xQueueGenericSend+0x208>)
 8005ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	e772      	b.n	8005bde <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfa:	f000 fa25 	bl	8006148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cfe:	f000 fd79 	bl	80067f4 <xTaskResumeAll>
 8005d02:	e76c      	b.n	8005bde <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d06:	f000 fa1f 	bl	8006148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d0a:	f000 fd73 	bl	80067f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3738      	adds	r7, #56	; 0x38
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08e      	sub	sp, #56	; 0x38
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10c      	bne.n	8005d4e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	b672      	cpsid	i
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	b662      	cpsie	i
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <xQueueGenericSendFromISR+0x40>
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <xQueueGenericSendFromISR+0x44>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <xQueueGenericSendFromISR+0x46>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	b672      	cpsid	i
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	b662      	cpsie	i
 8005d7a:	623b      	str	r3, [r7, #32]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d103      	bne.n	8005d8e <xQueueGenericSendFromISR+0x72>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <xQueueGenericSendFromISR+0x76>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <xQueueGenericSendFromISR+0x78>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10c      	bne.n	8005db2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	b672      	cpsid	i
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	b662      	cpsie	i
 8005dac:	61fb      	str	r3, [r7, #28]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005db2:	f001 ff43 	bl	8007c3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005db6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	b672      	cpsid	i
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	b662      	cpsie	i
 8005dce:	61ba      	str	r2, [r7, #24]
 8005dd0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <xQueueGenericSendFromISR+0xcc>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d12c      	bne.n	8005e42 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df8:	f000 f916 	bl	8006028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dfc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d112      	bne.n	8005e2c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d016      	beq.n	8005e3c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	3324      	adds	r3, #36	; 0x24
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 ff14 	bl	8006c40 <xTaskRemoveFromEventList>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00e      	beq.n	8005e3c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e007      	b.n	8005e3c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e30:	3301      	adds	r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	b25a      	sxtb	r2, r3
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005e40:	e001      	b.n	8005e46 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3738      	adds	r7, #56	; 0x38
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	; 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <xQueueReceive+0x34>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	623b      	str	r3, [r7, #32]
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <xQueueReceive+0x42>
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <xQueueReceive+0x46>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <xQueueReceive+0x48>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10c      	bne.n	8005ec2 <xQueueReceive+0x66>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	b672      	cpsid	i
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	b662      	cpsie	i
 8005ebc:	61fb      	str	r3, [r7, #28]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ec2:	f001 f887 	bl	8006fd4 <xTaskGetSchedulerState>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <xQueueReceive+0x76>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <xQueueReceive+0x7a>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueReceive+0x7c>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <xQueueReceive+0x9a>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	b672      	cpsid	i
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	b662      	cpsie	i
 8005ef0:	61bb      	str	r3, [r7, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ef6:	f001 fdb9 	bl	8007a6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01f      	beq.n	8005f46 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f0a:	f000 f8f7 	bl	80060fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1e5a      	subs	r2, r3, #1
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	3310      	adds	r3, #16
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fe8c 	bl	8006c40 <xTaskRemoveFromEventList>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f2e:	4b3d      	ldr	r3, [pc, #244]	; (8006024 <xQueueReceive+0x1c8>)
 8005f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f3e:	f001 fdc9 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e069      	b.n	800601a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f4c:	f001 fdc2 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e062      	b.n	800601a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f5a:	f107 0310 	add.w	r3, r7, #16
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fed4 	bl	8006d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f68:	f001 fdb4 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f6c:	f000 fc34 	bl	80067d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f70:	f001 fd7c 	bl	8007a6c <vPortEnterCritical>
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f7a:	b25b      	sxtb	r3, r3
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d103      	bne.n	8005f8a <xQueueReceive+0x12e>
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f90:	b25b      	sxtb	r3, r3
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d103      	bne.n	8005fa0 <xQueueReceive+0x144>
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa0:	f001 fd98 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fa4:	1d3a      	adds	r2, r7, #4
 8005fa6:	f107 0310 	add.w	r3, r7, #16
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fec3 	bl	8006d38 <xTaskCheckForTimeOut>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d123      	bne.n	8006000 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fba:	f000 f917 	bl	80061ec <prvIsQueueEmpty>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	3324      	adds	r3, #36	; 0x24
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fde3 	bl	8006b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd4:	f000 f8b8 	bl	8006148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fd8:	f000 fc0c 	bl	80067f4 <xTaskResumeAll>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d189      	bne.n	8005ef6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <xQueueReceive+0x1c8>)
 8005fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	e780      	b.n	8005ef6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff6:	f000 f8a7 	bl	8006148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ffa:	f000 fbfb 	bl	80067f4 <xTaskResumeAll>
 8005ffe:	e77a      	b.n	8005ef6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006002:	f000 f8a1 	bl	8006148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006006:	f000 fbf5 	bl	80067f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800600a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600c:	f000 f8ee 	bl	80061ec <prvIsQueueEmpty>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	f43f af6f 	beq.w	8005ef6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800601a:	4618      	mov	r0, r3
 800601c:	3730      	adds	r7, #48	; 0x30
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d14d      	bne.n	80060ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 ffdc 	bl	8007010 <xTaskPriorityDisinherit>
 8006058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	e043      	b.n	80060ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d119      	bne.n	800609c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6858      	ldr	r0, [r3, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	461a      	mov	r2, r3
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	f002 f88e 	bl	8008194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	d32b      	bcc.n	80060ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	e026      	b.n	80060ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68d8      	ldr	r0, [r3, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	461a      	mov	r2, r3
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	f002 f874 	bl	8008194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	425b      	negs	r3, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d207      	bcs.n	80060d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	425b      	negs	r3, r3
 80060d2:	441a      	add	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d105      	bne.n	80060ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060f2:	697b      	ldr	r3, [r7, #20]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	441a      	add	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d303      	bcc.n	8006130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68d9      	ldr	r1, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	461a      	mov	r2, r3
 800613a:	6838      	ldr	r0, [r7, #0]
 800613c:	f002 f82a 	bl	8008194 <memcpy>
	}
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006150:	f001 fc8c 	bl	8007a6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800615a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800615c:	e011      	b.n	8006182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d012      	beq.n	800618c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fd68 	bl	8006c40 <xTaskRemoveFromEventList>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006176:	f000 fe45 	bl	8006e04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	3b01      	subs	r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dce9      	bgt.n	800615e <prvUnlockQueue+0x16>
 800618a:	e000      	b.n	800618e <prvUnlockQueue+0x46>
					break;
 800618c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	22ff      	movs	r2, #255	; 0xff
 8006192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006196:	f001 fc9d 	bl	8007ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800619a:	f001 fc67 	bl	8007a6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061a6:	e011      	b.n	80061cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d012      	beq.n	80061d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3310      	adds	r3, #16
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fd43 	bl	8006c40 <xTaskRemoveFromEventList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061c0:	f000 fe20 	bl	8006e04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dce9      	bgt.n	80061a8 <prvUnlockQueue+0x60>
 80061d4:	e000      	b.n	80061d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	22ff      	movs	r2, #255	; 0xff
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061e0:	f001 fc78 	bl	8007ad4 <vPortExitCritical>
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061f4:	f001 fc3a 	bl	8007a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e001      	b.n	800620a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800620a:	f001 fc63 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006220:	f001 fc24 	bl	8007a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	429a      	cmp	r2, r3
 800622e:	d102      	bne.n	8006236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e001      	b.n	800623a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800623a:	f001 fc4b 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e014      	b.n	8006282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006258:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <vQueueAddToRegistry+0x50>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006264:	490c      	ldr	r1, [pc, #48]	; (8006298 <vQueueAddToRegistry+0x50>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800626e:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <vQueueAddToRegistry+0x50>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800627a:	e006      	b.n	800628a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b07      	cmp	r3, #7
 8006286:	d9e7      	bls.n	8006258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20001454 	.word	0x20001454

0800629c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062ac:	f001 fbde 	bl	8007a6c <vPortEnterCritical>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b6:	b25b      	sxtb	r3, r3
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d103      	bne.n	80062c6 <vQueueWaitForMessageRestricted+0x2a>
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d103      	bne.n	80062dc <vQueueWaitForMessageRestricted+0x40>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062dc:	f001 fbfa 	bl	8007ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3324      	adds	r3, #36	; 0x24
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fc77 	bl	8006be4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7ff ff26 	bl	8006148 <prvUnlockQueue>
	}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	; 0x38
 8006308:	af04      	add	r7, sp, #16
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10c      	bne.n	8006332 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	b672      	cpsid	i
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	b662      	cpsie	i
 800632c:	623b      	str	r3, [r7, #32]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10c      	bne.n	8006352 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	b672      	cpsid	i
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	b662      	cpsie	i
 800634c:	61fb      	str	r3, [r7, #28]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006352:	23a8      	movs	r3, #168	; 0xa8
 8006354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2ba8      	cmp	r3, #168	; 0xa8
 800635a:	d00c      	beq.n	8006376 <xTaskCreateStatic+0x72>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	b672      	cpsid	i
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	b662      	cpsie	i
 8006370:	61bb      	str	r3, [r7, #24]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006376:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01e      	beq.n	80063bc <xTaskCreateStatic+0xb8>
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800638c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	2202      	movs	r2, #2
 8006392:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006396:	2300      	movs	r3, #0
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	9302      	str	r3, [sp, #8]
 800639e:	f107 0314 	add.w	r3, r7, #20
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f850 	bl	8006454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063b6:	f000 f8f5 	bl	80065a4 <prvAddNewTaskToReadyList>
 80063ba:	e001      	b.n	80063c0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063c0:	697b      	ldr	r3, [r7, #20]
	}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	; 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b08c      	sub	sp, #48	; 0x30
 80063ce:	af04      	add	r7, sp, #16
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 fc70 	bl	8007cc4 <pvPortMalloc>
 80063e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063ec:	20a8      	movs	r0, #168	; 0xa8
 80063ee:	f001 fc69 	bl	8007cc4 <pvPortMalloc>
 80063f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006400:	e005      	b.n	800640e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006402:	6978      	ldr	r0, [r7, #20]
 8006404:	f001 fd28 	bl	8007e58 <vPortFree>
 8006408:	e001      	b.n	800640e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d017      	beq.n	8006444 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	2300      	movs	r3, #0
 8006420:	9303      	str	r3, [sp, #12]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	9302      	str	r3, [sp, #8]
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f80e 	bl	8006454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006438:	69f8      	ldr	r0, [r7, #28]
 800643a:	f000 f8b3 	bl	80065a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800643e:	2301      	movs	r3, #1
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	e002      	b.n	800644a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006444:	f04f 33ff 	mov.w	r3, #4294967295
 8006448:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800644a:	69bb      	ldr	r3, [r7, #24]
	}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	461a      	mov	r2, r3
 800646c:	21a5      	movs	r1, #165	; 0xa5
 800646e:	f001 fe0d 	bl	800808c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800647c:	440b      	add	r3, r1
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f023 0307 	bic.w	r3, r3, #7
 800648a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00c      	beq.n	80064b0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	b672      	cpsid	i
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	b662      	cpsie	i
 80064aa:	617b      	str	r3, [r7, #20]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01f      	beq.n	80064f6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e012      	b.n	80064e2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	7819      	ldrb	r1, [r3, #0]
 80064c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4413      	add	r3, r2
 80064ca:	3334      	adds	r3, #52	; 0x34
 80064cc:	460a      	mov	r2, r1
 80064ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b0f      	cmp	r3, #15
 80064e6:	d9e9      	bls.n	80064bc <prvInitialiseNewTask+0x68>
 80064e8:	e000      	b.n	80064ec <prvInitialiseNewTask+0x98>
			{
				break;
 80064ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064f4:	e003      	b.n	80064fe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	2b37      	cmp	r3, #55	; 0x37
 8006502:	d901      	bls.n	8006508 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006504:	2337      	movs	r3, #55	; 0x37
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006512:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2200      	movs	r2, #0
 8006518:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	3304      	adds	r3, #4
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff f952 	bl	80057c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	3318      	adds	r3, #24
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff f94d 	bl	80057c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	2200      	movs	r2, #0
 8006550:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	3354      	adds	r3, #84	; 0x54
 8006558:	224c      	movs	r2, #76	; 0x4c
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fd95 	bl	800808c <memset>
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <prvInitialiseNewTask+0x144>)
 8006566:	659a      	str	r2, [r3, #88]	; 0x58
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	4a0c      	ldr	r2, [pc, #48]	; (800659c <prvInitialiseNewTask+0x148>)
 800656c:	65da      	str	r2, [r3, #92]	; 0x5c
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	4a0b      	ldr	r2, [pc, #44]	; (80065a0 <prvInitialiseNewTask+0x14c>)
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	69b8      	ldr	r0, [r7, #24]
 800657a:	f001 f96b 	bl	8007854 <pxPortInitialiseStack>
 800657e:	4602      	mov	r2, r0
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006590:	bf00      	nop
 8006592:	3720      	adds	r7, #32
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200056e0 	.word	0x200056e0
 800659c:	20005748 	.word	0x20005748
 80065a0:	200057b0 	.word	0x200057b0

080065a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065ac:	f001 fa5e 	bl	8007a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <prvAddNewTaskToReadyList+0xc4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	4a2c      	ldr	r2, [pc, #176]	; (8006668 <prvAddNewTaskToReadyList+0xc4>)
 80065b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ba:	4b2c      	ldr	r3, [pc, #176]	; (800666c <prvAddNewTaskToReadyList+0xc8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065c2:	4a2a      	ldr	r2, [pc, #168]	; (800666c <prvAddNewTaskToReadyList+0xc8>)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065c8:	4b27      	ldr	r3, [pc, #156]	; (8006668 <prvAddNewTaskToReadyList+0xc4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d110      	bne.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065d0:	f000 fc3c 	bl	8006e4c <prvInitialiseTaskLists>
 80065d4:	e00d      	b.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065d6:	4b26      	ldr	r3, [pc, #152]	; (8006670 <prvAddNewTaskToReadyList+0xcc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065de:	4b23      	ldr	r3, [pc, #140]	; (800666c <prvAddNewTaskToReadyList+0xc8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d802      	bhi.n	80065f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065ec:	4a1f      	ldr	r2, [pc, #124]	; (800666c <prvAddNewTaskToReadyList+0xc8>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065f2:	4b20      	ldr	r3, [pc, #128]	; (8006674 <prvAddNewTaskToReadyList+0xd0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	4a1e      	ldr	r2, [pc, #120]	; (8006674 <prvAddNewTaskToReadyList+0xd0>)
 80065fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065fc:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <prvAddNewTaskToReadyList+0xd0>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <prvAddNewTaskToReadyList+0xd4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d903      	bls.n	8006618 <prvAddNewTaskToReadyList+0x74>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	4a18      	ldr	r2, [pc, #96]	; (8006678 <prvAddNewTaskToReadyList+0xd4>)
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4a15      	ldr	r2, [pc, #84]	; (800667c <prvAddNewTaskToReadyList+0xd8>)
 8006626:	441a      	add	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	4610      	mov	r0, r2
 8006630:	f7ff f8d7 	bl	80057e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006634:	f001 fa4e 	bl	8007ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006638:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <prvAddNewTaskToReadyList+0xcc>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00e      	beq.n	800665e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <prvAddNewTaskToReadyList+0xc8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	429a      	cmp	r2, r3
 800664c:	d207      	bcs.n	800665e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <prvAddNewTaskToReadyList+0xdc>)
 8006650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800665e:	bf00      	nop
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20001968 	.word	0x20001968
 800666c:	20001494 	.word	0x20001494
 8006670:	20001974 	.word	0x20001974
 8006674:	20001984 	.word	0x20001984
 8006678:	20001970 	.word	0x20001970
 800667c:	20001498 	.word	0x20001498
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d019      	beq.n	80066ca <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <vTaskDelay+0x64>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <vTaskDelay+0x34>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	b672      	cpsid	i
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	b662      	cpsie	i
 80066b2:	60bb      	str	r3, [r7, #8]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80066b8:	f000 f88e 	bl	80067d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066bc:	2100      	movs	r1, #0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fd18 	bl	80070f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066c4:	f000 f896 	bl	80067f4 <xTaskResumeAll>
 80066c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <vTaskDelay+0x68>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20001990 	.word	0x20001990
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	; 0x28
 80066f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066fe:	463a      	mov	r2, r7
 8006700:	1d39      	adds	r1, r7, #4
 8006702:	f107 0308 	add.w	r3, r7, #8
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff f80a 	bl	8005720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	9202      	str	r2, [sp, #8]
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	2300      	movs	r3, #0
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	460a      	mov	r2, r1
 800671e:	4926      	ldr	r1, [pc, #152]	; (80067b8 <vTaskStartScheduler+0xc8>)
 8006720:	4826      	ldr	r0, [pc, #152]	; (80067bc <vTaskStartScheduler+0xcc>)
 8006722:	f7ff fdef 	bl	8006304 <xTaskCreateStatic>
 8006726:	4603      	mov	r3, r0
 8006728:	4a25      	ldr	r2, [pc, #148]	; (80067c0 <vTaskStartScheduler+0xd0>)
 800672a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800672c:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <vTaskStartScheduler+0xd0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e001      	b.n	800673e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d102      	bne.n	800674a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006744:	f000 fd2a 	bl	800719c <xTimerCreateTimerTask>
 8006748:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d11d      	bne.n	800678c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	b672      	cpsid	i
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	b662      	cpsie	i
 8006764:	613b      	str	r3, [r7, #16]
}
 8006766:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006768:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <vTaskStartScheduler+0xd4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3354      	adds	r3, #84	; 0x54
 800676e:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <vTaskStartScheduler+0xd8>)
 8006770:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006772:	4b16      	ldr	r3, [pc, #88]	; (80067cc <vTaskStartScheduler+0xdc>)
 8006774:	f04f 32ff 	mov.w	r2, #4294967295
 8006778:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <vTaskStartScheduler+0xe0>)
 800677c:	2201      	movs	r2, #1
 800677e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <vTaskStartScheduler+0xe4>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006786:	f001 f8f3 	bl	8007970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800678a:	e010      	b.n	80067ae <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d10c      	bne.n	80067ae <vTaskStartScheduler+0xbe>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <vTaskStartScheduler+0xbc>
}
 80067ae:	bf00      	nop
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	080082ac 	.word	0x080082ac
 80067bc:	08006e1d 	.word	0x08006e1d
 80067c0:	2000198c 	.word	0x2000198c
 80067c4:	20001494 	.word	0x20001494
 80067c8:	2000006c 	.word	0x2000006c
 80067cc:	20001988 	.word	0x20001988
 80067d0:	20001974 	.word	0x20001974
 80067d4:	2000196c 	.word	0x2000196c

080067d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067dc:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <vTaskSuspendAll+0x18>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	4a03      	ldr	r2, [pc, #12]	; (80067f0 <vTaskSuspendAll+0x18>)
 80067e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80067e6:	bf00      	nop
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	20001990 	.word	0x20001990

080067f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006802:	4b43      	ldr	r3, [pc, #268]	; (8006910 <xTaskResumeAll+0x11c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <xTaskResumeAll+0x30>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	b672      	cpsid	i
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	b662      	cpsie	i
 800681e:	603b      	str	r3, [r7, #0]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006824:	f001 f922 	bl	8007a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006828:	4b39      	ldr	r3, [pc, #228]	; (8006910 <xTaskResumeAll+0x11c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3b01      	subs	r3, #1
 800682e:	4a38      	ldr	r2, [pc, #224]	; (8006910 <xTaskResumeAll+0x11c>)
 8006830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006832:	4b37      	ldr	r3, [pc, #220]	; (8006910 <xTaskResumeAll+0x11c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d162      	bne.n	8006900 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <xTaskResumeAll+0x120>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d05e      	beq.n	8006900 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006842:	e02f      	b.n	80068a4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006844:	4b34      	ldr	r3, [pc, #208]	; (8006918 <xTaskResumeAll+0x124>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3318      	adds	r3, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff f823 	bl	800589c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff f81e 	bl	800589c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4b2d      	ldr	r3, [pc, #180]	; (800691c <xTaskResumeAll+0x128>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d903      	bls.n	8006874 <xTaskResumeAll+0x80>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4a2a      	ldr	r2, [pc, #168]	; (800691c <xTaskResumeAll+0x128>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4a27      	ldr	r2, [pc, #156]	; (8006920 <xTaskResumeAll+0x12c>)
 8006882:	441a      	add	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fe ffa9 	bl	80057e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4b23      	ldr	r3, [pc, #140]	; (8006924 <xTaskResumeAll+0x130>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800689e:	4b22      	ldr	r3, [pc, #136]	; (8006928 <xTaskResumeAll+0x134>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a4:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <xTaskResumeAll+0x124>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1cb      	bne.n	8006844 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068b2:	f000 fb6f 	bl	8006f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068b6:	4b1d      	ldr	r3, [pc, #116]	; (800692c <xTaskResumeAll+0x138>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d010      	beq.n	80068e4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068c2:	f000 f847 	bl	8006954 <xTaskIncrementTick>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80068cc:	4b16      	ldr	r3, [pc, #88]	; (8006928 <xTaskResumeAll+0x134>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f1      	bne.n	80068c2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <xTaskResumeAll+0x138>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068e4:	4b10      	ldr	r3, [pc, #64]	; (8006928 <xTaskResumeAll+0x134>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d009      	beq.n	8006900 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <xTaskResumeAll+0x13c>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006900:	f001 f8e8 	bl	8007ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8006904:	68bb      	ldr	r3, [r7, #8]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20001990 	.word	0x20001990
 8006914:	20001968 	.word	0x20001968
 8006918:	20001928 	.word	0x20001928
 800691c:	20001970 	.word	0x20001970
 8006920:	20001498 	.word	0x20001498
 8006924:	20001494 	.word	0x20001494
 8006928:	2000197c 	.word	0x2000197c
 800692c:	20001978 	.word	0x20001978
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <xTaskGetTickCount+0x1c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006940:	687b      	ldr	r3, [r7, #4]
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000196c 	.word	0x2000196c

08006954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800695e:	4b50      	ldr	r3, [pc, #320]	; (8006aa0 <xTaskIncrementTick+0x14c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f040 808b 	bne.w	8006a7e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006968:	4b4e      	ldr	r3, [pc, #312]	; (8006aa4 <xTaskIncrementTick+0x150>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006970:	4a4c      	ldr	r2, [pc, #304]	; (8006aa4 <xTaskIncrementTick+0x150>)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d122      	bne.n	80069c2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800697c:	4b4a      	ldr	r3, [pc, #296]	; (8006aa8 <xTaskIncrementTick+0x154>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00c      	beq.n	80069a0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	b672      	cpsid	i
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	b662      	cpsie	i
 800699a:	603b      	str	r3, [r7, #0]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xTaskIncrementTick+0x4a>
 80069a0:	4b41      	ldr	r3, [pc, #260]	; (8006aa8 <xTaskIncrementTick+0x154>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	4b41      	ldr	r3, [pc, #260]	; (8006aac <xTaskIncrementTick+0x158>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a3f      	ldr	r2, [pc, #252]	; (8006aa8 <xTaskIncrementTick+0x154>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4a3f      	ldr	r2, [pc, #252]	; (8006aac <xTaskIncrementTick+0x158>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	4b3e      	ldr	r3, [pc, #248]	; (8006ab0 <xTaskIncrementTick+0x15c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	4a3d      	ldr	r2, [pc, #244]	; (8006ab0 <xTaskIncrementTick+0x15c>)
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	f000 fae9 	bl	8006f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069c2:	4b3c      	ldr	r3, [pc, #240]	; (8006ab4 <xTaskIncrementTick+0x160>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d349      	bcc.n	8006a60 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069cc:	4b36      	ldr	r3, [pc, #216]	; (8006aa8 <xTaskIncrementTick+0x154>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d6:	4b37      	ldr	r3, [pc, #220]	; (8006ab4 <xTaskIncrementTick+0x160>)
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	601a      	str	r2, [r3, #0]
					break;
 80069de:	e03f      	b.n	8006a60 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <xTaskIncrementTick+0x154>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d203      	bcs.n	8006a00 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069f8:	4a2e      	ldr	r2, [pc, #184]	; (8006ab4 <xTaskIncrementTick+0x160>)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069fe:	e02f      	b.n	8006a60 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe ff49 	bl	800589c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3318      	adds	r3, #24
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe ff40 	bl	800589c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4b25      	ldr	r3, [pc, #148]	; (8006ab8 <xTaskIncrementTick+0x164>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <xTaskIncrementTick+0xdc>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4a22      	ldr	r2, [pc, #136]	; (8006ab8 <xTaskIncrementTick+0x164>)
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <xTaskIncrementTick+0x168>)
 8006a3e:	441a      	add	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f7fe fecb 	bl	80057e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <xTaskIncrementTick+0x16c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d3b8      	bcc.n	80069cc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5e:	e7b5      	b.n	80069cc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a60:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <xTaskIncrementTick+0x16c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a66:	4915      	ldr	r1, [pc, #84]	; (8006abc <xTaskIncrementTick+0x168>)
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d907      	bls.n	8006a88 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e004      	b.n	8006a88 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <xTaskIncrementTick+0x170>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a0f      	ldr	r2, [pc, #60]	; (8006ac4 <xTaskIncrementTick+0x170>)
 8006a86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a88:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <xTaskIncrementTick+0x174>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a94:	697b      	ldr	r3, [r7, #20]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20001990 	.word	0x20001990
 8006aa4:	2000196c 	.word	0x2000196c
 8006aa8:	20001920 	.word	0x20001920
 8006aac:	20001924 	.word	0x20001924
 8006ab0:	20001980 	.word	0x20001980
 8006ab4:	20001988 	.word	0x20001988
 8006ab8:	20001970 	.word	0x20001970
 8006abc:	20001498 	.word	0x20001498
 8006ac0:	20001494 	.word	0x20001494
 8006ac4:	20001978 	.word	0x20001978
 8006ac8:	2000197c 	.word	0x2000197c

08006acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ad2:	4b2b      	ldr	r3, [pc, #172]	; (8006b80 <vTaskSwitchContext+0xb4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ada:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <vTaskSwitchContext+0xb8>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ae0:	e048      	b.n	8006b74 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8006ae2:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <vTaskSwitchContext+0xb8>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae8:	4b27      	ldr	r3, [pc, #156]	; (8006b88 <vTaskSwitchContext+0xbc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	e012      	b.n	8006b16 <vTaskSwitchContext+0x4a>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10c      	bne.n	8006b10 <vTaskSwitchContext+0x44>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	b672      	cpsid	i
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	b662      	cpsie	i
 8006b0a:	607b      	str	r3, [r7, #4]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <vTaskSwitchContext+0x42>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	491d      	ldr	r1, [pc, #116]	; (8006b8c <vTaskSwitchContext+0xc0>)
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0e2      	beq.n	8006af0 <vTaskSwitchContext+0x24>
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <vTaskSwitchContext+0xc0>)
 8006b36:	4413      	add	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d104      	bne.n	8006b5a <vTaskSwitchContext+0x8e>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4a0b      	ldr	r2, [pc, #44]	; (8006b90 <vTaskSwitchContext+0xc4>)
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <vTaskSwitchContext+0xbc>)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <vTaskSwitchContext+0xc4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3354      	adds	r3, #84	; 0x54
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <vTaskSwitchContext+0xc8>)
 8006b72:	6013      	str	r3, [r2, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20001990 	.word	0x20001990
 8006b84:	2000197c 	.word	0x2000197c
 8006b88:	20001970 	.word	0x20001970
 8006b8c:	20001498 	.word	0x20001498
 8006b90:	20001494 	.word	0x20001494
 8006b94:	2000006c 	.word	0x2000006c

08006b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10c      	bne.n	8006bc2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	b672      	cpsid	i
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	b662      	cpsie	i
 8006bbc:	60fb      	str	r3, [r7, #12]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bc2:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <vTaskPlaceOnEventList+0x48>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3318      	adds	r3, #24
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fe fe2d 	bl	800582a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	6838      	ldr	r0, [r7, #0]
 8006bd4:	f000 fa8e 	bl	80070f4 <prvAddCurrentTaskToDelayedList>
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20001494 	.word	0x20001494

08006be4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10c      	bne.n	8006c10 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	b672      	cpsid	i
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	b662      	cpsie	i
 8006c0a:	617b      	str	r3, [r7, #20]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <vTaskPlaceOnEventListRestricted+0x58>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3318      	adds	r3, #24
 8006c16:	4619      	mov	r1, r3
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7fe fde2 	bl	80057e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295
 8006c28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	68b8      	ldr	r0, [r7, #8]
 8006c2e:	f000 fa61 	bl	80070f4 <prvAddCurrentTaskToDelayedList>
	}
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20001494 	.word	0x20001494

08006c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10c      	bne.n	8006c70 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	b672      	cpsid	i
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	b662      	cpsie	i
 8006c6a:	60fb      	str	r3, [r7, #12]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	3318      	adds	r3, #24
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe fe11 	bl	800589c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <xTaskRemoveFromEventList+0xb4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d11d      	bne.n	8006cbe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fe08 	bl	800589c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <xTaskRemoveFromEventList+0xb8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d903      	bls.n	8006ca0 <xTaskRemoveFromEventList+0x60>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <xTaskRemoveFromEventList+0xb8>)
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <xTaskRemoveFromEventList+0xbc>)
 8006cae:	441a      	add	r2, r3
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f7fe fd93 	bl	80057e2 <vListInsertEnd>
 8006cbc:	e005      	b.n	8006cca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	480e      	ldr	r0, [pc, #56]	; (8006d00 <xTaskRemoveFromEventList+0xc0>)
 8006cc6:	f7fe fd8c 	bl	80057e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cce:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <xTaskRemoveFromEventList+0xc4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d905      	bls.n	8006ce4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <xTaskRemoveFromEventList+0xc8>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e001      	b.n	8006ce8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ce8:	697b      	ldr	r3, [r7, #20]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20001990 	.word	0x20001990
 8006cf8:	20001970 	.word	0x20001970
 8006cfc:	20001498 	.word	0x20001498
 8006d00:	20001928 	.word	0x20001928
 8006d04:	20001494 	.word	0x20001494
 8006d08:	2000197c 	.word	0x2000197c

08006d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <vTaskInternalSetTimeOutState+0x24>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <vTaskInternalSetTimeOutState+0x28>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20001980 	.word	0x20001980
 8006d34:	2000196c 	.word	0x2000196c

08006d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	b672      	cpsid	i
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	b662      	cpsie	i
 8006d5c:	613b      	str	r3, [r7, #16]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10c      	bne.n	8006d82 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	b672      	cpsid	i
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	b662      	cpsie	i
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006d82:	f000 fe73 	bl	8007a6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d86:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <xTaskCheckForTimeOut+0xc4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d102      	bne.n	8006da6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	e023      	b.n	8006dee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <xTaskCheckForTimeOut+0xc8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d007      	beq.n	8006dc2 <xTaskCheckForTimeOut+0x8a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d302      	bcc.n	8006dc2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	e015      	b.n	8006dee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d20b      	bcs.n	8006de4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff ff97 	bl	8006d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	e004      	b.n	8006dee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dee:	f000 fe71 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8006df2:	69fb      	ldr	r3, [r7, #28]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	2000196c 	.word	0x2000196c
 8006e00:	20001980 	.word	0x20001980

08006e04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e08:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <vTaskMissedYield+0x14>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
}
 8006e0e:	bf00      	nop
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	2000197c 	.word	0x2000197c

08006e1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e24:	f000 f852 	bl	8006ecc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <prvIdleTask+0x28>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d9f9      	bls.n	8006e24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <prvIdleTask+0x2c>)
 8006e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e40:	e7f0      	b.n	8006e24 <prvIdleTask+0x8>
 8006e42:	bf00      	nop
 8006e44:	20001498 	.word	0x20001498
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	e00c      	b.n	8006e72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4a12      	ldr	r2, [pc, #72]	; (8006eac <prvInitialiseTaskLists+0x60>)
 8006e64:	4413      	add	r3, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fc8e 	bl	8005788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	607b      	str	r3, [r7, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b37      	cmp	r3, #55	; 0x37
 8006e76:	d9ef      	bls.n	8006e58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e78:	480d      	ldr	r0, [pc, #52]	; (8006eb0 <prvInitialiseTaskLists+0x64>)
 8006e7a:	f7fe fc85 	bl	8005788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e7e:	480d      	ldr	r0, [pc, #52]	; (8006eb4 <prvInitialiseTaskLists+0x68>)
 8006e80:	f7fe fc82 	bl	8005788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e84:	480c      	ldr	r0, [pc, #48]	; (8006eb8 <prvInitialiseTaskLists+0x6c>)
 8006e86:	f7fe fc7f 	bl	8005788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e8a:	480c      	ldr	r0, [pc, #48]	; (8006ebc <prvInitialiseTaskLists+0x70>)
 8006e8c:	f7fe fc7c 	bl	8005788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e90:	480b      	ldr	r0, [pc, #44]	; (8006ec0 <prvInitialiseTaskLists+0x74>)
 8006e92:	f7fe fc79 	bl	8005788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <prvInitialiseTaskLists+0x78>)
 8006e98:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <prvInitialiseTaskLists+0x64>)
 8006e9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <prvInitialiseTaskLists+0x7c>)
 8006e9e:	4a05      	ldr	r2, [pc, #20]	; (8006eb4 <prvInitialiseTaskLists+0x68>)
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20001498 	.word	0x20001498
 8006eb0:	200018f8 	.word	0x200018f8
 8006eb4:	2000190c 	.word	0x2000190c
 8006eb8:	20001928 	.word	0x20001928
 8006ebc:	2000193c 	.word	0x2000193c
 8006ec0:	20001954 	.word	0x20001954
 8006ec4:	20001920 	.word	0x20001920
 8006ec8:	20001924 	.word	0x20001924

08006ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed2:	e019      	b.n	8006f08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ed4:	f000 fdca 	bl	8007a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed8:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <prvCheckTasksWaitingTermination+0x50>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe fcd9 	bl	800589c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <prvCheckTasksWaitingTermination+0x54>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	4a0b      	ldr	r2, [pc, #44]	; (8006f20 <prvCheckTasksWaitingTermination+0x54>)
 8006ef2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006efc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006efe:	f000 fde9 	bl	8007ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f810 	bl	8006f28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e1      	bne.n	8006ed4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000193c 	.word	0x2000193c
 8006f20:	20001968 	.word	0x20001968
 8006f24:	20001950 	.word	0x20001950

08006f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3354      	adds	r3, #84	; 0x54
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f8b1 	bl	800809c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 ff85 	bl	8007e58 <vPortFree>
				vPortFree( pxTCB );
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 ff82 	bl	8007e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f54:	e01a      	b.n	8006f8c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d103      	bne.n	8006f68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 ff79 	bl	8007e58 <vPortFree>
	}
 8006f66:	e011      	b.n	8006f8c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d00c      	beq.n	8006f8c <prvDeleteTCB+0x64>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	b672      	cpsid	i
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	b662      	cpsie	i
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <prvDeleteTCB+0x62>
	}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <prvResetNextTaskUnblockTime+0x38>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006faa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fac:	e008      	b.n	8006fc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <prvResetNextTaskUnblockTime+0x38>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8006fbe:	6013      	str	r3, [r2, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20001920 	.word	0x20001920
 8006fd0:	20001988 	.word	0x20001988

08006fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <xTaskGetSchedulerState+0x34>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	e008      	b.n	8006ffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe8:	4b08      	ldr	r3, [pc, #32]	; (800700c <xTaskGetSchedulerState+0x38>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e001      	b.n	8006ffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ffa:	687b      	ldr	r3, [r7, #4]
	}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	20001974 	.word	0x20001974
 800700c:	20001990 	.word	0x20001990

08007010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d05a      	beq.n	80070dc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007026:	4b30      	ldr	r3, [pc, #192]	; (80070e8 <xTaskPriorityDisinherit+0xd8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	429a      	cmp	r2, r3
 800702e:	d00c      	beq.n	800704a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	b672      	cpsid	i
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	b662      	cpsie	i
 8007044:	60fb      	str	r3, [r7, #12]
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	b672      	cpsid	i
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	b662      	cpsie	i
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007070:	1e5a      	subs	r2, r3, #1
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	429a      	cmp	r2, r3
 8007080:	d02c      	beq.n	80070dc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007086:	2b00      	cmp	r3, #0
 8007088:	d128      	bne.n	80070dc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	3304      	adds	r3, #4
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fc04 	bl	800589c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <xTaskPriorityDisinherit+0xdc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d903      	bls.n	80070bc <xTaskPriorityDisinherit+0xac>
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	4a0c      	ldr	r2, [pc, #48]	; (80070ec <xTaskPriorityDisinherit+0xdc>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <xTaskPriorityDisinherit+0xe0>)
 80070ca:	441a      	add	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f7fe fb85 	bl	80057e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070dc:	697b      	ldr	r3, [r7, #20]
	}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20001494 	.word	0x20001494
 80070ec:	20001970 	.word	0x20001970
 80070f0:	20001498 	.word	0x20001498

080070f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070fe:	4b21      	ldr	r3, [pc, #132]	; (8007184 <prvAddCurrentTaskToDelayedList+0x90>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007104:	4b20      	ldr	r3, [pc, #128]	; (8007188 <prvAddCurrentTaskToDelayedList+0x94>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3304      	adds	r3, #4
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fbc6 	bl	800589c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007116:	d10a      	bne.n	800712e <prvAddCurrentTaskToDelayedList+0x3a>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800711e:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <prvAddCurrentTaskToDelayedList+0x94>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4819      	ldr	r0, [pc, #100]	; (800718c <prvAddCurrentTaskToDelayedList+0x98>)
 8007128:	f7fe fb5b 	bl	80057e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800712c:	e026      	b.n	800717c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4413      	add	r3, r2
 8007134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007136:	4b14      	ldr	r3, [pc, #80]	; (8007188 <prvAddCurrentTaskToDelayedList+0x94>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	429a      	cmp	r2, r3
 8007144:	d209      	bcs.n	800715a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007146:	4b12      	ldr	r3, [pc, #72]	; (8007190 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <prvAddCurrentTaskToDelayedList+0x94>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe fb69 	bl	800582a <vListInsert>
}
 8007158:	e010      	b.n	800717c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <prvAddCurrentTaskToDelayedList+0xa0>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <prvAddCurrentTaskToDelayedList+0x94>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3304      	adds	r3, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7fe fb5f 	bl	800582a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	d202      	bcs.n	800717c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007176:	4a08      	ldr	r2, [pc, #32]	; (8007198 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6013      	str	r3, [r2, #0]
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	2000196c 	.word	0x2000196c
 8007188:	20001494 	.word	0x20001494
 800718c:	20001954 	.word	0x20001954
 8007190:	20001924 	.word	0x20001924
 8007194:	20001920 	.word	0x20001920
 8007198:	20001988 	.word	0x20001988

0800719c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	; 0x28
 80071a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071a6:	f000 fb15 	bl	80077d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071aa:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <xTimerCreateTimerTask+0x84>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d021      	beq.n	80071f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071ba:	1d3a      	adds	r2, r7, #4
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	f107 030c 	add.w	r3, r7, #12
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fac5 	bl	8005754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	9202      	str	r2, [sp, #8]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	2302      	movs	r3, #2
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	2300      	movs	r3, #0
 80071da:	460a      	mov	r2, r1
 80071dc:	4911      	ldr	r1, [pc, #68]	; (8007224 <xTimerCreateTimerTask+0x88>)
 80071de:	4812      	ldr	r0, [pc, #72]	; (8007228 <xTimerCreateTimerTask+0x8c>)
 80071e0:	f7ff f890 	bl	8006304 <xTaskCreateStatic>
 80071e4:	4603      	mov	r3, r0
 80071e6:	4a11      	ldr	r2, [pc, #68]	; (800722c <xTimerCreateTimerTask+0x90>)
 80071e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071ea:	4b10      	ldr	r3, [pc, #64]	; (800722c <xTimerCreateTimerTask+0x90>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071f2:	2301      	movs	r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10c      	bne.n	8007216 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	b672      	cpsid	i
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	b662      	cpsie	i
 8007210:	613b      	str	r3, [r7, #16]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007216:	697b      	ldr	r3, [r7, #20]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	200019c4 	.word	0x200019c4
 8007224:	080082b4 	.word	0x080082b4
 8007228:	0800736d 	.word	0x0800736d
 800722c:	200019c8 	.word	0x200019c8

08007230 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800723e:	2300      	movs	r3, #0
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10c      	bne.n	8007262 <xTimerGenericCommand+0x32>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	b672      	cpsid	i
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	b662      	cpsie	i
 800725c:	623b      	str	r3, [r7, #32]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007262:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <xTimerGenericCommand+0x9c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d02a      	beq.n	80072c0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b05      	cmp	r3, #5
 800727a:	dc18      	bgt.n	80072ae <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800727c:	f7ff feaa 	bl	8006fd4 <xTaskGetSchedulerState>
 8007280:	4603      	mov	r3, r0
 8007282:	2b02      	cmp	r3, #2
 8007284:	d109      	bne.n	800729a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <xTimerGenericCommand+0x9c>)
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f107 0110 	add.w	r1, r7, #16
 800728e:	2300      	movs	r3, #0
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	f7fe fc3d 	bl	8005b10 <xQueueGenericSend>
 8007296:	6278      	str	r0, [r7, #36]	; 0x24
 8007298:	e012      	b.n	80072c0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800729a:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <xTimerGenericCommand+0x9c>)
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f107 0110 	add.w	r1, r7, #16
 80072a2:	2300      	movs	r3, #0
 80072a4:	2200      	movs	r2, #0
 80072a6:	f7fe fc33 	bl	8005b10 <xQueueGenericSend>
 80072aa:	6278      	str	r0, [r7, #36]	; 0x24
 80072ac:	e008      	b.n	80072c0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <xTimerGenericCommand+0x9c>)
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	f107 0110 	add.w	r1, r7, #16
 80072b6:	2300      	movs	r3, #0
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	f7fe fd2f 	bl	8005d1c <xQueueGenericSendFromISR>
 80072be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3728      	adds	r7, #40	; 0x28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200019c4 	.word	0x200019c4

080072d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072da:	4b23      	ldr	r3, [pc, #140]	; (8007368 <prvProcessExpiredTimer+0x98>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fad7 	bl	800589c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d024      	beq.n	8007346 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	699a      	ldr	r2, [r3, #24]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	18d1      	adds	r1, r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	6978      	ldr	r0, [r7, #20]
 800730a:	f000 f8d3 	bl	80074b4 <prvInsertTimerInActiveList>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d021      	beq.n	8007358 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007314:	2300      	movs	r3, #0
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	2100      	movs	r1, #0
 800731e:	6978      	ldr	r0, [r7, #20]
 8007320:	f7ff ff86 	bl	8007230 <xTimerGenericCommand>
 8007324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d115      	bne.n	8007358 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	b672      	cpsid	i
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	b662      	cpsie	i
 8007340:	60fb      	str	r3, [r7, #12]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	b2da      	uxtb	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	6978      	ldr	r0, [r7, #20]
 800735e:	4798      	blx	r3
}
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200019bc 	.word	0x200019bc

0800736c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007374:	f107 0308 	add.w	r3, r7, #8
 8007378:	4618      	mov	r0, r3
 800737a:	f000 f857 	bl	800742c <prvGetNextExpireTime>
 800737e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4619      	mov	r1, r3
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f803 	bl	8007390 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800738a:	f000 f8d5 	bl	8007538 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800738e:	e7f1      	b.n	8007374 <prvTimerTask+0x8>

08007390 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800739a:	f7ff fa1d 	bl	80067d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800739e:	f107 0308 	add.w	r3, r7, #8
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 f866 	bl	8007474 <prvSampleTimeNow>
 80073a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d130      	bne.n	8007412 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <prvProcessTimerOrBlockTask+0x3c>
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d806      	bhi.n	80073cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073be:	f7ff fa19 	bl	80067f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff ff83 	bl	80072d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073ca:	e024      	b.n	8007416 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d008      	beq.n	80073e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073d2:	4b13      	ldr	r3, [pc, #76]	; (8007420 <prvProcessTimerOrBlockTask+0x90>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <prvProcessTimerOrBlockTask+0x50>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <prvProcessTimerOrBlockTask+0x52>
 80073e0:	2300      	movs	r3, #0
 80073e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <prvProcessTimerOrBlockTask+0x94>)
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	f7fe ff53 	bl	800629c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073f6:	f7ff f9fd 	bl	80067f4 <xTaskResumeAll>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007400:	4b09      	ldr	r3, [pc, #36]	; (8007428 <prvProcessTimerOrBlockTask+0x98>)
 8007402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
}
 8007410:	e001      	b.n	8007416 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007412:	f7ff f9ef 	bl	80067f4 <xTaskResumeAll>
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	200019c0 	.word	0x200019c0
 8007424:	200019c4 	.word	0x200019c4
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <prvGetNextExpireTime+0x44>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <prvGetNextExpireTime+0x16>
 800743e:	2201      	movs	r2, #1
 8007440:	e000      	b.n	8007444 <prvGetNextExpireTime+0x18>
 8007442:	2200      	movs	r2, #0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d105      	bne.n	800745c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <prvGetNextExpireTime+0x44>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	e001      	b.n	8007460 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007460:	68fb      	ldr	r3, [r7, #12]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	200019bc 	.word	0x200019bc

08007474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800747c:	f7ff fa5a 	bl	8006934 <xTaskGetTickCount>
 8007480:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007482:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <prvSampleTimeNow+0x3c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	429a      	cmp	r2, r3
 800748a:	d205      	bcs.n	8007498 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800748c:	f000 f93c 	bl	8007708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e002      	b.n	800749e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800749e:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <prvSampleTimeNow+0x3c>)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074a4:	68fb      	ldr	r3, [r7, #12]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	200019cc 	.word	0x200019cc

080074b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d812      	bhi.n	8007500 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e01b      	b.n	8007526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <prvInsertTimerInActiveList+0x7c>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7fe f996 	bl	800582a <vListInsert>
 80074fe:	e012      	b.n	8007526 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d206      	bcs.n	8007516 <prvInsertTimerInActiveList+0x62>
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d302      	bcc.n	8007516 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e007      	b.n	8007526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007516:	4b07      	ldr	r3, [pc, #28]	; (8007534 <prvInsertTimerInActiveList+0x80>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f7fe f982 	bl	800582a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007526:	697b      	ldr	r3, [r7, #20]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	200019c0 	.word	0x200019c0
 8007534:	200019bc 	.word	0x200019bc

08007538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08e      	sub	sp, #56	; 0x38
 800753c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800753e:	e0d0      	b.n	80076e2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	da1a      	bge.n	800757c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007546:	1d3b      	adds	r3, r7, #4
 8007548:	3304      	adds	r3, #4
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10c      	bne.n	800756c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	b672      	cpsid	i
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	b662      	cpsie	i
 8007566:	61fb      	str	r3, [r7, #28]
}
 8007568:	bf00      	nop
 800756a:	e7fe      	b.n	800756a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007572:	6850      	ldr	r0, [r2, #4]
 8007574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007576:	6892      	ldr	r2, [r2, #8]
 8007578:	4611      	mov	r1, r2
 800757a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f2c0 80af 	blt.w	80076e2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	3304      	adds	r3, #4
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe f981 	bl	800589c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800759a:	463b      	mov	r3, r7
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff ff69 	bl	8007474 <prvSampleTimeNow>
 80075a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b09      	cmp	r3, #9
 80075a8:	f200 809a 	bhi.w	80076e0 <prvProcessReceivedCommands+0x1a8>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <prvProcessReceivedCommands+0x7c>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075dd 	.word	0x080075dd
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075dd 	.word	0x080075dd
 80075c0:	08007655 	.word	0x08007655
 80075c4:	08007669 	.word	0x08007669
 80075c8:	080076b7 	.word	0x080076b7
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	080075dd 	.word	0x080075dd
 80075d4:	08007655 	.word	0x08007655
 80075d8:	08007669 	.word	0x08007669
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	18d1      	adds	r1, r2, r3
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fc:	f7ff ff5a 	bl	80074b4 <prvInsertTimerInActiveList>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d06d      	beq.n	80076e2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d062      	beq.n	80076e2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	441a      	add	r2, r3
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	2100      	movs	r1, #0
 800762c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762e:	f7ff fdff 	bl	8007230 <xTimerGenericCommand>
 8007632:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d153      	bne.n	80076e2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	b672      	cpsid	i
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	b662      	cpsie	i
 800764e:	61bb      	str	r3, [r7, #24]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007666:	e03c      	b.n	80076e2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10c      	bne.n	80076a2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	b672      	cpsid	i
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	b662      	cpsie	i
 800769c:	617b      	str	r3, [r7, #20]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	18d1      	adds	r1, r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b0:	f7ff ff00 	bl	80074b4 <prvInsertTimerInActiveList>
					break;
 80076b4:	e015      	b.n	80076e2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80076c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c6:	f000 fbc7 	bl	8007e58 <vPortFree>
 80076ca:	e00a      	b.n	80076e2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076de:	e000      	b.n	80076e2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80076e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <prvProcessReceivedCommands+0x1cc>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1d39      	adds	r1, r7, #4
 80076e8:	2200      	movs	r2, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fbb6 	bl	8005e5c <xQueueReceive>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f47f af24 	bne.w	8007540 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	3730      	adds	r7, #48	; 0x30
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	200019c4 	.word	0x200019c4

08007708 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800770e:	e04a      	b.n	80077a6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007710:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <prvSwitchTimerLists+0xc4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771a:	4b2c      	ldr	r3, [pc, #176]	; (80077cc <prvSwitchTimerLists+0xc4>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe f8b7 	bl	800589c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d030      	beq.n	80077a6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	d90e      	bls.n	8007774 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007762:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <prvSwitchTimerLists+0xc4>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f7fe f85c 	bl	800582a <vListInsert>
 8007772:	e018      	b.n	80077a6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007774:	2300      	movs	r3, #0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	2100      	movs	r1, #0
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fd56 	bl	8007230 <xTimerGenericCommand>
 8007784:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10c      	bne.n	80077a6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	b672      	cpsid	i
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	b662      	cpsie	i
 80077a0:	603b      	str	r3, [r7, #0]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077a6:	4b09      	ldr	r3, [pc, #36]	; (80077cc <prvSwitchTimerLists+0xc4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1af      	bne.n	8007710 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077b0:	4b06      	ldr	r3, [pc, #24]	; (80077cc <prvSwitchTimerLists+0xc4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <prvSwitchTimerLists+0xc8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a04      	ldr	r2, [pc, #16]	; (80077cc <prvSwitchTimerLists+0xc4>)
 80077bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077be:	4a04      	ldr	r2, [pc, #16]	; (80077d0 <prvSwitchTimerLists+0xc8>)
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	6013      	str	r3, [r2, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	200019bc 	.word	0x200019bc
 80077d0:	200019c0 	.word	0x200019c0

080077d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077da:	f000 f947 	bl	8007a6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077de:	4b15      	ldr	r3, [pc, #84]	; (8007834 <prvCheckForValidListAndQueue+0x60>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d120      	bne.n	8007828 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077e6:	4814      	ldr	r0, [pc, #80]	; (8007838 <prvCheckForValidListAndQueue+0x64>)
 80077e8:	f7fd ffce 	bl	8005788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077ec:	4813      	ldr	r0, [pc, #76]	; (800783c <prvCheckForValidListAndQueue+0x68>)
 80077ee:	f7fd ffcb 	bl	8005788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <prvCheckForValidListAndQueue+0x6c>)
 80077f4:	4a10      	ldr	r2, [pc, #64]	; (8007838 <prvCheckForValidListAndQueue+0x64>)
 80077f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077f8:	4b12      	ldr	r3, [pc, #72]	; (8007844 <prvCheckForValidListAndQueue+0x70>)
 80077fa:	4a10      	ldr	r2, [pc, #64]	; (800783c <prvCheckForValidListAndQueue+0x68>)
 80077fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077fe:	2300      	movs	r3, #0
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	4b11      	ldr	r3, [pc, #68]	; (8007848 <prvCheckForValidListAndQueue+0x74>)
 8007804:	4a11      	ldr	r2, [pc, #68]	; (800784c <prvCheckForValidListAndQueue+0x78>)
 8007806:	2110      	movs	r1, #16
 8007808:	200a      	movs	r0, #10
 800780a:	f7fe f8db 	bl	80059c4 <xQueueGenericCreateStatic>
 800780e:	4603      	mov	r3, r0
 8007810:	4a08      	ldr	r2, [pc, #32]	; (8007834 <prvCheckForValidListAndQueue+0x60>)
 8007812:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007814:	4b07      	ldr	r3, [pc, #28]	; (8007834 <prvCheckForValidListAndQueue+0x60>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <prvCheckForValidListAndQueue+0x60>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	490b      	ldr	r1, [pc, #44]	; (8007850 <prvCheckForValidListAndQueue+0x7c>)
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fd10 	bl	8006248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007828:	f000 f954 	bl	8007ad4 <vPortExitCritical>
}
 800782c:	bf00      	nop
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	200019c4 	.word	0x200019c4
 8007838:	20001994 	.word	0x20001994
 800783c:	200019a8 	.word	0x200019a8
 8007840:	200019bc 	.word	0x200019bc
 8007844:	200019c0 	.word	0x200019c0
 8007848:	20001a70 	.word	0x20001a70
 800784c:	200019d0 	.word	0x200019d0
 8007850:	080082bc 	.word	0x080082bc

08007854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3b04      	subs	r3, #4
 8007864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800786c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3b04      	subs	r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f023 0201 	bic.w	r2, r3, #1
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3b04      	subs	r3, #4
 8007882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007884:	4a0c      	ldr	r2, [pc, #48]	; (80078b8 <pxPortInitialiseStack+0x64>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3b14      	subs	r3, #20
 800788e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3b04      	subs	r3, #4
 800789a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f06f 0202 	mvn.w	r2, #2
 80078a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3b20      	subs	r3, #32
 80078a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078aa:	68fb      	ldr	r3, [r7, #12]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	080078bd 	.word	0x080078bd

080078bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <prvTaskExitError+0x5c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d00c      	beq.n	80078ea <prvTaskExitError+0x2e>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	b672      	cpsid	i
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	b662      	cpsie	i
 80078e4:	60fb      	str	r3, [r7, #12]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <prvTaskExitError+0x2c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	b672      	cpsid	i
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	b662      	cpsie	i
 80078fe:	60bb      	str	r3, [r7, #8]
}
 8007900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007902:	bf00      	nop
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0fc      	beq.n	8007904 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	2000001c 	.word	0x2000001c
 800791c:	00000000 	.word	0x00000000

08007920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <pxCurrentTCBConst2>)
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	6808      	ldr	r0, [r1, #0]
 8007926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792a:	f380 8809 	msr	PSP, r0
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f380 8811 	msr	BASEPRI, r0
 800793a:	4770      	bx	lr
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst2>:
 8007940:	20001494 	.word	0x20001494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007948:	4808      	ldr	r0, [pc, #32]	; (800796c <prvPortStartFirstTask+0x24>)
 800794a:	6800      	ldr	r0, [r0, #0]
 800794c:	6800      	ldr	r0, [r0, #0]
 800794e:	f380 8808 	msr	MSP, r0
 8007952:	f04f 0000 	mov.w	r0, #0
 8007956:	f380 8814 	msr	CONTROL, r0
 800795a:	b662      	cpsie	i
 800795c:	b661      	cpsie	f
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	df00      	svc	0
 8007968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800796a:	bf00      	nop
 800796c:	e000ed08 	.word	0xe000ed08

08007970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007976:	4b37      	ldr	r3, [pc, #220]	; (8007a54 <xPortStartScheduler+0xe4>)
 8007978:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4b2f      	ldr	r3, [pc, #188]	; (8007a58 <xPortStartScheduler+0xe8>)
 800799c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800799e:	4b2f      	ldr	r3, [pc, #188]	; (8007a5c <xPortStartScheduler+0xec>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079a4:	e009      	b.n	80079ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80079a6:	4b2d      	ldr	r3, [pc, #180]	; (8007a5c <xPortStartScheduler+0xec>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <xPortStartScheduler+0xec>)
 80079ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d0ef      	beq.n	80079a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079c6:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <xPortStartScheduler+0xec>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00c      	beq.n	80079ec <xPortStartScheduler+0x7c>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	b672      	cpsid	i
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	b662      	cpsie	i
 80079e6:	60bb      	str	r3, [r7, #8]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <xPortStartScheduler+0xec>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	021b      	lsls	r3, r3, #8
 80079f2:	4a1a      	ldr	r2, [pc, #104]	; (8007a5c <xPortStartScheduler+0xec>)
 80079f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f6:	4b19      	ldr	r3, [pc, #100]	; (8007a5c <xPortStartScheduler+0xec>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fe:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <xPortStartScheduler+0xec>)
 8007a00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a0a:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <xPortStartScheduler+0xf0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a14      	ldr	r2, [pc, #80]	; (8007a60 <xPortStartScheduler+0xf0>)
 8007a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a16:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <xPortStartScheduler+0xf0>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <xPortStartScheduler+0xf0>)
 8007a1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a22:	f000 f8dd 	bl	8007be0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a26:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <xPortStartScheduler+0xf4>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a2c:	f000 f8fc 	bl	8007c28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <xPortStartScheduler+0xf8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a0c      	ldr	r2, [pc, #48]	; (8007a68 <xPortStartScheduler+0xf8>)
 8007a36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a3c:	f7ff ff84 	bl	8007948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a40:	f7ff f844 	bl	8006acc <vTaskSwitchContext>
	prvTaskExitError();
 8007a44:	f7ff ff3a 	bl	80078bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	e000e400 	.word	0xe000e400
 8007a58:	20001ac0 	.word	0x20001ac0
 8007a5c:	20001ac4 	.word	0x20001ac4
 8007a60:	e000ed20 	.word	0xe000ed20
 8007a64:	2000001c 	.word	0x2000001c
 8007a68:	e000ef34 	.word	0xe000ef34

08007a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	b672      	cpsid	i
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	b662      	cpsie	i
 8007a86:	607b      	str	r3, [r7, #4]
}
 8007a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a8a:	4b10      	ldr	r3, [pc, #64]	; (8007acc <vPortEnterCritical+0x60>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	4a0e      	ldr	r2, [pc, #56]	; (8007acc <vPortEnterCritical+0x60>)
 8007a92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a94:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <vPortEnterCritical+0x60>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d111      	bne.n	8007ac0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <vPortEnterCritical+0x64>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00c      	beq.n	8007ac0 <vPortEnterCritical+0x54>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	b672      	cpsid	i
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	b662      	cpsie	i
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <vPortEnterCritical+0x52>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	2000001c 	.word	0x2000001c
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ada:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <vPortExitCritical+0x54>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10c      	bne.n	8007afc <vPortExitCritical+0x28>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	b672      	cpsid	i
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	b662      	cpsie	i
 8007af6:	607b      	str	r3, [r7, #4]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007afc:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <vPortExitCritical+0x54>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <vPortExitCritical+0x54>)
 8007b04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b06:	4b08      	ldr	r3, [pc, #32]	; (8007b28 <vPortExitCritical+0x54>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d105      	bne.n	8007b1a <vPortExitCritical+0x46>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	f383 8811 	msr	BASEPRI, r3
}
 8007b18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	2000001c 	.word	0x2000001c
 8007b2c:	00000000 	.word	0x00000000

08007b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b30:	f3ef 8009 	mrs	r0, PSP
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <pxCurrentTCBConst>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f01e 0f10 	tst.w	lr, #16
 8007b40:	bf08      	it	eq
 8007b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	6010      	str	r0, [r2, #0]
 8007b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b54:	b672      	cpsid	i
 8007b56:	f380 8811 	msr	BASEPRI, r0
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	b662      	cpsie	i
 8007b64:	f7fe ffb2 	bl	8006acc <vTaskSwitchContext>
 8007b68:	f04f 0000 	mov.w	r0, #0
 8007b6c:	f380 8811 	msr	BASEPRI, r0
 8007b70:	bc09      	pop	{r0, r3}
 8007b72:	6819      	ldr	r1, [r3, #0]
 8007b74:	6808      	ldr	r0, [r1, #0]
 8007b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	f01e 0f10 	tst.w	lr, #16
 8007b7e:	bf08      	it	eq
 8007b80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b84:	f380 8809 	msr	PSP, r0
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop

08007b90 <pxCurrentTCBConst>:
 8007b90:	20001494 	.word	0x20001494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	b672      	cpsid	i
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	b662      	cpsie	i
 8007bb2:	607b      	str	r3, [r7, #4]
}
 8007bb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bb6:	f7fe fecd 	bl	8006954 <xTaskIncrementTick>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bc0:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <SysTick_Handler+0x44>)
 8007bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	f383 8811 	msr	BASEPRI, r3
}
 8007bd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <vPortSetupTimerInterrupt+0x34>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <vPortSetupTimerInterrupt+0x38>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <vPortSetupTimerInterrupt+0x3c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <vPortSetupTimerInterrupt+0x40>)
 8007bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfa:	099b      	lsrs	r3, r3, #6
 8007bfc:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <vPortSetupTimerInterrupt+0x44>)
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c02:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <vPortSetupTimerInterrupt+0x34>)
 8007c04:	2207      	movs	r2, #7
 8007c06:	601a      	str	r2, [r3, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	e000e010 	.word	0xe000e010
 8007c18:	e000e018 	.word	0xe000e018
 8007c1c:	20000010 	.word	0x20000010
 8007c20:	10624dd3 	.word	0x10624dd3
 8007c24:	e000e014 	.word	0xe000e014

08007c28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c38 <vPortEnableVFP+0x10>
 8007c2c:	6801      	ldr	r1, [r0, #0]
 8007c2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c32:	6001      	str	r1, [r0, #0]
 8007c34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c36:	bf00      	nop
 8007c38:	e000ed88 	.word	0xe000ed88

08007c3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c42:	f3ef 8305 	mrs	r3, IPSR
 8007c46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b0f      	cmp	r3, #15
 8007c4c:	d916      	bls.n	8007c7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c4e:	4a19      	ldr	r2, [pc, #100]	; (8007cb4 <vPortValidateInterruptPriority+0x78>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c58:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <vPortValidateInterruptPriority+0x7c>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	7afa      	ldrb	r2, [r7, #11]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d20c      	bcs.n	8007c7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	b672      	cpsid	i
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	b662      	cpsie	i
 8007c76:	607b      	str	r3, [r7, #4]
}
 8007c78:	bf00      	nop
 8007c7a:	e7fe      	b.n	8007c7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c7c:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <vPortValidateInterruptPriority+0x80>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <vPortValidateInterruptPriority+0x84>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d90c      	bls.n	8007ca6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	b672      	cpsid	i
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	b662      	cpsie	i
 8007ca0:	603b      	str	r3, [r7, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <vPortValidateInterruptPriority+0x68>
	}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	e000e3f0 	.word	0xe000e3f0
 8007cb8:	20001ac0 	.word	0x20001ac0
 8007cbc:	e000ed0c 	.word	0xe000ed0c
 8007cc0:	20001ac4 	.word	0x20001ac4

08007cc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cd0:	f7fe fd82 	bl	80067d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cd4:	4b5b      	ldr	r3, [pc, #364]	; (8007e44 <pvPortMalloc+0x180>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cdc:	f000 f91a 	bl	8007f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ce0:	4b59      	ldr	r3, [pc, #356]	; (8007e48 <pvPortMalloc+0x184>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f040 8092 	bne.w	8007e12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01f      	beq.n	8007d34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d016      	beq.n	8007d34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f023 0307 	bic.w	r3, r3, #7
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00c      	beq.n	8007d34 <pvPortMalloc+0x70>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	b672      	cpsid	i
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	b662      	cpsie	i
 8007d2e:	617b      	str	r3, [r7, #20]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d06b      	beq.n	8007e12 <pvPortMalloc+0x14e>
 8007d3a:	4b44      	ldr	r3, [pc, #272]	; (8007e4c <pvPortMalloc+0x188>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d866      	bhi.n	8007e12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d44:	4b42      	ldr	r3, [pc, #264]	; (8007e50 <pvPortMalloc+0x18c>)
 8007d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d48:	4b41      	ldr	r3, [pc, #260]	; (8007e50 <pvPortMalloc+0x18c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d4e:	e004      	b.n	8007d5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d903      	bls.n	8007d6c <pvPortMalloc+0xa8>
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f1      	bne.n	8007d50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d6c:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <pvPortMalloc+0x180>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d04d      	beq.n	8007e12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	2308      	movs	r3, #8
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d921      	bls.n	8007ddc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <pvPortMalloc+0x100>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	b672      	cpsid	i
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	b662      	cpsie	i
 8007dbe:	613b      	str	r3, [r7, #16]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dd6:	69b8      	ldr	r0, [r7, #24]
 8007dd8:	f000 f8fe 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ddc:	4b1b      	ldr	r3, [pc, #108]	; (8007e4c <pvPortMalloc+0x188>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <pvPortMalloc+0x188>)
 8007de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dea:	4b18      	ldr	r3, [pc, #96]	; (8007e4c <pvPortMalloc+0x188>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <pvPortMalloc+0x190>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d203      	bcs.n	8007dfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007df6:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <pvPortMalloc+0x188>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <pvPortMalloc+0x190>)
 8007dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	4b11      	ldr	r3, [pc, #68]	; (8007e48 <pvPortMalloc+0x184>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e12:	f7fe fcef 	bl	80067f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00c      	beq.n	8007e3a <pvPortMalloc+0x176>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	b672      	cpsid	i
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	b662      	cpsie	i
 8007e34:	60fb      	str	r3, [r7, #12]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <pvPortMalloc+0x174>
	return pvReturn;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3728      	adds	r7, #40	; 0x28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	200056d0 	.word	0x200056d0
 8007e48:	200056dc 	.word	0x200056dc
 8007e4c:	200056d4 	.word	0x200056d4
 8007e50:	200056c8 	.word	0x200056c8
 8007e54:	200056d8 	.word	0x200056d8

08007e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d04c      	beq.n	8007f04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e6a:	2308      	movs	r3, #8
 8007e6c:	425b      	negs	r3, r3
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4413      	add	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	4b23      	ldr	r3, [pc, #140]	; (8007f0c <vPortFree+0xb4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4013      	ands	r3, r2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10c      	bne.n	8007ea0 <vPortFree+0x48>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	b672      	cpsid	i
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	b662      	cpsie	i
 8007e9a:	60fb      	str	r3, [r7, #12]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00c      	beq.n	8007ec2 <vPortFree+0x6a>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	b672      	cpsid	i
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	b662      	cpsie	i
 8007ebc:	60bb      	str	r3, [r7, #8]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	4b11      	ldr	r3, [pc, #68]	; (8007f0c <vPortFree+0xb4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d019      	beq.n	8007f04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d115      	bne.n	8007f04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <vPortFree+0xb4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	401a      	ands	r2, r3
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ee8:	f7fe fc76 	bl	80067d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <vPortFree+0xb8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <vPortFree+0xb8>)
 8007ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007efa:	6938      	ldr	r0, [r7, #16]
 8007efc:	f000 f86c 	bl	8007fd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f00:	f7fe fc78 	bl	80067f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f04:	bf00      	nop
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	200056dc 	.word	0x200056dc
 8007f10:	200056d4 	.word	0x200056d4

08007f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <prvHeapInit+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3307      	adds	r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <prvHeapInit+0xac>)
 8007f44:	4413      	add	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f52:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f60:	2208      	movs	r2, #8
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0307 	bic.w	r3, r3, #7
 8007f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <prvHeapInit+0xb8>)
 8007fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <prvHeapInit+0xbc>)
 8007faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <prvHeapInit+0xc0>)
 8007fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20001ac8 	.word	0x20001ac8
 8007fc4:	200056c8 	.word	0x200056c8
 8007fc8:	200056d0 	.word	0x200056d0
 8007fcc:	200056d8 	.word	0x200056d8
 8007fd0:	200056d4 	.word	0x200056d4
 8007fd4:	200056dc 	.word	0x200056dc

08007fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fe0:	4b28      	ldr	r3, [pc, #160]	; (8008084 <prvInsertBlockIntoFreeList+0xac>)
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e002      	b.n	8007fec <prvInsertBlockIntoFreeList+0x14>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8f7      	bhi.n	8007fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d108      	bne.n	800801a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d118      	bne.n	8008060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d00d      	beq.n	8008056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e008      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e003      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d002      	beq.n	8008076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	200056c8 	.word	0x200056c8
 8008088:	200056d0 	.word	0x200056d0

0800808c <memset>:
 800808c:	4402      	add	r2, r0
 800808e:	4603      	mov	r3, r0
 8008090:	4293      	cmp	r3, r2
 8008092:	d100      	bne.n	8008096 <memset+0xa>
 8008094:	4770      	bx	lr
 8008096:	f803 1b01 	strb.w	r1, [r3], #1
 800809a:	e7f9      	b.n	8008090 <memset+0x4>

0800809c <_reclaim_reent>:
 800809c:	4b29      	ldr	r3, [pc, #164]	; (8008144 <_reclaim_reent+0xa8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4283      	cmp	r3, r0
 80080a2:	b570      	push	{r4, r5, r6, lr}
 80080a4:	4604      	mov	r4, r0
 80080a6:	d04b      	beq.n	8008140 <_reclaim_reent+0xa4>
 80080a8:	69c3      	ldr	r3, [r0, #28]
 80080aa:	b143      	cbz	r3, 80080be <_reclaim_reent+0x22>
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d144      	bne.n	800813c <_reclaim_reent+0xa0>
 80080b2:	69e3      	ldr	r3, [r4, #28]
 80080b4:	6819      	ldr	r1, [r3, #0]
 80080b6:	b111      	cbz	r1, 80080be <_reclaim_reent+0x22>
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 f879 	bl	80081b0 <_free_r>
 80080be:	6961      	ldr	r1, [r4, #20]
 80080c0:	b111      	cbz	r1, 80080c8 <_reclaim_reent+0x2c>
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f874 	bl	80081b0 <_free_r>
 80080c8:	69e1      	ldr	r1, [r4, #28]
 80080ca:	b111      	cbz	r1, 80080d2 <_reclaim_reent+0x36>
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 f86f 	bl	80081b0 <_free_r>
 80080d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80080d4:	b111      	cbz	r1, 80080dc <_reclaim_reent+0x40>
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 f86a 	bl	80081b0 <_free_r>
 80080dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080de:	b111      	cbz	r1, 80080e6 <_reclaim_reent+0x4a>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f865 	bl	80081b0 <_free_r>
 80080e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080e8:	b111      	cbz	r1, 80080f0 <_reclaim_reent+0x54>
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 f860 	bl	80081b0 <_free_r>
 80080f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080f2:	b111      	cbz	r1, 80080fa <_reclaim_reent+0x5e>
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 f85b 	bl	80081b0 <_free_r>
 80080fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080fc:	b111      	cbz	r1, 8008104 <_reclaim_reent+0x68>
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f856 	bl	80081b0 <_free_r>
 8008104:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008106:	b111      	cbz	r1, 800810e <_reclaim_reent+0x72>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f851 	bl	80081b0 <_free_r>
 800810e:	6a23      	ldr	r3, [r4, #32]
 8008110:	b1b3      	cbz	r3, 8008140 <_reclaim_reent+0xa4>
 8008112:	4620      	mov	r0, r4
 8008114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008118:	4718      	bx	r3
 800811a:	5949      	ldr	r1, [r1, r5]
 800811c:	b941      	cbnz	r1, 8008130 <_reclaim_reent+0x94>
 800811e:	3504      	adds	r5, #4
 8008120:	69e3      	ldr	r3, [r4, #28]
 8008122:	2d80      	cmp	r5, #128	; 0x80
 8008124:	68d9      	ldr	r1, [r3, #12]
 8008126:	d1f8      	bne.n	800811a <_reclaim_reent+0x7e>
 8008128:	4620      	mov	r0, r4
 800812a:	f000 f841 	bl	80081b0 <_free_r>
 800812e:	e7c0      	b.n	80080b2 <_reclaim_reent+0x16>
 8008130:	680e      	ldr	r6, [r1, #0]
 8008132:	4620      	mov	r0, r4
 8008134:	f000 f83c 	bl	80081b0 <_free_r>
 8008138:	4631      	mov	r1, r6
 800813a:	e7ef      	b.n	800811c <_reclaim_reent+0x80>
 800813c:	2500      	movs	r5, #0
 800813e:	e7ef      	b.n	8008120 <_reclaim_reent+0x84>
 8008140:	bd70      	pop	{r4, r5, r6, pc}
 8008142:	bf00      	nop
 8008144:	2000006c 	.word	0x2000006c

08008148 <__libc_init_array>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4d0d      	ldr	r5, [pc, #52]	; (8008180 <__libc_init_array+0x38>)
 800814c:	4c0d      	ldr	r4, [pc, #52]	; (8008184 <__libc_init_array+0x3c>)
 800814e:	1b64      	subs	r4, r4, r5
 8008150:	10a4      	asrs	r4, r4, #2
 8008152:	2600      	movs	r6, #0
 8008154:	42a6      	cmp	r6, r4
 8008156:	d109      	bne.n	800816c <__libc_init_array+0x24>
 8008158:	4d0b      	ldr	r5, [pc, #44]	; (8008188 <__libc_init_array+0x40>)
 800815a:	4c0c      	ldr	r4, [pc, #48]	; (800818c <__libc_init_array+0x44>)
 800815c:	f000 f880 	bl	8008260 <_init>
 8008160:	1b64      	subs	r4, r4, r5
 8008162:	10a4      	asrs	r4, r4, #2
 8008164:	2600      	movs	r6, #0
 8008166:	42a6      	cmp	r6, r4
 8008168:	d105      	bne.n	8008176 <__libc_init_array+0x2e>
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008170:	4798      	blx	r3
 8008172:	3601      	adds	r6, #1
 8008174:	e7ee      	b.n	8008154 <__libc_init_array+0xc>
 8008176:	f855 3b04 	ldr.w	r3, [r5], #4
 800817a:	4798      	blx	r3
 800817c:	3601      	adds	r6, #1
 800817e:	e7f2      	b.n	8008166 <__libc_init_array+0x1e>
 8008180:	080097f4 	.word	0x080097f4
 8008184:	080097f4 	.word	0x080097f4
 8008188:	080097f4 	.word	0x080097f4
 800818c:	080097f8 	.word	0x080097f8

08008190 <__retarget_lock_acquire_recursive>:
 8008190:	4770      	bx	lr

08008192 <__retarget_lock_release_recursive>:
 8008192:	4770      	bx	lr

08008194 <memcpy>:
 8008194:	440a      	add	r2, r1
 8008196:	4291      	cmp	r1, r2
 8008198:	f100 33ff 	add.w	r3, r0, #4294967295
 800819c:	d100      	bne.n	80081a0 <memcpy+0xc>
 800819e:	4770      	bx	lr
 80081a0:	b510      	push	{r4, lr}
 80081a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081aa:	4291      	cmp	r1, r2
 80081ac:	d1f9      	bne.n	80081a2 <memcpy+0xe>
 80081ae:	bd10      	pop	{r4, pc}

080081b0 <_free_r>:
 80081b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b2:	2900      	cmp	r1, #0
 80081b4:	d044      	beq.n	8008240 <_free_r+0x90>
 80081b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ba:	9001      	str	r0, [sp, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f1a1 0404 	sub.w	r4, r1, #4
 80081c2:	bfb8      	it	lt
 80081c4:	18e4      	addlt	r4, r4, r3
 80081c6:	f000 f83f 	bl	8008248 <__malloc_lock>
 80081ca:	4a1e      	ldr	r2, [pc, #120]	; (8008244 <_free_r+0x94>)
 80081cc:	9801      	ldr	r0, [sp, #4]
 80081ce:	6813      	ldr	r3, [r2, #0]
 80081d0:	b933      	cbnz	r3, 80081e0 <_free_r+0x30>
 80081d2:	6063      	str	r3, [r4, #4]
 80081d4:	6014      	str	r4, [r2, #0]
 80081d6:	b003      	add	sp, #12
 80081d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081dc:	f000 b83a 	b.w	8008254 <__malloc_unlock>
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	d908      	bls.n	80081f6 <_free_r+0x46>
 80081e4:	6825      	ldr	r5, [r4, #0]
 80081e6:	1961      	adds	r1, r4, r5
 80081e8:	428b      	cmp	r3, r1
 80081ea:	bf01      	itttt	eq
 80081ec:	6819      	ldreq	r1, [r3, #0]
 80081ee:	685b      	ldreq	r3, [r3, #4]
 80081f0:	1949      	addeq	r1, r1, r5
 80081f2:	6021      	streq	r1, [r4, #0]
 80081f4:	e7ed      	b.n	80081d2 <_free_r+0x22>
 80081f6:	461a      	mov	r2, r3
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	b10b      	cbz	r3, 8008200 <_free_r+0x50>
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d9fa      	bls.n	80081f6 <_free_r+0x46>
 8008200:	6811      	ldr	r1, [r2, #0]
 8008202:	1855      	adds	r5, r2, r1
 8008204:	42a5      	cmp	r5, r4
 8008206:	d10b      	bne.n	8008220 <_free_r+0x70>
 8008208:	6824      	ldr	r4, [r4, #0]
 800820a:	4421      	add	r1, r4
 800820c:	1854      	adds	r4, r2, r1
 800820e:	42a3      	cmp	r3, r4
 8008210:	6011      	str	r1, [r2, #0]
 8008212:	d1e0      	bne.n	80081d6 <_free_r+0x26>
 8008214:	681c      	ldr	r4, [r3, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	6053      	str	r3, [r2, #4]
 800821a:	440c      	add	r4, r1
 800821c:	6014      	str	r4, [r2, #0]
 800821e:	e7da      	b.n	80081d6 <_free_r+0x26>
 8008220:	d902      	bls.n	8008228 <_free_r+0x78>
 8008222:	230c      	movs	r3, #12
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	e7d6      	b.n	80081d6 <_free_r+0x26>
 8008228:	6825      	ldr	r5, [r4, #0]
 800822a:	1961      	adds	r1, r4, r5
 800822c:	428b      	cmp	r3, r1
 800822e:	bf04      	itt	eq
 8008230:	6819      	ldreq	r1, [r3, #0]
 8008232:	685b      	ldreq	r3, [r3, #4]
 8008234:	6063      	str	r3, [r4, #4]
 8008236:	bf04      	itt	eq
 8008238:	1949      	addeq	r1, r1, r5
 800823a:	6021      	streq	r1, [r4, #0]
 800823c:	6054      	str	r4, [r2, #4]
 800823e:	e7ca      	b.n	80081d6 <_free_r+0x26>
 8008240:	b003      	add	sp, #12
 8008242:	bd30      	pop	{r4, r5, pc}
 8008244:	2000581c 	.word	0x2000581c

08008248 <__malloc_lock>:
 8008248:	4801      	ldr	r0, [pc, #4]	; (8008250 <__malloc_lock+0x8>)
 800824a:	f7ff bfa1 	b.w	8008190 <__retarget_lock_acquire_recursive>
 800824e:	bf00      	nop
 8008250:	20005818 	.word	0x20005818

08008254 <__malloc_unlock>:
 8008254:	4801      	ldr	r0, [pc, #4]	; (800825c <__malloc_unlock+0x8>)
 8008256:	f7ff bf9c 	b.w	8008192 <__retarget_lock_release_recursive>
 800825a:	bf00      	nop
 800825c:	20005818 	.word	0x20005818

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
