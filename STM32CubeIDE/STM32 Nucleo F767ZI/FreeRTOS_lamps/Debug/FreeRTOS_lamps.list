
FreeRTOS_lamps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f58  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b8  080052b8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c0  080052c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080052c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb0  20000060  08005328  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c10  08005328  00024c10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155ec  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000313e  00000000  00000000  000356bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00038800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd2  00000000  00000000  000399f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290eb  00000000  00000000  0003a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015406  00000000  00000000  000638ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fffc0  00000000  00000000  00078cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cf8  00000000  00000000  00178c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0017d96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08005140 	.word	0x08005140

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08005140 	.word	0x08005140

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000540:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <MX_FREERTOS_Init+0x68>)
 8000542:	2100      	movs	r1, #0
 8000544:	4818      	ldr	r0, [pc, #96]	; (80005a8 <MX_FREERTOS_Init+0x6c>)
 8000546:	f001 ff87 	bl	8002458 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <MX_FREERTOS_Init+0x70>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of API_START_ENGIN */
  API_START_ENGINHandle = osThreadNew(StartAPI_START_ENGIN, NULL, &API_START_ENGIN_attributes);
 8000550:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_FREERTOS_Init+0x74>)
 8000552:	2100      	movs	r1, #0
 8000554:	4817      	ldr	r0, [pc, #92]	; (80005b4 <MX_FREERTOS_Init+0x78>)
 8000556:	f001 ff7f 	bl	8002458 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <MX_FREERTOS_Init+0x7c>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of API_BRAKE */
  API_BRAKEHandle = osThreadNew(StartAPI_BRAKE, NULL, &API_BRAKE_attributes);
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_FREERTOS_Init+0x80>)
 8000562:	2100      	movs	r1, #0
 8000564:	4816      	ldr	r0, [pc, #88]	; (80005c0 <MX_FREERTOS_Init+0x84>)
 8000566:	f001 ff77 	bl	8002458 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <MX_FREERTOS_Init+0x88>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of API_WITHDRAW */
  API_WITHDRAWHandle = osThreadNew(StartAPI_WITHDRAW, NULL, &API_WITHDRAW_attributes);
 8000570:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <MX_FREERTOS_Init+0x8c>)
 8000572:	2100      	movs	r1, #0
 8000574:	4815      	ldr	r0, [pc, #84]	; (80005cc <MX_FREERTOS_Init+0x90>)
 8000576:	f001 ff6f 	bl	8002458 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <MX_FREERTOS_Init+0x94>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of API_TURN_LEFT */
  API_TURN_LEFTHandle = osThreadNew(StartAPI_TURN_LEFT, NULL, &API_TURN_LEFT_attributes);
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <MX_FREERTOS_Init+0x98>)
 8000582:	2100      	movs	r1, #0
 8000584:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_FREERTOS_Init+0x9c>)
 8000586:	f001 ff67 	bl	8002458 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <MX_FREERTOS_Init+0xa0>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of API_TURN_RIGHT */
  API_TURN_RIGHTHandle = osThreadNew(StartAPI_TURN_RIGHT, NULL, &API_TURN_RIGHT_attributes);
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <MX_FREERTOS_Init+0xa4>)
 8000592:	2100      	movs	r1, #0
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <MX_FREERTOS_Init+0xa8>)
 8000596:	f001 ff5f 	bl	8002458 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_FREERTOS_Init+0xac>)
 800059e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	080051c8 	.word	0x080051c8
 80005a8:	080005ed 	.word	0x080005ed
 80005ac:	20000088 	.word	0x20000088
 80005b0:	080051ec 	.word	0x080051ec
 80005b4:	080005fd 	.word	0x080005fd
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	08005210 	.word	0x08005210
 80005c0:	08000645 	.word	0x08000645
 80005c4:	20000090 	.word	0x20000090
 80005c8:	08005234 	.word	0x08005234
 80005cc:	08000695 	.word	0x08000695
 80005d0:	20000094 	.word	0x20000094
 80005d4:	08005258 	.word	0x08005258
 80005d8:	080006e1 	.word	0x080006e1
 80005dc:	20000098 	.word	0x20000098
 80005e0:	0800527c 	.word	0x0800527c
 80005e4:	08000739 	.word	0x08000739
 80005e8:	2000009c 	.word	0x2000009c

080005ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f001 ffd5 	bl	80025a4 <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <StartDefaultTask+0x8>

080005fc <StartAPI_START_ENGIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_START_ENGIN */
void StartAPI_START_ENGIN(void *argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_START_ENGIN */
  /* Infinite loop */
  for(;;)
  {
	  API_START_ENGIN_ButtonStateCurrent = HAL_GPIO_ReadPin(API_START_ENGIN_But_GPIO_Port, API_START_ENGIN_But_Pin);
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <StartAPI_START_ENGIN+0x38>)
 8000608:	f000 fe48 	bl	800129c <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <StartAPI_START_ENGIN+0x3c>)
 8000612:	701a      	strb	r2, [r3, #0]
	  if(API_START_ENGIN_ButtonStateCurrent != API_START_ENGIN_ButtonStateLast)
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <StartAPI_START_ENGIN+0x3c>)
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <StartAPI_START_ENGIN+0x40>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d0f1      	beq.n	8000604 <StartAPI_START_ENGIN+0x8>
	  {
		  HAL_GPIO_TogglePin(API_START_ENGIN_LEDs_GPIO_Port, API_START_ENGIN_LEDs_Pin);
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <StartAPI_START_ENGIN+0x44>)
 8000626:	f000 fe6a 	bl	80012fe <HAL_GPIO_TogglePin>
		  osDelay(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f001 ffba 	bl	80025a4 <osDelay>
	  API_START_ENGIN_ButtonStateCurrent = HAL_GPIO_ReadPin(API_START_ENGIN_But_GPIO_Port, API_START_ENGIN_But_Pin);
 8000630:	e7e8      	b.n	8000604 <StartAPI_START_ENGIN+0x8>
 8000632:	bf00      	nop
 8000634:	40020c00 	.word	0x40020c00
 8000638:	2000007c 	.word	0x2000007c
 800063c:	2000007d 	.word	0x2000007d
 8000640:	40020800 	.word	0x40020800

08000644 <StartAPI_BRAKE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_BRAKE */
void StartAPI_BRAKE(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_BRAKE */
  /* Infinite loop */
  for(;;)
  {
	  API_BRAKE_ButtonStateCurrent = HAL_GPIO_ReadPin(API_BRAKE_But_GPIO_Port, API_BRAKE_But_Pin);
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <StartAPI_BRAKE+0x40>)
 8000650:	f000 fe24 	bl	800129c <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <StartAPI_BRAKE+0x44>)
 800065a:	701a      	strb	r2, [r3, #0]
	  if(API_BRAKE_ButtonStateCurrent != API_BRAKE_ButtonStateLast)
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <StartAPI_BRAKE+0x44>)
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <StartAPI_BRAKE+0x48>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d0f1      	beq.n	800064c <StartAPI_BRAKE+0x8>
	  {
		  HAL_GPIO_TogglePin(API_BRAKE_LEDs_GPIO_Port, API_BRAKE_LEDs_Pin);
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <StartAPI_BRAKE+0x4c>)
 800066e:	f000 fe46 	bl	80012fe <HAL_GPIO_TogglePin>
		  osDelay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f001 ff96 	bl	80025a4 <osDelay>
		  API_BRAKE_ButtonStateLast = API_BRAKE_ButtonStateCurrent;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <StartAPI_BRAKE+0x44>)
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <StartAPI_BRAKE+0x48>)
 800067e:	701a      	strb	r2, [r3, #0]
	  API_BRAKE_ButtonStateCurrent = HAL_GPIO_ReadPin(API_BRAKE_But_GPIO_Port, API_BRAKE_But_Pin);
 8000680:	e7e4      	b.n	800064c <StartAPI_BRAKE+0x8>
 8000682:	bf00      	nop
 8000684:	40020c00 	.word	0x40020c00
 8000688:	2000007e 	.word	0x2000007e
 800068c:	2000007f 	.word	0x2000007f
 8000690:	40020800 	.word	0x40020800

08000694 <StartAPI_WITHDRAW>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_WITHDRAW */
void StartAPI_WITHDRAW(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_WITHDRAW */
  /* Infinite loop */
  for(;;)
  {
	  API_WITHDRAW_ButtonStateCurrent = HAL_GPIO_ReadPin(API_WITHDRAW_But_GPIO_Port, API_WITHDRAW_But_Pin);
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <StartAPI_WITHDRAW+0x40>)
 80006a2:	f000 fdfb 	bl	800129c <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <StartAPI_WITHDRAW+0x44>)
 80006ac:	701a      	strb	r2, [r3, #0]
	  if(API_WITHDRAW_ButtonStateCurrent != API_WITHDRAW_ButtonStateLast)
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <StartAPI_WITHDRAW+0x44>)
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <StartAPI_WITHDRAW+0x48>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d0f0      	beq.n	800069c <StartAPI_WITHDRAW+0x8>
	  {
		  HAL_GPIO_TogglePin(API_WITHDRAW_LEDs_GPIO_Port, API_WITHDRAW_LEDs_Pin);
 80006ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <StartAPI_WITHDRAW+0x40>)
 80006c0:	f000 fe1d 	bl	80012fe <HAL_GPIO_TogglePin>
		  osDelay(100);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f001 ff6d 	bl	80025a4 <osDelay>
		  API_WITHDRAW_ButtonStateLast = API_WITHDRAW_ButtonStateCurrent;
 80006ca:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <StartAPI_WITHDRAW+0x44>)
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <StartAPI_WITHDRAW+0x48>)
 80006d0:	701a      	strb	r2, [r3, #0]
	  API_WITHDRAW_ButtonStateCurrent = HAL_GPIO_ReadPin(API_WITHDRAW_But_GPIO_Port, API_WITHDRAW_But_Pin);
 80006d2:	e7e3      	b.n	800069c <StartAPI_WITHDRAW+0x8>
 80006d4:	40020800 	.word	0x40020800
 80006d8:	20000080 	.word	0x20000080
 80006dc:	20000081 	.word	0x20000081

080006e0 <StartAPI_TURN_LEFT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_TURN_LEFT */
void StartAPI_TURN_LEFT(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_TURN_LEFT */
  /* Infinite loop */
  for(;;)
  {
	  API_TURN_LEFT_ButtonStateCurrent = HAL_GPIO_ReadPin(API_TURN_LEFT_But_GPIO_Port, API_TURN_LEFT_But_Pin);
 80006e8:	2108      	movs	r1, #8
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <StartAPI_TURN_LEFT+0x48>)
 80006ec:	f000 fdd6 	bl	800129c <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <StartAPI_TURN_LEFT+0x4c>)
 80006f6:	701a      	strb	r2, [r3, #0]
	  if(API_TURN_LEFT_ButtonStateCurrent != API_TURN_LEFT_ButtonStateLast)
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <StartAPI_TURN_LEFT+0x4c>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <StartAPI_TURN_LEFT+0x50>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	429a      	cmp	r2, r3
 8000702:	d0f1      	beq.n	80006e8 <StartAPI_TURN_LEFT+0x8>
	  {
		  for(int i=0; i<6; i++)
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e00a      	b.n	8000720 <StartAPI_TURN_LEFT+0x40>
		  {
			  HAL_GPIO_TogglePin(API_TURN_LEFT_LEDs_GPIO_Port, API_TURN_LEFT_LEDs_Pin);
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <StartAPI_TURN_LEFT+0x54>)
 8000710:	f000 fdf5 	bl	80012fe <HAL_GPIO_TogglePin>
			  osDelay(200);
 8000714:	20c8      	movs	r0, #200	; 0xc8
 8000716:	f001 ff45 	bl	80025a4 <osDelay>
		  for(int i=0; i<6; i++)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b05      	cmp	r3, #5
 8000724:	ddf1      	ble.n	800070a <StartAPI_TURN_LEFT+0x2a>
	  API_TURN_LEFT_ButtonStateCurrent = HAL_GPIO_ReadPin(API_TURN_LEFT_But_GPIO_Port, API_TURN_LEFT_But_Pin);
 8000726:	e7df      	b.n	80006e8 <StartAPI_TURN_LEFT+0x8>
 8000728:	40020c00 	.word	0x40020c00
 800072c:	20000084 	.word	0x20000084
 8000730:	20000085 	.word	0x20000085
 8000734:	40020800 	.word	0x40020800

08000738 <StartAPI_TURN_RIGHT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAPI_TURN_RIGHT */
void StartAPI_TURN_RIGHT(void *argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAPI_TURN_RIGHT */
  /* Infinite loop */
  for(;;)
  {
	  API_TURN_RIGHT_ButtonStateCurrent = HAL_GPIO_ReadPin(API_TURN_RIGHT_But_GPIO_Port, API_TURN_RIGHT_But_Pin);
 8000740:	2110      	movs	r1, #16
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <StartAPI_TURN_RIGHT+0x48>)
 8000744:	f000 fdaa 	bl	800129c <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <StartAPI_TURN_RIGHT+0x4c>)
 800074e:	701a      	strb	r2, [r3, #0]
	  	  if(API_TURN_RIGHT_ButtonStateCurrent != API_TURN_RIGHT_ButtonStateLast)
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <StartAPI_TURN_RIGHT+0x4c>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <StartAPI_TURN_RIGHT+0x50>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d0f1      	beq.n	8000740 <StartAPI_TURN_RIGHT+0x8>
	  	  {
	  		  for(int i=0; i<6; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e00a      	b.n	8000778 <StartAPI_TURN_RIGHT+0x40>
	  		  {
	  			  HAL_GPIO_TogglePin(API_TURN_RIGHT_LEDs_GPIO_Port, API_TURN_RIGHT_LEDs_Pin);
 8000762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <StartAPI_TURN_RIGHT+0x54>)
 8000768:	f000 fdc9 	bl	80012fe <HAL_GPIO_TogglePin>
	  			  osDelay(200);
 800076c:	20c8      	movs	r0, #200	; 0xc8
 800076e:	f001 ff19 	bl	80025a4 <osDelay>
	  		  for(int i=0; i<6; i++)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b05      	cmp	r3, #5
 800077c:	ddf1      	ble.n	8000762 <StartAPI_TURN_RIGHT+0x2a>
	  API_TURN_RIGHT_ButtonStateCurrent = HAL_GPIO_ReadPin(API_TURN_RIGHT_But_GPIO_Port, API_TURN_RIGHT_But_Pin);
 800077e:	e7df      	b.n	8000740 <StartAPI_TURN_RIGHT+0x8>
 8000780:	40020c00 	.word	0x40020c00
 8000784:	20000082 	.word	0x20000082
 8000788:	20000083 	.word	0x20000083
 800078c:	40020800 	.word	0x40020800

08000790 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b90      	ldr	r3, [pc, #576]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a8f      	ldr	r2, [pc, #572]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b8d      	ldr	r3, [pc, #564]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b8a      	ldr	r3, [pc, #552]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a89      	ldr	r2, [pc, #548]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b87      	ldr	r3, [pc, #540]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b84      	ldr	r3, [pc, #528]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a83      	ldr	r2, [pc, #524]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b81      	ldr	r3, [pc, #516]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b7e      	ldr	r3, [pc, #504]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a7d      	ldr	r2, [pc, #500]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b7b      	ldr	r3, [pc, #492]	; (80009e8 <MX_GPIO_Init+0x258>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	4b78      	ldr	r3, [pc, #480]	; (80009e8 <MX_GPIO_Init+0x258>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a77      	ldr	r2, [pc, #476]	; (80009e8 <MX_GPIO_Init+0x258>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b75      	ldr	r3, [pc, #468]	; (80009e8 <MX_GPIO_Init+0x258>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	4b72      	ldr	r3, [pc, #456]	; (80009e8 <MX_GPIO_Init+0x258>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a71      	ldr	r2, [pc, #452]	; (80009e8 <MX_GPIO_Init+0x258>)
 8000824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6f      	ldr	r3, [pc, #444]	; (80009e8 <MX_GPIO_Init+0x258>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f244 0181 	movw	r1, #16513	; 0x4081
 800083c:	486b      	ldr	r0, [pc, #428]	; (80009ec <MX_GPIO_Init+0x25c>)
 800083e:	f000 fd45 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	486a      	ldr	r0, [pc, #424]	; (80009f0 <MX_GPIO_Init+0x260>)
 8000848:	f000 fd40 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000852:	4868      	ldr	r0, [pc, #416]	; (80009f4 <MX_GPIO_Init+0x264>)
 8000854:	f000 fd3a 	bl	80012cc <HAL_GPIO_WritePin>
                          |API_TURN_LEFT_LEDs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = API_WITHDRAW_But_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(API_WITHDRAW_But_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4861      	ldr	r0, [pc, #388]	; (80009f4 <MX_GPIO_Init+0x264>)
 8000870:	f000 fb68 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000874:	2332      	movs	r3, #50	; 0x32
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000884:	230b      	movs	r3, #11
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4859      	ldr	r0, [pc, #356]	; (80009f4 <MX_GPIO_Init+0x264>)
 8000890:	f000 fb58 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000894:	2386      	movs	r3, #134	; 0x86
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a4:	230b      	movs	r3, #11
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4852      	ldr	r0, [pc, #328]	; (80009f8 <MX_GPIO_Init+0x268>)
 80008b0:	f000 fb48 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4847      	ldr	r0, [pc, #284]	; (80009ec <MX_GPIO_Init+0x25c>)
 80008ce:	f000 fb39 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e4:	230b      	movs	r3, #11
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	483f      	ldr	r0, [pc, #252]	; (80009ec <MX_GPIO_Init+0x25c>)
 80008f0:	f000 fb28 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000906:	2307      	movs	r3, #7
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <MX_GPIO_Init+0x26c>)
 8000912:	f000 fb17 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4830      	ldr	r0, [pc, #192]	; (80009f0 <MX_GPIO_Init+0x260>)
 800092e:	f000 fb09 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	482a      	ldr	r0, [pc, #168]	; (80009f0 <MX_GPIO_Init+0x260>)
 8000946:	f000 fafd 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = API_START_ENGIN_LEDs_Pin|API_BRAKE_LEDs_Pin|API_WITHDRAW_LEDs_Pin|API_TURN_RIGHT_LEDs_Pin
 800094a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800094e:	61fb      	str	r3, [r7, #28]
                          |API_TURN_LEFT_LEDs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4824      	ldr	r0, [pc, #144]	; (80009f4 <MX_GPIO_Init+0x264>)
 8000964:	f000 faee 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000968:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097a:	230a      	movs	r3, #10
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481c      	ldr	r0, [pc, #112]	; (80009f8 <MX_GPIO_Init+0x268>)
 8000986:	f000 fadd 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800098a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4816      	ldr	r0, [pc, #88]	; (80009f8 <MX_GPIO_Init+0x268>)
 80009a0:	f000 fad0 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = API_TURN_LEFT_But_Pin|API_TURN_RIGHT_But_Pin|API_BRAKE_But_Pin|API_START_ENGIN_But_Pin;
 80009a4:	23d8      	movs	r3, #216	; 0xd8
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_GPIO_Init+0x26c>)
 80009b8:	f000 fac4 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ce:	230b      	movs	r3, #11
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_GPIO_Init+0x260>)
 80009da:	f000 fab3 	bl	8000f44 <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40021800 	.word	0x40021800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 f98f 	bl	8000d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f80a 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f7ff fec0 	bl	8000790 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a10:	f001 fcb8 	bl	8002384 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a14:	f7ff fd92 	bl	800053c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a18:	f001 fce8 	bl	80023ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <main+0x1c>
	...

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2234      	movs	r2, #52	; 0x34
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 fa9c 	bl	8004f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <SystemClock_Config+0xd4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <SystemClock_Config+0xd4>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <SystemClock_Config+0xd4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <SystemClock_Config+0xd8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <SystemClock_Config+0xd8>)
 8000a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <SystemClock_Config+0xd8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a8c:	23d8      	movs	r3, #216	; 0xd8
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fc97 	bl	80013d4 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000aac:	f000 f838 	bl	8000b20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ab0:	f000 fc40 	bl	8001334 <HAL_PWREx_EnableOverDrive>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aba:	f000 f831 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	2107      	movs	r1, #7
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 ff27 	bl	8001930 <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ae8:	f000 f81a 	bl	8000b20 <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3750      	adds	r7, #80	; 0x50
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0e:	f000 f917 	bl	8000d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40001000 	.word	0x40001000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	f06f 0001 	mvn.w	r0, #1
 8000b6a:	f000 f9c1 	bl	8000ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8c:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba4:	f107 0210 	add.w	r2, r7, #16
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 f8ce 	bl	8001d50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bbe:	f001 f8b3 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8000bc2:	6378      	str	r0, [r7, #52]	; 0x34
 8000bc4:	e004      	b.n	8000bd0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bc6:	f001 f8af 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_InitTick+0xe4>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	0c9b      	lsrs	r3, r3, #18
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_InitTick+0xe8>)
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <HAL_InitTick+0xec>)
 8000be2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_InitTick+0xe8>)
 8000be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_InitTick+0xe8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <HAL_InitTick+0xe8>)
 8000c06:	f001 f8d5 	bl	8001db4 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d11b      	bne.n	8000c50 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <HAL_InitTick+0xe8>)
 8000c1a:	f001 f92d 	bl	8001e78 <HAL_TIM_Base_Start_IT>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d111      	bne.n	8000c50 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c2c:	2036      	movs	r0, #54	; 0x36
 8000c2e:	f000 f97b 	bl	8000f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d808      	bhi.n	8000c4a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2036      	movs	r0, #54	; 0x36
 8000c3e:	f000 f957 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_InitTick+0xf0>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e002      	b.n	8000c50 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	200000a0 	.word	0x200000a0
 8000c68:	40001000 	.word	0x40001000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM6_DAC_IRQHandler+0x10>)
 8000ca2:	f001 f961 	bl	8001f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000a0 	.word	0x200000a0

08000cb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cda:	490e      	ldr	r1, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf0:	4c0b      	ldr	r4, [pc, #44]	; (8000d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd7 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f004 f991 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fe7b 	bl	8000a00 <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d18:	080052c8 	.word	0x080052c8
  ldr r2, =_sbss
 8000d1c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d20:	20004c10 	.word	0x20004c10

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>

08000d26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 f8d5 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d30:	200f      	movs	r0, #15
 8000d32:	f7ff ff23 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d36:	f7ff fef9 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	200000ec 	.word	0x200000ec

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000ec 	.word	0x200000ec

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	05fa0000 	.word	0x05fa0000

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e175      	b.n	8001250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8164 	bne.w	800124a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x56>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80be 	beq.w	800124a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e6:	4a61      	ldr	r2, [pc, #388]	; (800126c <HAL_GPIO_Init+0x328>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_GPIO_Init+0x32c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d037      	beq.n	8001182 <HAL_GPIO_Init+0x23e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_GPIO_Init+0x330>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d031      	beq.n	800117e <HAL_GPIO_Init+0x23a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x334>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x236>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a55      	ldr	r2, [pc, #340]	; (800127c <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x232>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x22e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x22a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x226>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x222>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x21e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x350>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x21a>
 800115a:	2309      	movs	r3, #9
 800115c:	e012      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800115e:	230a      	movs	r3, #10
 8001160:	e010      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001162:	2308      	movs	r3, #8
 8001164:	e00e      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001166:	2307      	movs	r3, #7
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116a:	2306      	movs	r3, #6
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x328>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_GPIO_Init+0x354>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f ae86 	bls.w	8000f64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40022000 	.word	0x40022000
 8001294:	40022400 	.word	0x40022400
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43d9      	mvns	r1, r3
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	400b      	ands	r3, r1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_PWREx_EnableOverDrive+0x98>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_PWREx_EnableOverDrive+0x98>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_PWREx_EnableOverDrive+0x98>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001362:	f7ff fd01 	bl	8000d68 <HAL_GetTick>
 8001366:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001368:	e009      	b.n	800137e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800136a:	f7ff fcfd 	bl	8000d68 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001378:	d901      	bls.n	800137e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e022      	b.n	80013c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138a:	d1ee      	bne.n	800136a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001396:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001398:	f7ff fce6 	bl	8000d68 <HAL_GetTick>
 800139c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800139e:	e009      	b.n	80013b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013a0:	f7ff fce2 	bl	8000d68 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ae:	d901      	bls.n	80013b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e007      	b.n	80013c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013c0:	d1ee      	bne.n	80013a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e29b      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8087 	beq.w	8001506 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f8:	4b96      	ldr	r3, [pc, #600]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b04      	cmp	r3, #4
 8001402:	d00c      	beq.n	800141e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001404:	4b93      	ldr	r3, [pc, #588]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b08      	cmp	r3, #8
 800140e:	d112      	bne.n	8001436 <HAL_RCC_OscConfig+0x62>
 8001410:	4b90      	ldr	r3, [pc, #576]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	4b8d      	ldr	r3, [pc, #564]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d06c      	beq.n	8001504 <HAL_RCC_OscConfig+0x130>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d168      	bne.n	8001504 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e275      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x7a>
 8001440:	4b84      	ldr	r3, [pc, #528]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a83      	ldr	r2, [pc, #524]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e02e      	b.n	80014ac <HAL_RCC_OscConfig+0xd8>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x9c>
 8001456:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a7e      	ldr	r2, [pc, #504]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 800145c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7b      	ldr	r2, [pc, #492]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0xd8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0xc0>
 800147a:	4b76      	ldr	r3, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a75      	ldr	r2, [pc, #468]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b73      	ldr	r3, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a72      	ldr	r2, [pc, #456]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xd8>
 8001494:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a6e      	ldr	r2, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b6c      	ldr	r3, [pc, #432]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a6b      	ldr	r2, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc58 	bl	8000d68 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fc54 	bl	8000d68 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e229      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0xe8>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fc44 	bl	8000d68 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fc40 	bl	8000d68 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e215      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f6:	4b57      	ldr	r3, [pc, #348]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x110>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d069      	beq.n	80015e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001512:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151e:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b08      	cmp	r3, #8
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_OscConfig+0x190>
 800152a:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x17a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1e9      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	493d      	ldr	r1, [pc, #244]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	e040      	b.n	80015e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d023      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a38      	ldr	r2, [pc, #224]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fbf6 	bl	8000d68 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fbf2 	bl	8000d68 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1c7      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4929      	ldr	r1, [pc, #164]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
 80015b2:	e018      	b.n	80015e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fbd2 	bl	8000d68 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fbce 	bl	8000d68 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1a3      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d038      	beq.n	8001664 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d019      	beq.n	800162e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 80015fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff fbaf 	bl	8000d68 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fbab 	bl	8000d68 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e180      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x23a>
 800162c:	e01a      	b.n	8001664 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_RCC_OscConfig+0x280>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fb95 	bl	8000d68 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff fb91 	bl	8000d68 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d903      	bls.n	8001658 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e166      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
 8001654:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 800165a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a4 	beq.w	80017ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a88      	ldr	r2, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b86      	ldr	r3, [pc, #536]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169a:	4b83      	ldr	r3, [pc, #524]	; (80018a8 <HAL_RCC_OscConfig+0x4d4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016a6:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <HAL_RCC_OscConfig+0x4d4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a7f      	ldr	r2, [pc, #508]	; (80018a8 <HAL_RCC_OscConfig+0x4d4>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fb59 	bl	8000d68 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff fb55 	bl	8000d68 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e12a      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016cc:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x4d4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x31a>
 80016e0:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a6f      	ldr	r2, [pc, #444]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
 80016ec:	e02d      	b.n	800174a <HAL_RCC_OscConfig+0x376>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x33c>
 80016f6:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a6a      	ldr	r2, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a67      	ldr	r2, [pc, #412]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	e01c      	b.n	800174a <HAL_RCC_OscConfig+0x376>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x35e>
 8001718:	4b62      	ldr	r3, [pc, #392]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a61      	ldr	r2, [pc, #388]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x376>
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5b      	ldr	r2, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fb09 	bl	8000d68 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fb05 	bl	8000d68 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0d8      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ee      	beq.n	800175a <HAL_RCC_OscConfig+0x386>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff faf3 	bl	8000d68 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff faef 	bl	8000d68 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0c2      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a3c      	ldr	r2, [pc, #240]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80ae 	beq.w	8001920 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d06d      	beq.n	80018ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d14b      	bne.n	8001870 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a31      	ldr	r2, [pc, #196]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 80017de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fac0 	bl	8000d68 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fabc 	bl	8000d68 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e091      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	071b      	lsls	r3, r3, #28
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fa8e 	bl	8000d68 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fa8a 	bl	8000d68 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e05f      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x47c>
 800186e:	e057      	b.n	8001920 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800187a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fa74 	bl	8000d68 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fa70 	bl	8000d68 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e045      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_RCC_OscConfig+0x4d0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x4b0>
 80018a2:	e03d      	b.n	8001920 <HAL_RCC_OscConfig+0x54c>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_RCC_OscConfig+0x558>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d030      	beq.n	800191c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d129      	bne.n	800191c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d122      	bne.n	800191c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d119      	bne.n	800191c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10f      	bne.n	800191c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0d0      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 020f 	bic.w	r2, r3, #15
 800195e:	4965      	ldr	r1, [pc, #404]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800199a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	494d      	ldr	r1, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e073      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06b      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4936      	ldr	r1, [pc, #216]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a24:	f7ff f9a0 	bl	8000d68 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff f99c 	bl	8000d68 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e053      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d210      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 020f 	bic.w	r2, r3, #15
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e032      	b.n	8001aea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac2:	f000 f821 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	490a      	ldr	r1, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1cc>)
 8001ad4:	5ccb      	ldrb	r3, [r1, r3]
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1d0>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1d4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f84a 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	080052a0 	.word	0x080052a0
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b0c:	b094      	sub	sp, #80	; 0x50
 8001b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
 8001b14:	2300      	movs	r3, #0
 8001b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b18:	2300      	movs	r3, #0
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b20:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d00d      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x40>
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	f200 80e1 	bhi.w	8001cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x34>
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b3a:	e0db      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b40:	e0db      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b72      	ldr	r3, [pc, #456]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b46:	e0d8      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b52:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d063      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	2200      	movs	r2, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
 8001b76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	462b      	mov	r3, r5
 8001b7e:	f04f 0000 	mov.w	r0, #0
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	0159      	lsls	r1, r3, #5
 8001b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8c:	0150      	lsls	r0, r2, #5
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4621      	mov	r1, r4
 8001b94:	1a51      	subs	r1, r2, r1
 8001b96:	6139      	str	r1, [r7, #16]
 8001b98:	4629      	mov	r1, r5
 8001b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bac:	4659      	mov	r1, fp
 8001bae:	018b      	lsls	r3, r1, #6
 8001bb0:	4651      	mov	r1, sl
 8001bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	018a      	lsls	r2, r1, #6
 8001bba:	4651      	mov	r1, sl
 8001bbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001bc0:	4659      	mov	r1, fp
 8001bc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bda:	4690      	mov	r8, r2
 8001bdc:	4699      	mov	r9, r3
 8001bde:	4623      	mov	r3, r4
 8001be0:	eb18 0303 	adds.w	r3, r8, r3
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	462b      	mov	r3, r5
 8001be8:	eb49 0303 	adc.w	r3, r9, r3
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	028b      	lsls	r3, r1, #10
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c04:	4621      	mov	r1, r4
 8001c06:	028a      	lsls	r2, r1, #10
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c18:	f7fe fb12 	bl	8000240 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c24:	e058      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4611      	mov	r1, r2
 8001c32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c40:	4642      	mov	r2, r8
 8001c42:	464b      	mov	r3, r9
 8001c44:	f04f 0000 	mov.w	r0, #0
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	0159      	lsls	r1, r3, #5
 8001c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c52:	0150      	lsls	r0, r2, #5
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4641      	mov	r1, r8
 8001c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c5e:	4649      	mov	r1, r9
 8001c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c78:	ebb2 040a 	subs.w	r4, r2, sl
 8001c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	00eb      	lsls	r3, r5, #3
 8001c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8e:	00e2      	lsls	r2, r4, #3
 8001c90:	4614      	mov	r4, r2
 8001c92:	461d      	mov	r5, r3
 8001c94:	4643      	mov	r3, r8
 8001c96:	18e3      	adds	r3, r4, r3
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cae:	4629      	mov	r1, r5
 8001cb0:	028b      	lsls	r3, r1, #10
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb8:	4621      	mov	r1, r4
 8001cba:	028a      	lsls	r2, r1, #10
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	61fa      	str	r2, [r7, #28]
 8001cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ccc:	f7fe fab8 	bl	8000240 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf2:	e002      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3750      	adds	r7, #80	; 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400

08001d10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	080052b0 	.word	0x080052b0

08001d50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_RCC_GetClockConfig+0x60>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	601a      	str	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40023c00 	.word	0x40023c00

08001db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e049      	b.n	8001e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f841 	bl	8001e62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f000 fa00 	bl	80021f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d001      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e054      	b.n	8001f3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d022      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d01d      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d018      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_TIM_Base_Start_IT+0xe0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_TIM_Base_Start_IT+0xe4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_TIM_Base_Start_IT+0xe8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d115      	bne.n	8001f24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_TIM_Base_Start_IT+0xec>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d015      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0xbe>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d011      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f22:	e008      	b.n	8001f36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e000      	b.n	8001f38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40000800 	.word	0x40000800
 8001f54:	40000c00 	.word	0x40000c00
 8001f58:	40010400 	.word	0x40010400
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	40001800 	.word	0x40001800
 8001f64:	00010007 	.word	0x00010007

08001f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0202 	mvn.w	r2, #2
 8001f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f905 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8f7 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f908 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0204 	mvn.w	r2, #4
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8db 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8cd 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f8de 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b08      	cmp	r3, #8
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b08      	cmp	r3, #8
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0208 	mvn.w	r2, #8
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8b1 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8a3 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8b4 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b10      	cmp	r3, #16
 8002078:	d122      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b10      	cmp	r3, #16
 8002086:	d11b      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0210 	mvn.w	r2, #16
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2208      	movs	r2, #8
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f887 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f879 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f88a 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10e      	bne.n	80020ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d107      	bne.n	80020ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0201 	mvn.w	r2, #1
 80020e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fd08 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b80      	cmp	r3, #128	; 0x80
 80020f8:	d10e      	bne.n	8002118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002104:	2b80      	cmp	r3, #128	; 0x80
 8002106:	d107      	bne.n	8002118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f91a 	bl	800234c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002126:	d10e      	bne.n	8002146 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b80      	cmp	r3, #128	; 0x80
 8002134:	d107      	bne.n	8002146 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800213e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f90d 	bl	8002360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d10e      	bne.n	8002172 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d107      	bne.n	8002172 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800216a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f838 	bl	80021e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	d10e      	bne.n	800219e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d107      	bne.n	800219e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0220 	mvn.w	r2, #32
 8002196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8cd 	bl	8002338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a40      	ldr	r2, [pc, #256]	; (800230c <TIM_Base_SetConfig+0x114>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d00f      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <TIM_Base_SetConfig+0x118>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00b      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3c      	ldr	r2, [pc, #240]	; (8002314 <TIM_Base_SetConfig+0x11c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <TIM_Base_SetConfig+0x120>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d003      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3a      	ldr	r2, [pc, #232]	; (800231c <TIM_Base_SetConfig+0x124>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d108      	bne.n	800224a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a2f      	ldr	r2, [pc, #188]	; (800230c <TIM_Base_SetConfig+0x114>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d027      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2c      	ldr	r2, [pc, #176]	; (8002310 <TIM_Base_SetConfig+0x118>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d023      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <TIM_Base_SetConfig+0x11c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <TIM_Base_SetConfig+0x120>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a29      	ldr	r2, [pc, #164]	; (800231c <TIM_Base_SetConfig+0x124>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d017      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <TIM_Base_SetConfig+0x128>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <TIM_Base_SetConfig+0x12c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a26      	ldr	r2, [pc, #152]	; (8002328 <TIM_Base_SetConfig+0x130>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <TIM_Base_SetConfig+0x134>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <TIM_Base_SetConfig+0x138>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a23      	ldr	r2, [pc, #140]	; (8002334 <TIM_Base_SetConfig+0x13c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d108      	bne.n	80022bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <TIM_Base_SetConfig+0x114>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0xf8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	; (800231c <TIM_Base_SetConfig+0x124>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d103      	bne.n	80022f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	615a      	str	r2, [r3, #20]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40010400 	.word	0x40010400
 8002320:	40014000 	.word	0x40014000
 8002324:	40014400 	.word	0x40014400
 8002328:	40014800 	.word	0x40014800
 800232c:	40001800 	.word	0x40001800
 8002330:	40001c00 	.word	0x40001c00
 8002334:	40002000 	.word	0x40002000

08002338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800238a:	f3ef 8305 	mrs	r3, IPSR
 800238e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002390:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002396:	f3ef 8310 	mrs	r3, PRIMASK
 800239a:	607b      	str	r3, [r7, #4]
  return(result);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023a2:	f3ef 8311 	mrs	r3, BASEPRI
 80023a6:	603b      	str	r3, [r7, #0]
  return(result);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <osKernelInitialize+0x3a>
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <osKernelInitialize+0x64>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d103      	bne.n	80023be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80023b6:	f06f 0305 	mvn.w	r3, #5
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e00c      	b.n	80023d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <osKernelInitialize+0x64>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <osKernelInitialize+0x64>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e002      	b.n	80023d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200000f0 	.word	0x200000f0

080023ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023f2:	f3ef 8305 	mrs	r3, IPSR
 80023f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80023f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002402:	607b      	str	r3, [r7, #4]
  return(result);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800240a:	f3ef 8311 	mrs	r3, BASEPRI
 800240e:	603b      	str	r3, [r7, #0]
  return(result);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <osKernelStart+0x3a>
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <osKernelStart+0x68>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d103      	bne.n	8002426 <osKernelStart+0x3a>
    stat = osErrorISR;
 800241e:	f06f 0305 	mvn.w	r3, #5
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e010      	b.n	8002448 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <osKernelStart+0x68>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d109      	bne.n	8002442 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800242e:	f7ff ffa1 	bl	8002374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <osKernelStart+0x68>)
 8002434:	2202      	movs	r2, #2
 8002436:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002438:	f001 f8ca 	bl	80035d0 <vTaskStartScheduler>
      stat = osOK;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e002      	b.n	8002448 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200000f0 	.word	0x200000f0

08002458 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b090      	sub	sp, #64	; 0x40
 800245c:	af04      	add	r7, sp, #16
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002468:	f3ef 8305 	mrs	r3, IPSR
 800246c:	61fb      	str	r3, [r7, #28]
  return(result);
 800246e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 808f 	bne.w	8002594 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002476:	f3ef 8310 	mrs	r3, PRIMASK
 800247a:	61bb      	str	r3, [r7, #24]
  return(result);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002482:	f3ef 8311 	mrs	r3, BASEPRI
 8002486:	617b      	str	r3, [r7, #20]
  return(result);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <osThreadNew+0x3e>
 800248e:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <osThreadNew+0x148>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d07e      	beq.n	8002594 <osThreadNew+0x13c>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d07b      	beq.n	8002594 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80024a0:	2318      	movs	r3, #24
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d045      	beq.n	8002540 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <osThreadNew+0x6a>
        name = attr->name;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <osThreadNew+0x90>
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	2b38      	cmp	r3, #56	; 0x38
 80024da:	d805      	bhi.n	80024e8 <osThreadNew+0x90>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <osThreadNew+0x94>
        return (NULL);
 80024e8:	2300      	movs	r3, #0
 80024ea:	e054      	b.n	8002596 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <osThreadNew+0xca>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2ba7      	cmp	r3, #167	; 0xa7
 800250a:	d90a      	bls.n	8002522 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <osThreadNew+0xca>
        mem = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	623b      	str	r3, [r7, #32]
 8002520:	e010      	b.n	8002544 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <osThreadNew+0xec>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <osThreadNew+0xec>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d104      	bne.n	8002544 <osThreadNew+0xec>
          mem = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	e001      	b.n	8002544 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d110      	bne.n	800256c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002552:	9202      	str	r2, [sp, #8]
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fe3f 	bl	80031e4 <xTaskCreateStatic>
 8002566:	4603      	mov	r3, r0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	e013      	b.n	8002594 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d110      	bne.n	8002594 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	b29a      	uxth	r2, r3
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fe90 	bl	80032aa <xTaskCreate>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <osThreadNew+0x13c>
          hTask = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002594:	693b      	ldr	r3, [r7, #16]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3730      	adds	r7, #48	; 0x30
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200000f0 	.word	0x200000f0

080025a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ac:	f3ef 8305 	mrs	r3, IPSR
 80025b0:	613b      	str	r3, [r7, #16]
  return(result);
 80025b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10f      	bne.n	80025d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b8:	f3ef 8310 	mrs	r3, PRIMASK
 80025bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c4:	f3ef 8311 	mrs	r3, BASEPRI
 80025c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <osDelay+0x3c>
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <osDelay+0x58>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d103      	bne.n	80025e0 <osDelay+0x3c>
    stat = osErrorISR;
 80025d8:	f06f 0305 	mvn.w	r3, #5
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e007      	b.n	80025f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 ffba 	bl	8003564 <vTaskDelay>
    }
  }

  return (stat);
 80025f0:	697b      	ldr	r3, [r7, #20]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200000f0 	.word	0x200000f0

08002600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <vApplicationGetIdleTaskMemory+0x2c>)
 8002610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <vApplicationGetIdleTaskMemory+0x30>)
 8002616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	601a      	str	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200000f4 	.word	0x200000f4
 8002630:	2000019c 	.word	0x2000019c

08002634 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <vApplicationGetTimerTaskMemory+0x2c>)
 8002644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <vApplicationGetTimerTaskMemory+0x30>)
 800264a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002652:	601a      	str	r2, [r3, #0]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	2000039c 	.word	0x2000039c
 8002664:	20000444 	.word	0x20000444

08002668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 0208 	add.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f103 0208 	add.w	r2, r3, #8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0208 	add.w	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	601a      	str	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d103      	bne.n	800272a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e00c      	b.n	8002744 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3308      	adds	r3, #8
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e002      	b.n	8002738 <vListInsert+0x2e>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	d2f6      	bcs.n	8002732 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6892      	ldr	r2, [r2, #8]
 8002792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6852      	ldr	r2, [r2, #4]
 800279c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d103      	bne.n	80027b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	1e5a      	subs	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10c      	bne.n	80027fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	b672      	cpsid	i
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	b662      	cpsie	i
 80027f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80027fe:	f002 f8a5 	bl	800494c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	68f9      	ldr	r1, [r7, #12]
 800280c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	441a      	add	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	3b01      	subs	r3, #1
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	441a      	add	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22ff      	movs	r2, #255	; 0xff
 800284a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d114      	bne.n	800287e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01a      	beq.n	8002892 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3310      	adds	r3, #16
 8002860:	4618      	mov	r0, r3
 8002862:	f001 f95d 	bl	8003b20 <xTaskRemoveFromEventList>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <xQueueGenericReset+0xd0>)
 800286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	e009      	b.n	8002892 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3310      	adds	r3, #16
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fef0 	bl	8002668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3324      	adds	r3, #36	; 0x24
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff feeb 	bl	8002668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002892:	f002 f88f 	bl	80049b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002896:	2301      	movs	r3, #1
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08e      	sub	sp, #56	; 0x38
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	b672      	cpsid	i
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	b662      	cpsie	i
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	b672      	cpsid	i
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	b662      	cpsie	i
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <xQueueGenericCreateStatic+0x5a>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <xQueueGenericCreateStatic+0x5e>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <xQueueGenericCreateStatic+0x60>
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10c      	bne.n	8002922 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	b672      	cpsid	i
 800290e:	f383 8811 	msr	BASEPRI, r3
 8002912:	f3bf 8f6f 	isb	sy
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	b662      	cpsie	i
 800291c:	623b      	str	r3, [r7, #32]
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <xQueueGenericCreateStatic+0x8a>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <xQueueGenericCreateStatic+0x8e>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <xQueueGenericCreateStatic+0x90>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10c      	bne.n	8002952 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	b672      	cpsid	i
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	b662      	cpsie	i
 800294c:	61fb      	str	r3, [r7, #28]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002952:	2350      	movs	r3, #80	; 0x50
 8002954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b50      	cmp	r3, #80	; 0x50
 800295a:	d00c      	beq.n	8002976 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	b672      	cpsid	i
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	b662      	cpsie	i
 8002970:	61bb      	str	r3, [r7, #24]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002976:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800298a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4613      	mov	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f805 	bl	80029a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e002      	b.n	80029ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029d6:	2101      	movs	r1, #1
 80029d8:	69b8      	ldr	r0, [r7, #24]
 80029da:	f7ff fef9 	bl	80027d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <xQueueGenericSend+0x36>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	b672      	cpsid	i
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	b662      	cpsie	i
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <xQueueGenericSend+0x44>
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <xQueueGenericSend+0x48>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <xQueueGenericSend+0x4a>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <xQueueGenericSend+0x68>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	b672      	cpsid	i
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	b662      	cpsie	i
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a54:	bf00      	nop
 8002a56:	e7fe      	b.n	8002a56 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d103      	bne.n	8002a66 <xQueueGenericSend+0x76>
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <xQueueGenericSend+0x7a>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueGenericSend+0x7c>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <xQueueGenericSend+0x9a>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	b672      	cpsid	i
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	b662      	cpsie	i
 8002a84:	623b      	str	r3, [r7, #32]
}
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a8a:	f001 fa13 	bl	8003eb4 <xTaskGetSchedulerState>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <xQueueGenericSend+0xaa>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <xQueueGenericSend+0xae>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <xQueueGenericSend+0xb0>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10c      	bne.n	8002abe <xQueueGenericSend+0xce>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	b672      	cpsid	i
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	b662      	cpsie	i
 8002ab8:	61fb      	str	r3, [r7, #28]
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002abe:	f001 ff45 	bl	800494c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <xQueueGenericSend+0xe4>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d129      	bne.n	8002b28 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ada:	f000 fa15 	bl	8002f08 <prvCopyDataToQueue>
 8002ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	3324      	adds	r3, #36	; 0x24
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f817 	bl	8003b20 <xTaskRemoveFromEventList>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002af8:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <xQueueGenericSend+0x208>)
 8002afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	e00a      	b.n	8002b20 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b10:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <xQueueGenericSend+0x208>)
 8002b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b20:	f001 ff48 	bl	80049b4 <vPortExitCritical>
				return pdPASS;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e063      	b.n	8002bf0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b2e:	f001 ff41 	bl	80049b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e05c      	b.n	8002bf0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 f853 	bl	8003bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b4a:	f001 ff33 	bl	80049b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b4e:	f000 fdb3 	bl	80036b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b52:	f001 fefb 	bl	800494c <vPortEnterCritical>
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d103      	bne.n	8002b6c <xQueueGenericSend+0x17c>
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d103      	bne.n	8002b82 <xQueueGenericSend+0x192>
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b82:	f001 ff17 	bl	80049b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b86:	1d3a      	adds	r2, r7, #4
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f842 	bl	8003c18 <xTaskCheckForTimeOut>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d124      	bne.n	8002be4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b9c:	f000 faac 	bl	80030f8 <prvIsQueueFull>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d018      	beq.n	8002bd8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	3310      	adds	r3, #16
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 ff62 	bl	8003a78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bb6:	f000 fa37 	bl	8003028 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bba:	f000 fd8b 	bl	80036d4 <xTaskResumeAll>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f af7c 	bne.w	8002abe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <xQueueGenericSend+0x208>)
 8002bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	e772      	b.n	8002abe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bda:	f000 fa25 	bl	8003028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bde:	f000 fd79 	bl	80036d4 <xTaskResumeAll>
 8002be2:	e76c      	b.n	8002abe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be6:	f000 fa1f 	bl	8003028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bea:	f000 fd73 	bl	80036d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3738      	adds	r7, #56	; 0x38
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10c      	bne.n	8002c2e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	b672      	cpsid	i
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	b662      	cpsie	i
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d103      	bne.n	8002c3c <xQueueGenericSendFromISR+0x40>
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <xQueueGenericSendFromISR+0x44>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <xQueueGenericSendFromISR+0x46>
 8002c40:	2300      	movs	r3, #0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	b672      	cpsid	i
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	b662      	cpsie	i
 8002c5a:	623b      	str	r3, [r7, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	e7fe      	b.n	8002c5e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSendFromISR+0x72>
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <xQueueGenericSendFromISR+0x76>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <xQueueGenericSendFromISR+0x78>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10c      	bne.n	8002c92 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	b672      	cpsid	i
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	b662      	cpsie	i
 8002c8c:	61fb      	str	r3, [r7, #28]
}
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c92:	f001 ff43 	bl	8004b1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c96:	f3ef 8211 	mrs	r2, BASEPRI
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	b672      	cpsid	i
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	b662      	cpsie	i
 8002cae:	61ba      	str	r2, [r7, #24]
 8002cb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <xQueueGenericSendFromISR+0xcc>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d12c      	bne.n	8002d22 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd8:	f000 f916 	bl	8002f08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d112      	bne.n	8002d0c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	3324      	adds	r3, #36	; 0x24
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 ff14 	bl	8003b20 <xTaskRemoveFromEventList>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e007      	b.n	8002d1c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d20:	e001      	b.n	8002d26 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3738      	adds	r7, #56	; 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10c      	bne.n	8002d70 <xQueueReceive+0x34>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	b672      	cpsid	i
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	b662      	cpsie	i
 8002d6a:	623b      	str	r3, [r7, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueReceive+0x42>
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueReceive+0x46>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueReceive+0x48>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10c      	bne.n	8002da2 <xQueueReceive+0x66>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	b672      	cpsid	i
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	b662      	cpsie	i
 8002d9c:	61fb      	str	r3, [r7, #28]
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da2:	f001 f887 	bl	8003eb4 <xTaskGetSchedulerState>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <xQueueReceive+0x76>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <xQueueReceive+0x7a>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueReceive+0x7c>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10c      	bne.n	8002dd6 <xQueueReceive+0x9a>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	b672      	cpsid	i
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	b662      	cpsie	i
 8002dd0:	61bb      	str	r3, [r7, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd6:	f001 fdb9 	bl	800494c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01f      	beq.n	8002e26 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dea:	f000 f8f7 	bl	8002fdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1e5a      	subs	r2, r3, #1
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00f      	beq.n	8002e1e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	3310      	adds	r3, #16
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fe8c 	bl	8003b20 <xTaskRemoveFromEventList>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <xQueueReceive+0x1c8>)
 8002e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e1e:	f001 fdc9 	bl	80049b4 <vPortExitCritical>
				return pdPASS;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e069      	b.n	8002efa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e2c:	f001 fdc2 	bl	80049b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e062      	b.n	8002efa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fed4 	bl	8003bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e48:	f001 fdb4 	bl	80049b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e4c:	f000 fc34 	bl	80036b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e50:	f001 fd7c 	bl	800494c <vPortEnterCritical>
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d103      	bne.n	8002e6a <xQueueReceive+0x12e>
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d103      	bne.n	8002e80 <xQueueReceive+0x144>
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e80:	f001 fd98 	bl	80049b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e84:	1d3a      	adds	r2, r7, #4
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fec3 	bl	8003c18 <xTaskCheckForTimeOut>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d123      	bne.n	8002ee0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e9a:	f000 f917 	bl	80030cc <prvIsQueueEmpty>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d017      	beq.n	8002ed4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	3324      	adds	r3, #36	; 0x24
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fde3 	bl	8003a78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb4:	f000 f8b8 	bl	8003028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eb8:	f000 fc0c 	bl	80036d4 <xTaskResumeAll>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d189      	bne.n	8002dd6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <xQueueReceive+0x1c8>)
 8002ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	e780      	b.n	8002dd6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed6:	f000 f8a7 	bl	8003028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eda:	f000 fbfb 	bl	80036d4 <xTaskResumeAll>
 8002ede:	e77a      	b.n	8002dd6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee2:	f000 f8a1 	bl	8003028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ee6:	f000 fbf5 	bl	80036d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eec:	f000 f8ee 	bl	80030cc <prvIsQueueEmpty>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f43f af6f 	beq.w	8002dd6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d14d      	bne.n	8002fca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ffdc 	bl	8003ef0 <xTaskPriorityDisinherit>
 8002f38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	e043      	b.n	8002fca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d119      	bne.n	8002f7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6858      	ldr	r0, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	461a      	mov	r2, r3
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	f002 f88e 	bl	8005074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	441a      	add	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d32b      	bcc.n	8002fca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e026      	b.n	8002fca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68d8      	ldr	r0, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	461a      	mov	r2, r3
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	f002 f874 	bl	8005074 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	425b      	negs	r3, r3
 8002f96:	441a      	add	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d207      	bcs.n	8002fb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d105      	bne.n	8002fca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fd2:	697b      	ldr	r3, [r7, #20]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d018      	beq.n	8003020 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	441a      	add	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	d303      	bcc.n	8003010 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	461a      	mov	r2, r3
 800301a:	6838      	ldr	r0, [r7, #0]
 800301c:	f002 f82a 	bl	8005074 <memcpy>
	}
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003030:	f001 fc8c 	bl	800494c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800303c:	e011      	b.n	8003062 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	d012      	beq.n	800306c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3324      	adds	r3, #36	; 0x24
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd68 	bl	8003b20 <xTaskRemoveFromEventList>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003056:	f000 fe45 	bl	8003ce4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	3b01      	subs	r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003066:	2b00      	cmp	r3, #0
 8003068:	dce9      	bgt.n	800303e <prvUnlockQueue+0x16>
 800306a:	e000      	b.n	800306e <prvUnlockQueue+0x46>
					break;
 800306c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003076:	f001 fc9d 	bl	80049b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800307a:	f001 fc67 	bl	800494c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003084:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003086:	e011      	b.n	80030ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3310      	adds	r3, #16
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fd43 	bl	8003b20 <xTaskRemoveFromEventList>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030a0:	f000 fe20 	bl	8003ce4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dce9      	bgt.n	8003088 <prvUnlockQueue+0x60>
 80030b4:	e000      	b.n	80030b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030c0:	f001 fc78 	bl	80049b4 <vPortExitCritical>
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030d4:	f001 fc3a 	bl	800494c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e001      	b.n	80030ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ea:	f001 fc63 	bl	80049b4 <vPortExitCritical>

	return xReturn;
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003100:	f001 fc24 	bl	800494c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	429a      	cmp	r2, r3
 800310e:	d102      	bne.n	8003116 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e001      	b.n	800311a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800311a:	f001 fc4b 	bl	80049b4 <vPortExitCritical>

	return xReturn;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e014      	b.n	8003162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003138:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <vQueueAddToRegistry+0x50>)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <vQueueAddToRegistry+0x50>)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <vQueueAddToRegistry+0x50>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800315a:	e006      	b.n	800316a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3301      	adds	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b07      	cmp	r3, #7
 8003166:	d9e7      	bls.n	8003138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000844 	.word	0x20000844

0800317c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800318c:	f001 fbde 	bl	800494c <vPortEnterCritical>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003196:	b25b      	sxtb	r3, r3
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d103      	bne.n	80031a6 <vQueueWaitForMessageRestricted+0x2a>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d103      	bne.n	80031bc <vQueueWaitForMessageRestricted+0x40>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031bc:	f001 fbfa 	bl	80049b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fc77 	bl	8003ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff ff26 	bl	8003028 <prvUnlockQueue>
	}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af04      	add	r7, sp, #16
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10c      	bne.n	8003212 <xTaskCreateStatic+0x2e>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	b672      	cpsid	i
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	b662      	cpsie	i
 800320c:	623b      	str	r3, [r7, #32]
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10c      	bne.n	8003232 <xTaskCreateStatic+0x4e>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	b672      	cpsid	i
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	b662      	cpsie	i
 800322c:	61fb      	str	r3, [r7, #28]
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003232:	23a8      	movs	r3, #168	; 0xa8
 8003234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2ba8      	cmp	r3, #168	; 0xa8
 800323a:	d00c      	beq.n	8003256 <xTaskCreateStatic+0x72>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	b672      	cpsid	i
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	b662      	cpsie	i
 8003250:	61bb      	str	r3, [r7, #24]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01e      	beq.n	800329c <xTaskCreateStatic+0xb8>
 800325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800326c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	2202      	movs	r2, #2
 8003272:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003276:	2300      	movs	r3, #0
 8003278:	9303      	str	r3, [sp, #12]
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	9302      	str	r3, [sp, #8]
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f850 	bl	8003334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003296:	f000 f8f5 	bl	8003484 <prvAddNewTaskToReadyList>
 800329a:	e001      	b.n	80032a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032a0:	697b      	ldr	r3, [r7, #20]
	}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b08c      	sub	sp, #48	; 0x30
 80032ae:	af04      	add	r7, sp, #16
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 fc70 	bl	8004ba4 <pvPortMalloc>
 80032c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00e      	beq.n	80032ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032cc:	20a8      	movs	r0, #168	; 0xa8
 80032ce:	f001 fc69 	bl	8004ba4 <pvPortMalloc>
 80032d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
 80032e0:	e005      	b.n	80032ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f001 fd28 	bl	8004d38 <vPortFree>
 80032e8:	e001      	b.n	80032ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	2300      	movs	r3, #0
 8003300:	9303      	str	r3, [sp, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	9302      	str	r3, [sp, #8]
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f80e 	bl	8003334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003318:	69f8      	ldr	r0, [r7, #28]
 800331a:	f000 f8b3 	bl	8003484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800331e:	2301      	movs	r3, #1
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	e002      	b.n	800332a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800332a:	69bb      	ldr	r3, [r7, #24]
	}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	461a      	mov	r2, r3
 800334c:	21a5      	movs	r1, #165	; 0xa5
 800334e:	f001 fe0d 	bl	8004f6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800335c:	440b      	add	r3, r1
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	b672      	cpsid	i
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	b662      	cpsie	i
 800338a:	617b      	str	r3, [r7, #20]
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01f      	beq.n	80033d6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e012      	b.n	80033c2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	7819      	ldrb	r1, [r3, #0]
 80033a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	3334      	adds	r3, #52	; 0x34
 80033ac:	460a      	mov	r2, r1
 80033ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	3301      	adds	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d9e9      	bls.n	800339c <prvInitialiseNewTask+0x68>
 80033c8:	e000      	b.n	80033cc <prvInitialiseNewTask+0x98>
			{
				break;
 80033ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d4:	e003      	b.n	80033de <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	2b37      	cmp	r3, #55	; 0x37
 80033e2:	d901      	bls.n	80033e8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033e4:	2337      	movs	r3, #55	; 0x37
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	2200      	movs	r2, #0
 80033f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	3304      	adds	r3, #4
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff f952 	bl	80026a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	3318      	adds	r3, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f94d 	bl	80026a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	2200      	movs	r2, #0
 8003430:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	3354      	adds	r3, #84	; 0x54
 8003438:	224c      	movs	r2, #76	; 0x4c
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fd95 	bl	8004f6c <memset>
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <prvInitialiseNewTask+0x144>)
 8003446:	659a      	str	r2, [r3, #88]	; 0x58
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	4a0c      	ldr	r2, [pc, #48]	; (800347c <prvInitialiseNewTask+0x148>)
 800344c:	65da      	str	r2, [r3, #92]	; 0x5c
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <prvInitialiseNewTask+0x14c>)
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	69b8      	ldr	r0, [r7, #24]
 800345a:	f001 f96b 	bl	8004734 <pxPortInitialiseStack>
 800345e:	4602      	mov	r2, r0
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20004ad0 	.word	0x20004ad0
 800347c:	20004b38 	.word	0x20004b38
 8003480:	20004ba0 	.word	0x20004ba0

08003484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800348c:	f001 fa5e 	bl	800494c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003490:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <prvAddNewTaskToReadyList+0xc4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	4a2c      	ldr	r2, [pc, #176]	; (8003548 <prvAddNewTaskToReadyList+0xc4>)
 8003498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <prvAddNewTaskToReadyList+0xc4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d110      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034b0:	f000 fc3c 	bl	8003d2c <prvInitialiseTaskLists>
 80034b4:	e00d      	b.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034b6:	4b26      	ldr	r3, [pc, #152]	; (8003550 <prvAddNewTaskToReadyList+0xcc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d802      	bhi.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034cc:	4a1f      	ldr	r2, [pc, #124]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <prvAddNewTaskToReadyList+0xd0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <prvAddNewTaskToReadyList+0xd0>)
 80034da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <prvAddNewTaskToReadyList+0xd0>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <prvAddNewTaskToReadyList+0xd4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d903      	bls.n	80034f8 <prvAddNewTaskToReadyList+0x74>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <prvAddNewTaskToReadyList+0xd4>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <prvAddNewTaskToReadyList+0xd8>)
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7ff f8d7 	bl	80026c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003514:	f001 fa4e 	bl	80049b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003518:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <prvAddNewTaskToReadyList+0xcc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	429a      	cmp	r2, r3
 800352c:	d207      	bcs.n	800353e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <prvAddNewTaskToReadyList+0xdc>)
 8003530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000d58 	.word	0x20000d58
 800354c:	20000884 	.word	0x20000884
 8003550:	20000d64 	.word	0x20000d64
 8003554:	20000d74 	.word	0x20000d74
 8003558:	20000d60 	.word	0x20000d60
 800355c:	20000888 	.word	0x20000888
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d019      	beq.n	80035aa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <vTaskDelay+0x64>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <vTaskDelay+0x34>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	b672      	cpsid	i
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	b662      	cpsie	i
 8003592:	60bb      	str	r3, [r7, #8]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003598:	f000 f88e 	bl	80036b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800359c:	2100      	movs	r1, #0
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fd18 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035a4:	f000 f896 	bl	80036d4 <xTaskResumeAll>
 80035a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <vTaskDelay+0x68>)
 80035b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000d80 	.word	0x20000d80
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035de:	463a      	mov	r2, r7
 80035e0:	1d39      	adds	r1, r7, #4
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f80a 	bl	8002600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	9202      	str	r2, [sp, #8]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	460a      	mov	r2, r1
 80035fe:	4926      	ldr	r1, [pc, #152]	; (8003698 <vTaskStartScheduler+0xc8>)
 8003600:	4826      	ldr	r0, [pc, #152]	; (800369c <vTaskStartScheduler+0xcc>)
 8003602:	f7ff fdef 	bl	80031e4 <xTaskCreateStatic>
 8003606:	4603      	mov	r3, r0
 8003608:	4a25      	ldr	r2, [pc, #148]	; (80036a0 <vTaskStartScheduler+0xd0>)
 800360a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <vTaskStartScheduler+0xd0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e001      	b.n	800361e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003624:	f000 fd2a 	bl	800407c <xTimerCreateTimerTask>
 8003628:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d11d      	bne.n	800366c <vTaskStartScheduler+0x9c>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	b672      	cpsid	i
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	b662      	cpsie	i
 8003644:	613b      	str	r3, [r7, #16]
}
 8003646:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <vTaskStartScheduler+0xd4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3354      	adds	r3, #84	; 0x54
 800364e:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <vTaskStartScheduler+0xd8>)
 8003650:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003652:	4b16      	ldr	r3, [pc, #88]	; (80036ac <vTaskStartScheduler+0xdc>)
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <vTaskStartScheduler+0xe0>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <vTaskStartScheduler+0xe4>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003666:	f001 f8f3 	bl	8004850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800366a:	e010      	b.n	800368e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d10c      	bne.n	800368e <vTaskStartScheduler+0xbe>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	b672      	cpsid	i
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	b662      	cpsie	i
 8003688:	60fb      	str	r3, [r7, #12]
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <vTaskStartScheduler+0xbc>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	080051b0 	.word	0x080051b0
 800369c:	08003cfd 	.word	0x08003cfd
 80036a0:	20000d7c 	.word	0x20000d7c
 80036a4:	20000884 	.word	0x20000884
 80036a8:	2000005c 	.word	0x2000005c
 80036ac:	20000d78 	.word	0x20000d78
 80036b0:	20000d64 	.word	0x20000d64
 80036b4:	20000d5c 	.word	0x20000d5c

080036b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <vTaskSuspendAll+0x18>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <vTaskSuspendAll+0x18>)
 80036c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	20000d80 	.word	0x20000d80

080036d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <xTaskResumeAll+0x11c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10c      	bne.n	8003704 <xTaskResumeAll+0x30>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	b672      	cpsid	i
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	b662      	cpsie	i
 80036fe:	603b      	str	r3, [r7, #0]
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003704:	f001 f922 	bl	800494c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003708:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <xTaskResumeAll+0x11c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3b01      	subs	r3, #1
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <xTaskResumeAll+0x11c>)
 8003710:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <xTaskResumeAll+0x11c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d162      	bne.n	80037e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800371a:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <xTaskResumeAll+0x120>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d05e      	beq.n	80037e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003722:	e02f      	b.n	8003784 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003724:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <xTaskResumeAll+0x124>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3318      	adds	r3, #24
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff f823 	bl	800277c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3304      	adds	r3, #4
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff f81e 	bl	800277c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <xTaskResumeAll+0x128>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d903      	bls.n	8003754 <xTaskResumeAll+0x80>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <xTaskResumeAll+0x128>)
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4a27      	ldr	r2, [pc, #156]	; (8003800 <xTaskResumeAll+0x12c>)
 8003762:	441a      	add	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f7fe ffa9 	bl	80026c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	4b23      	ldr	r3, [pc, #140]	; (8003804 <xTaskResumeAll+0x130>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <xTaskResumeAll+0x134>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <xTaskResumeAll+0x124>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1cb      	bne.n	8003724 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003792:	f000 fb6f 	bl	8003e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003796:	4b1d      	ldr	r3, [pc, #116]	; (800380c <xTaskResumeAll+0x138>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d010      	beq.n	80037c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037a2:	f000 f847 	bl	8003834 <xTaskIncrementTick>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <xTaskResumeAll+0x134>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f1      	bne.n	80037a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <xTaskResumeAll+0x138>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <xTaskResumeAll+0x134>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <xTaskResumeAll+0x13c>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037e0:	f001 f8e8 	bl	80049b4 <vPortExitCritical>

	return xAlreadyYielded;
 80037e4:	68bb      	ldr	r3, [r7, #8]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000d80 	.word	0x20000d80
 80037f4:	20000d58 	.word	0x20000d58
 80037f8:	20000d18 	.word	0x20000d18
 80037fc:	20000d60 	.word	0x20000d60
 8003800:	20000888 	.word	0x20000888
 8003804:	20000884 	.word	0x20000884
 8003808:	20000d6c 	.word	0x20000d6c
 800380c:	20000d68 	.word	0x20000d68
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <xTaskGetTickCount+0x1c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003820:	687b      	ldr	r3, [r7, #4]
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000d5c 	.word	0x20000d5c

08003834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383e:	4b50      	ldr	r3, [pc, #320]	; (8003980 <xTaskIncrementTick+0x14c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 808b 	bne.w	800395e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003848:	4b4e      	ldr	r3, [pc, #312]	; (8003984 <xTaskIncrementTick+0x150>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003850:	4a4c      	ldr	r2, [pc, #304]	; (8003984 <xTaskIncrementTick+0x150>)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d122      	bne.n	80038a2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800385c:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <xTaskIncrementTick+0x154>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <xTaskIncrementTick+0x4c>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	b672      	cpsid	i
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	b662      	cpsie	i
 800387a:	603b      	str	r3, [r7, #0]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xTaskIncrementTick+0x4a>
 8003880:	4b41      	ldr	r3, [pc, #260]	; (8003988 <xTaskIncrementTick+0x154>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <xTaskIncrementTick+0x158>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a3f      	ldr	r2, [pc, #252]	; (8003988 <xTaskIncrementTick+0x154>)
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4a3f      	ldr	r2, [pc, #252]	; (800398c <xTaskIncrementTick+0x158>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <xTaskIncrementTick+0x15c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <xTaskIncrementTick+0x15c>)
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	f000 fae9 	bl	8003e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <xTaskIncrementTick+0x160>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d349      	bcc.n	8003940 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ac:	4b36      	ldr	r3, [pc, #216]	; (8003988 <xTaskIncrementTick+0x154>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b6:	4b37      	ldr	r3, [pc, #220]	; (8003994 <xTaskIncrementTick+0x160>)
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	601a      	str	r2, [r3, #0]
					break;
 80038be:	e03f      	b.n	8003940 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c0:	4b31      	ldr	r3, [pc, #196]	; (8003988 <xTaskIncrementTick+0x154>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d203      	bcs.n	80038e0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <xTaskIncrementTick+0x160>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038de:	e02f      	b.n	8003940 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe ff49 	bl	800277c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3318      	adds	r3, #24
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe ff40 	bl	800277c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <xTaskIncrementTick+0x164>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d903      	bls.n	8003910 <xTaskIncrementTick+0xdc>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4a22      	ldr	r2, [pc, #136]	; (8003998 <xTaskIncrementTick+0x164>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <xTaskIncrementTick+0x168>)
 800391e:	441a      	add	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7fe fecb 	bl	80026c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <xTaskIncrementTick+0x16c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	429a      	cmp	r2, r3
 8003938:	d3b8      	bcc.n	80038ac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800393e:	e7b5      	b.n	80038ac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003940:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <xTaskIncrementTick+0x16c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	4915      	ldr	r1, [pc, #84]	; (800399c <xTaskIncrementTick+0x168>)
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d907      	bls.n	8003968 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8003958:	2301      	movs	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	e004      	b.n	8003968 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <xTaskIncrementTick+0x170>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <xTaskIncrementTick+0x170>)
 8003966:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <xTaskIncrementTick+0x174>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003974:	697b      	ldr	r3, [r7, #20]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000d80 	.word	0x20000d80
 8003984:	20000d5c 	.word	0x20000d5c
 8003988:	20000d10 	.word	0x20000d10
 800398c:	20000d14 	.word	0x20000d14
 8003990:	20000d70 	.word	0x20000d70
 8003994:	20000d78 	.word	0x20000d78
 8003998:	20000d60 	.word	0x20000d60
 800399c:	20000888 	.word	0x20000888
 80039a0:	20000884 	.word	0x20000884
 80039a4:	20000d68 	.word	0x20000d68
 80039a8:	20000d6c 	.word	0x20000d6c

080039ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <vTaskSwitchContext+0xb4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039ba:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <vTaskSwitchContext+0xb8>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039c0:	e048      	b.n	8003a54 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80039c2:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <vTaskSwitchContext+0xb8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c8:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <vTaskSwitchContext+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e012      	b.n	80039f6 <vTaskSwitchContext+0x4a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <vTaskSwitchContext+0x44>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	b672      	cpsid	i
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	b662      	cpsie	i
 80039ea:	607b      	str	r3, [r7, #4]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <vTaskSwitchContext+0x42>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	491d      	ldr	r1, [pc, #116]	; (8003a6c <vTaskSwitchContext+0xc0>)
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0e2      	beq.n	80039d0 <vTaskSwitchContext+0x24>
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <vTaskSwitchContext+0xc0>)
 8003a16:	4413      	add	r3, r2
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d104      	bne.n	8003a3a <vTaskSwitchContext+0x8e>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <vTaskSwitchContext+0xc4>)
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <vTaskSwitchContext+0xbc>)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <vTaskSwitchContext+0xc4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3354      	adds	r3, #84	; 0x54
 8003a50:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <vTaskSwitchContext+0xc8>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	20000d80 	.word	0x20000d80
 8003a64:	20000d6c 	.word	0x20000d6c
 8003a68:	20000d60 	.word	0x20000d60
 8003a6c:	20000888 	.word	0x20000888
 8003a70:	20000884 	.word	0x20000884
 8003a74:	2000005c 	.word	0x2000005c

08003a78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10c      	bne.n	8003aa2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	b672      	cpsid	i
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	b662      	cpsie	i
 8003a9c:	60fb      	str	r3, [r7, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <vTaskPlaceOnEventList+0x48>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe fe2d 	bl	800270a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	f000 fa8e 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000884 	.word	0x20000884

08003ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	b672      	cpsid	i
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	b662      	cpsie	i
 8003aea:	617b      	str	r3, [r7, #20]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <vTaskPlaceOnEventListRestricted+0x58>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3318      	adds	r3, #24
 8003af6:	4619      	mov	r1, r3
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7fe fde2 	bl	80026c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f000 fa61 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
	}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000884 	.word	0x20000884

08003b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	b672      	cpsid	i
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	b662      	cpsie	i
 8003b4a:	60fb      	str	r3, [r7, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	e7fe      	b.n	8003b4e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	3318      	adds	r3, #24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fe11 	bl	800277c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <xTaskRemoveFromEventList+0xb4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d11d      	bne.n	8003b9e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fe08 	bl	800277c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <xTaskRemoveFromEventList+0xb8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d903      	bls.n	8003b80 <xTaskRemoveFromEventList+0x60>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <xTaskRemoveFromEventList+0xb8>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <xTaskRemoveFromEventList+0xbc>)
 8003b8e:	441a      	add	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe fd93 	bl	80026c2 <vListInsertEnd>
 8003b9c:	e005      	b.n	8003baa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	3318      	adds	r3, #24
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	480e      	ldr	r0, [pc, #56]	; (8003be0 <xTaskRemoveFromEventList+0xc0>)
 8003ba6:	f7fe fd8c 	bl	80026c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <xTaskRemoveFromEventList+0xc4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d905      	bls.n	8003bc4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <xTaskRemoveFromEventList+0xc8>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e001      	b.n	8003bc8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bc8:	697b      	ldr	r3, [r7, #20]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000d80 	.word	0x20000d80
 8003bd8:	20000d60 	.word	0x20000d60
 8003bdc:	20000888 	.word	0x20000888
 8003be0:	20000d18 	.word	0x20000d18
 8003be4:	20000884 	.word	0x20000884
 8003be8:	20000d6c 	.word	0x20000d6c

08003bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <vTaskInternalSetTimeOutState+0x24>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <vTaskInternalSetTimeOutState+0x28>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	605a      	str	r2, [r3, #4]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	20000d70 	.word	0x20000d70
 8003c14:	20000d5c 	.word	0x20000d5c

08003c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10c      	bne.n	8003c42 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	b672      	cpsid	i
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	b662      	cpsie	i
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10c      	bne.n	8003c62 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	b672      	cpsid	i
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	b662      	cpsie	i
 8003c5c:	60fb      	str	r3, [r7, #12]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8003c62:	f000 fe73 	bl	800494c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <xTaskCheckForTimeOut+0xc4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d102      	bne.n	8003c86 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e023      	b.n	8003cce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <xTaskCheckForTimeOut+0xc8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d007      	beq.n	8003ca2 <xTaskCheckForTimeOut+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	e015      	b.n	8003cce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d20b      	bcs.n	8003cc4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff97 	bl	8003bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e004      	b.n	8003cce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f000 fe71 	bl	80049b4 <vPortExitCritical>

	return xReturn;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000d5c 	.word	0x20000d5c
 8003ce0:	20000d70 	.word	0x20000d70

08003ce4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <vTaskMissedYield+0x14>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000d6c 	.word	0x20000d6c

08003cfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d04:	f000 f852 	bl	8003dac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <prvIdleTask+0x28>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d9f9      	bls.n	8003d04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <prvIdleTask+0x2c>)
 8003d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d20:	e7f0      	b.n	8003d04 <prvIdleTask+0x8>
 8003d22:	bf00      	nop
 8003d24:	20000888 	.word	0x20000888
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	e00c      	b.n	8003d52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <prvInitialiseTaskLists+0x60>)
 8003d44:	4413      	add	r3, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fc8e 	bl	8002668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b37      	cmp	r3, #55	; 0x37
 8003d56:	d9ef      	bls.n	8003d38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d58:	480d      	ldr	r0, [pc, #52]	; (8003d90 <prvInitialiseTaskLists+0x64>)
 8003d5a:	f7fe fc85 	bl	8002668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d5e:	480d      	ldr	r0, [pc, #52]	; (8003d94 <prvInitialiseTaskLists+0x68>)
 8003d60:	f7fe fc82 	bl	8002668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d64:	480c      	ldr	r0, [pc, #48]	; (8003d98 <prvInitialiseTaskLists+0x6c>)
 8003d66:	f7fe fc7f 	bl	8002668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d6a:	480c      	ldr	r0, [pc, #48]	; (8003d9c <prvInitialiseTaskLists+0x70>)
 8003d6c:	f7fe fc7c 	bl	8002668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d70:	480b      	ldr	r0, [pc, #44]	; (8003da0 <prvInitialiseTaskLists+0x74>)
 8003d72:	f7fe fc79 	bl	8002668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <prvInitialiseTaskLists+0x78>)
 8003d78:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <prvInitialiseTaskLists+0x64>)
 8003d7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <prvInitialiseTaskLists+0x7c>)
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <prvInitialiseTaskLists+0x68>)
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000888 	.word	0x20000888
 8003d90:	20000ce8 	.word	0x20000ce8
 8003d94:	20000cfc 	.word	0x20000cfc
 8003d98:	20000d18 	.word	0x20000d18
 8003d9c:	20000d2c 	.word	0x20000d2c
 8003da0:	20000d44 	.word	0x20000d44
 8003da4:	20000d10 	.word	0x20000d10
 8003da8:	20000d14 	.word	0x20000d14

08003dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db2:	e019      	b.n	8003de8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db4:	f000 fdca 	bl	800494c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <prvCheckTasksWaitingTermination+0x50>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fcd9 	bl	800277c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <prvCheckTasksWaitingTermination+0x54>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a0b      	ldr	r2, [pc, #44]	; (8003e00 <prvCheckTasksWaitingTermination+0x54>)
 8003dd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003ddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dde:	f000 fde9 	bl	80049b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f810 	bl	8003e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e1      	bne.n	8003db4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000d2c 	.word	0x20000d2c
 8003e00:	20000d58 	.word	0x20000d58
 8003e04:	20000d40 	.word	0x20000d40

08003e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3354      	adds	r3, #84	; 0x54
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 f8b1 	bl	8004f7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 ff85 	bl	8004d38 <vPortFree>
				vPortFree( pxTCB );
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 ff82 	bl	8004d38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e34:	e01a      	b.n	8003e6c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d103      	bne.n	8003e48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 ff79 	bl	8004d38 <vPortFree>
	}
 8003e46:	e011      	b.n	8003e6c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d00c      	beq.n	8003e6c <prvDeleteTCB+0x64>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	b672      	cpsid	i
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	b662      	cpsie	i
 8003e66:	60fb      	str	r3, [r7, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <prvDeleteTCB+0x62>
	}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e8c:	e008      	b.n	8003ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000d10 	.word	0x20000d10
 8003eb0:	20000d78 	.word	0x20000d78

08003eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <xTaskGetSchedulerState+0x34>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	e008      	b.n	8003eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <xTaskGetSchedulerState+0x38>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	e001      	b.n	8003eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eda:	687b      	ldr	r3, [r7, #4]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000d64 	.word	0x20000d64
 8003eec:	20000d80 	.word	0x20000d80

08003ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d05a      	beq.n	8003fbc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f06:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <xTaskPriorityDisinherit+0xd8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d00c      	beq.n	8003f2a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	b672      	cpsid	i
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	b662      	cpsie	i
 8003f24:	60fb      	str	r3, [r7, #12]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	b672      	cpsid	i
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	b662      	cpsie	i
 8003f46:	60bb      	str	r3, [r7, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	1e5a      	subs	r2, r3, #1
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d02c      	beq.n	8003fbc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d128      	bne.n	8003fbc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fc04 	bl	800277c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <xTaskPriorityDisinherit+0xdc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d903      	bls.n	8003f9c <xTaskPriorityDisinherit+0xac>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <xTaskPriorityDisinherit+0xdc>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <xTaskPriorityDisinherit+0xe0>)
 8003faa:	441a      	add	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f7fe fb85 	bl	80026c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fbc:	697b      	ldr	r3, [r7, #20]
	}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000884 	.word	0x20000884
 8003fcc:	20000d60 	.word	0x20000d60
 8003fd0:	20000888 	.word	0x20000888

08003fd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe4:	4b20      	ldr	r3, [pc, #128]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fbc6 	bl	800277c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d10a      	bne.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4819      	ldr	r0, [pc, #100]	; (800406c <prvAddCurrentTaskToDelayedList+0x98>)
 8004008:	f7fe fb5b 	bl	80026c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800400c:	e026      	b.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	429a      	cmp	r2, r3
 8004024:	d209      	bcs.n	800403a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f7fe fb69 	bl	800270a <vListInsert>
}
 8004038:	e010      	b.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7fe fb5f 	bl	800270a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d202      	bcs.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000d5c 	.word	0x20000d5c
 8004068:	20000884 	.word	0x20000884
 800406c:	20000d44 	.word	0x20000d44
 8004070:	20000d14 	.word	0x20000d14
 8004074:	20000d10 	.word	0x20000d10
 8004078:	20000d78 	.word	0x20000d78

0800407c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004086:	f000 fb15 	bl	80046b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800408a:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <xTimerCreateTimerTask+0x84>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d021      	beq.n	80040d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800409a:	1d3a      	adds	r2, r7, #4
 800409c:	f107 0108 	add.w	r1, r7, #8
 80040a0:	f107 030c 	add.w	r3, r7, #12
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fac5 	bl	8002634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	9202      	str	r2, [sp, #8]
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	2302      	movs	r3, #2
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2300      	movs	r3, #0
 80040ba:	460a      	mov	r2, r1
 80040bc:	4911      	ldr	r1, [pc, #68]	; (8004104 <xTimerCreateTimerTask+0x88>)
 80040be:	4812      	ldr	r0, [pc, #72]	; (8004108 <xTimerCreateTimerTask+0x8c>)
 80040c0:	f7ff f890 	bl	80031e4 <xTaskCreateStatic>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4a11      	ldr	r2, [pc, #68]	; (800410c <xTimerCreateTimerTask+0x90>)
 80040c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <xTimerCreateTimerTask+0x90>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10c      	bne.n	80040f6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	b672      	cpsid	i
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	b662      	cpsie	i
 80040f0:	613b      	str	r3, [r7, #16]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80040f6:	697b      	ldr	r3, [r7, #20]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000db4 	.word	0x20000db4
 8004104:	080051b8 	.word	0x080051b8
 8004108:	0800424d 	.word	0x0800424d
 800410c:	20000db8 	.word	0x20000db8

08004110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10c      	bne.n	8004142 <xTimerGenericCommand+0x32>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	b672      	cpsid	i
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	b662      	cpsie	i
 800413c:	623b      	str	r3, [r7, #32]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004142:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <xTimerGenericCommand+0x9c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d02a      	beq.n	80041a0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b05      	cmp	r3, #5
 800415a:	dc18      	bgt.n	800418e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800415c:	f7ff feaa 	bl	8003eb4 <xTaskGetSchedulerState>
 8004160:	4603      	mov	r3, r0
 8004162:	2b02      	cmp	r3, #2
 8004164:	d109      	bne.n	800417a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <xTimerGenericCommand+0x9c>)
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f107 0110 	add.w	r1, r7, #16
 800416e:	2300      	movs	r3, #0
 8004170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004172:	f7fe fc3d 	bl	80029f0 <xQueueGenericSend>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24
 8004178:	e012      	b.n	80041a0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <xTimerGenericCommand+0x9c>)
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	f107 0110 	add.w	r1, r7, #16
 8004182:	2300      	movs	r3, #0
 8004184:	2200      	movs	r2, #0
 8004186:	f7fe fc33 	bl	80029f0 <xQueueGenericSend>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24
 800418c:	e008      	b.n	80041a0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <xTimerGenericCommand+0x9c>)
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	f107 0110 	add.w	r1, r7, #16
 8004196:	2300      	movs	r3, #0
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	f7fe fd2f 	bl	8002bfc <xQueueGenericSendFromISR>
 800419e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3728      	adds	r7, #40	; 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000db4 	.word	0x20000db4

080041b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ba:	4b23      	ldr	r3, [pc, #140]	; (8004248 <prvProcessExpiredTimer+0x98>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fad7 	bl	800277c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d024      	beq.n	8004226 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	18d1      	adds	r1, r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f000 f8d3 	bl	8004394 <prvInsertTimerInActiveList>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d021      	beq.n	8004238 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041f4:	2300      	movs	r3, #0
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	2100      	movs	r1, #0
 80041fe:	6978      	ldr	r0, [r7, #20]
 8004200:	f7ff ff86 	bl	8004110 <xTimerGenericCommand>
 8004204:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d115      	bne.n	8004238 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	b672      	cpsid	i
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	b662      	cpsie	i
 8004220:	60fb      	str	r3, [r7, #12]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	b2da      	uxtb	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	4798      	blx	r3
}
 8004240:	bf00      	nop
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000dac 	.word	0x20000dac

0800424c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f857 	bl	800430c <prvGetNextExpireTime>
 800425e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4619      	mov	r1, r3
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f803 	bl	8004270 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800426a:	f000 f8d5 	bl	8004418 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800426e:	e7f1      	b.n	8004254 <prvTimerTask+0x8>

08004270 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800427a:	f7ff fa1d 	bl	80036b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800427e:	f107 0308 	add.w	r3, r7, #8
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f866 	bl	8004354 <prvSampleTimeNow>
 8004288:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d130      	bne.n	80042f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <prvProcessTimerOrBlockTask+0x3c>
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	429a      	cmp	r2, r3
 800429c:	d806      	bhi.n	80042ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800429e:	f7ff fa19 	bl	80036d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042a2:	68f9      	ldr	r1, [r7, #12]
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff83 	bl	80041b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042aa:	e024      	b.n	80042f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <prvProcessTimerOrBlockTask+0x90>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <prvProcessTimerOrBlockTask+0x50>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <prvProcessTimerOrBlockTask+0x52>
 80042c0:	2300      	movs	r3, #0
 80042c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <prvProcessTimerOrBlockTask+0x94>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	4619      	mov	r1, r3
 80042d2:	f7fe ff53 	bl	800317c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042d6:	f7ff f9fd 	bl	80036d4 <xTaskResumeAll>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <prvProcessTimerOrBlockTask+0x98>)
 80042e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	f3bf 8f6f 	isb	sy
}
 80042f0:	e001      	b.n	80042f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042f2:	f7ff f9ef 	bl	80036d4 <xTaskResumeAll>
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000db0 	.word	0x20000db0
 8004304:	20000db4 	.word	0x20000db4
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <prvGetNextExpireTime+0x44>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <prvGetNextExpireTime+0x16>
 800431e:	2201      	movs	r2, #1
 8004320:	e000      	b.n	8004324 <prvGetNextExpireTime+0x18>
 8004322:	2200      	movs	r2, #0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <prvGetNextExpireTime+0x44>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e001      	b.n	8004340 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004340:	68fb      	ldr	r3, [r7, #12]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000dac 	.word	0x20000dac

08004354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800435c:	f7ff fa5a 	bl	8003814 <xTaskGetTickCount>
 8004360:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <prvSampleTimeNow+0x3c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	429a      	cmp	r2, r3
 800436a:	d205      	bcs.n	8004378 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800436c:	f000 f93c 	bl	80045e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e002      	b.n	800437e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800437e:	4a04      	ldr	r2, [pc, #16]	; (8004390 <prvSampleTimeNow+0x3c>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000dbc 	.word	0x20000dbc

08004394 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d812      	bhi.n	80043e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	1ad2      	subs	r2, r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e01b      	b.n	8004406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <prvInsertTimerInActiveList+0x7c>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7fe f996 	bl	800270a <vListInsert>
 80043de:	e012      	b.n	8004406 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d206      	bcs.n	80043f6 <prvInsertTimerInActiveList+0x62>
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e007      	b.n	8004406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <prvInsertTimerInActiveList+0x80>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fe f982 	bl	800270a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004406:	697b      	ldr	r3, [r7, #20]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000db0 	.word	0x20000db0
 8004414:	20000dac 	.word	0x20000dac

08004418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800441e:	e0d0      	b.n	80045c2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da1a      	bge.n	800445c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	3304      	adds	r3, #4
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10c      	bne.n	800444c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	b672      	cpsid	i
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	b662      	cpsie	i
 8004446:	61fb      	str	r3, [r7, #28]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	6850      	ldr	r0, [r2, #4]
 8004454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004456:	6892      	ldr	r2, [r2, #8]
 8004458:	4611      	mov	r1, r2
 800445a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f2c0 80af 	blt.w	80045c2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	3304      	adds	r3, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe f981 	bl	800277c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800447a:	463b      	mov	r3, r7
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff69 	bl	8004354 <prvSampleTimeNow>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b09      	cmp	r3, #9
 8004488:	f200 809a 	bhi.w	80045c0 <prvProcessReceivedCommands+0x1a8>
 800448c:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <prvProcessReceivedCommands+0x7c>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044bd 	.word	0x080044bd
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044bd 	.word	0x080044bd
 80044a0:	08004535 	.word	0x08004535
 80044a4:	08004549 	.word	0x08004549
 80044a8:	08004597 	.word	0x08004597
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044bd 	.word	0x080044bd
 80044b4:	08004535 	.word	0x08004535
 80044b8:	08004549 	.word	0x08004549
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	18d1      	adds	r1, r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044dc:	f7ff ff5a 	bl	8004394 <prvInsertTimerInActiveList>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d06d      	beq.n	80045c2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d062      	beq.n	80045c2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	441a      	add	r2, r3
 8004504:	2300      	movs	r3, #0
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2300      	movs	r3, #0
 800450a:	2100      	movs	r1, #0
 800450c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450e:	f7ff fdff 	bl	8004110 <xTimerGenericCommand>
 8004512:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d153      	bne.n	80045c2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	b672      	cpsid	i
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	b662      	cpsie	i
 800452e:	61bb      	str	r3, [r7, #24]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004546:	e03c      	b.n	80045c2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	b2da      	uxtb	r2, r3
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10c      	bne.n	8004582 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	b672      	cpsid	i
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	b662      	cpsie	i
 800457c:	617b      	str	r3, [r7, #20]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	18d1      	adds	r1, r2, r3
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004590:	f7ff ff00 	bl	8004394 <prvInsertTimerInActiveList>
					break;
 8004594:	e015      	b.n	80045c2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80045a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a6:	f000 fbc7 	bl	8004d38 <vPortFree>
 80045aa:	e00a      	b.n	80045c2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045be:	e000      	b.n	80045c2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80045c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <prvProcessReceivedCommands+0x1cc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	1d39      	adds	r1, r7, #4
 80045c8:	2200      	movs	r2, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fbb6 	bl	8002d3c <xQueueReceive>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f47f af24 	bne.w	8004420 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3730      	adds	r7, #48	; 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000db4 	.word	0x20000db4

080045e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ee:	e04a      	b.n	8004686 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045f0:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <prvSwitchTimerLists+0xc4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fa:	4b2c      	ldr	r3, [pc, #176]	; (80046ac <prvSwitchTimerLists+0xc4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3304      	adds	r3, #4
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe f8b7 	bl	800277c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d030      	beq.n	8004686 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	429a      	cmp	r2, r3
 8004634:	d90e      	bls.n	8004654 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <prvSwitchTimerLists+0xc4>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f7fe f85c 	bl	800270a <vListInsert>
 8004652:	e018      	b.n	8004686 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004654:	2300      	movs	r3, #0
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2300      	movs	r3, #0
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	2100      	movs	r1, #0
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff fd56 	bl	8004110 <xTimerGenericCommand>
 8004664:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10c      	bne.n	8004686 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	b672      	cpsid	i
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	b662      	cpsie	i
 8004680:	603b      	str	r3, [r7, #0]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004686:	4b09      	ldr	r3, [pc, #36]	; (80046ac <prvSwitchTimerLists+0xc4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1af      	bne.n	80045f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <prvSwitchTimerLists+0xc4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <prvSwitchTimerLists+0xc8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a04      	ldr	r2, [pc, #16]	; (80046ac <prvSwitchTimerLists+0xc4>)
 800469c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <prvSwitchTimerLists+0xc8>)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	bf00      	nop
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000dac 	.word	0x20000dac
 80046b0:	20000db0 	.word	0x20000db0

080046b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80046ba:	f000 f947 	bl	800494c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <prvCheckForValidListAndQueue+0x60>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d120      	bne.n	8004708 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046c6:	4814      	ldr	r0, [pc, #80]	; (8004718 <prvCheckForValidListAndQueue+0x64>)
 80046c8:	f7fd ffce 	bl	8002668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046cc:	4813      	ldr	r0, [pc, #76]	; (800471c <prvCheckForValidListAndQueue+0x68>)
 80046ce:	f7fd ffcb 	bl	8002668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <prvCheckForValidListAndQueue+0x6c>)
 80046d4:	4a10      	ldr	r2, [pc, #64]	; (8004718 <prvCheckForValidListAndQueue+0x64>)
 80046d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <prvCheckForValidListAndQueue+0x70>)
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <prvCheckForValidListAndQueue+0x68>)
 80046dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046de:	2300      	movs	r3, #0
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <prvCheckForValidListAndQueue+0x74>)
 80046e4:	4a11      	ldr	r2, [pc, #68]	; (800472c <prvCheckForValidListAndQueue+0x78>)
 80046e6:	2110      	movs	r1, #16
 80046e8:	200a      	movs	r0, #10
 80046ea:	f7fe f8db 	bl	80028a4 <xQueueGenericCreateStatic>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <prvCheckForValidListAndQueue+0x60>)
 80046f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <prvCheckForValidListAndQueue+0x60>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <prvCheckForValidListAndQueue+0x60>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	490b      	ldr	r1, [pc, #44]	; (8004730 <prvCheckForValidListAndQueue+0x7c>)
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fd10 	bl	8003128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004708:	f000 f954 	bl	80049b4 <vPortExitCritical>
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000db4 	.word	0x20000db4
 8004718:	20000d84 	.word	0x20000d84
 800471c:	20000d98 	.word	0x20000d98
 8004720:	20000dac 	.word	0x20000dac
 8004724:	20000db0 	.word	0x20000db0
 8004728:	20000e60 	.word	0x20000e60
 800472c:	20000dc0 	.word	0x20000dc0
 8004730:	080051c0 	.word	0x080051c0

08004734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3b04      	subs	r3, #4
 8004744:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800474c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b04      	subs	r3, #4
 8004752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b04      	subs	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004764:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <pxPortInitialiseStack+0x64>)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3b14      	subs	r3, #20
 800476e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b04      	subs	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f06f 0202 	mvn.w	r2, #2
 8004782:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3b20      	subs	r3, #32
 8004788:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	0800479d 	.word	0x0800479d

0800479c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <prvTaskExitError+0x5c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d00c      	beq.n	80047ca <prvTaskExitError+0x2e>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	b672      	cpsid	i
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	b662      	cpsie	i
 80047c4:	60fb      	str	r3, [r7, #12]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <prvTaskExitError+0x2c>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	b672      	cpsid	i
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	b662      	cpsie	i
 80047de:	60bb      	str	r3, [r7, #8]
}
 80047e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047e2:	bf00      	nop
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0fc      	beq.n	80047e4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	2000000c 	.word	0x2000000c
 80047fc:	00000000 	.word	0x00000000

08004800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004800:	4b07      	ldr	r3, [pc, #28]	; (8004820 <pxCurrentTCBConst2>)
 8004802:	6819      	ldr	r1, [r3, #0]
 8004804:	6808      	ldr	r0, [r1, #0]
 8004806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480a:	f380 8809 	msr	PSP, r0
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f380 8811 	msr	BASEPRI, r0
 800481a:	4770      	bx	lr
 800481c:	f3af 8000 	nop.w

08004820 <pxCurrentTCBConst2>:
 8004820:	20000884 	.word	0x20000884
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004828:	4808      	ldr	r0, [pc, #32]	; (800484c <prvPortStartFirstTask+0x24>)
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	6800      	ldr	r0, [r0, #0]
 800482e:	f380 8808 	msr	MSP, r0
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8814 	msr	CONTROL, r0
 800483a:	b662      	cpsie	i
 800483c:	b661      	cpsie	f
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	df00      	svc	0
 8004848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800484a:	bf00      	nop
 800484c:	e000ed08 	.word	0xe000ed08

08004850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <xPortStartScheduler+0xe4>)
 8004858:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	22ff      	movs	r2, #255	; 0xff
 8004866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <xPortStartScheduler+0xe8>)
 800487c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800487e:	4b2f      	ldr	r3, [pc, #188]	; (800493c <xPortStartScheduler+0xec>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004884:	e009      	b.n	800489a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <xPortStartScheduler+0xec>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <xPortStartScheduler+0xec>)
 800488e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	b2db      	uxtb	r3, r3
 8004898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d0ef      	beq.n	8004886 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048a6:	4b25      	ldr	r3, [pc, #148]	; (800493c <xPortStartScheduler+0xec>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1c3 0307 	rsb	r3, r3, #7
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d00c      	beq.n	80048cc <xPortStartScheduler+0x7c>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	b672      	cpsid	i
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	b662      	cpsie	i
 80048c6:	60bb      	str	r3, [r7, #8]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <xPortStartScheduler+0xec>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <xPortStartScheduler+0xec>)
 80048d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048d6:	4b19      	ldr	r3, [pc, #100]	; (800493c <xPortStartScheduler+0xec>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048de:	4a17      	ldr	r2, [pc, #92]	; (800493c <xPortStartScheduler+0xec>)
 80048e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <xPortStartScheduler+0xf0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a14      	ldr	r2, [pc, #80]	; (8004940 <xPortStartScheduler+0xf0>)
 80048f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <xPortStartScheduler+0xf0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a11      	ldr	r2, [pc, #68]	; (8004940 <xPortStartScheduler+0xf0>)
 80048fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004900:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004902:	f000 f8dd 	bl	8004ac0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <xPortStartScheduler+0xf4>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800490c:	f000 f8fc 	bl	8004b08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <xPortStartScheduler+0xf8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <xPortStartScheduler+0xf8>)
 8004916:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800491a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800491c:	f7ff ff84 	bl	8004828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004920:	f7ff f844 	bl	80039ac <vTaskSwitchContext>
	prvTaskExitError();
 8004924:	f7ff ff3a 	bl	800479c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	e000e400 	.word	0xe000e400
 8004938:	20000eb0 	.word	0x20000eb0
 800493c:	20000eb4 	.word	0x20000eb4
 8004940:	e000ed20 	.word	0xe000ed20
 8004944:	2000000c 	.word	0x2000000c
 8004948:	e000ef34 	.word	0xe000ef34

0800494c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	b672      	cpsid	i
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	b662      	cpsie	i
 8004966:	607b      	str	r3, [r7, #4]
}
 8004968:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <vPortEnterCritical+0x60>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <vPortEnterCritical+0x60>)
 8004972:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <vPortEnterCritical+0x60>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d111      	bne.n	80049a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <vPortEnterCritical+0x64>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <vPortEnterCritical+0x54>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	b672      	cpsid	i
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	b662      	cpsie	i
 800499a:	603b      	str	r3, [r7, #0]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <vPortEnterCritical+0x52>
	}
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	2000000c 	.word	0x2000000c
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <vPortExitCritical+0x54>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10c      	bne.n	80049dc <vPortExitCritical+0x28>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	b672      	cpsid	i
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	b662      	cpsie	i
 80049d6:	607b      	str	r3, [r7, #4]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <vPortExitCritical+0x54>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <vPortExitCritical+0x54>)
 80049e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <vPortExitCritical+0x54>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d105      	bne.n	80049fa <vPortExitCritical+0x46>
 80049ee:	2300      	movs	r3, #0
 80049f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f383 8811 	msr	BASEPRI, r3
}
 80049f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c
 8004a0c:	00000000 	.word	0x00000000

08004a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a10:	f3ef 8009 	mrs	r0, PSP
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <pxCurrentTCBConst>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	f01e 0f10 	tst.w	lr, #16
 8004a20:	bf08      	it	eq
 8004a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	6010      	str	r0, [r2, #0]
 8004a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a34:	b672      	cpsid	i
 8004a36:	f380 8811 	msr	BASEPRI, r0
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	b662      	cpsie	i
 8004a44:	f7fe ffb2 	bl	80039ac <vTaskSwitchContext>
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f380 8811 	msr	BASEPRI, r0
 8004a50:	bc09      	pop	{r0, r3}
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	f01e 0f10 	tst.w	lr, #16
 8004a5e:	bf08      	it	eq
 8004a60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a64:	f380 8809 	msr	PSP, r0
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop

08004a70 <pxCurrentTCBConst>:
 8004a70:	20000884 	.word	0x20000884
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	b672      	cpsid	i
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	b662      	cpsie	i
 8004a92:	607b      	str	r3, [r7, #4]
}
 8004a94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a96:	f7fe fecd 	bl	8003834 <xTaskIncrementTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <SysTick_Handler+0x44>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f383 8811 	msr	BASEPRI, r3
}
 8004ab2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	e000ed04 	.word	0xe000ed04

08004ac0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <vPortSetupTimerInterrupt+0x34>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <vPortSetupTimerInterrupt+0x38>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <vPortSetupTimerInterrupt+0x3c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <vPortSetupTimerInterrupt+0x40>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <vPortSetupTimerInterrupt+0x44>)
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <vPortSetupTimerInterrupt+0x34>)
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	601a      	str	r2, [r3, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	e000e010 	.word	0xe000e010
 8004af8:	e000e018 	.word	0xe000e018
 8004afc:	20000000 	.word	0x20000000
 8004b00:	10624dd3 	.word	0x10624dd3
 8004b04:	e000e014 	.word	0xe000e014

08004b08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b18 <vPortEnableVFP+0x10>
 8004b0c:	6801      	ldr	r1, [r0, #0]
 8004b0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b12:	6001      	str	r1, [r0, #0]
 8004b14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b16:	bf00      	nop
 8004b18:	e000ed88 	.word	0xe000ed88

08004b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b22:	f3ef 8305 	mrs	r3, IPSR
 8004b26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d916      	bls.n	8004b5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <vPortValidateInterruptPriority+0x78>)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <vPortValidateInterruptPriority+0x7c>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	7afa      	ldrb	r2, [r7, #11]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d20c      	bcs.n	8004b5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	b672      	cpsid	i
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	b662      	cpsie	i
 8004b56:	607b      	str	r3, [r7, #4]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <vPortValidateInterruptPriority+0x80>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <vPortValidateInterruptPriority+0x84>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d90c      	bls.n	8004b86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	b672      	cpsid	i
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	b662      	cpsie	i
 8004b80:	603b      	str	r3, [r7, #0]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <vPortValidateInterruptPriority+0x68>
	}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	e000e3f0 	.word	0xe000e3f0
 8004b98:	20000eb0 	.word	0x20000eb0
 8004b9c:	e000ed0c 	.word	0xe000ed0c
 8004ba0:	20000eb4 	.word	0x20000eb4

08004ba4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bb0:	f7fe fd82 	bl	80036b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bb4:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <pvPortMalloc+0x180>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bbc:	f000 f91a 	bl	8004df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bc0:	4b59      	ldr	r3, [pc, #356]	; (8004d28 <pvPortMalloc+0x184>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 8092 	bne.w	8004cf2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01f      	beq.n	8004c14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f023 0307 	bic.w	r3, r3, #7
 8004bec:	3308      	adds	r3, #8
 8004bee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <pvPortMalloc+0x70>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	b672      	cpsid	i
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	b662      	cpsie	i
 8004c0e:	617b      	str	r3, [r7, #20]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d06b      	beq.n	8004cf2 <pvPortMalloc+0x14e>
 8004c1a:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <pvPortMalloc+0x188>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d866      	bhi.n	8004cf2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c24:	4b42      	ldr	r3, [pc, #264]	; (8004d30 <pvPortMalloc+0x18c>)
 8004c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c28:	4b41      	ldr	r3, [pc, #260]	; (8004d30 <pvPortMalloc+0x18c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c2e:	e004      	b.n	8004c3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d903      	bls.n	8004c4c <pvPortMalloc+0xa8>
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f1      	bne.n	8004c30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c4c:	4b35      	ldr	r3, [pc, #212]	; (8004d24 <pvPortMalloc+0x180>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d04d      	beq.n	8004cf2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	4413      	add	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	2308      	movs	r3, #8
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d921      	bls.n	8004cbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <pvPortMalloc+0x100>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	b672      	cpsid	i
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	b662      	cpsie	i
 8004c9e:	613b      	str	r3, [r7, #16]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cb6:	69b8      	ldr	r0, [r7, #24]
 8004cb8:	f000 f8fe 	bl	8004eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <pvPortMalloc+0x188>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <pvPortMalloc+0x188>)
 8004cc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cca:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <pvPortMalloc+0x188>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <pvPortMalloc+0x190>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d203      	bcs.n	8004cde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <pvPortMalloc+0x188>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <pvPortMalloc+0x190>)
 8004cdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <pvPortMalloc+0x184>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cf2:	f7fe fcef 	bl	80036d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00c      	beq.n	8004d1a <pvPortMalloc+0x176>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	b672      	cpsid	i
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	b662      	cpsie	i
 8004d14:	60fb      	str	r3, [r7, #12]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <pvPortMalloc+0x174>
	return pvReturn;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3728      	adds	r7, #40	; 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20004ac0 	.word	0x20004ac0
 8004d28:	20004acc 	.word	0x20004acc
 8004d2c:	20004ac4 	.word	0x20004ac4
 8004d30:	20004ab8 	.word	0x20004ab8
 8004d34:	20004ac8 	.word	0x20004ac8

08004d38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04c      	beq.n	8004de4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	425b      	negs	r3, r3
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4413      	add	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	4b23      	ldr	r3, [pc, #140]	; (8004dec <vPortFree+0xb4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10c      	bne.n	8004d80 <vPortFree+0x48>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	b672      	cpsid	i
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	b662      	cpsie	i
 8004d7a:	60fb      	str	r3, [r7, #12]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <vPortFree+0x6a>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	b672      	cpsid	i
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	b662      	cpsie	i
 8004d9c:	60bb      	str	r3, [r7, #8]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <vPortFree+0xb4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d019      	beq.n	8004de4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d115      	bne.n	8004de4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <vPortFree+0xb4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dc8:	f7fe fc76 	bl	80036b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <vPortFree+0xb8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4a06      	ldr	r2, [pc, #24]	; (8004df0 <vPortFree+0xb8>)
 8004dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dda:	6938      	ldr	r0, [r7, #16]
 8004ddc:	f000 f86c 	bl	8004eb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004de0:	f7fe fc78 	bl	80036d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004de4:	bf00      	nop
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20004acc 	.word	0x20004acc
 8004df0:	20004ac4 	.word	0x20004ac4

08004df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e00:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <prvHeapInit+0xac>)
 8004e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3307      	adds	r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0307 	bic.w	r3, r3, #7
 8004e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <prvHeapInit+0xac>)
 8004e24:	4413      	add	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <prvHeapInit+0xb0>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e32:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <prvHeapInit+0xb0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e40:	2208      	movs	r2, #8
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0307 	bic.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e56:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <prvHeapInit+0xb8>)
 8004e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <prvHeapInit+0xbc>)
 8004e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <prvHeapInit+0xc0>)
 8004e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e92:	601a      	str	r2, [r3, #0]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	20000eb8 	.word	0x20000eb8
 8004ea4:	20004ab8 	.word	0x20004ab8
 8004ea8:	20004ac0 	.word	0x20004ac0
 8004eac:	20004ac8 	.word	0x20004ac8
 8004eb0:	20004ac4 	.word	0x20004ac4
 8004eb4:	20004acc 	.word	0x20004acc

08004eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ec0:	4b28      	ldr	r3, [pc, #160]	; (8004f64 <prvInsertBlockIntoFreeList+0xac>)
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e002      	b.n	8004ecc <prvInsertBlockIntoFreeList+0x14>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d8f7      	bhi.n	8004ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d108      	bne.n	8004efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	441a      	add	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	441a      	add	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d118      	bne.n	8004f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <prvInsertBlockIntoFreeList+0xb0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d00d      	beq.n	8004f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e008      	b.n	8004f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <prvInsertBlockIntoFreeList+0xb0>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e003      	b.n	8004f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d002      	beq.n	8004f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20004ab8 	.word	0x20004ab8
 8004f68:	20004ac0 	.word	0x20004ac0

08004f6c <memset>:
 8004f6c:	4402      	add	r2, r0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d100      	bne.n	8004f76 <memset+0xa>
 8004f74:	4770      	bx	lr
 8004f76:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7a:	e7f9      	b.n	8004f70 <memset+0x4>

08004f7c <_reclaim_reent>:
 8004f7c:	4b29      	ldr	r3, [pc, #164]	; (8005024 <_reclaim_reent+0xa8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4283      	cmp	r3, r0
 8004f82:	b570      	push	{r4, r5, r6, lr}
 8004f84:	4604      	mov	r4, r0
 8004f86:	d04b      	beq.n	8005020 <_reclaim_reent+0xa4>
 8004f88:	69c3      	ldr	r3, [r0, #28]
 8004f8a:	b143      	cbz	r3, 8004f9e <_reclaim_reent+0x22>
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d144      	bne.n	800501c <_reclaim_reent+0xa0>
 8004f92:	69e3      	ldr	r3, [r4, #28]
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	b111      	cbz	r1, 8004f9e <_reclaim_reent+0x22>
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 f879 	bl	8005090 <_free_r>
 8004f9e:	6961      	ldr	r1, [r4, #20]
 8004fa0:	b111      	cbz	r1, 8004fa8 <_reclaim_reent+0x2c>
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 f874 	bl	8005090 <_free_r>
 8004fa8:	69e1      	ldr	r1, [r4, #28]
 8004faa:	b111      	cbz	r1, 8004fb2 <_reclaim_reent+0x36>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 f86f 	bl	8005090 <_free_r>
 8004fb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004fb4:	b111      	cbz	r1, 8004fbc <_reclaim_reent+0x40>
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 f86a 	bl	8005090 <_free_r>
 8004fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fbe:	b111      	cbz	r1, 8004fc6 <_reclaim_reent+0x4a>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 f865 	bl	8005090 <_free_r>
 8004fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004fc8:	b111      	cbz	r1, 8004fd0 <_reclaim_reent+0x54>
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 f860 	bl	8005090 <_free_r>
 8004fd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004fd2:	b111      	cbz	r1, 8004fda <_reclaim_reent+0x5e>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 f85b 	bl	8005090 <_free_r>
 8004fda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004fdc:	b111      	cbz	r1, 8004fe4 <_reclaim_reent+0x68>
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 f856 	bl	8005090 <_free_r>
 8004fe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004fe6:	b111      	cbz	r1, 8004fee <_reclaim_reent+0x72>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 f851 	bl	8005090 <_free_r>
 8004fee:	6a23      	ldr	r3, [r4, #32]
 8004ff0:	b1b3      	cbz	r3, 8005020 <_reclaim_reent+0xa4>
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ff8:	4718      	bx	r3
 8004ffa:	5949      	ldr	r1, [r1, r5]
 8004ffc:	b941      	cbnz	r1, 8005010 <_reclaim_reent+0x94>
 8004ffe:	3504      	adds	r5, #4
 8005000:	69e3      	ldr	r3, [r4, #28]
 8005002:	2d80      	cmp	r5, #128	; 0x80
 8005004:	68d9      	ldr	r1, [r3, #12]
 8005006:	d1f8      	bne.n	8004ffa <_reclaim_reent+0x7e>
 8005008:	4620      	mov	r0, r4
 800500a:	f000 f841 	bl	8005090 <_free_r>
 800500e:	e7c0      	b.n	8004f92 <_reclaim_reent+0x16>
 8005010:	680e      	ldr	r6, [r1, #0]
 8005012:	4620      	mov	r0, r4
 8005014:	f000 f83c 	bl	8005090 <_free_r>
 8005018:	4631      	mov	r1, r6
 800501a:	e7ef      	b.n	8004ffc <_reclaim_reent+0x80>
 800501c:	2500      	movs	r5, #0
 800501e:	e7ef      	b.n	8005000 <_reclaim_reent+0x84>
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	bf00      	nop
 8005024:	2000005c 	.word	0x2000005c

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4d0d      	ldr	r5, [pc, #52]	; (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2600      	movs	r6, #0
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4d0b      	ldr	r5, [pc, #44]	; (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	; (800506c <__libc_init_array+0x44>)
 800503c:	f000 f880 	bl	8005140 <_init>
 8005040:	1b64      	subs	r4, r4, r5
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2600      	movs	r6, #0
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	080052c0 	.word	0x080052c0
 8005064:	080052c0 	.word	0x080052c0
 8005068:	080052c0 	.word	0x080052c0
 800506c:	080052c4 	.word	0x080052c4

08005070 <__retarget_lock_acquire_recursive>:
 8005070:	4770      	bx	lr

08005072 <__retarget_lock_release_recursive>:
 8005072:	4770      	bx	lr

08005074 <memcpy>:
 8005074:	440a      	add	r2, r1
 8005076:	4291      	cmp	r1, r2
 8005078:	f100 33ff 	add.w	r3, r0, #4294967295
 800507c:	d100      	bne.n	8005080 <memcpy+0xc>
 800507e:	4770      	bx	lr
 8005080:	b510      	push	{r4, lr}
 8005082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800508a:	4291      	cmp	r1, r2
 800508c:	d1f9      	bne.n	8005082 <memcpy+0xe>
 800508e:	bd10      	pop	{r4, pc}

08005090 <_free_r>:
 8005090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005092:	2900      	cmp	r1, #0
 8005094:	d044      	beq.n	8005120 <_free_r+0x90>
 8005096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f1a1 0404 	sub.w	r4, r1, #4
 80050a2:	bfb8      	it	lt
 80050a4:	18e4      	addlt	r4, r4, r3
 80050a6:	f000 f83f 	bl	8005128 <__malloc_lock>
 80050aa:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <_free_r+0x94>)
 80050ac:	9801      	ldr	r0, [sp, #4]
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	b933      	cbnz	r3, 80050c0 <_free_r+0x30>
 80050b2:	6063      	str	r3, [r4, #4]
 80050b4:	6014      	str	r4, [r2, #0]
 80050b6:	b003      	add	sp, #12
 80050b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050bc:	f000 b83a 	b.w	8005134 <__malloc_unlock>
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d908      	bls.n	80050d6 <_free_r+0x46>
 80050c4:	6825      	ldr	r5, [r4, #0]
 80050c6:	1961      	adds	r1, r4, r5
 80050c8:	428b      	cmp	r3, r1
 80050ca:	bf01      	itttt	eq
 80050cc:	6819      	ldreq	r1, [r3, #0]
 80050ce:	685b      	ldreq	r3, [r3, #4]
 80050d0:	1949      	addeq	r1, r1, r5
 80050d2:	6021      	streq	r1, [r4, #0]
 80050d4:	e7ed      	b.n	80050b2 <_free_r+0x22>
 80050d6:	461a      	mov	r2, r3
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	b10b      	cbz	r3, 80050e0 <_free_r+0x50>
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d9fa      	bls.n	80050d6 <_free_r+0x46>
 80050e0:	6811      	ldr	r1, [r2, #0]
 80050e2:	1855      	adds	r5, r2, r1
 80050e4:	42a5      	cmp	r5, r4
 80050e6:	d10b      	bne.n	8005100 <_free_r+0x70>
 80050e8:	6824      	ldr	r4, [r4, #0]
 80050ea:	4421      	add	r1, r4
 80050ec:	1854      	adds	r4, r2, r1
 80050ee:	42a3      	cmp	r3, r4
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	d1e0      	bne.n	80050b6 <_free_r+0x26>
 80050f4:	681c      	ldr	r4, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	6053      	str	r3, [r2, #4]
 80050fa:	440c      	add	r4, r1
 80050fc:	6014      	str	r4, [r2, #0]
 80050fe:	e7da      	b.n	80050b6 <_free_r+0x26>
 8005100:	d902      	bls.n	8005108 <_free_r+0x78>
 8005102:	230c      	movs	r3, #12
 8005104:	6003      	str	r3, [r0, #0]
 8005106:	e7d6      	b.n	80050b6 <_free_r+0x26>
 8005108:	6825      	ldr	r5, [r4, #0]
 800510a:	1961      	adds	r1, r4, r5
 800510c:	428b      	cmp	r3, r1
 800510e:	bf04      	itt	eq
 8005110:	6819      	ldreq	r1, [r3, #0]
 8005112:	685b      	ldreq	r3, [r3, #4]
 8005114:	6063      	str	r3, [r4, #4]
 8005116:	bf04      	itt	eq
 8005118:	1949      	addeq	r1, r1, r5
 800511a:	6021      	streq	r1, [r4, #0]
 800511c:	6054      	str	r4, [r2, #4]
 800511e:	e7ca      	b.n	80050b6 <_free_r+0x26>
 8005120:	b003      	add	sp, #12
 8005122:	bd30      	pop	{r4, r5, pc}
 8005124:	20004c0c 	.word	0x20004c0c

08005128 <__malloc_lock>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__malloc_lock+0x8>)
 800512a:	f7ff bfa1 	b.w	8005070 <__retarget_lock_acquire_recursive>
 800512e:	bf00      	nop
 8005130:	20004c08 	.word	0x20004c08

08005134 <__malloc_unlock>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__malloc_unlock+0x8>)
 8005136:	f7ff bf9c 	b.w	8005072 <__retarget_lock_release_recursive>
 800513a:	bf00      	nop
 800513c:	20004c08 	.word	0x20004c08

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
